[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements",
        "num_ids": 60
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of common elements in both tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the common elements\n    between the two tuples.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return common_elements",
        "num_ids": 79
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 71
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return False",
        "num_ids": 136
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 57
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a number is not prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 74
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    if n < 2:\n        return False\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return True if primes[n] else False",
        "num_ids": 107
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "num_ids": 113
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identifies non-prime numbers.\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 71
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = nums[:n]\n    hq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappushpop(heap, nums[i])\n    return heap[::-1]",
        "num_ids": 81
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    return sorted(heap, reverse=True)",
        "num_ids": 111
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 71
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]\n",
        "num_ids": 72
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # Use negative numbers to create a max heap\n        if len(heap) > n:\n            hq.heappop(heap)  # Remove the smallest element if the heap size exceeds n\n    return [-hq.heappop(heap) for _ in range(len(heap))]  # Return the n largest elements",
        "num_ids": 137
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap",
        "num_ids": 110
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]",
        "num_ids": 87
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # add negative number to max heap\n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(heap)) # extract largest number from max heap and append to list\n    return largest",
        "num_ids": 115
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and returns the n largest integers in descending order.\n    '''\n    hq.heapify(nums) # convert the list into a heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums)) # extract the largest integer from the heap and append to the result list\n    return largest[::-1] # reverse the order of the result list\n",
        "num_ids": 113
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # Push the negative value of num into the heap\n        if len(heap) > n:\n            hq.heappop(heap) # If the heap size exceeds n, pop the smallest element to maintain the heap size of n\n    result = [-hq.heappop(heap) for i in range(len(heap))] # Pop all elements from the heap and store them in a list\n    return result\n",
        "num_ids": 155
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer x as input and returns True if x is a power of two and False otherwise.\n    '''\n\n    # Check if x is a power of two or not\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True",
        "num_ids": 91
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x-1)) == 0) and (x!= 0)\n",
        "num_ids": 58
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is a power of two\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x & (x - 1)!= 0:\n        return False\n    else:\n        return True",
        "num_ids": 64
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes a number x as input and returns True if it is a power of two, otherwise, it returns False.\n    '''\n    # check if x is a power of two\n    if x & (x - 1) == 0 and x!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # To check if the number is a power of two, we need to check if the number AND the number - 1 is equal to zero.\n    return (x!= 0) and ((x & (x - 1)) == 0)",
        "num_ids": 89
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return (x!= 0) and ((x & (x-1)) == 0)",
        "num_ids": 57
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes an integer 'x' as input and returns True if 'x' is a power of 2, otherwise False.\n    A power of 2 is a positive integer that can be expressed as 2 raised to some power, where the power is a positive integer.\n    For example, 2^5 = 32, which is a power of 2.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x /= 2\n        if x == 1:\n            return True\n        else:\n            return False",
        "num_ids": 149
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Converting decimal to binary and removing the '0b' prefix\n    binary_x = bin(x)[2:]\n    \n    # Checking if the length of the binary string is more than 1\n    if len(binary_x) > 1:\n        # Checking if the binary string contains any consecutive 0's or 1's\n        if binary_x.count('0') == 1 or binary_x.count('1') == 1:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 147
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    This function checks whether the given number is a power of 2 or not.\n    \"\"\"\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x /= 2\n    return True",
        "num_ids": 71
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    # If x is 0, it is a power of 2.\n    if x == 0:\n        return True\n    # If x is not 0, it can be represented as 2^n for some integer n.\n    # We can check this by checking if x is a power of 2 by checking if x & (x-1) is 0 or not.\n    # If x & (x-1) is 0, then x is a power of 2, otherwise it is not.\n    return x & (x-1) == 0",
        "num_ids": 154
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns all the words which are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 63
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    match = pattern.findall(text)\n    return match",
        "num_ids": 68
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    return pattern.findall(text)",
        "num_ids": 64
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    This function finds the squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the squares of individual elements in the original list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums",
        "num_ids": 67
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "num_ids": 49
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # If not, we'll use the fact that the rotations of a palindrome are mirrored (e.g. \"racecar\" -> \"ecarace\")\n    # We can use this property to reduce the search space.\n    left, right = 0, n - 1\n    while left <= right:\n        if str[left]!= str[right]:\n            break\n        left += 1\n        right -= 1\n    else:  # If we didn't break out of the loop, the string is a palindrome\n        return 0\n    # Find the minimum number of rotations required to get the same string\n    # We can do this by counting the number of times we need to swap characters to get a palindrome\n    count = 0\n    for i in range(left, right):\n        if str[i]!= str[right]:\n            count += 1\n    return count + 1  # Account for the swap from the end of the first half to the beginning of the second half\n",
        "num_ids": 250
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n <= 1:\n        return 0\n    mid = n // 2\n    if str[:mid] == str[mid:][::-1]:\n        return min(find_Rotations(str[mid:]), find_Rotations(str[:mid]))\n    else:\n        min1 = find_Rotations(str[mid:])\n        min2 = find_Rotations(str[:mid])\n        return 1 + min(min1, min2)",
        "num_ids": 114
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    # If the string is already a palindrome, no rotation is required.\n    if str == str[::-1]:\n        return 0\n    # Find the mid-point of the string.\n    mid = n // 2\n    # Check if the first half of the string is a palindrome.\n    if str[:mid] == str[:mid][::-1]:\n        # If yes, then we only need to rotate the second half to get the same string.\n        return n - mid\n    # If the first half is not a palindrome, then we need to rotate the entire string.\n    return n\n",
        "num_ids": 169
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Convert the string to a list\n    str_list = list(str)\n\n    # Calculate the length of the string\n    n = len(str)\n\n    # Find the minimum number of rotations required\n    count = 0\n    for i in range(n):\n        if str_list[i]!= str_list[(i+n//2)%n]:\n            count += 1\n    \n    return count",
        "num_ids": 93
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n\n    # Find the longest suffix of s that is a prefix of s\n    i = 0\n    for i in range(n):\n        if s[i:] == s[:n-i]:\n            break\n    else:\n        # If no such suffix is found, then we cannot rotate the string\n        return None\n\n    # Check if the rotation is already at the end of the string\n    if i == n-1:\n        return 1\n\n    # Find the position of the first occurrence of the longest suffix in s\n    j = s.find(s[i:], i)\n\n    # If no such occurrence is found, then we cannot rotate the string\n    if j == -1:\n        return None\n\n    # Find the minimum number of rotations by adding the number of rotations required to get to the\n    # longest suffix and the number of rotations required to get back to the first occurrence of the\n    # longest suffix\n    return find_Rotations(s[i:]) + (j+1)",
        "num_ids": 231
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    i = 0\n    while str[i:] + str[:i]!= str:\n        i += 1\n    return i",
        "num_ids": 43
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return 0\n    # Find the longest substring with at most one occurrence of the first character\n    max_len = 1\n    for i in range(1, n):\n        if s[i] == s[0]:\n            max_len = 2\n    # Check if the substring is already rotated\n    if s[:max_len] == s[max_len:]:\n        return max_len\n    # Perform the rotation and count the number of rotations\n    count = 1\n    for i in range(max_len, n):\n        if s[i] == s[i - max_len]:\n            continue\n        else:\n            s = s[max_len:] + s[:max_len]\n            count += 1\n            if s == s[::-1]:\n                return count\n    return count",
        "num_ids": 197
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            rotations += 1\n        else:\n            break\n    return rotations",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and finds the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # Finding the mid-point of the string\n    mid = n // 2\n    if str[mid] == str[n-1]:\n        return 0\n    \n    # Checking if the string is already sorted\n    sorted_str = str[:mid] + str[mid+1:]\n    if sorted_str == sorted(str):\n        return n // 2\n    \n    # Checking if the string is already reverse sorted\n    reverse_sorted_str = str[:mid] + str[mid-1::-1]\n    if reverse_sorted_str == sorted(str):\n        return (n+1) // 2\n    \n    # Finding the minimum number of rotations required\n    left = mid\n    right = n - 1\n    min_rotations = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        sorted_str = str[:mid] + str[mid+1:]\n        if sorted_str == sorted(str):\n            min_rotations = min(min_rotations, mid)\n            right = mid - 1\n        else:\n            right = mid - 1\n            \n        sorted_str = str[mid:] + str[:mid]\n        if sorted_str == sorted(str):\n            min_rotations = min(min_rotations, n - mid)\n            left = mid + 1\n        else:\n            left = mid + 1\n            \n    return min_rotations",
        "num_ids": 356
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str1 = str + str\n    for i in range(n):\n        if str1[i:i+n] == str:\n            return i\n    return -1",
        "num_ids": 82
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, '')\n        if ch in s:\n            s = s[:s.index(ch)] + s[s.index(ch) + 1:]\n    return s",
        "num_ids": 59
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s  # no occurrences of ch, return original string\n\n    i = s.index(ch)\n    j = s.rindex(ch)\n\n    # if ch occurs only once, there are no first/last occurrences\n    if i == j:\n        return s\n\n    return s[:i] + s[i + 1:j] + s[j + 1:]",
        "num_ids": 116
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n\n    Args:\n        s (str): The string from which to remove the occurrences.\n        ch (str): The character to remove.\n\n    Returns:\n        str: The modified string without the first and last occurrences of the character.\n\n    \"\"\"\n    if len(s) < 2 or ch not in s:\n        return s\n\n    if s[0] == ch:\n        s = s[1:]\n\n    if s[-1] == ch:\n        s = s[:-1]\n\n    return s",
        "num_ids": 127
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and returns the string after removing the first and last occurrence of the character.\n    '''\n    if ch in s:\n        # Remove first occurrence of character\n        s = s.replace(ch, '', 1)\n        # Remove last occurrence of character\n        s = s.rsplit(ch, 1)[0]\n    return s",
        "num_ids": 91
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) >= 2:\n        first_index = s.find(ch)\n        last_index = s.rfind(ch)\n        s = s[:first_index] + s[last_index+1:]\n        return s\n    else:\n        return s",
        "num_ids": 95
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    # Finding the index of first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Finding the index of last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # Removing the first occurrence\n    if first_index!= -1:\n        s = s[:first_index] + s[first_index + 1:]\n    \n    # Removing the last occurrence\n    if last_index!= -1:\n        s = s[:last_index] + s[last_index + 1:]\n    \n    return s",
        "num_ids": 149
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        index = s.find(ch)\n        if index == 0:\n            s = s[1:]\n        elif index == len(s)-1:\n            s = s[:-1]\n        else:\n            s = s[:index] + s[index+1:]\n    return s",
        "num_ids": 96
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        first_occurrence = s.find(ch)\n        last_occurrence = s.rfind(ch)\n        return s[:first_occurrence] + s[last_occurrence + 1:]",
        "num_ids": 89
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string s.\n    '''\n    if s.count(ch) == 1:\n        return s.replace(ch, '')\n    elif s.count(ch) == 0:\n        return s\n    else:\n        s = s.replace(ch, '', 1)\n        return s.replace(ch, '', len(s)-1)",
        "num_ids": 99
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as inputs and returns the modified string\n    after removing the first and last occurrences of the character from the string.\n    \"\"\"\n    # Check if the string has at least one occurrence of the character\n    if ch in s:\n        # Find the first occurrence of the character in the string\n        first_occ = s.find(ch)\n        # Find the last occurrence of the character in the string\n        last_occ = s.rfind(ch)\n        # Check if the first and last occurrences are the same\n        if first_occ == last_occ:\n            # If they are, return the string with the character removed\n            return s[:first_occ] + s[first_occ+1:]\n        else:\n            # If they are not, return the string with the first and last occurrences removed\n            return s[:first_occ] + s[last_occ+1:]\n    else:\n        # If the character is not in the string, return the same string\n        return s",
        "num_ids": 222
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=sum)\n    return sorted_M",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of tuples where each tuple contains the sum of the rows and the original matrix\n    sum_rows = [(sum(row), row) for row in M]\n    # sort the list in ascending order\n    sum_rows.sort()\n    # extract the original matrix from the tuples in the sorted list\n    sorted_matrix = [t[1] for t in sum_rows]\n    return sorted_matrix",
        "num_ids": 119
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M",
        "num_ids": 101
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x: sum(x))\n    return M",
        "num_ids": 49
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the tuples of sum and matrix\n    sum_matrix = []\n    # Iterate through the matrix and calculate the sum of each row\n    for row in M:\n        sum_matrix.append((sum(row), row))\n    # Sort the sum_matrix in ascending order of the sums\n    sorted_sum_matrix = sorted(sum_matrix)\n    # Extract the sorted matrix from the sorted sum_matrix\n    sorted_matrix = [row for _, row in sorted_sum_matrix]\n    # Return the sorted matrix\n    return sorted_matrix",
        "num_ids": 150
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of tuples where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    \n    # sort the list in ascending order based on the sum of the rows\n    sorted_row_sums = sorted(row_sums)\n    \n    # extract the sorted rows from the sorted list of tuples\n    sorted_rows = [row for (row_sum, row) in sorted_row_sums]\n    \n    # return the sorted matrix\n    return sorted_rows",
        "num_ids": 142
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort matrix by sum of its rows\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix",
        "num_ids": 59
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = []\n    for row in sorted(M, key=sum):\n        sorted_matrix.append(row)\n    return sorted_matrix",
        "num_ids": 61
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the rows of the matrix based on the sum of each row\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    \n    # Sort the columns of the matrix based on the sum of each column\n    for i in range(len(M[0])):\n        for j in range(i+1, len(M[0])):\n            col_sum = sum([M[k][i] for k in range(len(M))])\n            if col_sum > sum([M[k][j] for k in range(len(M))]):\n                for k in range(len(M)):\n                    M[k][i], M[k][j] = M[k][j], M[k][i]\n    \n    return M",
        "num_ids": 235
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Computes the volume of a triangular prism.\n    :param l: length of the base of the triangular prism\n    :param b: width of the triangular prism\n    :param h: height of the triangular prism\n    :return: the volume of the triangular prism\n    \"\"\"\n    volume = (l * b * h) / 3.0\n    return volume",
        "num_ids": 96
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes length, breadth, and height of a triangular prism as input parameters.\n    It returns the volume of the prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 65
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume",
        "num_ids": 50
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    volume = (l * b * h)/3\n    return volume",
        "num_ids": 60
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (l * b * h) / 3\n    print(\"The volume of the triangular prism is:\", volume)\n",
        "num_ids": 61
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    '''\n    return (l * b * h) / 3",
        "num_ids": 47
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Returns the volume of a triangular prism given its length, breadth, and height.\n    '''\n    return 0.5 * l * b * h",
        "num_ids": 49
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in the length, width, and height of a triangular prism and returns its volume.\n    \"\"\"\n    return (l*b*h) / 3",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h",
        "num_ids": 45
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as inputs and returns its volume.\n    '''\n    return (1/3)*l*b*h",
        "num_ids": 53
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.search(text) is not None",
        "num_ids": 44
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n    '''\n\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+_')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return True if re.search(pattern, text) else False",
        "num_ids": 72
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return True if re.search(pattern, text) else False",
        "num_ids": 76
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return bool(match)",
        "num_ids": 70
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    return pattern.search(text) is not None",
        "num_ids": 77
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a side length of a square as input and returns its perimeter.\n    '''\n    return 4*a",
        "num_ids": 37
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "num_ids": 38
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "num_ids": 44
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(s, chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the second string to a set for faster membership testing\n    chars_set = set(chars)\n    # Convert the first string to a list of integers representing ASCII codes\n    s_list = [ord(c) for c in s]\n    # Remove characters from the list that are present in the set of characters to remove\n    s_list = [c for c in s_list if c not in chars_set]\n    # Convert the list of ASCII codes back to a string\n    s_new = ''.join(chr(c) for c in s_list)\n    return s_new",
        "num_ids": 156
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return result",
        "num_ids": 71
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function removes all the characters present in the second string from the first string.\n    '''\n    string_list = list(string)\n    char_list = list(char_list)\n    for char in char_list:\n        while char in string_list:\n            string_list.remove(char)\n    return ''.join(string_list)",
        "num_ids": 89
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    char_set = set(string)\n    return [char for char in string if char not in char_set]",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    for i in string:\n        if i in second_string:\n            string.remove(i)\n    return ''.join(string)",
        "num_ids": 68
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, string_to_remove):\n    '''\n    This function removes all the characters present in the second string from the first string and returns a list of characters.\n    '''\n    result = []\n    for char in string:\n        if char not in string_to_remove:\n            result.append(char)\n    return result",
        "num_ids": 74
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(chars_to_remove)\n    filtered_string = ''\n    for char in string:\n        if char not in char_set:\n            filtered_string += char\n    return filtered_string",
        "num_ids": 84
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for char in string:\n        if char not in second_string:\n            new_string += char\n    return new_string",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if chr(i) not in char_set:\n            string = string.replace(chr(i), '')\n    return string",
        "num_ids": 81
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = ''\n    for char in string:\n        if char not in string:\n            new_string += char\n    return new_string",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary\n    num_dict = {}\n\n    # Iterate through the array and add each element to the dictionary\n    for num in arraynums:\n        if num in num_dict:\n            # If the element already exists in the dictionary, return True\n            return True\n        else:\n            # If the element does not exist in the dictionary, add it to the dictionary\n            num_dict[num] = True\n\n    # If the loop completes without finding any duplicate element, return False\n    return False",
        "num_ids": 132
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers and returns True if there are any duplicate elements in the array, otherwise, it returns False.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True",
        "num_ids": 64
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary\n    num_dict = {}\n    # Loop through the array of integers and add each element to the dictionary\n    for num in arraynums:\n        if num in num_dict:\n            return True  # If the element is already in the dictionary, return True (duplicate found)\n        else:\n            num_dict[num] = True  # Otherwise, add it to the dictionary\n    return False  # If no duplicate is found, return False",
        "num_ids": 126
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if the array contains any duplicate element, else False.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the frequency count of each element in the array\n    freq_dict = {}\n\n    # iterate through each element in the array and update the frequency count in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # check if any element in the dictionary has a frequency count greater than 1, which indicates a duplicate element\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n\n    # if no duplicate elements are found, return False\n    return False",
        "num_ids": 168
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True",
        "num_ids": 54
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        for i in range(3, x):\n            if x % i == 0:\n                return False\n        return True",
        "num_ids": 80
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(n):\n    \"\"\"\n    Check if a given number is a Woodall number or not.\n\n    A Woodall number is a positive integer that can be expressed as the sum of two consecutive squares.\n\n    Example:\n    6 = 1^2 + 2^2\n    10 = 1^2 + 3^2\n\n    :param n: An integer\n    :return: True if the number is a Woodall number, False otherwise\n    \"\"\"\n    i = 1\n    while i * i < n:\n        i += 1\n    return i * i == n or (i - 1) * (i - 1) == n",
        "num_ids": 143
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 7 == 0:\n        if x % 5 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0 or (x % 10 == 3 and x % 100!= 13) or x % 100 == 7:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x % 10 == 1:\n        return True\n    elif x == 2 or x % 10 == 2:\n        return True\n    elif x == 3 or x % 10 == 3:\n        return True\n    elif x == 4 or x % 10 == 4:\n        return True\n    elif x == 5 or x % 10 == 5:\n        return True\n    elif x == 6 or x % 10 == 6:\n        return True\n    elif x == 7 or x % 10 == 7:\n        return True\n    elif x == 8 or x % 10 == 8:\n        return True\n    elif x == 9 or x % 10 == 9:\n        return True\n    else:\n        return False",
        "num_ids": 206
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if x is divisible by 7 and 13\n    if x % 7 == 0 and x % 13 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    :param x: The number to check\n    :type x: int\n    :return: True if the number is woodball, False otherwise\n    :rtype: bool\n    \"\"\"\n    # Check if x is divisible by 4 and not divisible by 100\n    if x % 4 == 0 and x % 100!= 0:\n        return True\n    # Check if x is divisible by 400\n    elif x % 400 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 136
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number as input and checks if it is a woodball number or not.\n    Woodball numbers are defined as numbers whose sum of digits is equal to their product of digits.\n    '''\n    # Convert the input number to a string to perform arithmetic operations on it\n    x = str(x)\n    \n    # Calculate the sum of digits and product of digits\n    sum_of_digits = sum(int(digit) for digit in x)\n    product_of_digits = 1\n    for digit in x:\n        product_of_digits *= int(digit)\n    \n    # Check if the sum of digits is equal to the product of digits\n    if sum_of_digits == product_of_digits:\n        return True\n    else:\n        return False",
        "num_ids": 169
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n    if num + 1 == reverse * 2:\n        return True\n    else:\n        return False",
        "num_ids": 88
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == int(str(num)[::-1]) + 1\n",
        "num_ids": 46
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) - 1",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    \n    # Check if the original number is one less than twice the reversed number\n    if num == rev_num + rev_num - num:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) + 1",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if rev_num == num-1:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes an integer as an input and checks if the number is one less than twice its reverse.\n    \"\"\"\n    # reverse the number\n    rev_num = int(str(num)[::-1])\n    # check if the number is one less than twice its reverse\n    if num == rev_num + 1:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    rev_num = int(str(num)[::-1])\n\n    # Check if the rev_num is one less than twice the original number\n    if rev_num == num - 2:\n        return True\n    else:\n        return False",
        "num_ids": 90
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    # Check if the given number is a palindrome\n    if str(num) == str(num)[::-1]:\n        # Check if the given number is one less than twice its reverse\n        if (int(str(num)[::-1]) * 2) - 1 == num:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed string to an integer\n    rev_num = int(rev_str)\n    \n    # Check if the number is one less than twice its reverse\n    if num == rev_num + 1:\n        return True\n    else:\n        return False",
        "num_ids": 116
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with these digits.\n    \"\"\"\n    max_num = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(map(str, arr[i:j])))\n            if num > max_num:\n                max_num = num\n    \n    return max_num",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    arr.sort(reverse=True)\n    max_num = 0\n\n    for i in range(len(arr)):\n        max_num += arr[i] * (10 ** i)\n\n    return max_num",
        "num_ids": 96
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed\n    with those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        num = 1\n        for j in range(i, len(arr)):\n            num = num * arr[j]\n        max_num = max(max_num, num)\n    return max_num",
        "num_ids": 99
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function will take an array of digits as input and return the largest number that can be formed using these digits.\n    \"\"\"\n    arr.sort(reverse=True) # Sort the array in descending order\n    res = 0 # Initialize the result variable\n    for i in range(len(arr)):\n        res = res * 10 + arr[i] # Add the digits in the array to the result variable\n    return res",
        "num_ids": 101
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        res = res * 10 + arr[i]\n    return res",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i, len(arr)):\n            temp *= arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num",
        "num_ids": 97
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        max_num += arr[i]*10**i\n    return max_num\n",
        "num_ids": 82
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i, len(arr)):\n            temp *= arr[j]\n            if temp > max_num:\n                max_num = temp\n            temp //= arr[j]\n    return max_num",
        "num_ids": 103
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed by these digits.\n    \"\"\"\n    arr.sort()\n    max_num = arr[-1]\n    i = len(arr)-2\n    while i >= 0:\n        if arr[i] * 10 + arr[i+1] > max_num:\n            max_num = arr[i] * 10 + arr[i+1]\n        i -= 1\n    return max_num",
        "num_ids": 118
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True",
        "num_ids": 66
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integer arguments and returns True if they have opposite sign or False if they have the same sign.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign\n    and False otherwise.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite sign, False otherwise.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x >= 0 and y >= 0:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes in two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    count = 1\n    octagonal = 1\n    \n    while count < n:\n        octagonal += 8 * count\n        count += 1\n        \n    return octagonal",
        "num_ids": 60
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 1\n    while i <= n:\n        octagonal += 8 * i\n        i += 1\n    return octagonal",
        "num_ids": 64
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = (1 + 3*n) * n // 2\n    return octagonal_number",
        "num_ids": 54
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    count = 1\n    while True:\n        octagonal = count*(8*count - 5)\n        count += 1\n        if octagonal >= n:\n            return octagonal",
        "num_ids": 75
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    oct_num = 0\n    while count < n:\n        oct_num += 1\n        if oct_num == count * (3 * count - 1) // 2:\n            count += 1\n    return oct_num",
        "num_ids": 82
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    octagonal_numbers = []\n    while count < n:\n        octagonal_numbers.append(i*(3*i-1)//2)\n        i += 1\n        count += 1\n    return octagonal_numbers[n-1]",
        "num_ids": 92
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a given number is an octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        num = i*(2*i - 1)\n        if num == n:\n            return True\n        elif num > n:\n            return False\n        i += 1\n",
        "num_ids": 72
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an octagonal number, else False.\n    \"\"\"\n    # Finding the square root of 2n\n    root = int((2*n)**0.5)\n\n    # Checking if the square of the root is equal to 2n\n    if root**2 == 2*n:\n        return True\n    else:\n        return False",
        "num_ids": 97
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    num = (n*(3*n-1)) // 2  # nth octagonal number formula\n    if num > 0:  # check if the number is positive\n        return num\n    else:\n        return \"Invalid input.\"",
        "num_ids": 77
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    i = 1\n    while i <= n:\n        octagonal += i\n        i += 1\n    return octagonal",
        "num_ids": 61
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count += 1\n    return count",
        "num_ids": 103
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as input and returns the count of substrings with sum of digits equal to length of string.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    count[0] = 1\n    for i in range(1, n):\n        count[i+1] = count[i]\n        if s[i] == '0' or (s[i-1] == '1' and s[i] == '0'):\n            count[i+1] += count[i-1]\n    return count[n]",
        "num_ids": 139
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of each digit\n    digit_count = defaultdict(int)\n    \n    # Traverse the string and count the frequency of each digit\n    for digit in s:\n        digit_count[digit] += 1\n    \n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    sum_digit_count = defaultdict(int)\n    \n    # Initialize a variable to store the length of the string\n    n = len(s)\n    \n    # Traverse the string and count the frequency of substrings with sum of digits equal to their length\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit_count[digit]) for digit in s[i:j]) == j-i:\n                sum_digit_count[j-i] += 1\n    \n    # Return the count of substrings with sum of digits equal to their length\n    return sum_digit_count[n]",
        "num_ids": 224
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count",
        "num_ids": 115
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        # Calculate the sum of digits for each substring starting at i\n        digit_sum = sum(int(d) for d in s[i:])\n        # Check if the digit sum is equal to the length of the substring\n        if digit_sum == n - i:\n            count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in sub_str)\n            if sum_of_digits == len(sub_str):\n                count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = defaultdict(int)\n    count[0] = 1\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(d) for d in s[i:j+1]) == j-i+1:\n                count[j+1] += count[i]\n    return count[n]",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            total = sum(int(d) for d in sub)\n            if total == len(sub):\n                count[sub] += 1\n    return sum(count.values())",
        "num_ids": 96
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            temp = sum(int(s[k]) for k in range(i, j+1))\n            if temp == len(s[i:j+1]):\n                count[temp] += 1\n    return count\n",
        "num_ids": 95
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(c) for c in s[i:j]) == (j-i):\n                count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 57
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list of numbers.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "num_ids": 51
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as an argument and returns the maximum difference between available pairs.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][1] - test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1] - test_list[j][1])\n    return max_diff",
        "num_ids": 124
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][1]\n    return max_diff",
        "num_ids": 118
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][1]\n    \n    return max_diff",
        "num_ids": 118
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][0] - test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list of tuples based on the second element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    max_diff = 0\n    \n    # iterate through each tuple and find the difference between the second and third elements\n    # if the difference is greater than the current maximum difference, update the maximum difference\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            diff = sorted_list[j][1] - sorted_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff",
        "num_ids": 175
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][0] - test_list[i][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 108
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "num_ids": 109
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sorts a list of tuples by the second value of each tuple.\n    '''\n    sorted_marks = sorted(subject_marks, key=lambda x: x[1])\n    return sorted_marks",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subject_marks):\n    '''\n    This function takes a list of tuples as input, where each tuple contains the marks of a subject.\n    The function sorts the list based on the second value of each tuple and returns the sorted list.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])",
        "num_ids": 72
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subject_marks_list):\n    \"\"\"\n    This function takes a list of tuples and sorts it using the second value of each tuple.\n\n    Parameters:\n    subject_marks_list (list): A list of tuples containing subject marks.\n\n    Returns:\n    list: A sorted list of tuples based on the second value of each tuple.\n    \"\"\"\n\n    # Sort the list of tuples based on the second value of each tuple.\n    sorted_list = sorted(subject_marks_list, key=lambda x: x[1])\n\n    return sorted_list",
        "num_ids": 118
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 48
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subject_marks):\n    '''\n    This function takes a list of tuples as input and sorts the list based on the second value of each tuple.\n    '''\n    subject_marks.sort(key=lambda x: x[1])\n    return subject_marks",
        "num_ids": 58
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and returns a sorted list of tuples based on the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(x) for x in data_list)\n    else:\n        return data_list",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 75
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        total = 0\n        for item in data_list:\n            if isinstance(item, list):\n                total += recursive_list_sum(item)\n            else:\n                total += item\n        return total\n    else:\n        return data_list",
        "num_ids": 91
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        sum_list = 0\n        for item in data_list:\n            sum_list += recursive_list_sum(item)\n        return sum_list",
        "num_ids": 83
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: nested list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # base case: element of list\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 127
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "num_ids": 110
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    This function takes a list as input and recursively sums all the elements of the list.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 70
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n+1) # initialize the list of Bell numbers\n    bell[0] = 1 # base case: there is only one way to partition 0 elements\n    for i in range(1, n+1):\n        bell[i] = 0 # reset the sum of the previous terms\n        for j in range(i):\n            bell[i] += bell[j] # add the sum of the previous terms to get the current term\n    return bell[n] # return the Bell number for n elements",
        "num_ids": 154
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(k) * bell_number(n-k) for k in range(n))",
        "num_ids": 73
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-1-j]\n    return bell[n]",
        "num_ids": 117
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]",
        "num_ids": 129
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    :param n: An integer representing the number of parts to partition.\n    :return: An integer representing the number of ways to partition n parts.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]",
        "num_ids": 135
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bells = [1]\n        for i in range(1, n+1):\n            bells.append(sum(bells))\n        return bells[n]\n",
        "num_ids": 87
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Calculate the Bell number of the given number n.\n\n    Args:\n    n: The number for which to calculate the Bell number.\n\n    Returns:\n    The Bell number of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)",
        "num_ids": 99
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[i-1] * (i+1))\n    return bell[n]",
        "num_ids": 76
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Calculate the Bell number of the given integer n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_number(k) * bell_number(n-k-1) for k in range(n)])",
        "num_ids": 68
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        bell[1] = 1\n        \n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        \n        return bell[n]",
        "num_ids": 134
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes in an array A and checks whether the array is monotonic or not.\n    A monotonic array is an array that either increases or decreases, but not both.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            decreasing = False\n        elif A[i] > A[i-1]:\n            increasing = False\n    \n    return increasing or decreasing",
        "num_ids": 126
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the given array is monotonic and False otherwise.\n    A monotonic array is an array where each element is either less than,\n    equal to, or greater than the previous element.\n    \"\"\"\n    is_increasing = is_decreasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        elif A[i] > A[i-1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing",
        "num_ids": 129
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and checks whether it is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    else:\n        for i in range(n-1):\n            if A[i] > A[i+1]:\n                return False\n        return True",
        "num_ids": 79
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n\n    increasing = False\n    decreasing = False\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            increasing = True\n        elif A[i] < A[i-1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True if increasing or decreasing else False",
        "num_ids": 98
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing",
        "num_ids": 91
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    i = 0\n    while i < n-1 and A[i] <= A[i+1]:\n        i += 1\n    if i == n-1:\n        return True\n    i = 0\n    while i < n-1 and A[i] >= A[i+1]:\n        i += 1\n    if i == n-1:\n        return True\n    return False",
        "num_ids": 120
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    This function takes an array as input and returns True if it is monotonic and False otherwise.\n    A list is considered to be monotonic if all elements are non-increasing or all elements are non-decreasing.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n        elif A[i] > A[i-1]:\n            continue\n        else:\n            return True",
        "num_ids": 121
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty or not\n    if len(A) == 0:\n        return True\n\n    # check if the array is sorted in ascending or descending order\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    \n    # if the array is sorted in ascending or descending order for all elements\n    return True",
        "num_ids": 128
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i - 1]:\n            return False\n    return True",
        "num_ids": 46
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 81
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s == l[len(l)-len(s):]",
        "num_ids": 47
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    :param l: the list to check\n    :param s: the sublist to search for in the list\n    :return: True if the sublist is found, False otherwise\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if s == l[i:i+len(s)]:\n                return True\n    return False",
        "num_ids": 120
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l",
        "num_ids": 33
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Args:\n    l (list): The list to check.\n    s (list): The sublist to search for.\n\n    Returns:\n    bool: True if l contains s, False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 126
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 69
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False",
        "num_ids": 95
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(len(t) for t in Input)) == 1",
        "num_ids": 49
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    return len(set(len(x) for x in Input)) == 1",
        "num_ids": 49
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = True\n    \n    # Find the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # Check if all the tuples in the list have the same length\n    for i in Input:\n        if len(i)!= length:\n            result = False\n            break\n    \n    return result",
        "num_ids": 93
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = True\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            result = False\n            break\n    return result",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all tuples have equal length and False otherwise.\n    \"\"\"\n    # check if the list is empty\n    if not Input:\n        return False\n    \n    # get the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # loop through all the tuples and check if their length is equal to the length of the first tuple\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n        \n    return True",
        "num_ids": 115
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])  # get the length of the first tuple\n    for i in range(len(Input)):\n        if len(Input[i])!= length:  # check if all the tuples have the same length\n            return False\n    return True  # if all tuples have the same length, return True\n    \n",
        "num_ids": 100
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 145
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 137
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Args:\n        nums: list of elements to be sorted.\n\n    Returns:\n        Sorted list of elements.\n    \"\"\"\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n\n    while gap!= 1:\n        gap = max(1, int(gap / shrink))\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums",
        "num_ids": 135
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n\n    # Loop through the list, swapping elements and reducing the gap until it is 1\n    while gap!= 1 or shrink!= 1:\n        # If the gap is odd, reduce it by the shrink factor\n        if gap % 2 == 1:\n            gap = int(gap / shrink)\n        else:\n            gap = int(gap / shrink)\n            shrink += 1\n\n        # Loop through the list, swapping elements\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums",
        "num_ids": 187
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of the comb sort algorithm in Python.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap!= 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    \n    return nums",
        "num_ids": 118
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \n    Args:\n        nums: A list of elements to be sorted.\n    \n    Returns:\n        A sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    shrink = 1.3\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums",
        "num_ids": 156
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums",
        "num_ids": 126
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is a square number\n    root = int(n ** 0.5)\n    if root*root == n:\n        return True\n    \n    # check if the number can be written as the difference of two squares\n    for i in range(2, root+1):\n        if root % i == 0:\n            diff = root - i\n            if (diff*diff + i*i) == n:\n                return True\n    \n    return False",
        "num_ids": 130
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(int(n**(0.5))+1):\n        if (n-i*i)**(0.5) == int((n-i*i)**(0.5)):\n            return True\n    return False\n\nprint(is_diff_square(16)) # True\nprint(is_diff_square(25)) # False",
        "num_ids": 116
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if (i*i - i) == n:\n                return True\n            elif (i*i + i) == n:\n                return True\n    return False",
        "num_ids": 94
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if the number is a perfect square\n    if int(n**0.5)**2 == n:\n        return False\n\n    # check if the number can be written as the difference of two squares\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            a = int((n-i)/i)\n            b = n-a*i\n            if int(a**0.5)**2 == a and int(b**0.5)**2 == b:\n                return True\n\n    return False",
        "num_ids": 155
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    i = 1\n    while i*i <= n:\n        if n % i == 0 and (i*i!= n or (i-n/i) % 2 == 0):\n            return True\n        i += 1\n    return False",
        "num_ids": 89
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Calculate the square root of the number\n    sqrt_n = int(n ** 0.5)\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 85
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_square(num):\n    \"\"\"\n    Helper function to check if a number is a perfect square.\n    \"\"\"\n    return int(math.sqrt(num))**2 == num\n\ndef dif_Square(n):\n    \"\"\"\n    Check if the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if n is a perfect square\n    if is_square(n):\n        return False\n    \n    # Check if n can be written as the difference of two squares\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_square(n - i*i) and is_square(i):\n            return True\n        \n    return False",
        "num_ids": 153
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # Initialize a variable to keep track of the number of factors of 2 in n\n    count = 0\n    \n    # Loop through all the factors of 2 in n\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n    \n    # Check if n is equal to 1 or 0\n    if n == 1 or n == 0:\n        return True\n    \n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if sqrt(n) is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(count):\n        if sqrt_n ** 2 + i * 2 * sqrt_n == n:\n            return True\n        \n    return False",
        "num_ids": 218
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_square(n):\n    '''\n    Returns True if n is a square, False otherwise.\n    '''\n    if n < 0:\n        return False\n    x = int(n**0.5)\n    return x*x == n\n\ndef dif_square(n):\n    '''\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    '''\n    # Check if n is a square\n    if not is_square(n):\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if is_square(n - i**2) and is_square(i**2):\n            return True\n        \n    return False",
        "num_ids": 164
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        if patterns[i] == 'R' and colors[i]!= 'Red':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'Green':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'Blue':\n            return False\n        elif patterns[i] == 'Y' and colors[i]!= 'Yellow':\n            return False\n        elif patterns[i] == 'W' and colors[i]!= 'White':\n            return False\n        i += 1\n    return True",
        "num_ids": 163
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the colors follow the sequence in the patterns array.\n\n    Args:\n        colors (list): a list of colors.\n        patterns (list): a list of patterns, each pattern is a list of colors.\n\n    Returns:\n        bool: True if the colors follow the sequence in the patterns array, False otherwise.\n    \"\"\"\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if colors[j]!= patterns[i][j]:\n                return False\n    return True",
        "num_ids": 122
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] == \"R\" and colors[i]!= \"red\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"green\":\n            return False\n        elif patterns[i] == \"B\" and colors[i]!= \"blue\":\n            return False\n    return True",
        "num_ids": 103
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function checks whether the input colors follow the sequence given in the patterns array.\n\n    Args:\n    colors: A list of colors in string format\n    patterns: A list of patterns in string format\n\n    Returns:\n    A boolean value indicating whether the colors follow the pattern sequence.\n    \"\"\"\n\n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        if patterns[i-1] == 'W':\n            if not (colors[i] == 'W' and colors[i-1] == 'B'):\n                return False\n        elif patterns[i-1] == 'B':\n            if not (colors[i] == 'B' and colors[i-1] == 'W'):\n                return False\n    return True",
        "num_ids": 169
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether the given colors follow the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        pattern_match = True\n        for j in range(len(patterns)):\n            if colors[i+j]!= patterns[j]:\n                pattern_match = False\n                break\n        if pattern_match:\n            return True\n    return False",
        "num_ids": 95
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two parameters - colors and patterns - which are both lists.\n    The colors list contains the colors of the clothes and the patterns list contains the patterns that the clothes follow in sequence.\n    The function checks if the sequence of the colors matches the sequence of patterns, and returns True if it does, and False otherwise.\n    '''\n\n    # If the length of the colors list is not equal to the length of the patterns list, return False\n    if len(colors)!= len(patterns):\n        return False\n\n    # Iterate through both lists simultaneously and check if the color at each index matches the pattern at the same index\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # If the function hasn't returned False yet, it means the sequence of colors matches the sequence of patterns, so return True\n    return True",
        "num_ids": 194
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!='red':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'green':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'blue':\n            return False\n\n    return True",
        "num_ids": 123
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i < len(patterns):\n            if colors[i]!= patterns[i]:\n                return False\n        else:\n            if colors[i]!= patterns[-1]:\n                return False\n    return True",
        "num_ids": 84
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check if the colors follow the given pattern.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    n = len(colors)\n    m = len(patterns)\n    count = 0\n\n    # loop through each pattern\n    for i in range(m):\n\n        # initialize variables for pattern and color\n        pattern = patterns[i]\n        color = colors[0]\n\n        # loop through each color in the pattern\n        for j in range(len(pattern)):\n\n            # if the color matches, increment count and move on to the next color\n            if pattern[j] == color:\n                count += 1\n                if j == len(pattern) - 1:\n                    break\n                color = colors[count]\n\n            # if the color does not match, return False\n            else:\n                return False\n\n    # if all patterns match, return True\n    return True",
        "num_ids": 190
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function finds tuples from the given list of tuples which have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 73
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(i % K == 0 for i in tpl):\n            result.append(tpl)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "num_ids": 92
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result",
        "num_ids": 75
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or even.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} has an even length.\")\n    else:\n        print(f\"{s} has an odd length.\")",
        "num_ids": 73
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n\n    Parameters:\n        s (str): The string to check.\n\n    Returns:\n        bool: True if the length of the string is odd, False otherwise.\n    \"\"\"\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else False.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 61
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    If the length of the word is odd, it returns True, otherwise it returns False.\n    \"\"\"\n    # Split the string into words using space as delimiter\n    words = s.split()\n    # Loop through each word in the list and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False",
        "num_ids": 108
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 57
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + n*(n-1)*(n-2)//6",
        "num_ids": 79
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return tetrahedral_number(n - 1) + 4 * (n - 1)",
        "num_ids": 78
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        count += i\n        i += 1\n    return count - n + 1",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    tetrahedral_num = (n * (n + 1) * (n + 2)) // 6\n    return tetrahedral_num",
        "num_ids": 64
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    t = 0\n    count = 1\n\n    # Loop until we reach the nth tetrahedral number\n    while count < n:\n        t += 4 * count * (count - 1) * (count - 2)\n        count += 1\n\n    # Return the nth tetrahedral number\n    return t",
        "num_ids": 101
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    tetrahedral_number = n * (n + 1) * (n + 2) // 6\n    return tetrahedral_number",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    \"\"\"\n    t = n * (n + 1) * (n + 2) // 6\n    return t",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 1\n    \n    # Initialize the variables\n    a, b, c = 1, 1, 1\n    count = 2\n    \n    # Loop until we reach the nth tetrahedral number\n    while count < n:\n        a, b, c = b, c, a + b + c\n        count += 1\n        \n    # Return the nth tetrahedral number\n    return a",
        "num_ids": 136
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    This function takes an integer as input and returns the nth tetrahedral number.\n\n    Parameters:\n    n (int): The index of the tetrahedral number to be calculated.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    else:\n        return 4 * (n - 1) + tetrahedral_number(n-1)",
        "num_ids": 128
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function calculates the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n-1) - 3 * (n-1)\n",
        "num_ids": 67
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nprint(\"The volume of a sphere with radius 5 is:\", volume_sphere(5))",
        "num_ids": 69
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))",
        "num_ids": 75
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    return (4/3) * math.pi * (r**3)",
        "num_ids": 52
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius value and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 55
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in the radius of a sphere as a parameter and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume",
        "num_ids": 54
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n\nprint(volume_sphere(5))",
        "num_ids": 57
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "num_ids": 51
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))",
        "num_ids": 80
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # converting each character of the string to its ASCII value\n    ASCII_values = [ord(i) for i in strr]\n    # adding the ASCII values of all the characters\n    total_ASCII_value = sum(ASCII_values)\n    # taking the modulus of 26\n    mod_26_value = total_ASCII_value % 26\n    # finding the character by subtracting the modulus value from 90 (the ASCII value of 'Z')\n    char = chr(90 - mod_26_value)\n    return char",
        "num_ids": 129
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for i in strr:\n        sum_ascii += ord(i)\n    return chr(sum_ascii % 26 + ord('a'))",
        "num_ids": 80
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    ascii_sum = sum([ord(i) - 96 for i in strr])\n    result = chr(ascii_sum % 26 + 97)\n    return result",
        "num_ids": 50
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Take the sum modulo 26 to get the character made by adding the ASCII values\n    char_made = sum % 26\n    # Convert the ASCII value of the character to its corresponding character\n    char_made = chr(char_made + 65)\n    # Return the character made by adding the ASCII values\n    return char_made",
        "num_ids": 129
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26 + 97)",
        "num_ids": 74
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result variable\n        result += ord(char)\n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((result % 26) + 65)",
        "num_ids": 132
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = sum(ord(c) - 96 for c in strr)  # subtract 96 to get ASCII code between 'a' and 'z'\n    return chr((sum_ascii % 26) + 97)  # add 97 to get ASCII code between 'a' and 'z'",
        "num_ids": 115
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = sum([ord(char) for char in strr])\n    return chr(sum_ascii % 26)",
        "num_ids": 70
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initializing a variable to store the sum of ASCII values\n    sum = 0\n    \n    # iterating through each character of the string and adding its ASCII value to the sum variable\n    for char in strr:\n        sum += ord(char)\n        \n    # returning the character made by adding the sum modulo 26\n    return chr(sum % 26 + ord('a'))",
        "num_ids": 122
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    This function finds the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char) - 96\n    return chr(sum % 26 + 96)",
        "num_ids": 75
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        seq = [0, 1, 1] \n        for i in range(3, n+1): \n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]]) \n        return seq[n]",
        "num_ids": 106
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n-1]",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1]\n        while len(sequence_list) < n+1:\n            next_num = sum(sequence_list[-sequence_list[-1]:])\n            sequence_list.append(next_num)\n        return sequence_list[-1]",
        "num_ids": 112
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input. Please enter a number greater than 0.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return sequence[n]",
        "num_ids": 119
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return str(seq[n-1])",
        "num_ids": 110
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 106
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[-1]\n",
        "num_ids": 102
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1]\n        for i in range(2, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]",
        "num_ids": 117
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]",
        "num_ids": 110
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Error: Input must be greater than 0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]",
        "num_ids": 116
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * r ** 2\n    return surfacearea",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes in the radius of a sphere and returns its surface area.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 53
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Computes the surface area of a sphere of radius r.\n    \"\"\"\n    area = 4 * math.pi * r**2\n    return area",
        "num_ids": 45
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    i = 1\n    num = 1\n    \n    # Loop until nth centered hexagonal number is found\n    while i!= n:\n        # Calculate the next centered hexagonal number\n        num += 6*i\n        \n        # Increment i\n        i += 1\n        \n    return num",
        "num_ids": 90
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = ((2*n) + 1)**2\n    return hex_num",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonals = [i * (2 * i - 1) for i in range(1, 1000)]\n    index = n - 1\n    if index < 0 or index >= len(hexagonals):\n        raise ValueError('n is out of range')\n    return hexagonals[index]",
        "num_ids": 98
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonals = []\n    i = 1\n    while True:\n        hexagonals.append(i*(2*i-1))\n        i += 1\n        if len(hexagonals) >= n:\n            break\n    return hexagonals[n-1]\n",
        "num_ids": 88
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    A centered hexagonal number is a hexagonal number whose center is also a hexagonal number.\n    '''\n    hexagonal_num = 1\n    count = 1\n    while count < n:\n        hexagonal_num += 6*count - 3\n        count += 1\n    return hexagonal_num",
        "num_ids": 97
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 0\n    num = 0\n    \n    while count < n:\n        num += 6*count\n        count += 1\n        \n    return num",
        "num_ids": 60
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num",
        "num_ids": 60
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i - 1) for i in range(1, 100)]\n    for i in range(n):\n        if i%2!= 0:\n            hexagonal_numbers.remove(hexagonal_numbers[i//2])\n    return hexagonal_numbers[n-1]",
        "num_ids": 106
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i*(2*i - 1)\n        i += 1\n        if hex_num % 2 == 1 and hex_num % 3 == 0 and hex_num % 4 == 1:\n            count += 1\n    return hex_num",
        "num_ids": 106
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    result = dict(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result",
        "num_ids": 65
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    # Merge dict1 into merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n        \n    # Merge dict2 into merged_dict\n    for key, value in dict2.items():\n        if key in merged_dict:\n            merged_dict[key].extend(value)\n        else:\n            merged_dict[key] = value\n            \n    # Merge dict3 into merged_dict\n    for key, value in dict3.items():\n        if key in merged_dict:\n            merged_dict[key].extend(value)\n        else:\n            merged_dict[key] = value\n            \n    return merged_dict",
        "num_ids": 179
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function merges three dictionaries into a single dictionary.\n    '''\n\n    # create a new dictionary\n    result_dict = {}\n\n    # iterate through all the keys in the first dictionary\n    for key in dict1:\n        # if the key already exists in the result dictionary, update the value\n        if key in result_dict:\n            result_dict[key] += dict1[key]\n        else:\n            # if the key does not exist, add the key-value pair to the result dictionary\n            result_dict[key] = dict1[key]\n\n    # iterate through all the keys in the second dictionary\n    for key in dict2:\n        # if the key already exists in the result dictionary, update the value\n        if key in result_dict:\n            result_dict[key] += dict2[key]\n        else:\n            # if the key does not exist, add the key-value pair to the result dictionary\n            result_dict[key] = dict2[key]\n\n    # iterate through all the keys in the third dictionary\n    for key in dict3:\n        # if the key already exists in the result dictionary, update the value\n        if key in result_dict:\n            result_dict[key] += dict3[key]\n        else:\n            # if the key does not exist, add the key-value pair to the result dictionary\n            result_dict[key] = dict3[key]\n\n    return result_dict",
        "num_ids": 324
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = ct.ChainMap(dict3, dict2, dict1)\n    return dict(result)",
        "num_ids": 64
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 84
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            if isinstance(dict1[key], list) and isinstance(dict2[key], list) and isinstance(dict3[key], list):\n                merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n            elif isinstance(dict1[key], dict) and isinstance(dict2[key], dict) and isinstance(dict3[key], dict):\n                merged_dict[key] = merge_dictionaries_three(dict1[key], dict2[key], dict3[key])\n            else:\n                merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict2 and key not in dict3:\n            if isinstance(dict1[key], list) and isinstance(dict2[key], list):\n                merged_dict[key] = dict1[key] + dict2[key]\n            elif isinstance(dict1[key], dict) and isinstance(dict2[key], dict):\n                merged_dict[key] = merge_dictionaries_three(dict1[key], dict2[key], {})\n            else:\n                merged_dict[key] = [dict1[key], dict2[key]]\n        elif key not in dict2 and key in dict3:\n            if isinstance(dict1[key], list) and isinstance(dict3[key], list):\n                merged_dict[key] = dict1[key] + dict3[key]\n            elif isinstance(dict1[key], dict) and isinstance(dict3[key], dict):\n                merged_dict[key] = merge_dictionaries_three(dict1[key], {}, dict3[key])\n            else:\n                merged_dict[key] = [dict1[key], dict3[key]]\n        else:\n            if isinstance(dict1[key], list):\n                merged_dict[key] = dict1[key]\n            elif isinstance(dict1[key], dict):\n                merged_dict[key] = merge_dictionaries_three(dict1[key], {}, {})\n            else:\n                merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in dict1:\n            if isinstance(dict2[key], list):\n                merged_dict[key] = dict2[key]\n            elif isinstance(dict2[key], dict):\n                merged_dict[key] = merge_dictionaries_three({}, dict2[key], {})\n            else:\n                merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in dict1:\n            if isinstance(dict3[key], list):\n                merged_dict[key] = dict3[key]\n            elif isinstance(dict3[key], dict):\n                merged_dict[key] = merge_dictionaries_three({}, {}, dict3[key])\n            else:\n                merged_dict[key] = dict3[key]\n    return merged_dict",
        "num_ids": 709
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 76
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "num_ids": 82
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq",
        "num_ids": 77
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Returns a dictionary with the frequency of all elements in a list.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 78
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 56
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use Counter to count the frequency of each element in the list\n    count = collections.Counter(lst)\n    # Return the count as a dictionary\n    return dict(count)",
        "num_ids": 74
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq",
        "num_ids": 77
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function returns a dictionary with keys as elements in the input list and their respective frequencies as values.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 87
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N and i!= 0:\n            return i\n        else:\n            return N",
        "num_ids": 61
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # Initialize the closest number variable to infinity\n    closest = float('inf')\n    # Loop through all numbers from 1 to N (inclusive)\n    for i in range(1, N+1):\n        # Check if the difference between i and N is smaller than the current closest number\n        if abs(i - N) < abs(closest - N):\n            closest = i\n    # Return the closest number found\n    return closest",
        "num_ids": 96
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    This function takes an integer n as input and returns the closest smaller number than n.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return None\n    else:\n        lower_bound = 1\n        upper_bound = n - 1\n        closest = None\n        while lower_bound <= upper_bound:\n            mid = (lower_bound + upper_bound) // 2\n            if mid * mid == n:\n                return mid\n            elif mid * mid < n:\n                closest = mid\n                lower_bound = mid + 1\n            else:\n                upper_bound = mid - 1\n        return closest",
        "num_ids": 146
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1",
        "num_ids": 57
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    '''\n    Returns the closest smaller number than n.\n    '''\n    for i in range(n-1, -1, -1):\n        if i < n:\n            return i\n    return -1",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(n):\n    '''\n    Find the closest smaller number than n.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n - (n % 10)\n\nprint(closest_num(100)) # Output: 90\nprint(closest_num(75)) # Output: 70\nprint(closest_num(11)) # Output: 10",
        "num_ids": 96
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = None\n    for i in range(N-1, 0, -1):\n        if i < N:\n            smaller = i\n            break\n    return smaller",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(1, n):\n        if abs(i - n) < abs(closest - n) if closest is not None else True:\n            closest = i\n    return closest",
        "num_ids": 69
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, -1, -1):\n        if i < N:\n            return i\n    return None",
        "num_ids": 53
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(n-1, 0, -1):\n        if i == n-1:\n            continue\n        else:\n            return i",
        "num_ids": 57
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    \n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    \n    return longest_word_length",
        "num_ids": 74
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a given list of strings.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 69
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    This function takes in a list of strings as an argument and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 76
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a list of strings.\n    \"\"\"\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len",
        "num_ids": 68
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest",
        "num_ids": 58
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two arguments - the string that needs to be searched and the substring to be found.\n    It returns True if the substring is present in the string, else it returns False.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False",
        "num_ids": 84
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False",
        "num_ids": 68
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)",
        "num_ids": 54
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, the first one is a string value and the second one is a substring.\n    The function checks if the substring is present in the given string value.\n    If the substring is present, then it returns True, otherwise it returns False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "num_ids": 89
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for string in str1:\n        if sub_str in string:\n            result = True\n            break\n    return result",
        "num_ids": 67
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    # Check if the number is divisible by 2 and odd\n    if n % 2 == 0 or n % 2 == 1:\n        return False\n    \n    # Check if the number is divisible by 5 and even\n    if n % 5 == 0 and n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 7 and odd\n    if n % 7 == 0 or n % 2 == 1:\n        return False\n    \n    # Check if the number is divisible by 11 and even\n    if n % 11 == 0 and n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 13 and odd\n    if n % 13 == 0 or n % 2 == 1:\n        return False\n    \n    # Check if the number is divisible by 17 and even\n    if n % 17 == 0 and n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 19 and odd\n    if n % 19 == 0 or n % 2 == 1:\n        return False\n    \n    # Check if the number is divisible by 23 and even\n    if n % 23 == 0 and n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by 29 and odd\n    if n % 29 == 0 or n % 2 == 1:\n        return False\n    \n    # If none of the conditions are met, the number is undulating\n    return True",
        "num_ids": 354
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Create a list of the digits of n\n    digits = [int(d) for d in str(n)]\n    \n    # Check if the difference between adjacent digits is the same\n    for i in range(len(digits)-1):\n        if digits[i+1] - digits[i]!= digits[1] - digits[0]:\n            return False\n    \n    # If we get to this point, the number is undulating\n    return True",
        "num_ids": 121
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    # Check if n is an integer greater than 1\n    if not isinstance(n, int) or n <= 1:\n        return False\n    \n    # Check if n has any factors other than 1 and n itself\n    factors = [i for i in range(2, n) if n % i == 0]\n    if factors:\n        return False\n    \n    # Check if n is a power of 2\n    while n > 1:\n        if n % 2!= 0:\n            return False\n        n //= 2\n    \n    return True",
        "num_ids": 123
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        A boolean value indicating whether the given number is undulating or not.\n    \"\"\"\n\n    # Convert the number to a string\n    num = str(n)\n\n    # Check if the number is a palindrome\n    if num == num[::-1]:\n        return False\n\n    # Check if the number has even length\n    if len(num) % 2!= 0:\n        return False\n\n    # Split the number into two halves\n    half1, half2 = num[:len(num)//2], num[len(num)//2:]\n\n    # Check if the two halves have the same length\n    if len(half1)!= len(half2):\n        return False\n\n    # Check if the two halves are palindromes\n    if half1!= half1[::-1]:\n        return False\n    if half2!= half2[::-1]:\n        return False\n\n    # If all the conditions are satisfied, return True\n    return True",
        "num_ids": 227
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    This function takes an integer 'n' as input and returns True if it is undulating, else False.\n    A number is said to be undulating if it has two strictly increasing or decreasing segments of equal length.\n    '''\n    # Check if n is less than or equal to 2\n    if n <= 2:\n        return False\n    \n    # Initialize two variables, inc and dec, to keep track of increasing and decreasing segments respectively.\n    inc = 1\n    dec = 1\n    \n    # Traverse the digits of n and check if they are increasing or decreasing.\n    for i in str(n):\n        if i == str(n)[0]:\n            continue\n        elif int(i) > int(str(n)[str(n).index(i)-1]):\n            dec = 1\n        else:\n            dec = 0\n        \n        # Check if the current segment is strictly increasing or decreasing.\n        if inc == 1 and dec == 0:\n            if len(set(str(n))) == 1:\n                return False\n        elif dec == 1 and inc == 0:\n            if len(set(str(n))) == 1:\n                return False\n            \n        # Update the variables inc and dec accordingly.\n        if int(i) > int(str(n)[str(n).index(i)-1]):\n            inc = 0\n        else:\n            inc = 1\n    \n    # If the loop completes, the number is not undulating.\n    return False",
        "num_ids": 322
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number contains any even digit\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            return True\n    \n    # If none of the above conditions are met, the number is undulating\n    return False",
        "num_ids": 107
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return True\n    else:\n        a = n\n        b = n\n        while a!= 1 and b!= 1:\n            a = a * 10\n            b = b * 10 + 1\n        return a == 1 or b == 1",
        "num_ids": 92
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check if a given number is undulating or not.\n\n    A number is said to be undulating if the absolute difference between any two adjacent digits is 1.\n\n    Parameters:\n    n (int): An integer number\n\n    Returns:\n    bool: True if n is undulating, False otherwise.\n    \"\"\"\n    n = str(n)\n    for i in range(len(n) - 1):\n        if abs(int(n[i]) - int(n[i + 1]))!= 1:\n            return False\n    return True",
        "num_ids": 125
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n\n    # Compute the square of the number and divide it by its digits\n    # to get the first digit's square and the last digit's square\n    # (these are the only ones that can change)\n    num_squared = sum(int(digit) ** 2 for digit in str(n))\n    first_digit_squared = int(str(n)[0]) ** 2\n    last_digit_squared = int(str(n)[-1]) ** 2\n\n    # Check if the first and last digits are equal and if the\n    # number squared is divisible by the difference between the\n    # first and last digits squared\n    return n > 1 and first_digit_squared == last_digit_squared and num_squared % (first_digit_squared - last_digit_squared) == 0",
        "num_ids": 226
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    # Check if n is odd\n    if n % 2 == 0:\n        return False\n    \n    # Check if n has only odd factors up to its square root\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True",
        "num_ids": 81
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b",
        "num_ids": 35
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n\n    Parameters:\n        a (float): The base number.\n        b (int): The exponent number.\n\n    Returns:\n        float: The result of 'a' raised to the power 'b'.\n    \"\"\"\n\n    result = a ** b\n    return result\n\nprint(power(2, 3)) # Output: 8.0",
        "num_ids": 95
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculates a raised to the power of b.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result",
        "num_ids": 49
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "num_ids": 60
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]",
        "num_ids": 69
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function finds the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0]) # Assume the first list is the smallest one\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length",
        "num_ids": 91
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize the minimum length to infinity\n    \n    for sublist in lst:  # iterate through each sublist in the main list\n        if len(sublist) < min_length:  # check if the length of the sublist is smaller than the current minimum length\n            min_length = len(sublist)  # update the minimum length if necessary\n            \n    return min_length  # return the minimum length",
        "num_ids": 126
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 53
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf') # initialize the minimum length to a very large number\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    return min_len",
        "num_ids": 89
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length",
        "num_ids": 75
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')  # initialize min_len to a very large value\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len",
        "num_ids": 87
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of the given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten(lst):\n    \"\"\"\n    Flatten a list of lists.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flat_list = flatten(lst)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 124
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    freq_dict = {}\n    for sublist in lst:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 86
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    flat_list = [item for sublist in list1 for item in sublist]\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "num_ids": 105
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten(lst):\n    \"\"\"\n    Returns a flattened version of the input list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n    return result\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in a flattened list of lists.\n    \"\"\"\n    flat_lst = flatten(lst)\n    freq = {}\n    for item in flat_lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq",
        "num_ids": 141
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(l):\n    flattened_list = []\n    for i in l:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n\ndef frequency_lists(list1):\n    flattened_list = flatten_list(list1)\n    freq_dict = {}\n    for i in flattened_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict",
        "num_ids": 137
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict",
        "num_ids": 93
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem not in freq_dict:\n                freq_dict[elem] = 0\n            freq_dict[elem] += 1\n    return freq_dict",
        "num_ids": 89
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list of lists\n    for elem in [item for sublist in list1 for item in sublist]:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n\n    return freq_dict",
        "num_ids": 130
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in frequency:\n                    frequency[j] += 1\n                else:\n                    frequency[j] = 1\n        else:\n            if i in frequency:\n                frequency[i] += 1\n            else:\n                frequency[i] = 1\n    return frequency",
        "num_ids": 117
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides the result with the length of the list.\n\n    :param numbers: A list of numbers\n    :return: The multiplication of all the numbers in the list divided by the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 90
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    This function multiplies all the numbers in a list and divides the result with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers in the list divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "num_ids": 64
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function takes a decimal number n as input and returns its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert n to binary using the built-in bin() function\n    binary = bin(n)[2:]\n    return binary",
        "num_ids": 65
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary",
        "num_ids": 43
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 82
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    binary = bin(n)[2:]\n    return binary",
        "num_ids": 22
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary\n",
        "num_ids": 91
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary",
        "num_ids": 86
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 82
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary representation as a string.\n    \"\"\"\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary",
        "num_ids": 96
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert decimal number to binary representation.\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary.lstrip('0') or '0'",
        "num_ids": 80
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the number and return it as an integer\n        return int(str(num + 1))\n    \n    # If the number is not a palindrome, find the next largest palindrome by adding 1 to the reverse of the number\n    reverse_str = num_str[::-1]\n    largest_palindrome = int(reverse_str + str(int(reverse_str) + 1))\n    \n    # Convert the largest palindrome back to an integer and return it\n    return int(str(largest_palindrome)[::-1])",
        "num_ids": 203
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input is already a palindrome\n    if is_palindrome(num):\n        # If the input is already a palindrome, add 1 to it and return it\n        return num + 1\n    \n    # If the input is not a palindrome, convert it to a string and find the next palindrome\n    str_num = str(num)\n    i = len(str_num) - 1\n    while i >= 0 and str_num[i] == '9':\n        i -= 1\n    if i < 0:\n        # If there are no more digits to add, return the input + 1\n        return num + 1\n    else:\n        # Otherwise, add 1 to the next digit and return the updated integer\n        str_num = str_num[:i] + str(int(str_num[i]) + 1) + str_num[i+1:]\n        return int(str_num)",
        "num_ids": 281
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Convert the number to a list of digits and reverse it\n        digits = list(str(num))\n        digits.reverse()\n\n        # Increment the last digit and add a 0 to the beginning\n        digits[0] = str(int(digits[0]) + 1)\n        digits = [0] + digits\n\n        # Convert the digits back to a number and return it\n        return int(''.join(digits))\n    else:\n        # Find the largest palindrome that is less than the input number\n        palindrome = num_str[:len(num_str) // 2]\n        while len(palindrome) >= 1 and palindrome[-1] == '0':\n            palindrome = palindrome[:-1]\n        while palindrome and int(palindrome) < num:\n            palindrome = palindrome[:-1]\n        largest_palindrome = int(palindrome)\n\n        # Convert the largest palindrome to a list of digits and reverse it\n        digits = list(str(largest_palindrome))\n        digits.reverse()\n\n        # Increment the last digit and add a 0 to the beginning\n        digits[0] = str(int(digits[0]) + 1)\n        digits = [0] + digits\n\n        # Convert the digits back to a number and return it\n        return int(''.join(digits))\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print('Usage: python next_smallest_palindrome.py <number>')\n    else:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))",
        "num_ids": 426
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\nif __name__ == '__main__':\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))",
        "num_ids": 137
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the number to a string to check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, add 1 and repeat the process until a palindrome is found\n        while True:\n            num += 1\n            num_str = str(num)\n            if num_str == num_str[::-1]:\n                return num\n    else:\n        # If the number is not a palindrome, find the largest odd factor of the number and multiply it by the smallest odd factor larger than it\n        # to find the next smallest palindrome\n        # First, find the largest odd factor of the number\n        largest_odd_factor = None\n        for i in range(num//2, 1, -1):\n            if num % i == 0:\n                largest_odd_factor = i\n                break\n        if largest_odd_factor is None:\n            # If the number is a prime number, return the next odd number\n            return num + 2\n        # Find the smallest odd factor larger than the largest odd factor\n        smallest_odd_factor = largest_odd_factor + 2\n        # Multiply the two factors to find the next smallest palindrome\n        return smallest_odd_factor * largest_odd_factor",
        "num_ids": 291
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Find the length of the string\n    length = len(num_str)\n    # Initialize the next smallest palindrome as None\n    next_palindrome = None\n    # Loop through all possible centers of the palindromes\n    for i in range(length):\n        # Check if the center is a digit or not\n        if i == length-1 or num_str[i+1] > num_str[i]:\n            # Check if the palindrome centered at i is a palindrome\n            if num_str[:i] == num_str[i:][::-1]:\n                # If it is, check if it is smaller than the current next_palindrome\n                if next_palindrome is None or int(num_str[:i]+num_str[i:][::-1]) < next_palindrome:\n                    # If it is, update the next_palindrome\n                    next_palindrome = int(num_str[:i]+num_str[i:][::-1])\n    # Return the next smallest palindrome\n    return next_palindrome",
        "num_ids": 280
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Convert the number to a string and find its reverse\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    \n    # Convert the number to a list of digits and reverse it\n    num_list = list(map(int, num_str))\n    rev_num_list = num_list[::-1]\n    \n    # Find the next palindrome by incrementing the last digit and checking if the number is still a palindrome\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] < 9:\n            num_list[i] += 1\n            for j in range(i+1, len(num_list)):\n                num_list[j] = num_list[i]\n            break\n    \n    # Convert the updated list back to a string and compare it with the original number\n    updated_num_str = ''.join(map(str, num_list))\n    if updated_num_str == rev_num_str:\n        return int(updated_num_str)\n    else:\n        return num + 1",
        "num_ids": 314
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        # If the input number is already a palindrome, increment it by 1 and return it\n        return num+1\n    \n    # Initialize variables for the number of digits and the reversed number\n    num_digits = len(str(num))\n    reversed_num = int(str(num)[::-1])\n    \n    # Loop until we find a palindrome\n    while True:\n        # Add 1 to the original number to get the next number\n        num += 1\n        \n        # If the new number is not a palindrome, try the next one\n        if not is_palindrome(num):\n            continue\n        \n        # If the new number has more digits than the original number, it cannot be a palindrome, so try the next one\n        if len(str(num)) > num_digits:\n            continue\n        \n        # If the new number has the same number of digits as the original number, check if it is smaller than the original number\n        if len(str(num)) == num_digits and num < reversed_num:\n            return num\n        \n        # If the new number has the same number of digits as the original number, check if it is equal to the original number\n        if len(str(num)) == num_digits and num == reversed_num:\n            return num\n        \n        # If the new number has the same number of digits as the original number, check if it is larger than the original number\n        if len(str(num)) == num_digits and num > reversed_num:\n            return num\n    \n    # If we reach this point, no palindromes were found\n    return None",
        "num_ids": 411
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string for manipulation\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return int(str(num+1))\n    \n    # Find the next smallest palindrome by incrementing the number by 1 and checking if it becomes a palindrome\n    while True:\n        num += 1\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            return int(num_str)",
        "num_ids": 157
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and check if it is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is, add 1 to the integer and return it as a string\n        return str(num+1)\n    else:\n        # If it is not, convert the integer to a list of digits, reverse the list, and convert it back to an integer\n        digits = list(str(num))\n        digits.reverse()\n        # Convert the reversed list of digits to a string and check if it is equal to the original string (to make sure it is a palindrome)\n        if str(int(\"\".join(digits))) == str(num):\n            # If it is, add 1 to the integer and return it as a string\n            return str(num+1)\n        else:\n            # If it is not, add 1 to the largest palindrome smaller than the integer and return it as a string\n            palindrome = str(num-1)\n            while not palindrome.isalnum() or str(palindrome)!= str(palindrome)[::-1]:\n                palindrome = str(int(palindrome)-1)\n            return str(int(palindrome)+1)",
        "num_ids": 301
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]",
        "num_ids": 71
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid k value\")\n    return sorted(arr)[k - 1]",
        "num_ids": 64
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array arr and a value k as input and returns the kth element of the array.\n    '''\n    if k > len(arr):\n        return \"Invalid input, k should be less than or equal to length of the array.\"\n    else:\n        return arr[k-1]",
        "num_ids": 76
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is out of range\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the kth element\n    return arr[k-1]",
        "num_ids": 89
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]",
        "num_ids": 65
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in two parameters:\n    arr: the array of integers\n    k: the 1-based index of the element to be found\n    \n    The function returns the kth element in the array.\n    '''\n    \n    # First, we need to check if k is a valid index for the given array.\n    if k < 1 or k > len(arr):\n        return None\n    \n    # If k is valid, we can simply return the kth element in the array.\n    return arr[k-1]",
        "num_ids": 119
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]",
        "num_ids": 55
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid k value.\")\n    return sorted(arr)[k-1]",
        "num_ids": 67
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return sorted(arr)[k-1]",
        "num_ids": 53
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]",
        "num_ids": 44
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string and converts it to camel case.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 41
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of the first word and join with the rest of the words\n    return words[0].capitalize() + ''.join(word.title() for word in words[1:])",
        "num_ids": 87
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.split('_'))",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])",
        "num_ids": 60
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as an argument and converts it to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() for x in word.split('_'))",
        "num_ids": 50
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns a camel case string.\n    '''\n    # split the input string into a list of words\n    words = word.split('_')\n    \n    # create an empty string to store the camel case string\n    camel_case = ''\n    \n    # loop through the list of words and capitalize the first letter of each word except the first one\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i]\n        else:\n            camel_case += words[i].capitalize()\n            \n    return camel_case",
        "num_ids": 134
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string as input and returns its camel case equivalent.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "num_ids": 60
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables for odd and even cases\n    if n % 2 == 0:\n        even_num = n // 2\n        odd_num = m // 2 + 1\n    else:\n        odd_num = (n + 1) // 2\n        even_num = m // 2\n    # Check if the number of odd and even numbers are equal\n    if odd_num!= even_num:\n        return None\n    else:\n        return 2 ** odd_num * 3 ** even_num",
        "num_ids": 143
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    else:\n        return n * m",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m*(n+m+1)//2",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Computes the Eulerian number a(n, m).\n    \"\"\"\n    if n == 1 and m == 1:\n        return 1\n    elif n == 1 or m == 1:\n        return 0\n    else:\n        return 2**(n+m-2)",
        "num_ids": 75
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (n-1)*(m-1)\n    return a",
        "num_ids": 48
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (m-1) * (n-1) + 1",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 2\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    else:\n        return eulerian_num(n-m, m) + eulerian_num(n, m-1)",
        "num_ids": 73
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function takes two arguments, n and m, and returns the Eulerian number a(n, m).\n    '''\n    # Calculate the Eulerian number a(n, m)\n    result = n**2 + m**2\n    return result",
        "num_ids": 67
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a 2D array to store the number of paths from each node to each other node\n    graph = [[0 for i in range(n+1)] for j in range(n+1)]\n    # Initialize the graph with the number of paths from each node to itself\n    for i in range(n+1):\n        graph[i][i] = 1\n    \n    # Update the graph with the number of paths from each node to each other node\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u][v] += 1\n        graph[v][u] += 1\n    \n    # Find the Eulerian circuit by performing a depth-first search on the graph\n    stack = [(0, 0)]\n    visited = set()\n    while stack:\n        u, v = stack.pop()\n        if (u, v) in visited:\n            continue\n        visited.add((u, v))\n        if u == n:\n            break\n        for i in range(n+1):\n            if graph[u][i] > 0:\n                stack.append((i, v))\n                graph[u][i] -= 1\n                graph[i][u] -= 1\n    \n    # Calculate the Eulerian number a(n, m)\n    a = 1\n    for i in range(1, n+1):\n        a *= graph[i][i]\n    return a",
        "num_ids": 338
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list",
        "num_ids": 53
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of True values in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in it.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True boolean values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in it.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 51
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of True values in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of True values in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple and returns the result.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 47
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as input and appends the list to the tuple and returns the modified tuple.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 55
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuple.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function takes two arguments - a list and a tuple.\n    The function appends the list to the tuple and returns the resulting tuple.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 59
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup = test_tup + (i,)\n    return test_tup",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes a list and a tuple as input and appends the list to the tuple.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function appends the given list to the given tuple.\n    \"\"\"\n    return test_tup + tuple(test_list)",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup",
        "num_ids": 44
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min-heap to store the numbers from num1, num2, and num3\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, 0))\n    heapq.heappush(heap, (num2[0], 1, 0))\n    heapq.heappush(heap, (num3[0], 2, 0))\n\n    # Create a list to store the merged sorted list\n    merged_list = []\n\n    # Iterate over the min-heap until it is empty\n    while heap:\n        # Pop the smallest element from the heap\n        smallest = heapq.heappop(heap)\n\n        # Add the smallest element to the merged sorted list\n        merged_list.append(smallest[0])\n\n        # Get the index of the smallest element in its respective list\n        list_index = smallest[1]\n        element_index = smallest[2] + 1\n\n        # If the index of the smallest element is less than the length of its respective list,\n        # add the next element to the heap\n        if element_index < len(eval('num' + str(list_index + 1))):\n            heapq.heappush(heap, (eval('num' + str(list_index + 1))[element_index], list_index + 1, element_index))\n\n    return merged_list",
        "num_ids": 320
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list",
        "num_ids": 102
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a min heap of all lists\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, 0))\n    heapq.heappush(heap, (num2[0], 1, 0))\n    heapq.heappush(heap, (num3[0], 2, 0))\n\n    # Initialize the result list\n    result = []\n\n    # Merge the lists into a single sorted list\n    while len(heap) > 0:\n        # Get the minimum element from the heap\n        val, index, i = heapq.heappop(heap)\n\n        # Add the minimum element to the result list\n        result.append(val)\n\n        # If there are more elements in the list, add them to the heap\n        if i + 1 < len(locals()[\"num\" + str(index + 1)]):\n            heapq.heappush(heap, (locals()[\"num\" + str(index + 1)][i + 1], index, i + 1))\n\n    return result",
        "num_ids": 249
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    # Add the first element of each list to the heap\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # Loop until all the elements are merged\n    while len(heap) > 0:\n        # Pop the smallest element from the heap and add it to the merged list\n        smallest = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n        # If the merged list has less than three elements, add the next element from the heap\n        if len(merged_list) < 3:\n            if len(num1) > 0 and num1[0] < smallest:\n                heapq.heappush(heap, num1[0])\n            if len(num2) > 0 and num2[0] < smallest:\n                heapq.heappush(heap, num2[0])\n            if len(num3) > 0 and num3[0] < smallest:\n                heapq.heappush(heap, num3[0])\n\n    return merged_list",
        "num_ids": 304
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(num2.pop(0))\n        elif not num2:\n            merged_list.append(num1.pop(0))\n        elif not num3:\n            merged_list.append(num2.pop(0))\n        else:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                merged_list.append(num1.pop(0))\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                merged_list.append(num2.pop(0))\n            else:\n                merged_list.append(num3.pop(0))\n    \n    return merged_list",
        "num_ids": 250
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(heapq.heappop(num2))\n        elif not num2:\n            merged_list.append(heapq.heappop(num1))\n        elif not num3:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n\n    return merged_list",
        "num_ids": 265
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heap = []\n    heapq.heapify(heap)\n    \n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n            \n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list",
        "num_ids": 116
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function merges three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(num2.pop(0))\n        elif not num2:\n            merged_list.append(num1.pop(0))\n        elif not num3:\n            merged_list.append(num1.pop(0))\n        else:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                merged_list.append(num1.pop(0))\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                merged_list.append(num2.pop(0))\n            else:\n                merged_list.append(num3.pop(0))\n    \n    return merged_list",
        "num_ids": 250
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list",
        "num_ids": 170
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a max heap\n    heap = [num1, num2, num3]\n    heapq.heapify(heap)\n\n    # create an empty list to store the merged sorted list\n    merged_list = []\n\n    # pop the largest element from the heap and add it to the merged list\n    while len(heap) > 0:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list",
        "num_ids": 133
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # iterate over the string n times\n    for i in range(n):\n        # rotate the string\n        s = s[1:] + s[0]\n        \n        # iterate over the string and count the odd values\n        for digit in s:\n            if int(digit)%2!= 0:\n                count += 1\n    \n    # return the count\n    return count",
        "num_ids": 127
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Create a dictionary to store the count of odd numbers\n    count_odd = {}\n    # Iterate over each rotation of the binary string\n    for i in range(n):\n        rotated_string = s[i:] + s[:i]\n        # Count the number of odd digits in the rotated string\n        odd_count = 0\n        for digit in rotated_string:\n            if int(digit) % 2!= 0:\n                odd_count += 1\n        # Add the count to the dictionary\n        count_odd[i] = odd_count\n    # Return the sum of the odd counts\n    return sum(count_odd.values())",
        "num_ids": 145
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Given a binary string `s` and a number `n`, returns the number of numbers with an odd value when rotating the string `n` times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    \n    # Rotate the digits `n` times\n    rotated = digits[-n:] + digits[:-n]\n    \n    # Count the number of odd digits\n    count = sum(d % 2 == 1 for d in rotated)\n    \n    return count",
        "num_ids": 120
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes a binary string s and a number of rotations n as input and returns the number of numbers with an odd value after rotating the string n times.\n    '''\n    # Convert the string to a list of digits\n    s_list = [int(i) for i in s]\n    \n    # Rotate the string n times\n    for i in range(n):\n        s_list.insert(0, s_list[-1])\n        s_list.pop()\n        \n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "num_ids": 162
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes in a binary string and a number n, and returns the number of numbers with an odd value after rotating the string n times.\n    '''\n    # Convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n    # Pad the list with zeros to make it the desired length\n    s_list = s_list + [0] * (n - len(s))\n    # Rotate the list n times\n    s_list = s_list[n:] + s_list[:n]\n    # Count the number of odd values\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n    return count",
        "num_ids": 168
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes two arguments:\n    - s: A binary string (0's and 1's)\n    - n: An integer representing the number of rotations\n    \n    The function returns the number of numbers with an odd value when rotating the given binary string the given number of times.\n    '''\n    \n    # Create a list of binary strings\n    binary_list = [s]\n    \n    # Rotate the binary string n times and append to the list\n    for i in range(n-1):\n        s = s[1:] + s[0]\n        binary_list.append(s)\n    \n    # Count the number of odd numbers in each binary string and return the total count\n    count = 0\n    for b in binary_list:\n        count += sum([int(d) for d in b]) % 2\n        \n    return count",
        "num_ids": 183
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and the number of times to rotate it by n, and returns the number of numbers with odd value.\n    \"\"\"\n    s = s * n\n    s = s[n:] + s[:n]\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count",
        "num_ids": 93
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string s and a number n as input.\n    It returns the number of numbers with an odd value when rotating the string the given number of times.\n    '''\n    # Initialize a variable to keep track of the number of odd numbers\n    count = 0\n    \n    # Loop through the string n times\n    for i in range(n):\n        # Convert the string to a list of integers\n        lst = [int(j) for j in s]\n        \n        # Rotate the list by one position\n        lst.append(lst.pop(0))\n        \n        # Check if any of the values in the list are odd\n        for j in lst:\n            if j % 2!= 0:\n                count += 1\n    \n    # Return the count of odd numbers\n    return count",
        "num_ids": 173
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Given a binary string s and a number n, return the number of numbers with an odd value when rotating the string n times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = list(map(int, s))\n    \n    # Pad the string with zeros at the end to make it of length 32\n    s += [0] * (32 - len(s))\n    \n    # Rotate the string n times\n    for _ in range(n):\n        s = s[-1:] + s[:-1]\n    \n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for digit in s:\n        if digit % 2!= 0:\n            count += 1\n    \n    return count",
        "num_ids": 165
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n): \n        rotated_str = s[i:] + s[:i]\n        for digit in rotated_str: \n            if int(digit) % 2!= 0: \n                count += 1\n    return count",
        "num_ids": 97
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                for k in range(len(nestedlist[i])):\n                    for l in range(len(nestedlist[j])):\n                        if nestedlist[i][k] == nestedlist[j][l]:\n                            common_elements.append(nestedlist[i][k])\n    return common_elements",
        "num_ids": 111
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Find the common elements in given nested lists.\n    '''\n    # Create a set of the elements in the first list\n    common = set(nestedlist[0])\n    # Iterate over the remaining lists and remove elements that are not common\n    for lst in nestedlist[1:]:\n        common &= set(lst)\n    # Return the common elements as a list\n    return list(common)",
        "num_ids": 95
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function finds the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]).intersection(nestedlist[j])\n            if common:\n                common_elements.append(common)\n    return common_elements",
        "num_ids": 96
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements",
        "num_ids": 37
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in nestedlist[i+1:]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "num_ids": 99
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[i][j] in nestedlist[j]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "num_ids": 91
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "num_ids": 96
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements = common_elements.intersection(set(lst))\n    return common_elements",
        "num_ids": 70
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements",
        "num_ids": 55
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    text (str): The string to check.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 71
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 45
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True",
        "num_ids": 48
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dict_list(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dict_list(list1):\n    '''\n    This function checks whether all dictionaries in a list are empty or not.\n    Returns True if all dictionaries are empty, False otherwise.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True",
        "num_ids": 59
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n\n    :param dict_list: a list of dictionaries\n    :return: True if all dictionaries are empty, False otherwise\n    \"\"\"\n    for d in dict_list:\n        if d:\n            return False\n    return True",
        "num_ids": 71
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dict_list(list_of_dicts):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n\n    :param list_of_dicts: A list of dictionaries.\n    :return: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in list_of_dicts:\n        if d:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for digit in nums:\n        result = result * 10 + digit\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function converts a given tuple of positive integers into a single integer.\n\n    :param nums: A tuple of positive integers.\n    :return: An integer that is the result of concatenating all the integers in the tuple.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 84
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num = num * 10 + i\n    return num",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    result = 0\n    for digit in nums:\n        result = result * 10 + digit\n    return result",
        "num_ids": 34
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 117
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list",
        "num_ids": 95
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "num_ids": 92
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                new_sublist.append(element)\n        new_list.append(new_sublist)\n    return new_list",
        "num_ids": 110
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str) and item.replace('.', '').isdigit():\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.','',1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 117
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n\n    Args:\n    test_list (list): A list of lists, where each inner list may contain strings that can be converted to floats.\n\n    Returns:\n    list: A new list where all possible convertible elements have been converted to floats.\n    \"\"\"\n    result = []\n    for inner_list in test_list:\n        new_inner_list = []\n        for element in inner_list:\n            try:\n                new_inner_list.append(float(element))\n            except ValueError:\n                new_inner_list.append(element)\n        result.append(new_inner_list)\n    return result",
        "num_ids": 156
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                new_sublist.append(element)\n        new_list.append(new_sublist)\n    return new_list",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '').isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 115
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].isnumeric():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list",
        "num_ids": 113
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    This function converts a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 37
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 35
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()",
        "num_ids": 39
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array and returns the element that appears only once.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    result = None\n\n    # Traverse through the array and count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n\n        # Check if the current element appears only once\n        if count == 1:\n            result = arr[i]\n\n    return result",
        "num_ids": 116
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    # Initialize the dictionary to store the count of each element\n    count = {}\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is already in the dictionary, increment its count\n        if arr[i] in count:\n            count[arr[i]] += 1\n        # If the element is not in the dictionary, add it and set its count to 1\n        else:\n            count[arr[i]] = 1\n    \n    # Iterate through the dictionary to find the element that appears only once\n    for key in count:\n        if count[key] == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None",
        "num_ids": 151
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0:\n            prev = arr[i]\n            continue\n        if arr[i]!= prev:\n            if i == n-1:\n                return prev\n            next = arr[i+1]\n            return next\n        prev = arr[i]",
        "num_ids": 98
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n    # Initialize variables to keep track of the element and its frequency count\n    curr_elem = arr[0]\n    count = 1\n\n    # Loop through the array and count the frequency of each element\n    for i in range(1, len(arr)):\n        if arr[i] == curr_elem:\n            count += 1\n        elif arr[i]!= curr_elem:\n            if count == 1:\n                return curr_elem\n            curr_elem = arr[i]\n            count = 1\n\n    # Check if the last element has a frequency of 1\n    if count == 1:\n        return curr_elem\n    else:\n        return \"No element appears only once\"",
        "num_ids": 171
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    # initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # loop until the pointers meet\n    while left < right:\n        # calculate the sum of the two elements at the pointers\n        sum = arr[left] + arr[right]\n        \n        # if the sum is 0, the element appears twice, so we need to move one pointer\n        if sum == 0:\n            right -= 1\n        # if the sum is greater than 0, the element appears once on the right side, so we need to move the left pointer\n        elif sum > 0:\n            left += 1\n        # if the sum is less than 0, the element appears once on the left side, so we need to move the right pointer\n        else:\n            right -= 1\n    \n    # if the pointers meet, the element appears only once\n    return arr[left]",
        "num_ids": 203
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as an input and returns the element that appears only once.\n    \"\"\"\n    n = len(arr)\n    \n    # If the array contains all elements only once, then return the last element\n    if n == 1:\n        return arr[0]\n    \n    # If the array contains an even number of elements, then the element that appears only once will be the only one with odd frequency\n    if n % 2 == 0:\n        freq = {}\n        for i in arr:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n        for key, value in freq.items():\n            if value == 1:\n                return key\n    \n    # If the array contains an odd number of elements, then the element that appears only once will be the only one with frequency 1\n    else:\n        freq = {}\n        for i in arr:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n        for key, value in freq.items():\n            if value == 1:\n                return key",
        "num_ids": 242
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(len(arr)):\n            if i == 0 or i == len(arr)-1:\n                continue\n            elif arr[i] == arr[i-1]:\n                continue\n            elif arr[i] == arr[i+1]:\n                return arr[i]",
        "num_ids": 121
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize variables\n    count = 0\n    prev_val = None\n    \n    # Loop through the array\n    for val in arr:\n        # If this is the first occurrence of the value, increment the count\n        if prev_val is None or val!= prev_val:\n            prev_val = val\n            count += 1\n    \n    # Loop through the array again\n    for val in arr:\n        # If the count is 1, return the value\n        if count == 1 and prev_val is not None and prev_val == val:\n            return val\n        # If the count is greater than 1, decrement the count\n        elif count > 1 and prev_val is not None and prev_val == val:\n            count -= 1\n    \n    # If we reach this point, there is no element that appears only once\n    return None",
        "num_ids": 179
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    # Initialize variables for counting the frequency of each element and the element that appears only once\n    count = 0\n    element = None\n    \n    # Traverse the array and count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            count += 1\n        else:\n            if count == 1:\n                element = arr[i]\n                break\n            count = 1\n    \n    return element",
        "num_ids": 101
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    # Initialize variables to keep track of the elements that appear only once\n    element1 = None\n    element2 = None\n    \n    # Initialize a variable to keep track of the count of each element\n    count = 0\n    \n    # Iterate over the array and count the occurrences of each element\n    for num in arr:\n        if count == 0:\n            element1 = num\n            count += 1\n        elif count == 1:\n            element2 = num\n            count += 1\n        else:\n            # If we reach this point, it means we found an element that appears three times\n            return None\n    \n    # If the count of element1 is 1 and the count of element2 is 2, return element1\n    if count == 2 and element1 and arr.count(element1) == 1 and arr.count(element2) == 2:\n        return element1\n    else:\n        return None",
        "num_ids": 192
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 126
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[i][1]) * abs(list1[j][0]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 130
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 124
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 128
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 140
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 126
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(lst[i][1] * lst[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 112
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 138
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product",
        "num_ids": 130
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 124
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        sum_divisors = sum(i for i in range(1, num) if num % i == 0)\n        if sum_divisors > num and num == sum(i for i in range(1, sum_divisors+1) if sum_divisors % i == 0):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)",
        "num_ids": 145
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a list of all the divisors of n, including 1 and n.\n    \"\"\"\n    divs = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n // i:\n                divs.append(n // i)\n    divs.append(n)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified limit.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        div_sum = sum(divisors(i))\n        if div_sum!= i and div_sum < limit and divisors(div_sum) == [div_sum]:\n            amicable_sum += div_sum + i\n    return amicable_sum",
        "num_ids": 219
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Check if a number is amicable number.\n    A number is amicable number if the sum of its proper divisors is equal to the sum of the number's divisors.\n    \"\"\"\n    sum_proper_divisors = 0\n    sum_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            if i == num // i:\n                sum_proper_divisors += i\n            sum_divisors += i\n    return sum_proper_divisors == sum_divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total_sum = 0\n    for num in range(1, limit):\n        if is_amicable_number(num):\n            total_sum += num\n    return total_sum",
        "num_ids": 213
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    \n    # Loop through all numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        \n        # Check if i is a perfect number\n        if i == sum(int(digit) for digit in str(i)):\n            # Sum of all divisors of i\n            divisors_sum = sum([num for num in range(1, i) if i % num == 0])\n            \n            # Check if divisors_sum is also a perfect number and not equal to i\n            if divisors_sum == sum(int(digit) for digit in str(divisors_sum)) and divisors_sum!= i:\n                # Add i and divisors_sum to the sum_amicable_numbers variable\n                sum_amicable_numbers += i + divisors_sum\n    \n    return sum_amicable_numbers",
        "num_ids": 232
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_amicable_numbers(limit):\n    \"\"\"\n    This function returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n\n    for i in range(2, limit+1):\n        if sum(divisor for divisor in range(1, i//2 + 1) if i % divisor == 0) == i:\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n\nprint(sum_of_amicable_numbers(10000))",
        "num_ids": 130
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if the given number is amicable or not.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            divisors.append(i)\n            if num // i!= i:\n                divisors.append(num // i)\n    sum_of_divisors = sum(divisors)\n    if sum_of_divisors == num:\n        return True\n    return False\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            total_sum += i\n    return total_sum",
        "num_ids": 197
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisors(num):\n    \"\"\"Return a list of all divisors of num.\"\"\"\n    divs = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divs.append(i)\n    return divs\n\ndef sum_divisors(num):\n    \"\"\"Return the sum of all divisors of num.\"\"\"\n    return sum(divisors(num))\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers from 1 to limit.\"\"\"\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num!= sum_divisors(num) and sum_divisors(sum_divisors(num)) == num:\n            amicable_sum += num\n    return amicable_sum",
        "num_ids": 188
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        div1 = sum_divisors(i)\n        div2 = sum_divisors(div1)\n        if div1 < limit and i == div2 and div1!= i:\n            sum += i + div1\n    return sum\n\ndef sum_divisors(n):\n    '''\n    Calculate the sum of the divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum",
        "num_ids": 163
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    # Create a list of all numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n    # Create a dictionary to store the amicable pairs and their sum\n    amicable_pairs = {}\n    # Iterate over all numbers in the list\n    for i in numbers:\n        # Check if the number is already in the dictionary\n        if i not in amicable_pairs:\n            # Calculate the sum of the divisors of the number\n            divisors_sum = sum([x for x in numbers if x < i and i % x == 0])\n            # Check if the sum is equal to the number and not 1 (which would be a self-number)\n            if divisors_sum == i and divisors_sum!= 1:\n                # Add the pair to the dictionary with the sum as value\n                amicable_pairs[i] = divisors_sum\n    # Sum all amicable pairs\n    amicable_sum = sum(amicable_pairs.values())\n    # Return the sum\n    return amicable_sum",
        "num_ids": 246
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    # Create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n    # Loop through all numbers in the list\n    for i in numbers:\n        # Check if i is amicable\n        j = sum(divisors(i))\n        if j < limit and j!= i and i == sum(divisors(j)):\n            # Add i and j to the amicable sum\n            amicable_sum += i + j\n    return amicable_sum\n\ndef divisors(n):\n    \"\"\"\n    Return a list of all divisors of a number.\n    \"\"\"\n    divs = []\n    # Loop through all numbers from 1 to n/2\n    for i in range(1, n//2+1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            divs.append(i)\n    return divs",
        "num_ids": 245
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle",
        "num_ids": 49
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))\n",
        "num_ids": 46
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle between them in degrees.\n    \"\"\"\n    return cmath.phase(a/b)*180/cmath.pi",
        "num_ids": 55
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)",
        "num_ids": 43
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b)",
        "num_ids": 43
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)",
        "num_ids": 46
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.polar(a)[1]",
        "num_ids": 41
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)",
        "num_ids": 47
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            zeros = sub_str.count('0')\n            ones = sub_str.count('1')\n            diff = abs(zeros-ones)\n            if diff > max_len:\n                max_len = diff\n    return max_len",
        "num_ids": 105
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    curr_length = 1\n    prev = string[0]\n    for i in range(1, n):\n        if string[i] == prev:\n            curr_length += 1\n        else:\n            max_length = max(max_length, curr_length)\n            curr_length = 1\n        prev = string[i]\n    max_length = max(max_length, curr_length)\n    return max_length - 1",
        "num_ids": 154
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        elif string[i] == '1':\n            current_length -= 1\n            if -current_length > max_length:\n                max_length = -current_length\n    return max_length",
        "num_ids": 146
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_length = 0\n    curr_length = 0\n    prev_bit = ''\n    for bit in string:\n        if bit == prev_bit:\n            curr_length += 1\n        else:\n            curr_length = 1\n            prev_bit = bit\n        max_length = max(max_length, curr_length)\n    return max_length",
        "num_ids": 85
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            curr_len = j-i\n            count_0 = string[i:j].count('0')\n            count_1 = string[i:j].count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len",
        "num_ids": 114
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            zeros = substring.count('0')\n            ones = substring.count('1')\n            length = abs(zeros - ones)\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 96
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            length = abs(zeros - ones)\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 102
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0s += 1\n            elif string[j] == '1':\n                count_1s += 1\n            if count_0s - count_1s > max_length:\n                max_length = count_0s - count_1s\n    return max_length",
        "num_ids": 127
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count('0')\n            one_count = sub_string.count('1')\n            difference = abs(zero_count - one_count)\n            if difference > max_length:\n                max_length = difference\n    return max_length",
        "num_ids": 150
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    # Initialize variables for the maximum length and the current length\n    max_length = 0\n    current_length = 0\n    # Loop through the string and check if the current character is the same as the previous character\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            # If it is, increment the current length by 1\n            current_length += 1\n        else:\n            # If it's different, update the maximum length if necessary and reset the current length to 1\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    # Update the maximum length if necessary\n    if current_length > max_length:\n        max_length = current_length\n    # Return the maximum length\n    return max_length",
        "num_ids": 182
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    # Find the list of common divisors of a and b.\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Return the sum of common divisors.\n    return sum(divisors)",
        "num_ids": 119
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input, and returns the sum of their common divisors.\n    \"\"\"\n    # Find all the common divisors of a and b\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n\n    # Sum the common divisors\n    return sum(divisors)",
        "num_ids": 108
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find common divisors of two numbers\n    def common_divisors(x,y): \n        divisors = []\n        for i in range(1, min(x,y)+1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # find common divisors of a and b\n    divisors_a = common_divisors(a,b)\n\n    # sum of common divisors of a and b\n    sum_divisors = sum(divisors_a)\n\n    return sum_divisors",
        "num_ids": 169
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lcm = (a*b)//__import__('math').gcd(a,b)\n    return sum(range(1,lcm+1))",
        "num_ids": 64
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the maximum number among a and b\n    max_num = max(a, b)\n    \n    # Find the minimum number among a and b\n    min_num = min(a, b)\n    \n    # Find the sum of common divisors\n    sum_common_divisors = 0\n    \n    # Loop through all the numbers from min_num to max_num (inclusive)\n    for i in range(min_num, max_num+1):\n        \n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            \n            # If yes, add i to the sum of common divisors\n            sum_common_divisors += i\n    \n    # Return the sum of common divisors\n    return sum_common_divisors",
        "num_ids": 201
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function returns the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the set of prime factors for both the numbers.\n    prime_factors_a = set()\n    for i in range(2, a+1):\n        while a % i == 0:\n            prime_factors_a.add(i)\n            a //= i\n\n    prime_factors_b = set()\n    for i in range(2, b+1):\n        while b % i == 0:\n            prime_factors_b.add(i)\n            b //= i\n\n    # Finding the intersection of two sets of prime factors.\n    common_prime_factors = prime_factors_a.intersection(prime_factors_b)\n\n    # Calculating the sum of common prime factors.\n    return sum(common_prime_factors)",
        "num_ids": 197
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    This function takes two integers as input and returns the sum of common divisors of the two numbers.\n    '''\n    # Find the maximum number\n    max_num = max(a,b)\n\n    # Find the minimum number\n    min_num = min(a,b)\n\n    # Initialize the sum\n    sum_of_divisors = 0\n\n    # Loop through all numbers from min_num to max_num\n    for i in range(min_num, max_num+1):\n\n        # Check if i is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n\n            # Add i to the sum_of_divisors\n            sum_of_divisors += i\n\n    # Return the sum of divisors\n    return sum_of_divisors",
        "num_ids": 182
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get the set of prime factors for each number\n    factors_a = set(prime_factors(a))\n    factors_b = set(prime_factors(b))\n    \n    # Find the intersection of the two sets of factors\n    common_factors = factors_a.intersection(factors_b)\n    \n    # Sum the common factors\n    sum_of_divisors = sum(common_factors)\n    \n    return sum_of_divisors",
        "num_ids": 127
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of the two numbers.\n    \"\"\"\n    # Create an empty list to store the common divisors\n    common_divisors = []\n    \n    # Find the greatest common divisor using Euclid's algorithm\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    # Find the sum of common divisors\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n            \n    # Calculate the sum of common divisors\n    sum_divisors = sum(common_divisors)\n    \n    # Return the sum of common divisors\n    return sum_divisors",
        "num_ids": 203
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n    \"\"\"\n    return x * y",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n\nprint(multiply_int(2, 3)) # Output: 6",
        "num_ids": 50
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "num_ids": 32
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers x and y.\n    '''\n    return x * y",
        "num_ids": 30
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes two arguments:\n    n: an integer indicating the maximum length of words to be considered.\n    str: a string containing a list of words separated by spaces.\n\n    It returns a list of words that are longer than n characters from the given list of words.\n    \"\"\"\n    word_list = str.split() # split the string into a list of words\n    result = [] # create an empty list to store the long words\n    for word in word_list:\n        if len(word) > n: # check if the word is longer than n characters\n            result.append(word) # add the long word to the result list\n    return result # return the result list containing the long words",
        "num_ids": 157
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "num_ids": 76
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "num_ids": 70
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into words\n    long_words = [] # Initialize an empty list to store the long words\n    for word in words:\n        if len(word) > n: # Check if the length of the word is greater than n\n            long_words.append(word) # Add the long word to the list\n    return long_words # Return the list of long words",
        "num_ids": 119
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n    \n    # Check if the sum of each row is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Check if the sum of the main diagonal is equal to the sum of the secondary diagonal\n    main_diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    secondary_diagonal_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if main_diagonal_sum!= secondary_diagonal_sum:\n        return False\n    \n    # If all checks passed, the matrix is a magic square\n    return True",
        "num_ids": 264
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    \n    # Check for all possible magic sums\n    for i in range(1, n**2):\n        if magic_sum == i * (n**2):\n            magic_sum = sum(my_matrix[i//n][i%n])\n            if magic_sum!= i * (n**2):\n                return False\n        else:\n            return False\n    \n    # Check for the diagonals\n    for i in range(n):\n        magic_sum = my_matrix[i][i] + my_matrix[i][n-i-1]\n        if magic_sum!= i * (n**2):\n            return False\n    \n    for i in range(n-1, 0, -1):\n        magic_sum = my_matrix[i][i] + my_matrix[i][n-i-1]\n        if magic_sum!= i * (n**2):\n            return False\n    \n    return True",
        "num_ids": 245
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for i in range(size):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= magic_sum:\n            return False\n        col_sum = sum(my_matrix[j][i] for j in range(size))\n        if col_sum!= magic_sum:\n            return False\n    diagonal1_sum = sum(my_matrix[i][i] for i in range(size))\n    if diagonal1_sum!= magic_sum:\n        return False\n    diagonal2_sum = sum(my_matrix[i][size-1-i] for i in range(size))\n    if diagonal2_sum!= magic_sum:\n        return False\n    return True",
        "num_ids": 202
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if each sum is equal to the sum of the diagonal elements\n    if sum(row_sums)!= sum(col_sums) or sum(row_sums)!= sum(my_matrix[i][i] for i in range(len(my_matrix))):\n        return False\n    \n    # Check if each sum is equal to the sum of the anti-diagonal elements\n    if sum(row_sums)!= sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))):\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True",
        "num_ids": 236
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a 2D matrix as input and returns True if the matrix is a magic square, else False.\n    '''\n    n = len(my_matrix)\n    # calculate the sum of each row and column\n    row_sum = [sum(my_matrix[i]) for i in range(n)]\n    col_sum = [sum([my_matrix[i][j] for i in range(n)]) for j in range(n)]\n    # check if sum of each row and column is the same as the sum of the diagonal\n    diagonal_sum = sum([my_matrix[i][i] for i in range(n)])\n    if row_sum == col_sum and row_sum == [2*n**2]*n and diagonal_sum == 2*n**2:\n        return True\n    else:\n        return False",
        "num_ids": 195
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if sum of rows and columns is the same for all elements\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(row[i] for row in my_matrix)\n        if row_sum!= col_sum:\n            return False\n    \n    # check if sum of diagonals is the same\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    return True",
        "num_ids": 219
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n*n + 1) // 2\n    \n    # calculate row and column sums\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # check whether the sum of row and column sums is equal to the magic sum\n    return row_sums == col_sums == [magic_sum] * n",
        "num_ids": 149
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_row = [sum(row) for row in my_matrix]\n    sum_col = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    if sum_row!= sum_col:\n        return False\n    \n    magic_sum = n*(n**2+1)//2\n    total_sum = sum(sum(row) for row in my_matrix)\n    \n    if total_sum!= magic_sum:\n        return False\n    \n    return True",
        "num_ids": 147
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it is a magic square and False otherwise.\n    A magic square is a square grid with the same sum in each row, column, and diagonal.\n    \"\"\"\n    # Calculate the sum of each row, column, and diagonal\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if the sum of each row, column, and diagonal is the same\n    return row_sums == col_sums == [diagonal_sum1, diagonal_sum2]",
        "num_ids": 237
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_magic_square(matrix):\n    \"\"\"\n    Check if a matrix is a magic square.\n\n    Args:\n        matrix (list): A 2D list representing a square matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n\n    # Check if the matrix is square\n    if not all(len(row) == n for row in matrix):\n        return False\n\n    # Calculate the sum of the elements in the main diagonal\n    main_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the elements in the secondary diagonal\n    sec_sum = sum(matrix[i][n-i-1] for i in range(n))\n\n    # Check if the sums are equal\n    if main_sum!= sec_sum:\n        return False\n\n    # Calculate the sum of the elements in the first row\n    row_sum = sum(matrix[0])\n\n    # Check if the sum of the elements in the first row is equal to n*(n^2+1)/2\n    if row_sum!= n * (n**2 + 1) // 2:\n        return False\n\n    # Calculate the sum of the elements in the first column\n    col_sum = sum(matrix[i][0] for i in range(n))\n\n    # Check if the sum of the elements in the first column is equal to n*(n^2+1)/2\n    if col_sum!= n * (n**2 + 1) // 2:\n        return False\n\n    # If all the checks passed, the matrix is a magic square\n    return True",
        "num_ids": 351
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num",
        "num_ids": 104
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int) # create a default dictionary with default value of 0\n    for num in nums:\n        count_dict[num] += 1 # increment the count of each element in the list\n    max_num = None\n    max_count = 0\n    for num, count in count_dict.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num",
        "num_ids": 131
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [item for item, count in freq.items() if count == max_freq]\n    return max_items[0]",
        "num_ids": 98
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num in freq:\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    return max_num",
        "num_ids": 106
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    \n    return max_item",
        "num_ids": 104
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the count of each item in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n        \n    # find the maximum count and corresponding item\n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n            \n    return max_item",
        "num_ids": 108
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num",
        "num_ids": 88
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_nums = [num for num, count in freq.items() if count == max_freq]\n    return max_nums",
        "num_ids": 95
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    \n    return max_num",
        "num_ids": 84
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n\n    vowel_indices.reverse()\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str += str1[vowel_indices[vowels.index(str1[i])]]\n        else:\n            new_str += str1[i]\n    return new_str",
        "num_ids": 143
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    left, right = 0, len(str1)-1\n    while left < right:\n        if str1_list[left] in vowels and str1_list[right] in vowels and str1_list[left]!= str1_list[right]:\n            str1_list[left], str1_list[right] = str1_list[right], str1_list[left]\n            left += 1\n            right -= 1\n        elif str1_list[left] in vowels:\n            right -= 1\n        elif str1_list[right] in vowels:\n            left += 1\n    return ''.join(str1_list)",
        "num_ids": 184
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, letter in enumerate(str1) if letter in vowels]\n    new_str = str1\n    for i in vowel_indices:\n        if str1[i] == 'y':\n            continue\n        new_str = new_str[:i] + str1[i].lower() + new_str[i+1:]\n    return new_str",
        "num_ids": 110
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n    return \"\".join(s)",
        "num_ids": 122
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i in range(len(str1)) if str1[i].lower() in vowels]\n    str1_list = list(str1)\n    for i in vowel_indices:\n        str1_list[i], str1_list[i+1] = str1_list[i+1], str1_list[i]\n    reversed_str = ''.join(str1_list)\n    return reversed_str",
        "num_ids": 134
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_list = []\n    vowels_indices = []\n\n    # Find all vowels in the string and store their indices in a list\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n            vowels_indices.append(i)\n\n    # Reverse the vowels in the string and store them in a list\n    reversed_vowels = []\n    for i in vowels_indices:\n        reversed_vowels.append(str1[i])\n\n    # Replace the original vowels with the reversed vowels in the original string\n    for i in range(len(vowels_indices)):\n        str1 = str1[:vowels_indices[i]] + reversed_vowels[i] + str1[vowels_indices[i]+1:]\n\n    # Return the modified string\n    return str1",
        "num_ids": 255
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels and char!= 'y':\n            new_string += char[::-1]\n        else:\n            new_string += char\n    return new_string",
        "num_ids": 71
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = [char for char in str1 if char in vowels]\n    reversed_vowels = vowel_list[::-1]\n    result = \"\".join(str1.split(vowels))\n    for vowel in reversed_vowels:\n        result = result.replace(vowel, \"\", 1)\n        result += vowel\n    return result",
        "num_ids": 106
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # create an empty list to store vowel indices\n    vowel_indices = []\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # if the character is a vowel\n        if char in vowels:\n            # add its index to the list\n            vowel_indices.append(i)\n    # reverse the vowel indices in the list\n    vowel_indices.reverse()\n    # create an empty string to store the modified string\n    modified_str = \"\"\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # if the character is a vowel and its index is in the list of vowel indices\n        if char in vowels and i in vowel_indices:\n            # append the reversed vowel to the modified string\n            modified_str += vowels[vowels.index(char):][::-1]\n        else:\n            # otherwise, append the original character to the modified string\n            modified_str += char\n    return modified_str",
        "num_ids": 244
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, letter in enumerate(str1) if letter in vowels]\n    reversed_vowels = [str1[i] for i in vowel_indices[::-1]]\n    for i in vowel_indices:\n        str1 = str1[:i] + reversed_vowels.pop(0) + str1[i+1:]\n    return str1",
        "num_ids": 113
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an argument and converts it to a string.\n    '''\n    tup_list = list(tup1)\n    string = ''.join(map(str, tup_list))\n    return string",
        "num_ids": 56
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n    \"\"\"\n    result = \"\"\n    for i in tup1:\n        result += str(i) + \",\"\n    result = result[:-1]\n    return result",
        "num_ids": 56
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string representation of the tuple.\n    \"\"\"\n    # Convert the tuple to a string using the join() method with a separator.\n    return ','.join(map(str, tup1))",
        "num_ids": 60
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and converts it to a string.\n    \"\"\"\n    string1 = ''\n    for i in tup1:\n        string1 += str(i) +''\n    return string1.strip()",
        "num_ids": 57
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n            \n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum",
        "num_ids": 63
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum",
        "num_ids": 59
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum",
        "num_ids": 65
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the sum of the negative numbers in the list.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum",
        "num_ids": 69
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * ((2*n) - 1)\n    return hex_num",
        "num_ids": 48
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = n * (2 * n - 1)\n    return hexagonal_num",
        "num_ids": 51
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i * (2 * i - 1)\n        count += 1\n        if count == n:\n            return hex_num\n        i += 1",
        "num_ids": 84
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 1\n    count = 1\n    while count <= n:\n        hex_num += 6*count\n        count += 1\n    return hex_num",
        "num_ids": 64
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = n*(2*n-1)\n    return hexagonal_num",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    hex_num = 1\n    while count < n:\n        hex_num += count\n        count += 1\n    return hex_num",
        "num_ids": 61
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    This function takes an integer n as input and returns the nth hexagonal number.\n    '''\n    i = 1\n    while True:\n        hex_num = i*(2*i - 1)\n        if hex_num >= n:\n            return hex_num\n        i += 1",
        "num_ids": 73
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num",
        "num_ids": 43
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = nums.count(0)\n    total = len(nums)\n    ratio = count / total\n    return ratio",
        "num_ids": 39
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 72
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes",
        "num_ids": 110
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero",
        "num_ids": 99
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    ratio = zero_count / non_zero_count\n    \n    return ratio",
        "num_ids": 92
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes",
        "num_ids": 110
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n            \n    if count_zeroes == 0:\n        return \"Cannot divide by zero!\"\n    else:\n        return count_zeroes / count_non_zeroes",
        "num_ids": 126
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    non_zero_count = len(nums) - zero_count\n    return zero_count / non_zero_count",
        "num_ids": 67
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    if count_non_zeroes == 0:\n        return \"Error: Array contains only zeroes\"\n    else:\n        return count_zeroes / count_non_zeroes",
        "num_ids": 131
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return \"Error: Array contains only zeroes\"\n    else:\n        return zero_count / non_zero_count",
        "num_ids": 124
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary_num = bin(n)[2:]\n    \n    # Check if the number is a sum of powers of 2\n    for i in range(len(binary_num)):\n        if binary_num[i] == '1' and i!= len(binary_num) - 1:\n            return False\n    return True",
        "num_ids": 100
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number can be represented as a sum of non-zero powers of 2.\n    Otherwise, it returns False.\n\n    Parameters:\n        n (int): An integer value.\n\n    Returns:\n        bool: True if the given number can be represented as a sum of non-zero powers of 2, otherwise False.\n    \"\"\"\n    # Initialize a list to store the powers of 2\n    powers_of_two = []\n\n    # Find all the powers of 2 in the given number\n    while n > 0:\n        if n & 1 == 0:\n            powers_of_two.append(1)\n            n >>= 1\n        else:\n            break\n\n    # Check if the number is a sum of non-zero powers of 2 or not\n    if len(powers_of_two) == 0:\n        return False\n    else:\n        for i in range(1, len(powers_of_two)):\n            if powers_of_two[i] == 1:\n                return False\n        return True",
        "num_ids": 246
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a set of powers of 2\n    powers = set()\n    # Iterate from 1 to n and add all powers of 2 to the set\n    for i in range(1, n+1):\n        powers.add(2**i)\n    # Check if the given number is equal to the sum of all powers of 2 in the set\n    if n in powers:\n        return True\n    else:\n        return False",
        "num_ids": 135
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if n & (1 << i):\n            count += 1\n        i += 1\n    if count == 1:\n        return True\n    else:\n        return False",
        "num_ids": 99
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the remainder\n    remainder = n\n\n    # Initialize a variable to store the number of powers of 2\n    power = 0\n\n    # Loop until the remainder is 0\n    while remainder!= 0:\n        # Check if the remainder is even or odd\n        if remainder % 2 == 0:\n            remainder /= 2\n            power += 1\n        else:\n            remainder = (remainder - 1) / 2\n            power += 1\n\n    # Check if the given number is a sum of non-zero powers of 2 or not\n    if power == n:\n        return True\n    else:\n        return False",
        "num_ids": 181
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the remainder after dividing the number by 2\n    remainder = n % 2\n    \n    # Check if the remainder is zero and n is not zero\n    if remainder == 0 and n!= 0:\n        # Initialize a variable to store the count of non-zero powers of 2\n        count = 0\n        \n        # Loop until the remainder is zero\n        while remainder!= 0:\n            # If the remainder is 1, increment the count of non-zero powers of 2 by 1\n            if remainder == 1:\n                count += 1\n            \n            # Divide the remainder by 2 to obtain the next power of 2\n            remainder = remainder // 2\n            \n        # Check if the count of non-zero powers of 2 is even or odd\n        if count % 2 == 0:\n            # The number can be represented as sum of non-zero powers of 2\n            return True\n        else:\n            # The number cannot be represented as sum of non-zero powers of 2\n            return False\n    \n    # If the remainder is not zero or n is zero, then the number cannot be represented as sum of non-zero powers of 2\n    else:\n        return False",
        "num_ids": 299
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function will return True if the given number can be represented as sum of non-zero powers of 2, otherwise it will return False.\n\n    Args:\n    n (int): The number which needs to be checked.\n\n    Returns:\n    bool: True if the given number can be represented as sum of non-zero powers of 2, otherwise it will return False.\n    \"\"\"\n\n    # Check if the given number is a power of 2 or not.\n    if n == 0:\n        return False\n\n    # Find the largest power of 2 that divides the given number.\n    power_of_2 = 1\n    while n >= 2*power_of_2:\n        power_of_2 *= 2\n\n    # Check if the largest power of 2 is equal to the given number or not.\n    if power_of_2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 209
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Loop through all powers of 2\n    for i in range(2, 2**32):\n        # Check if the power of 2 is less than or equal to the given number\n        if 2**i <= n:\n            # Add the power of 2 to the sum\n            sum_of_powers += 2**i\n            \n            # Check if the sum is equal to the given number\n            if sum_of_powers == n:\n                return True\n    \n    # If the sum is not equal to the given number, return False\n    return False",
        "num_ids": 189
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to keep track of sum of powers of 2\n    power_sum = 0\n    \n    # Loop through all the powers of 2\n    for i in range(32):\n        # Check if the power of 2 is less than or equal to n\n        if 2 ** i <= n:\n            # Add the power of 2 to the sum\n            power_sum += 2 ** i\n        else:\n            # If n is not a power of 2, then it cannot be represented as sum of powers of 2\n            return False\n    \n    # If the sum of powers of 2 equals n, then it can be represented as sum of powers of 2\n    if power_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 206
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    powers = []\n    while n > 0:\n        if n % 2 == 1:\n            powers.append(2)\n        n = n // 2\n    \n    # check if all elements in the list are powers of 2\n    return all(power == 2 for power in powers)",
        "num_ids": 110
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and returns a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flattened_list.append(num)\n    return set(flattened_list)",
        "num_ids": 77
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for elem in test_list:\n        if type(elem) == int or type(elem) == float:\n            result.append(elem)\n        elif type(elem) == list:\n            for item in elem:\n                result.append(item)\n    return result",
        "num_ids": 92
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list",
        "num_ids": 68
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return flattened_list",
        "num_ids": 71
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return set(result)",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.extend(extract_singly(sublist))\n        else:\n            result.append(sublist)\n    return result",
        "num_ids": 81
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list",
        "num_ids": 68
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flat_list.append(num)\n    return flat_list",
        "num_ids": 70
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_set = set()\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_set.update(extract_singly(item))\n        else:\n            flattened_set.add(item)\n    return flattened_set",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes in a list of lists and returns a flattened list of integers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list",
        "num_ids": 69
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop through the list of numbers from the beginning to the second to last element\n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # If the maximum element is not at the beginning of the list, flip it to the beginning\n        if max_index!= 0:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # If the maximum element is at the beginning of the list, flip it to the end\n        else:\n            nums = nums[::-1]\n        # After flipping the maximum element to the beginning or end, reverse the entire list to put the maximum element at the end\n        nums = nums[::-1]\n    return nums",
        "num_ids": 214
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:i]))\n        # Flip the maximum element to the beginning of the list\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # Flip the entire list from 0 to max_idx\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n    return nums",
        "num_ids": 148
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:i]))\n        # Move the maximum element to the end of the list\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # Move the maximum element to its correct position\n        nums = nums[:i][::-1] + nums[i:]\n    return nums",
        "num_ids": 144
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start with the largest element and move it to the end of the list\n    for i in range(n, 1, -1):\n        max_index = i - 1\n        max_value = nums[max_index]\n        # Find the index of the largest element in the unsorted part of the list\n        for j in range(0, max_index):\n            if nums[j] > max_value:\n                max_index = j\n        # If the largest element is already at the end of the list, we're done\n        if max_index == i - 1:\n            continue\n        # Otherwise, flip the largest element to the end of the list\n        for k in range(max_index + 1):\n            nums[k], nums[max_index] = nums[max_index], nums[k]\n        # Finally, flip the entire list from the start to the index of the largest element\n        for l in range(max_index + 1):\n            nums[l], nums[max_index] = nums[max_index], nums[l]\n    return nums",
        "num_ids": 267
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    \n    # Find the index of the maximum element in the list\n    max_index = 0\n    for i in range(n):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    \n    # Reverse the sublist starting from the index of the maximum element\n    for i in range(max_index + 1, n):\n        nums[i-max_index-1], nums[i] = nums[i], nums[i-max_index-1]\n    \n    # Reverse the whole list\n    for i in range(max_index + 1):\n        nums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n    \n    return nums",
        "num_ids": 192
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n\n    # Reverse the entire list\n    for i in range(n // 2):\n        reverse(nums, i)\n\n    # One by one, move the maximum element to its correct position\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted array\n        max_index = nums.index(max(nums[:i+1]))\n\n        # Move the maximum element to its correct position\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n\n            # Reverse the sub-list from 0 to max_index\n            reverse(nums, max_index)\n\n    return nums\n\ndef reverse(nums, start):\n    \"\"\"\n    Reverses a sub-list of the given list starting from the given index.\n    \"\"\"\n    end = len(nums) - 1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1",
        "num_ids": 262
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    :param nums: The list of elements to be sorted.\n    :return: The sorted list.\n    \"\"\"\n    n = len(nums)\n\n    # Iterate through the list from the beginning to the end.\n    for i in range(n):\n        # Find the index of the maximum element in the remaining list.\n        max_index = nums.index(max(nums[i:]))\n\n        # If the maximum element is not at the end of the list, flip the maximum element to the end.\n        if max_index!= n - i - 1:\n            # Flip the maximum element to the end.\n            nums[max_index], nums[n - i - 1] = nums[n - i - 1], nums[max_index]\n\n            # Reverse the first i + 1 elements.\n            nums[:i + 1] = nums[:i + 1][::-1]\n\n    return nums",
        "num_ids": 219
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    \n    # Reverse the array up to the index of the maximum element\n    for i in range(n // 2):\n        flip(nums, i)\n    \n    # Iterate over the array from the end to the beginning\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the array\n        max_idx = nums.index(max(nums[:i+1]))\n        \n        # If the maximum element is not at the end of the array, flip it to the end\n        if max_idx!= i:\n            flip(nums, max_idx)\n        \n        # Flip the whole array up to the index of the maximum element\n        flip(nums, i)\n    \n    return nums\n\ndef flip(nums, k):\n    \"\"\"\n    Flip the elements of the array up to index k.\n    \"\"\"\n    left = 0\n    right = k\n    \n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1",
        "num_ids": 254
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[i:]))\n        # Move the maximum element to the end of the list\n        nums[i:max_index+1] = reversed(nums[i:max_index+1])\n        # Reverse the first i+1 elements to sort the list\n        nums[:i+1] = reversed(nums[:i+1])\n    return nums",
        "num_ids": 147
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the maximum element in remaining unsorted array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Move the maximum element to the end of the array\n        if max_idx!= i:\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            # Reverse the sub-array from 0 to i\n            nums[i+1:] = nums[i::-1]\n    return nums",
        "num_ids": 167
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 95
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of identical elements in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as an input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function finds the number of lists present in the given tuple.\n\n    Parameters:\n    Input (tuple): A tuple containing elements of different data types.\n\n    Returns:\n    int: The number of lists present in the input tuple.\n    \"\"\"\n\n    count = 0\n\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n\n    return count",
        "num_ids": 86
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for element in Input:\n        if type(element) == list:\n            count += 1\n    \n    return count",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    This function finds the number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    arr_sorted = sorted(arr)  # Sort the array\n    diff_arr = []\n    for i in range(len(arr_sorted)-1):\n        diff = abs(arr_sorted[i+1] - arr_sorted[i])  # Calculate the difference between two adjacent elements\n        diff_arr.append(diff)  # Add the difference to the diff_arr\n    return max(diff_arr)  # Return the maximum difference in the diff_arr",
        "num_ids": 136
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[j]-arr[i]) > max_diff:\n                max_diff = abs(arr[j]-arr[i])\n                \n    return max_diff",
        "num_ids": 102
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_sorted = sorted(arr)\n    max_diff = abs(arr_sorted[0] - arr_sorted[-1])\n    for i in range(1, len(arr_sorted)-1):\n        diff = abs(arr_sorted[i] - arr_sorted[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "num_ids": 117
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 100
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_diff_arr = []\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            abs_diff_arr.append(abs(arr[i]-arr[j]))\n            \n    return max(abs_diff_arr)",
        "num_ids": 97
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff",
        "num_ids": 98
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[j]-arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 101
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "num_ids": 97
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return (x, y)\n    return None",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    for x in range(n+1):\n        y = (n-a*x)//b\n        if a*x + b*y == n:\n            return (x, y)\n    return None",
        "num_ids": 55
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return (n, 0)\n    else:\n        x = n // b\n        y = n - x * b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None",
        "num_ids": 115
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b!= 0:\n        if n % b == 0:\n            x = 0\n            y = n // b\n            return (x, y)\n        else:\n            return None\n    elif b == 0 and a!= 0:\n        if n % a == 0:\n            x = n // a\n            y = 0\n            return (x, y)\n        else:\n            return None\n    else:\n        if a!= 0 and b!= 0:\n            delta = b**2 - 4*a*n\n            if delta >= 0:\n                x1 = (-b + delta**0.5) / (2*a)\n                x2 = (-b - delta**0.5) / (2*a)\n                y1 = n // (x1*a + b)\n                y2 = n // (x2*a + b)\n                if x1 == x2 and y1 == y2:\n                    return (x1, y1)\n                else:\n                    return ((x1, y1), (x2, y2))\n            else:\n                return None",
        "num_ids": 284
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        y = (n - a*x) // b\n        if y >= 0:\n            return (x, y)\n    return None",
        "num_ids": 82
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None",
        "num_ids": 78
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n    return None",
        "num_ids": 90
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (n - b*x) % a == 0:\n            y = (n - b*x) // a\n            return (x, y)\n    return None",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x) % b == 0:\n            y = (a*x) // b\n            return (x, y)\n    return None",
        "num_ids": 88
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if a*x % n == b:\n            return (x, n//a)\n    return None",
        "num_ids": 77
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 56
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all the elements from the first list which are present in the second list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 67
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 55
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are also in list2.\n    \"\"\"\n    # Create a set from list2 to make it faster to check if elements are in it\n    set2 = set(list2)\n    # Use list comprehension to create a new list with only elements from list1 that are not in list2\n    return [elem for elem in list1 if elem not in set2]",
        "num_ids": 97
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list which contains all the elements of the first list except those elements which are present in the second list.\n    '''\n\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n\n    return new_list",
        "num_ids": 84
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are also present in list2.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 57
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from the first list that are present in the second list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "num_ids": 66
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 1:\n        raise ValueError(\"n must be an even number\")\n    else:\n        return n * (n // 2)\n",
        "num_ids": 98
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Returns the sum of the series (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return sum([i for i in range(n//2+1)])",
        "num_ids": 79
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, \n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total",
        "num_ids": 95
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n * (n + 1) // 2",
        "num_ids": 76
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return (n * (n + 1)) // 2",
        "num_ids": 77
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series (n - 2*i) for i from 0 to n // 2.\n    \"\"\"\n    return (n * (n + 1)) // 2",
        "num_ids": 52
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n * (n + 1) // 2",
        "num_ids": 76
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n*(n+1)) // 2",
        "num_ids": 75
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum",
        "num_ids": 94
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    return (n * (n + 1)) // 2",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    p = s * l\n    \n    # Calculate the area using the formula A = (s^2 * tan(pi/s)) / 4\n    a = (s ** 2 * tan(pi/s)) / 4\n    \n    # Return the area of the polygon\n    return a",
        "num_ids": 111
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)",
        "num_ids": 58
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)",
        "num_ids": 60
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * s * l * tan(pi / s))\n    return area\n",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\nprint(area_polygon(5, 4))",
        "num_ids": 70
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l**2 * tan(pi / s))\n    return area",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, n):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \"\"\"\n    area = (n * s**2) / (4 * tan(pi / n))\n    return area",
        "num_ids": 54
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem\n    a = l / (2 * tan(pi / s))\n    \n    # Calculate the area of the polygon\n    area = (s * a) / 2\n    \n    return area",
        "num_ids": 86
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the polygon\n    a = l / (2 * tan(pi / s))\n\n    # Calculate the area of the polygon using the formula A = (n * s^2) / 4 * tan(pi/n)\n    area = (s * a) / 2\n\n    return area",
        "num_ids": 111
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)",
        "num_ids": 60
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors",
        "num_ids": 110
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    if len(divisors) == 1:\n        return False\n\n    sum_div1 = sum(divisors[:len(divisors)//2])\n    sum_div2 = sum(divisors[len(divisors)//2:])\n\n    return sum_div1 == sum_div2",
        "num_ids": 139
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n%i == 0]\n    return sum(divisors)",
        "num_ids": 71
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1): \n        if n % i == 0: \n            sum_i = i + (n // i) \n            if sum_i == n: \n                return True \n    return False",
        "num_ids": 84
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    div_sum = sum(divisors)\n    if div_sum % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 105
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    \n    # Check if n is a prime number\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by 2\n    while n % 2 == 0:\n        div_sum += 2\n        n //= 2\n        \n    # Check odd divisors up to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            div_sum += i\n            n //= i\n    \n    # If n is still greater than 2, add its last prime factor to the sum\n    if n > 2:\n        div_sum += n\n        \n    # Check if the sum of the divisors is equal to the input value\n    if div_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 213
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the divisors of the input integer\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of the divisors\n    divisor_sum = sum(divisors)\n\n    # Check if the sum of the divisors is equal to the input integer\n    if divisor_sum == n:\n        return True\n    else:\n        return False",
        "num_ids": 139
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n//i)\n    return sum(divisors)\n\nprint(div_sum(12)) # Output: 14 (1+2+3+4+6)\nprint(div_sum(15)) # Output: 15 (1+3+5)\nprint(div_sum(20)) # Output: 28 (1+2+4+5+7+10)",
        "num_ids": 187
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of divisors of two integers \n    are the same and False otherwise.\n    '''\n    sum_div = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            sum_div += i\n    for j in range(1, n+1):\n        if j!= n and n%j == 0:\n            if (n/j).is_integer():\n                if sum_div == j + n//j:\n                    return True\n    return False",
        "num_ids": 134
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors) == n",
        "num_ids": 108
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # converting the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    \n    # initializing the character count list with zeros\n    char_count_list = [0] * 26\n    \n    # iterating over each character in the string\n    for char in str1:\n        # checking if the character is an alphabet\n        if ord(char) >= 97 and ord(char) <= 122:\n            # incrementing the count for the corresponding alphabet position\n            char_count_list[ord(char) - 97] += 1\n    \n    # counting the number of characters that occur at the same position as the English alphabet\n    count = 0\n    for i in range(26):\n        if char_count_list[i] > 0:\n            count += 1\n    \n    # returning the count\n    return count",
        "num_ids": 227
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    # create a list of English letters\n    eng_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    # convert the input string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(c for c in str1 if c.isalpha()).lower()\n    \n    # create a dictionary to store the counts of characters at each position\n    counts = {}\n    \n    # iterate over each character in the string\n    for i, c in enumerate(str1):\n        # if the character is an English letter, increment the count for the corresponding position in the dictionary\n        if c in eng_letters:\n            if i not in counts:\n                counts[i] = 0\n            counts[i] += 1\n    \n    # return the dictionary of counts\n    return counts",
        "num_ids": 235
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * len(alphabet)\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            index = alphabet.index(str1[i])\n            count[index] += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize an empty dictionary to store the count of each character at each position\n    count_dict = {}\n\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # convert the character to lowercase\n        char = char.lower()\n        # check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # check if the character is already in the dictionary\n            if char in count_dict:\n                # if it is, increment its count by 1\n                count_dict[char][i] += 1\n            else:\n                # if it isn't, add it to the dictionary with a count of 1 for the current position\n                count_dict[char] = [0] * len(str1)\n                count_dict[char][i] = 1\n\n    # loop through the dictionary and count the number of characters that occur at the same position as the English alphabet\n    count = 0\n    for pos_count in count_dict.values():\n        if sum(pos_count) > 0:\n            count += 1\n\n    # return the count of characters that occur at the same position as the English alphabet\n    return count",
        "num_ids": 296
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Create a dictionary with the alphabet as keys and their respective positions as values\n    alphabet = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a list to store the count of characters at each position\n    count = [0] * 26\n    \n    # Loop through each character in the string and add 1 to the count of characters at its position in the alphabet\n    for char in str1:\n        if char in alphabet:\n            count[alphabet[char]-1] += 1\n    \n    # Return the count list\n    return count",
        "num_ids": 299
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert string to lowercase and remove non-alphabetic characters\n    str1 = str1.lower()\n    str1 = ''.join(filter(str.isalpha, str1))\n\n    # create a list of characters in the alphabet\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    # create a dictionary to store the count of characters at each position\n    char_position = {}\n\n    # iterate over the string and count the number of characters at each position\n    for char in str1:\n        if char in alphabet:\n            index = alphabet.index(char)\n            if index in char_position:\n                char_position[index] += 1\n            else:\n                char_position[index] = 1\n\n    # count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(len(char_position)):\n        if i in char_position:\n            count += char_position[i]\n\n    return count",
        "num_ids": 318
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    # define a dictionary to store the character counts for each position in the English alphabet\n    char_count = {}\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # if the character is a letter in the English alphabet\n        if char.isalpha():\n            # calculate the position in the alphabet based on its index in the string\n            position = ord(char) - ord('a') + 1\n            # if the position is not already in the dictionary, add it with a count of 1\n            if position not in char_count:\n                char_count[position] = 1\n            # if the position is already in the dictionary, increment its count by 1\n            else:\n                char_count[position] += 1\n    # return the total count of characters that occur at the same position as a letter in the English alphabet\n    return sum(char_count.values())",
        "num_ids": 223
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = [0] * 26\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char)\n            char_count[index] += 1\n    return char_count",
        "num_ids": 108
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the count of each character at each position\n    char_count = {}\n    for i in range(len(str1)):\n        char = str1[i].lower()\n        if char.isalpha():\n            if char in char_count:\n                char_count[char][i] += 1\n            else:\n                char_count[char] = [0]*len(str1)\n                char_count[char][i] += 1\n\n    # Count the number of characters at the same position as in the English alphabet (case insensitive)\n    count = 0\n    for char in char_count:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += sum(char_count[char])\n\n    return count",
        "num_ids": 209
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0] * 26  # initialize the count list with zeros\n\n    # convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is an alphabet\n        if char.isalpha():\n            # get the position of the character in the English alphabet\n            pos = ord(char) - ord('a')\n            # increment the count of the character at its position in the count list\n            count[pos] += 1\n\n    # return the count list\n    return count",
        "num_ids": 174
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 69
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list A as input and returns the number of pairs of integers in A that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 96
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n                \n    return count",
        "num_ids": 67
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the smallest power of 2 greater than or equal to 'n'.\n    \"\"\"\n    power_of_2 = 1\n    \n    while power_of_2 < n:\n        power_of_2 *= 2\n        \n    return power_of_2",
        "num_ids": 78
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n-1).bit_length()",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power",
        "num_ids": 66
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function returns the smallest power of 2 that is greater than or equal to n.\n    \"\"\"\n    # Find the smallest power of 2 greater than or equal to n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    \n    return power_of_2",
        "num_ids": 85
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    \n    while (power < n):\n        power = power * 2\n        \n    return power",
        "num_ids": 58
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n & (n - 1) == 0:  # check if n is a power of 2\n        return n\n    else:\n        m = 1\n        while m < n:\n            m = m << 1  # shift m left by one bit\n        return m",
        "num_ids": 107
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in two parameters:\n    a: a list of numbers\n    x: a number to be searched for in the list\n    It returns the frequency of the number x in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list `a` and a number `x` as input and returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments:\n    - a: a list of integers\n    - x: an integer to be searched in the list\n    \n    It returns the number of times x appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 77
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes a list 'a' and a number 'x' as input and returns the number of times 'x' occurs in the list 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments: a list and a number.\n    It returns the number of occurrences of the given number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "num_ids": 53
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of the numbers in lst within the range [m, n].\n    \"\"\"\n    return sum(lst[m:n+1])",
        "num_ids": 47
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total",
        "num_ids": 62
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m # swap the indices if m > n\n    \n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    \n    return total_sum",
        "num_ids": 96
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices m and n as arguments.\n    It returns the sum of all the numbers in the list within the range of m and n (inclusive).\n    \"\"\"\n    if m > n:\n        print(\"Invalid input: m cannot be greater than n.\")\n        return None\n    \n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += lst[i]\n        \n    return total_sum",
        "num_ids": 110
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Loop through the range of indices specified by m and n\n    for i in range(m, n+1):\n        # Add the current element to the sum\n        total_sum += list1[i]\n\n    # Return the total sum\n    return total_sum",
        "num_ids": 109
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    This function takes a list and two indices m and n and returns the sum of numbers in the range [m, n]\n    of the list.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += lst[i]\n    return total",
        "num_ids": 76
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "num_ids": 68
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a pentagon and returns its perimeter.\n    '''\n    # Calculate the length of the hypotenuse using the Pythagorean theorem\n    c = math.sqrt(2 * a**2)\n    \n    # Calculate the perimeter of the pentagon using the formula: 5 * a + 2 * c\n    perimeter = 5 * a + 2 * c\n    \n    return perimeter",
        "num_ids": 109
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "num_ids": 51
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while True:\n        index = s.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 78
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    This function counts the number of times'std' occurs in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    start = s.find('std')\n    while start!= -1:\n        count += 1\n        start = s.find('std', start + 1)\n    return count",
        "num_ids": 53
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 74
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count",
        "num_ids": 49
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 81
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True",
        "num_ids": 99
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements have the same data type, and False otherwise.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 66
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    This function checks if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 81
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    \n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    \n    return True",
        "num_ids": 85
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False",
        "num_ids": 111
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2",
        "num_ids": 48
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    if x > arr[n-1]:\n        return False\n\n    count = 1\n    i = 0\n    while i < n and arr[i] <= x:\n        if arr[i] == x:\n            count += 1\n        i += 1\n\n    return count > n/2",
        "num_ids": 75
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[-1] < x:\n        return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n        elif arr[i] > x:\n            break\n            \n    return False",
        "num_ids": 132
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x <= arr[0]:\n        return False\n    if x >= arr[n-1]:\n        return False\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False",
        "num_ids": 132
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count of the element to 0\n    count = 0\n    \n    # Traverse through the array\n    for i in range(n):\n        \n        # If the current element is equal to the given element, increment the count\n        if arr[i] == x:\n            count += 1\n    \n    # If the count is greater than n/2, return True\n    if count > n//2:\n        return True\n    \n    # Otherwise, return False\n    else:\n        return False",
        "num_ids": 165
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    # Initialize count to 0\n    count = 0\n    # Traverse through all the elements of the array\n    for i in range(n):\n        # If the current element is equal to the given element, increment count by 1\n        if arr[i] == x:\n            count += 1\n        # If count becomes greater than n/2, return True (majority element found)\n        if count > n//2:\n            return True\n    # If the loop completes and count is less than n/2, return False (majority element not found)\n    return False",
        "num_ids": 133
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False",
        "num_ids": 108
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False",
        "num_ids": 108
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    if arr[n//2] == x:\n        return True\n    \n    if arr[n//2] > x:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n-n//2-1, x)",
        "num_ids": 145
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes a number as input and returns the number of set bits (binary digits with value 1) in the number.\n    \"\"\"\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes an integer as input and returns the count of set bits (binary digits with value 1) in the integer.\n    \"\"\"\n    count = 0\n    while(n):\n        if(n&1):\n            count+=1\n        n>>=1\n    return count",
        "num_ids": 70
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes a positive integer n as input and returns the number of set bits in n.\n    A set bit is a binary digit with value 1.\n    '''\n    count = 0\n    while (n):\n        count += n & 1   # Count the number of set bits in the least significant bit\n        n >>= 1          # Shift the number to the right by one bit\n    return count",
        "num_ids": 96
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        if n & 1: \n            count += 1\n        n = n >> 1\n    return count ",
        "num_ids": 72
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])",
        "num_ids": 43
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as an input and removes the characters which have odd index values.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Removes characters from the given string that have odd index values.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 54
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result",
        "num_ids": 62
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])",
        "num_ids": 60
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str",
        "num_ids": 73
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    return min(a, b, c)",
        "num_ids": 45
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as arguments and returns the minimum of the three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 67
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as arguments and returns the minimum of the three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c",
        "num_ids": 74
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Find the minimum of three numbers.\n    '''\n    return min(a, b, c)",
        "num_ids": 36
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c",
        "num_ids": 60
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)",
        "num_ids": 39
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if n & (1<<l)!= 0 or n & (1<<r)!= 0:\n        return False\n    return all_Bits_Set_In_The_Given_Range(n^(1<<l),l+1,r)\n    \n",
        "num_ids": 110
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three arguments:\n    n: An integer, representing the number to be checked for all bits set or not.\n    l: An integer, representing the starting index of the range.\n    r: An integer, representing the ending index of the range.\n\n    The function returns True if all the bits are set in the given range, else it returns False.\n    '''\n    # Creating a binary representation of n\n    binary = bin(n)[2:]\n\n    # Converting the binary string to a list of bits\n    bits = [int(bit) for bit in binary]\n\n    # Checking if all the bits in the range are set\n    for i in range(l, r+1):\n        if bits[i] == 0:\n            return False\n\n    return True",
        "num_ids": 183
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes an integer n, a range [l,r] as input and returns True if all bits in the given range are set, otherwise returns False.\n    '''\n    # Checking if all bits are set in the given range\n    if (n & ((1<<r)-1) & ((1<<l)-1)) == ((1<<r)-1) & ((1<<l)-1):\n        return True\n    else:\n        return False",
        "num_ids": 117
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    n - a number whose bits are to be checked\n    l - the left end of the range\n    r - the right end of the range\n    \n    It returns True if all bits in the given range of n are set, and False otherwise.\n    \"\"\"\n\n    # Convert n to binary and pad it with zeros to make sure it has exactly 32 bits\n    n_binary = bin(n)[2:].zfill(32)\n    \n    # Check if all bits in the given range are set or not\n    for i in range(l, r+1):\n        if n_binary[i-1] == '0':\n            return False\n    return True",
        "num_ids": 167
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert l and r to binary strings\n    l_binary = bin(l)[2:]\n    r_binary = bin(r)[2:]\n\n    # pad the binary strings with zeros to make them of equal length\n    l_binary = l_binary.zfill(len(r_binary))\n    r_binary = r_binary.zfill(len(l_binary))\n\n    # iterate through the binary strings and check if all bits are set or not\n    for i in range(len(l_binary)):\n        if l_binary[i] == '1' or r_binary[i] == '1':\n            return False\n    return True",
        "num_ids": 184
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to binary\n    binary_str = bin(n)[2:]\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Loop through the binary string and count the number of bits set in the given range\n    for i in range(l-1, r):\n        if binary_str[i] == '1':\n            count += 1\n            \n    # Check if all the bits are set or not\n    if count == (r-l+1):\n        return True\n    else:\n        return False",
        "num_ids": 151
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    mask = (1 << r) - (1 << l)\n    return n & mask == mask",
        "num_ids": 67
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all bits in the given range are set or not.\n\n    Parameters:\n    n (int): the number to check\n    l (int): the left end of the range (inclusive)\n    r (int): the right end of the range (inclusive)\n\n    Returns:\n    bool: True if all bits in the range are set, False otherwise\n    \"\"\"\n\n    # Check if the left end is less than the right end\n    if l >= r:\n        raise ValueError(\"Left end must be less than the right end\")\n\n    # Check if n is within the range\n    if n < 0 or n > (2**32-1):\n        raise ValueError(\"Number must be within 32-bit unsigned integer range\")\n\n    # Check if all bits in the given range are set\n    return ((n >> l) & ((2**((r-l)+1))-1)) == ((2**((r-l)+1))-1)\n",
        "num_ids": 222
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    n: an integer representing the number to check for set bits\n    l: an integer representing the left end of the range\n    r: an integer representing the right end of the range\n    \n    The function checks whether all the bits in the range [l, r] are set or not.\n    It returns True if all bits are set and False otherwise.\n    \"\"\"\n    # Iterate through the bits in the range [l, r] and check if they are set or not\n    for i in range(l, r+1):\n        # Check if the ith bit is set in n\n        if (n & (1 << i)) == 0:\n            # If the ith bit is not set, return False\n            return False\n    # If all bits are set, return True\n    return True",
        "num_ids": 193
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l:\n        return False\n    \n    mask = ((1 << (r+1)) - (1 << l)) - 1\n    \n    return (n & mask) == 0",
        "num_ids": 85
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    negatives = [i for i in arr if i < 0][:n]\n    positives = [i for i in arr if i >= 0][:n]\n    return negatives + positives",
        "num_ids": 55
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = [i for i in arr[:n] if i > 0]\n    neg = [i for i in arr[:n] if i < 0]\n    return neg + pos",
        "num_ids": 92
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    arr[:n] = negatives + positives\n    return arr",
        "num_ids": 131
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    positives.reverse()\n    arr[:n] = negatives + positives\n    return arr",
        "num_ids": 123
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate positive and negative elements\n    pos_arr = [x for x in arr[:n] if x >= 0]\n    neg_arr = [x for x in arr[:n] if x < 0]\n    \n    # Sort negative and positive elements separately\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    \n    # Combine sorted negative and positive elements\n    result = neg_arr + pos_arr\n    \n    # Add remaining elements from original array\n    result += arr[n:]\n    \n    return result",
        "num_ids": 161
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two empty lists, one for negative numbers and one for positive numbers\n    negatives = []\n    positives = []\n\n    # Loop through the first n elements of the array\n    for i in range(n):\n        # If the element is negative, append it to the negatives list\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        # If the element is positive, append it to the positives list\n        elif arr[i] > 0:\n            positives.append(arr[i])\n\n    # Sort the negatives list in descending order\n    negatives.sort(reverse=True)\n\n    # Loop through the first n elements of the array again\n    for i in range(n):\n        # If there are still negative elements in the list, assign the next one to the current index\n        if len(negatives) > 0:\n            arr[i] = negatives.pop(0)\n        # If there are no more negative elements in the list, assign the next positive element to the current index\n        else:\n            arr[i] = positives.pop(0)\n\n    # Return the modified array\n    return arr",
        "num_ids": 312
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # find the indices of the negative and positive elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n\n    # re-arrange the array by swapping negative and positive elements\n    for i in range(n//2):\n        arr[i], arr[neg_indices[i]] = arr[neg_indices[i]], arr[i]\n        arr[n-1-i], arr[pos_indices[i]] = arr[pos_indices[i]], arr[n-1-i]\n\n    return arr",
        "num_ids": 156
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    negatives.sort()\n    positives.sort()\n    result = negatives + positives\n    return result[:n]",
        "num_ids": 124
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate the negative and positive elements into two sub-arrays\n    negatives = []\n    positives = []\n    for num in arr[:n]:\n        if num < 0:\n            negatives.append(num)\n        else:\n            positives.append(num)\n    \n    # Concatenate the negative sub-array, the sorted positive sub-array, and the remaining positive elements into the original array\n    arr[:n] = negatives + sorted(positives) + [x for x in arr[n:] if x >= 0]\n    \n    return arr",
        "num_ids": 169
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n    positive_count = n - negative_count\n    negative_index = 0\n    positive_index = negative_count\n    \n    for i in range(n):\n        if arr[i] < 0:\n            arr[negative_index], arr[i] = arr[i], arr[negative_index]\n            negative_index += 1\n        else:\n            arr[positive_index], arr[i] = arr[i], arr[positive_index]\n            positive_index += 1\n            \n    return arr",
        "num_ids": 205
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with the specified character.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 39
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str",
        "num_ids": 79
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the string with the character and returns the modified string.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 43
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the string with the given character and returns the modified string.\n    '''\n    return str1.replace(\" \", char)",
        "num_ids": 44
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with a given character.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1",
        "num_ids": 45
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with a specified character.\n    '''\n    return str1.replace(' ', char)",
        "num_ids": 39
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a character.\n    '''\n    return str1.replace(' ', char)",
        "num_ids": 36
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n\n    Args:\n    - str1 (str): The input string.\n    - char (str): The character to replace blank spaces with.\n\n    Returns:\n    - str: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)",
        "num_ids": 76
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)",
        "num_ids": 92
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] #creating a heap of first n elements of the list\n    heapq.heapify(heap) #converting the list to a heap\n    \n    for i in list1[n:]:\n        if i > heap[0]:\n            heapq.heappop(heap) #removing smallest element from heap\n            heapq.heappush(heap,i) #adding new element to heap\n    \n    return heap",
        "num_ids": 138
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 89
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]",
        "num_ids": 95
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heapq.nlargest(n, list1)",
        "num_ids": 127
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap",
        "num_ids": 118
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef largest_n_numbers(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_n = heapq.nlargest(n, list1)\n    return largest_n",
        "num_ids": 67
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]",
        "num_ids": 95
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "num_ids": 63
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n] # create a heap of the first n items in the list\n    heapq.heapify(heap) # turn the heap into a heap\n    for num in list1[n:]: # iterate over the rest of the items in the list\n        if num > heap[0]: # if the current item is larger than the smallest item in the heap\n            heapq.heappop(heap) # remove the smallest item from the heap\n            heapq.heappush(heap, num) # add the current item to the heap\n    return heap # return the heap as the result",
        "num_ids": 175
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return surface_area",
        "num_ids": 67
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder with radius r and height h.\n    '''\n    return 2 * r * h + 2 * 3.14159 * r ** 2",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius of the cylinder and its height as input,\n    and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * (r + h)\n    return lateral_area",
        "num_ids": 77
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    lateral_area = 2 * math.pi * r * h\n    return surface_area - lateral_area",
        "num_ids": 89
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns its lateral surface area.\n    '''\n    lateralsurfacearea = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurfacearea",
        "num_ids": 76
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2",
        "num_ids": 67
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and the height of the cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface",
        "num_ids": 70
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its lateral surface area.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateralsurface",
        "num_ids": 68
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area",
        "num_ids": 105
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length as input and returns the volume of a cube with that side length.\n    '''\n    return l**3",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a single argument 'l' representing the length of the cube's side.\n    It returns the volume of the cube.\n    '''\n    return l ** 3",
        "num_ids": 46
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length of a cube as input and returns its volume.\n    '''\n    return l ** 3\n",
        "num_ids": 36
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length as input and returns the volume of a cube.\n    '''\n    volume = l ** 3\n    return volume",
        "num_ids": 39
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "num_ids": 34
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "num_ids": 33
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number to 1.\n\n    :param n: An integer.\n    :return: The given number with all even bits set to 1.\n    \"\"\"\n    # Set all even bits to 1\n    n |= (n >> 1) & 0x55555555\n    \n    # Clear all odd bits\n    n &= ~(n >> 1) & 0xAAAAAAAA\n    \n    return n",
        "num_ids": 106
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number.\n    '''\n    # convert the number to binary\n    binary = bin(n)[2:]\n\n    # create a list of even bits\n    even_bits = [int(bit) for bit in binary if int(bit) % 2 == 0]\n\n    # sum the even bits\n    even_bit_sum = sum(even_bits)\n\n    # set the even bits of the original number\n    set_bits = bin(even_bit_sum)[2:]\n    set_bits = '0'*(8-len(set_bits)) + set_bits # add leading zeros if necessary\n    for i in range(len(binary)):\n        if int(binary[i]) % 2 == 0:\n            binary = binary[:i] + set_bits[i] + binary[i+1:]\n\n    # convert the modified binary back to decimal\n    return int(binary, 2)",
        "num_ids": 213
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function sets all even bits of a given number to 1.\n    '''\n    # iterate through each bit of the number\n    for i in range(0, 32): \n        # check if the bit is even\n        if n & (1 << i): \n            # set the bit to 1\n            n |= (1 << i)\n    # return the modified number\n    return n",
        "num_ids": 94
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \"\"\"\n    n |= n >> 1  # Set all even bits using bitwise OR\n    n &= ~0xAAAA  # Clear all odd bits using bitwise AND\n    n &= ~0x5555  # Clear all even bits using bitwise AND\n    return n",
        "num_ids": 83
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns the number with all even bits set.\n    '''\n    mask = 0xAAAAAAAA # 0b10101010... pattern\n    return (n & ~mask) | (n & mask)",
        "num_ids": 69
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as input and returns the number with all even bits set to 1.\n    \"\"\"\n    # iterate through all even bits and set them to 1\n    for i in range(0, 32, 2):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "num_ids": 85
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    mask = 0x5555555555555555  # mask for even bits\n    return (n | (n & mask))  # set all even bits",
        "num_ids": 70
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer as input and sets all the even bits of the number.\n    '''\n    # To set all the even bits, we need to use the bitwise AND operator with the number and 0b11111110 (which has all even bits set to 1 and all other bits set to 0).\n    # Then we shift the result by 1 bit to the left to set the even bits in the correct position.\n    # Finally, we add the result back to the original number to get the modified number.\n    return n & 0b11111110 << 1 | n & 0b11111110 # Setting even bits and adding them back to the original number.",
        "num_ids": 174
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # To set all even bits, we need to use the bitwise AND operator with 0x55555555 (which has 1's in even positions)\n    # and bitwise XOR operator with the original number.\n    return n ^ (n & 0x55555555)",
        "num_ids": 101
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number to 1.\n    \"\"\"\n    mask = 0b1010101010101010 # binary mask with alternating 0s and 1s\n    return n | mask",
        "num_ids": 69
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 58
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))",
        "num_ids": 62
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)",
        "num_ids": 67
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = Counter(test_list)\n    return count_dict",
        "num_ids": 80
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m < 2 or n < 1:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        prev_seq = get_total_number_of_sequences(m, n-1)\n        curr_seq = m - (n-1)\n        if curr_seq < 2:\n            return prev_seq\n        else:\n            return prev_seq + curr_seq*(m-curr_seq+1)//2\n",
        "num_ids": 169
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    prev_seq_count = get_total_number_of_sequences(m, n-1)\n    curr_seq_count = prev_seq_count * (m - prev_seq_count + 1) // 2\n    \n    return curr_seq_count",
        "num_ids": 84
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the variables\n    count = 0\n    num = 1\n    \n    # Loop through the sequence from 1 to m\n    while num <= m:\n        # Check if the current number is less than or equal to m and its value is greater than or equal to twice the previous number\n        if num <= m and num >= 2*num-2:\n            # If it satisfies both conditions, increment the count\n            count += 1\n            \n        # Increment the number by 1 and continue the loop\n        num += 1\n        \n    # Return the count of possible sequences\n    return count",
        "num_ids": 187
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m // 2 + 1\n    else:\n        # if n > 1, there are two possibilities for the first element:\n        # either it's 2 (the minimum allowed value), or it's larger than 2 and less than m/2\n        num_possibilities = get_total_number_of_sequences(m, n - 1)\n        if n == 2:\n            return num_possibilities + 1\n        else:\n            # if n > 2, there are three possibilities for the first element:\n            # either it's 2 (the minimum allowed value), or it's 3 (the minimum allowed value for the second element), or it's larger than 3 and less than m/2\n            num_possibilities += get_total_number_of_sequences(m - 2, n - 1)\n            if n == 3:\n                return num_possibilities + 1\n            else:\n                # if n > 3, there are four possibilities for the first element:\n                # either it's 2 (the minimum allowed value), or it's 3 (the minimum allowed value for the second element), or it's 4 (the minimum allowed value for the third element), or it's larger than 4 and less than m/2\n                num_possibilities += get_total_number_of_sequences(m - 4, n - 1)\n                return num_possibilities + 1",
        "num_ids": 388
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Create a list to store the number of possible sequences for each value of i\n    num_sequences = [1] * n\n\n    # Calculate the number of possible sequences for each value of i after the first one\n    for i in range(1, n):\n        num_sequences[i] = num_sequences[i-1] * (m - 2*num_sequences[i-1] + 1) // i\n\n    # Return the total number of possible sequences\n    return num_sequences[-1]",
        "num_ids": 176
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, where each element is a positive integer\n    and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n\n    # Initialize the first two numbers in the sequence\n    sequence = [2, 3]\n    count = 2\n    \n    # Compute the remaining numbers in the sequence\n    for i in range(2, n):\n        new_sequence = []\n        for j in range(len(sequence)):\n            # Compute the next number in the sequence\n            next_num = min(sequence[j] + 2, m)\n            new_sequence.append(next_num)\n            \n            # Update the count of valid sequences\n            count += j\n        \n        sequence = new_sequence\n    \n    return count",
        "num_ids": 186
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the first sequence\n    seq = [1]\n\n    # Initialize a counter to keep track of the number of sequences\n    count = 0\n\n    # Initialize a flag to check if the current sequence is valid\n    valid = True\n\n    # Loop through the remaining elements in the sequence\n    for i in range(1, n):\n        # If the current element is less than or equal to m and greater than or equal to twice the previous element, add it to the sequence\n        if seq[i-1]*2 <= m and seq[i-1]*2 <= seq[i]:\n            seq.append(seq[i-1]*2)\n        # If the current element is greater than m, reset the sequence and increment the counter\n        else:\n            valid = False\n            count += 1\n            seq = [1]\n\n    # Check if the last sequence is valid\n    if valid:\n        count += 1\n\n    return count",
        "num_ids": 250
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the total number of sequences to 0\n    total_sequences = 0\n    # Iterate over all possible values of the first element of the sequence\n    for i in range(1, m//2+1):\n        # Calculate the maximum possible value of the second element of the sequence given the first element\n        j_max = m - 2*i\n        # Calculate the number of possible second elements that satisfy the condition\n        num_j = (j_max-n+1)//(n-1)\n        # Add the number of possible sequences with the first element i to the total number of sequences\n        total_sequences += num_j\n    # Return the total number of sequences\n    return total_sequences",
        "num_ids": 217
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize count to 1 because the first element can be any value between 1 and m\n    count = 1\n\n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the number of possible sequences of length i\n        # Each element can be any value between count and m\n        # Therefore, the number of possible sequences of length i is equal to (m - count + 1)\n        count *= (m - count + 1)\n\n    return count",
        "num_ids": 121
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables\n    total = 0\n    prev = -1\n    # loop through all possible sequences of length n\n    for i in range(1, m + 1):\n        # check if the sequence is valid\n        if prev!= -1 and 2 * prev < i <= m:\n            # if the sequence is valid, add 1 to the total\n            total += 1\n            # set the previous element to the current element\n            prev = i\n        else:\n            # if the sequence is invalid, reset the previous element to -1\n            prev = -1\n    # return the total number of valid sequences\n    return total",
        "num_ids": 145
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    \n",
        "num_ids": 52
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1",
        "num_ids": 53
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2",
        "num_ids": 49
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 48
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "num_ids": 55
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the next integer greater than the square root of N\n    x = int(math.ceil(math.sqrt(N)))\n    \n    # Calculate the next perfect square\n    next_square = x*x\n    \n    # Return the next perfect square\n    return next_square",
        "num_ids": 70
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return root*root + root + 1",
        "num_ids": 57
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the smallest perfect square greater than N.\n    '''\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Round the square root to the nearest integer\n    root_int = round(root)\n    # Check if the square root integer is square root of N\n    if root == root_int:\n        # If yes, then N is itself a perfect square\n        # Return N\n        return N\n    else:\n        # If not, then N is not a perfect square\n        # Return the next perfect square greater than N\n        return (2*root_int+1)**2",
        "num_ids": 151
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N).is_integer(): # Check if N itself is a perfect square\n        return N**2 + 1 # If it's a perfect square, return the next square\n    else:\n        return int(math.ceil(math.sqrt(N)))**2 # Otherwise, return the nearest integer square that's greater than N",
        "num_ids": 109
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2",
        "num_ids": 50
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Add 0.5 to the square root to get the next perfect square\n    next_square = math.ceil(root + 0.5) ** 2\n    return next_square",
        "num_ids": 73
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the next perfect square using the ceil function from the math module\n    return math.ceil(math.sqrt(N)) ** 2",
        "num_ids": 66
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = int(math.sqrt(N))   # Find the square root of N\n    while True:\n        next_square = (sqrt + 1)**2  # Find the next perfect square\n        if next_square > N:   # If the next perfect square is greater than N, return it\n            return next_square\n        sqrt += 1   # Increment the square root and repeat the process",
        "num_ids": 120
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # round up the square root to the nearest integer\n    sqrt_N = math.ceil(sqrt_N)\n\n    # square the rounded up integer to get the next perfect square\n    next_square = sqrt_N**2\n\n    return next_square",
        "num_ids": 86
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int(math.ceil(root))**2",
        "num_ids": 57
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\n    return dp[0][n-1]",
        "num_ids": 122
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # Finding the maximum sum of a bitonic subsequence ending at each index i\n    for i in range(n):\n        dp[i][i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[j][i] = max(dp[j][i-1], dp[j+1][i-1] + arr[i])\n            else:\n                dp[j][i] = dp[j+1][i-1]\n                \n    # Finding the maximum sum of all bitonic subsequences\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i):\n            if dp[j][i] > max_sum:\n                max_sum = dp[j][i]\n                \n    return max_sum",
        "num_ids": 256
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) <= 2:\n        return sum(arr)\n\n    left = [0] * len(arr)\n    left[1] = max(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        left[i] = max(left[i-1], left[i-2] + arr[i])\n\n    right = [0] * len(arr)\n    right[len(arr)-2] = max(arr[len(arr)-1], arr[len(arr)-2])\n\n    for i in range(len(arr)-3, -1, -1):\n        right[i] = max(right[i+1], right[i+2] + arr[i])\n\n    max_sum = 0\n    for i in range(1, len(arr)-1):\n        if left[i-1] > right[i+1]:\n            max_sum = max(max_sum, left[i-1] + right[i+1])\n        if left[i] > right[i]:\n            max_sum = max(max_sum, left[i] + right[i])\n\n    return max_sum",
        "num_ids": 310
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n    return dp[n-1]",
        "num_ids": 74
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        if arr[i] > dp[i - 1]:\n            dp[i] = arr[i] + dp[i - 2]\n        else:\n            dp[i] = dp[i - 1]\n\n    return dp[n - 1]",
        "num_ids": 116
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(2)]  # dp[i][j]: max sum of bitonic subsequence ending at arr[j] with direction i (0: increasing, 1: decreasing)\n    for j in range(n):\n        dp[0][j] = arr[j]\n        dp[1][j] = arr[j]\n    for i in range(2):\n        for j in range(1, n):\n            if i == 0:  # increasing direction\n                dp[i][j] = max(dp[i][j - 1], dp[1][j - 1] + arr[j])\n            else:  # decreasing direction\n                dp[i][j] = max(dp[i][j - 1], dp[0][j - 1] + arr[j])\n    return dp[0][n - 1]",
        "num_ids": 211
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(2)]\n    for i in range(n):\n        if i == 0:\n            dp[0][i] = arr[0]\n            dp[1][i] = arr[0]\n        else:\n            dp[0][i] = max(dp[1][i-1], arr[i])\n            dp[1][i] = dp[0][i-1] + arr[i]\n    return max(dp[0][n-1], dp[1][n-1])",
        "num_ids": 135
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the diagonal elements\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Compute the maximum sum for all subsequences\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\n\n    return dp[0][n-1]",
        "num_ids": 145
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if l == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][k]+dp[k+1][j] for k in range(i,j))\n    return dp[0][n-1]",
        "num_ids": 157
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the max sum and the indices of the start and end of the bitonic subsequence\n    max_sum = 0\n    start, end = 0, 0\n    # Loop through all possible pairs of indices (i, j)\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the subsequence is bitonic, update the max sum and the indices of the start and end\n            if is_bitonic(arr, i, j):\n                sub_sum = sum(arr[i:j+1])\n                if sub_sum > max_sum:\n                    max_sum = sub_sum\n                    start, end = i, j\n    # Return the max sum and the indices of the start and end of the bitonic subsequence\n    return max_sum, start, end\n\ndef is_bitonic(arr, i, j):\n    # Check if the subarray from i to j is bitonic\n    for k in range(i, j):\n        if arr[k] > arr[k+1]:\n            return False\n    for k in range(i, j)[::-1]:\n        if arr[k] < arr[k+1]:\n            return False\n    return True",
        "num_ids": 277
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001 # Define epsilon value\n    guess = number / 2 # Define initial guess as half of the number\n    \n    while abs(guess**2 - number) >= epsilon: # Repeat until the guess is close enough to the actual square root\n        guess = (guess + number / guess) / 2 # Update guess using the babylonian method\n        \n    return guess # Return the final guess as the square root of the number",
        "num_ids": 128
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0000001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 78
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a given number using the Babylonian method.\n    '''\n    x = number / 2\n    while True:\n        y = (x + number / x) / 2\n        if abs(y - x) < 0.000001:\n            break\n        x = y\n    return y",
        "num_ids": 86
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Please enter a positive number\"\n    else:\n        approx = number\n        while True:\n            approx = (approx + number / approx) / 2\n            if abs(approx * approx - number) < 0.0001:\n                break\n        return approx",
        "num_ids": 97
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function takes a number as an input and returns its square root using the babylonian method.\n    '''\n\n    # initialize the guess variable to the number itself\n    guess = number\n\n    # loop until the guess is close enough to the square root\n    while abs(guess*guess - number) > 0.00001:\n        # update the guess using the babylonian method\n        guess = (guess + number/guess) / 2\n\n    # return the square root of the number\n    return guess",
        "num_ids": 123
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    guess = number\n    while abs(guess*guess - number) >= 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 73
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # initial guess\n    while True:\n        new_guess = (guess + (number / guess)) / 2  # update guess\n        if abs(new_guess - guess) < 0.00001:  # check if guess is close enough to the answer\n            return new_guess  # return the answer\n        guess = new_guess  # update guess",
        "num_ids": 119
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a given number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess",
        "num_ids": 77
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        while abs(guess**2 - number) > 0.00001:\n            guess = (guess + number/guess) / 2\n        return guess",
        "num_ids": 99
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Parameters:\n        number (float): The number to find the square root of.\n\n    Returns:\n        float: The square root of the number.\n    \"\"\"\n    epsilon = 0.00001  # A small number to check for convergence\n    guess = number / 2  # Start with a guess of half the number\n\n    while abs(guess**2 - number) >= epsilon:\n        # Update the guess using the formula:\n        #    guess = (guess + number / guess) / 2\n        guess = (guess + number / guess) / 2\n\n    return guess",
        "num_ids": 153
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if k == 2:\n                dp[i][j] = 2 if str[i] == str[j] else 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                if str[i] == str[j]:\n                    dp[i][j] = max(dp[i][j], dp[i+1][j-1] + 2)\n    return dp[0][n-1]",
        "num_ids": 190
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length greater than 1 \n    maxLength = 1\n    for k in range(2, n + 1): \n        for i in range(n - k + 1): \n            j = i + k - 1\n            if (k == 2 and str[i] == str[j]): \n                L[i][j] = 2\n                maxLength = 2\n            elif (str[i] == str[j]): \n                L[i][j] = L[i + 1][j - 1] + 2\n                maxLength = max(maxLength, L[i][j]) \n  \n    # return the length of Longest Palindromic Subsequence \n    return maxLength ",
        "num_ids": 229
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of LPS\n    # for all prefixes and suffixes\n    dp = [[0 for x in range(n)] for y in range(n)]\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for substrings of length greater than 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                # If the two characters are the same and the length is 2,\n                # then the only palindrome is of length 2\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                # If the two characters are the same, then we can extend\n                # the LPS by adding 1 to the length of the previous LPS.\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                # If the two characters are different, then we can take\n                # the maximum of the LPS of the remaining characters on the\n                # left and right halves of the string.\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    # Return the length of the longest palindrome subsequence\n    return dp[0][n-1]",
        "num_ids": 338
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n\n    n = len(str)\n    # Create a 2D table to store the lengths of longest palindromic subsequence\n    # For all substrings of length 1, the LPS is the same as the length of the string.\n    table = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 have LPS = 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                # If the characters match and the length of the string is 2, then LPS = 2\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                # If the characters match, then LPS = LPS(i+1, j-1) + 2\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                # If the characters do not match, then LPS = max(LPS(i, j-1), LPS(i+1, j))\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n\n    # The LPS will be the maximum value in the table\n    return table[0][n - 1]",
        "num_ids": 382
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store lengths of longest palindromic subsequence\n    # The value dp[i][j] will store the length of LPS for str[i..j]\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 339
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the length of LPS for substrings\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i+k\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]",
        "num_ids": 292
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    # LPS(i, j) = LPS(i+1, j-1) + 2 if str[i] == str[j] else max(LPS(i+1, j), LPS(i, j-1))\n    for i in range(n):\n        dp[i][i] = 1\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]",
        "num_ids": 203
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            if str[i] == str[j] and gap == 1:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]",
        "num_ids": 201
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence of substrings of the given string\n    # We use a 2D table to avoid using extra space\n    table = [[0] * n for i in range(n)]\n    # Initialize the diagonal of the table to 1 since each character has its own longest palindromic subsequence of length 1\n    for i in range(n):\n        table[i][i] = 1\n    # Fill the table in a bottom-up manner\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                # If the substring has only two characters and is a palindrome, then the length of its LPS is 2\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                # If the substring is a palindrome, then its LPS is the same as the LPS of the substring excluding the first and last characters\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                # If the substring is not a palindrome, then its LPS is the maximum of the LPS of the substring excluding the first character and the LPS of the substring excluding the last character\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    # Return the length of the LPS of the entire string\n    return table[0][n-1]",
        "num_ids": 367
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of palindromes \n    # substring of length i \n    L = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i+k-1\n            if str[i] == str[j] and k == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] ",
        "num_ids": 288
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))",
        "num_ids": 48
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1.0 / i for i in range(1, n))",
        "num_ids": 42
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum",
        "num_ids": 57
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 51
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    \n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    \n    return harmonic_sum",
        "num_ids": 68
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "num_ids": 59
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n-1)",
        "num_ids": 62
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum to 0\n    harmonic_sum = 0\n    \n    # Loop through the range from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic mean of i\n        harmonic_mean = 1/i\n        \n        # Add the harmonic mean to the sum\n        harmonic_sum += harmonic_mean\n    \n    # Return the harmonic sum\n    return harmonic_sum",
        "num_ids": 125
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to find their intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection_set)",
        "num_ids": 105
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create an empty list to store the intersection elements\n    intersection = []\n\n    # Iterate through the first array\n    for num in array_nums1:\n        # Check if the element is present in the second array\n        if num in array_nums2 and num not in intersection:\n            # Add the element to the intersection list if it is not already present\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection",
        "num_ids": 120
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 65
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "num_ids": 69
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function finds the intersection of two arrays.\n\n    :param array_nums1: First array of integers\n    :param array_nums2: Second array of integers\n    :return: Returns the intersection of the two arrays as a list.\n    \"\"\"\n    # Creating a set from the first array to remove duplicates\n    set_nums1 = set(array_nums1)\n    # Creating a set from the second array to remove duplicates\n    set_nums2 = set(array_nums2)\n    # Finding the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Converting the set to a list and returning it\n    return list(intersection)",
        "num_ids": 162
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    This function finds the intersection of two arrays and returns the common elements.\n    '''\n    # converting the arrays to sets to find the common elements\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # finding the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # returning the common elements in a list\n    return list(common_elements)",
        "num_ids": 108
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set to store the intersection of the two arrays\n    intersection = set()\n    # loop through the first array and add elements to the intersection set if they are also in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.add(num)\n    return intersection",
        "num_ids": 100
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))",
        "num_ids": 47
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function finds the intersection of two arrays.\n    '''\n    # Create an empty set to store the intersection values\n    intersection_set = set()\n    \n    # Loop through the first array and add the values to the intersection set\n    for num in array_nums1:\n        intersection_set.add(num)\n    \n    # Loop through the second array and remove the intersection values from the set\n    for num in array_nums2:\n        if num in intersection_set:\n            intersection_set.remove(num)\n    \n    # Convert the set back to a list and return it\n    return list(intersection_set)",
        "num_ids": 142
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result",
        "num_ids": 69
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes a tuple and an element as input, and returns the count of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and returns the number of times the element occurs in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert the element before each element in the list and return the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst",
        "num_ids": 65
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]",
        "num_ids": 61
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element in the list.\n    \"\"\"\n    return [elem] + [x for x in lst]",
        "num_ids": 39
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "num_ids": 69
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the list.\n    \"\"\"\n    return [elem] + [x for x in lst]",
        "num_ids": 40
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + [x for x in lst]",
        "num_ids": 54
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result",
        "num_ids": 76
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes a list and an element as inputs and returns a new list with the given element inserted before each element in the original list.\n    '''\n    result = []\n    for i in list:\n        result.append(element)\n        result.append(i)\n    return result[1:]",
        "num_ids": 73
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element as input and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result",
        "num_ids": 76
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = round(abs(num), 2)\n            theta = round(cmath.phase(num), 2)\n            result.append((r, theta))\n        else:\n            result.append(num)\n    return result",
        "num_ids": 94
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing the polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords",
        "num_ids": 73
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Initialize a list to store the results\n    results = []\n\n    # Iterate through the list of complex numbers\n    for num in numbers:\n        # Calculate the polar coordinates of each complex number\n        r = cmath.polar(num)[0]\n        phi = cmath.polar(num)[1]\n\n        # Append the results to the list\n        results.append((r, phi))\n\n    return results",
        "num_ids": 110
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append(polar)\n    return result",
        "num_ids": 58
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing their polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        polar_coordinates.append(polar)\n    return polar_coordinates",
        "num_ids": 73
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of\", num, \"are:\", polar)",
        "num_ids": 56
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_nums = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_nums.append(polar)\n    return polar_nums",
        "num_ids": 64
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result",
        "num_ids": 59
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count",
        "num_ids": 38
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements present in the list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(combo) for combo in combinations_with_replacement(l, n)]",
        "num_ids": 81
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(x,) for x in l] if n == 1 else list(combinations_with_replacement(l, n))",
        "num_ids": 92
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(colors, n):\n    '''\n    This function takes in a list of colors and a length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for combo in combinations_with_replacement(colors, n):\n        combinations.append(combo)\n    return combinations",
        "num_ids": 92
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return list(comb)",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]\n",
        "num_ids": 83
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "num_ids": 78
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]",
        "num_ids": 80
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n    return count",
        "num_ids": 150
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return count",
        "num_ids": 91
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 97
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    if n < 2:  # if n is less than 2, there are no prime numbers\n        return 0\n    primes = [True] * (n + 1)  # initialize a list of Boolean values indicating whether each number is prime\n    primes[0] = primes[1] = False  # 0 and 1 are not prime\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):  # mark all multiples of i as not prime\n                primes[j] = False\n    count = sum(primes)  # count the number of True values in the list\n    return count",
        "num_ids": 196
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count",
        "num_ids": 97
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Count the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 124
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 97
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime or not\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Count the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 130
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, else False.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "num_ids": 131
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "num_ids": 106
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a",
        "num_ids": 40
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    This function takes two numbers as input and returns a tuple containing the second number followed by the first number.\n    '''\n    return (b,a)",
        "num_ids": 43
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "num_ids": 44
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > max_tup[i]:\n            max_tup = test_tup2\n    return max_tup",
        "num_ids": 85
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup2\n    else:\n        return None",
        "num_ids": 85
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple with the maximum elements from both tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of same length.\")\n        return\n    \n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    \n    return max_tup",
        "num_ids": 144
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if sum(test_tup1) >= sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2",
        "num_ids": 65
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples and returns the tuple which has the maximum sum of elements.\n    '''\n    if sum(test_tup1) >= sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2",
        "num_ids": 71
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            new_tup += (test_tup1[i],)\n        else:\n            new_tup += (test_tup2[i],)\n    return new_tup",
        "num_ids": 105
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize the maximum value and the corresponding tuple\n    max_val = max(test_tup1 + test_tup2)\n    max_tup = None\n\n    # Check if the maximum value exists in the first tuple\n    if max_val in test_tup1:\n        max_tup = test_tup1\n    # Check if the maximum value exists in the second tuple\n    elif max_val in test_tup2:\n        max_tup = test_tup2\n\n    return max_tup",
        "num_ids": 135
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup",
        "num_ids": 95
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum sum of its elements.\n    '''\n    if sum(test_tup1) >= sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2",
        "num_ids": 73
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    count = 0\n    i = 1\n    while True:\n        if is_prime(i) and is_prime((i+2)**2):\n            count += 1\n            if count == n:\n                return i\n        i += 1",
        "num_ids": 150
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        p = 3\n        k = 2\n        i = 4\n        while i <= n:\n            p = 6*p - k*(k-1)\n            k += 1\n            i += 1\n        return p",
        "num_ids": 115
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    count = 0  # initialize a count variable to keep track of the number of newman primes found\n    i = 3  # initialize a variable i to 3 as the first newman prime number\n\n    while count < n:  # continue looping until n newman primes are found\n        j = 3  # initialize a variable j to 3 as the first factor of i\n        is_prime = True  # initialize a boolean variable is_prime to True\n\n        while j*j <= i:  # loop over all factors of i up to the square root of i\n            if i % j == 0:  # if i is divisible by j, i is not a prime number\n                is_prime = False\n                break\n            j += 1\n\n        if is_prime:  # if i is prime, increment the count and return i as the nth newman prime number\n            count += 1\n            if count == n:\n                return i\n\n        i += 1  # increment i to try the next number as a potential prime",
        "num_ids": 256
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Invalid input, n should be greater than or equal to 1\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3  # initialize values for a and b\n        count = 2  # initialize count for number of newman prime numbers found so far\n        while count < n:\n            c = a + b  # calculate c as the sum of a and b\n            if all(c % i!= 0 for i in range(2, c)):  # if c is not divisible by any number between 2 and c\n                a, b = b, c  # update values of a and b\n                count += 1  # increment count\n            else:\n                a, b = b, a + b  # update values of a and b\n        return b  # return the nth newman prime number\n",
        "num_ids": 236
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        i = 4\n        while len(primes) < n:\n            is_prime = True\n            for prime in primes:\n                if prime**2 > i:\n                    break\n                if i % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n            i += 1\n        return primes[-1]",
        "num_ids": 149
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n\n    # Initialize variables\n    x = 1\n    i = 2\n    p = 0\n    count = 0\n\n    # Loop until we find the nth prime number\n    while count < n:\n\n        # Update variables\n        p = (p * x + 1) // i\n        x = (x * x + 1) // i\n        i += 1\n\n        # Check if the prime number is prime\n        is_prime = True\n        for j in range(2, int(p**0.5) + 1):\n            if p % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    # Return the nth prime number\n    return p",
        "num_ids": 179
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_prime(num):\n        \"\"\"\n        Helper function to check if a number is a newman-shanks-williams prime.\n        \"\"\"\n        if num < 10:\n            return False\n        s = str(num)\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return is_prime(num)\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n\n    return num - 1",
        "num_ids": 255
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the sequence with the first three prime numbers\n    primes = [2, 3, 5]\n\n    # Generate the next prime numbers using the formula\n    # p(n+1) = (p(n)^2 - p(n-1)^2)/p(n-2) + 5*p(n-2)\n    # where p(n) is the nth prime number\n    for i in range(3, n+1):\n        p = (primes[i-1]**2 - primes[i-2]**2) // primes[i-3] + 5*primes[i-2]\n        primes.append(p)\n\n    return primes[n-1]",
        "num_ids": 203
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num",
        "num_ids": 163
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    '''\n    Function to find the nth newman\u2013shanks\u2013williams prime number\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i - 1) and is_prime(i + 1):\n            count += 1\n        i += 1\n    return i - 1",
        "num_ids": 152
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 90
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "num_ids": 88
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "num_ids": 87
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and performs mathematical division operation element-wise across the given tuples.\n\n    Args:\n    test_tup1: tuple of numbers\n    test_tup2: tuple of numbers of equal length as test_tup1\n\n    Returns:\n    A tuple containing the element-wise division result of test_tup1 and test_tup2\n    \"\"\"\n    \n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of equal length\"\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n        \n    return result_tup",
        "num_ids": 165
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)",
        "num_ids": 92
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 89
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: L is greater than the length of list1\"\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 101
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None\n    else:\n        return (list1[:L], list1[L:])",
        "num_ids": 88
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)",
        "num_ids": 87
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # Checking if the length of the given list is less than L\n    if len(list1) < L:\n        print(\"Length of the list is less than the desired length\")\n        return None\n\n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Returning the two parts as a tuple\n    return (part1, part2)",
        "num_ids": 147
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])",
        "num_ids": 73
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age / 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age / 7\n    print(f\"The dog's age in dog's years is {d_age:.2f}\")",
        "num_ids": 62
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 45
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # dog's year is 7 years per human year\n    dog_years = h_age * 7\n    return dog_years",
        "num_ids": 57
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 75
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 34
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 68
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result",
        "num_ids": 81
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 83
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list S and an integer step and splits the list S into sublists, with each sublist containing n elements,\n    where n is the value of the step parameter.\n    '''\n    # create an empty list to hold the sublists\n    sublists = []\n    # iterate over the range of step sizes\n    for i in range(step, len(S), step):\n        # append the sublist to the sublists list\n        sublists.append(S[i-step:i])\n    return sublists",
        "num_ids": 122
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "num_ids": 68
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n\nprint(lateralsurface_cube(5))",
        "num_ids": 53
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the length of a cube as an argument and returns the lateral surface area of the cube.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface",
        "num_ids": 54
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * l**2",
        "num_ids": 45
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 44
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2",
        "num_ids": 41
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * (l ** 2)",
        "num_ids": 48
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through first n odd numbers and add their squares to sum\n    for i in range(1, n*2, 2):\n        sum += i**2\n        \n    return sum",
        "num_ids": 88
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [i for i in range(1, n*2, 2)] # create a list of odd numbers\n    square_sum = sum([i**2 for i in odd_numbers[:n]]) # square each odd number and sum the first n of them\n    return square_sum",
        "num_ids": 102
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, 2*n+1, 2):\n        result += i**2\n    return result",
        "num_ids": 70
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 80
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # iterate over first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # add square of i to sum\n        sum += i**2\n    return sum",
        "num_ids": 91
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_nums = [x for x in range(1, 2*n, 2)] # create a list of the first n odd natural numbers\n    squares = [x**2 for x in odd_nums] # create a list of the squares of the odd numbers\n    return sum(squares) # return the sum of the squares",
        "num_ids": 107
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num",
        "num_ids": 55
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    This function takes a positive integer 'n' as input and returns then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (4 * n - 2) * find_star_num(n - 1)",
        "num_ids": 70
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (2 * find_star_num(n-1) + 1)\n",
        "num_ids": 65
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    while count < n:\n        star_num += 2\n        count += 1\n    return star_num",
        "num_ids": 61
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize count to 0\n    count = 0\n    \n    # initialize num to 1\n    num = 1\n    \n    # loop through until count reaches n\n    while count < n:\n        # print the current num\n        print(num, end=\" \")\n        # increment num by 1\n        num += 1\n        # increment count by 1\n        count += 1\n        \n    # return the value of num, which is then'th star number\n    return num",
        "num_ids": 120
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function finds then'th star number.\n    \"\"\"\n    count = 1\n    star_num = 1\n    while count <= n:\n        print(star_num, end=\" \")\n        star_num += 2\n        count += 1\n    return star_num - 2",
        "num_ids": 72
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    star_num = 1\n    \n    while count < n:\n        print(star_num)\n        star_num += 2\n        count += 1",
        "num_ids": 63
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    while True:\n        if len(str(count)) == n:\n            return count\n        count += 1",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    This function finds then'th star number.\n    '''\n    # Initialize variables\n    num_of_stars = 1\n    total_num_of_stars = 1\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Add the previous number of stars to the current number of stars\n        num_of_stars += total_num_of_stars\n        \n        # Add the current number of stars to the total number of stars\n        total_num_of_stars += num_of_stars\n    \n    # Return the total number of stars\n    return total_num_of_stars",
        "num_ids": 144
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n and returns then'th star number.\n    \"\"\"\n    if n == 1:\n        return 5\n    else:\n        return 4 * find_star_num(n-1) + 1",
        "num_ids": 61
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "num_ids": 32
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions.\n\n    :param arr: A list of integers.\n    :return: The sum of even numbers at even positions.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
        "num_ids": 105
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result",
        "num_ids": 83
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 84
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "num_ids": 63
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize variables to keep track of sum and count of even numbers at even positions\n    even_sum = 0\n    count = 0\n    \n    # Loop through the list\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n            \n    # Return the sum of even numbers at even positions\n    return even_sum",
        "num_ids": 107
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even positions of the input list.\n    \"\"\"\n    # Initialize the sum to zero\n    even_sum = 0\n\n    # Loop over the list\n    for i in range(0, len(arr), 2):\n        # Check if the current element is even and add it to the sum if it is\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n\n    # Return the sum of even numbers at even positions\n    return even_sum",
        "num_ids": 160
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list of numbers as input and returns the sum of even numbers at even positions.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total",
        "num_ids": 82
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    \n    while i <= 2*n:\n        if i % 2 == 0:\n            sum += i**5\n        i += 1\n        \n    return sum",
        "num_ids": 85
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum",
        "num_ids": 83
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum",
        "num_ids": 86
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 77
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum\n\nprint(even_Power_Sum(10))",
        "num_ids": 99
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", even_Power_Sum(n))",
        "num_ids": 134
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum",
        "num_ids": 74
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum",
        "num_ids": 50
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    result = 0\n    i = 0\n    while i < n:\n        power = 5 ** (i % 2)\n        result += (2 * i + 1) ** power\n        i += 1\n    return result",
        "num_ids": 59
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    i = 0\n    \n    while count < n:\n        if i % 2 == 0:\n            sum += i ** 5\n            count += 1\n        i += 1\n        \n    return sum",
        "num_ids": 96
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "num_ids": 65
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 95
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "num_ids": 94
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup",
        "num_ids": 97
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    even_sum = 0\n    \n    # Loop through all even values of i from 0 to n/2\n    for i in range(0, n//2+1):\n        # Calculate the binomial coefficient using the formula nCr = n! / (r! * (n-r)!)\n        coeff = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n        \n        # Add the even index binomial coefficients to the sum\n        if i % 2 == 0:\n            even_sum += coeff\n    \n    return even_sum",
        "num_ids": 150
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum to 0\n    even_sum = 0\n    # Loop through even indices\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # Add it to the sum if it's even\n        if i % 2 == 0:\n            even_sum += coeff\n    return even_sum",
        "num_ids": 126
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    result = 0\n    numerator = 1\n    denominator = 1\n    sign = 1\n    \n    # Loop through odd indices to get even index binomial coefficients\n    for i in range(2, n+1, 2):\n        # Calculate the next binomial coefficient\n        numerator = (numerator * i) // denominator\n        denominator = (i - 1) * denominator\n        \n        # Add the binomial coefficient to the result\n        if i % 4 == 0:\n            result += numerator * sign\n        else:\n            result -= numerator * sign\n        \n        # Update the sign\n        sign *= -1\n    \n    return result",
        "num_ids": 175
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 0\n    else:\n        return (math.factorial(n) // math.factorial(n-2) // 2)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(even_binomial_Coeff_Sum(n))",
        "num_ids": 83
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(2, n+1, 2):\n        s += math.comb(n, i)\n    return s",
        "num_ids": 51
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 78
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "num_ids": 75
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        sum = 0\n        for i in range(0, n, 2):\n            binomial_coef = math.comb(n, i)\n            sum += binomial_coef\n        return sum",
        "num_ids": 122
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, k)\n        sum += binomial_coeff\n    return sum",
        "num_ids": 61
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h)\n    return volume",
        "num_ids": 57
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume",
        "num_ids": 54
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Calculate the volume of a cylinder.\n\n    Args:\n        r (float): radius of the cylinder\n        h (float): height of the cylinder\n\n    Returns:\n        float: volume of the cylinder\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 77
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    return 3.14159 * r ** 2 * h",
        "num_ids": 50
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Computes the volume of a cylinder given its radius and height.\n    '''\n    V = math.pi * r ** 2 * h\n    return V",
        "num_ids": 49
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r ** 2 * h",
        "num_ids": 53
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Calculate the volume of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The volume of the cylinder.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume",
        "num_ids": 84
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filter the dictionary `d` to only include entries with values greater than or equal to `n`.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}",
        "num_ids": 55
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result",
        "num_ids": 69
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}",
        "num_ids": 59
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filter a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}",
        "num_ids": 51
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 79
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "num_ids": 77
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict",
        "num_ids": 81
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict",
        "num_ids": 71
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 70
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[test_tup.index(i)+1]:\n            count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[len(test_tup)-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup.index(test_tup[i]):\n            count += 1\n    return count",
        "num_ids": 53
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count",
        "num_ids": 73
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count",
        "num_ids": 73
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        dec_num = 10*num + 1\n        num += 1\n        count += 1\n    return dec_num",
        "num_ids": 73
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    i = 1\n    decagonal_num = 0\n    \n    while count < n:\n        decagonal_num = i * (10**n) + i\n        i += 1\n        \n        if str(decagonal_num)[::-1] == str(decagonal_num):\n            count += 1\n    \n    return decagonal_num",
        "num_ids": 110
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 1\n    for i in range(1, n+1):\n        d += 10**i\n    return d",
        "num_ids": 57
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize a variable to store the sum of all the previous decagonal numbers\n    decagonal_sum = 0\n    \n    # loop through all numbers between 1 and n (inclusive)\n    for i in range(1, n+1):\n        # add the sum of the previous decagonal numbers to the current number\n        decagonal_sum += i*(10**((i-1)//10))\n        \n    # return the nth decagonal number\n    return decagonal_sum",
        "num_ids": 133
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Calculate the nth decagonal number\n    decagonal = n * (3*n - 1) // 2\n    \n    # Check if the nth decagonal number is divisible by 10\n    if decagonal % 10 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 95
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    This function finds the nth decagonal number.\n    \"\"\"\n    num = n * (3 * n - 1) // 2\n    return num",
        "num_ids": 46
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 10*n*(n-1) + 1\n    return decagonal",
        "num_ids": 52
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = n * 10 + (n * (n-1) // 2)\n    return decagonal",
        "num_ids": 57
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Returns True if n is a decagonal number, False otherwise.\n    '''\n    # convert n to string to make it easier to split into digits\n    digits = str(n)\n    # check if length is 3\n    if len(digits)!= 3:\n        return False\n    # split digits into two parts, the first and second digits\n    first_digit, second_digit = digits[0], digits[1]\n    # check if the sum of the two digits is equal to the third digit\n    third_digit = digits[2]\n    return first_digit + second_digit == third_digit",
        "num_ids": 140
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 10*n*(n-1) + 1\n    return decagonal\n\nprint(is_num_decagonal(1))  # Output: 1\nprint(is_num_decagonal(10)) # Output: 100\nprint(is_num_decagonal(20)) # Output: 2000",
        "num_ids": 115
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index",
        "num_ids": 105
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Sequential search function that returns a tuple with a boolean indicating if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 99
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 105
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index",
        "num_ids": 105
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "num_ids": 96
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "num_ids": 107
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return found, index",
        "num_ids": 103
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Check if all elements of a list are unique.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Check if all elements of a given list are unique or not.\n    \n    Args:\n    - test_list: a list of elements\n    \n    Returns:\n    - True if all elements are unique, False otherwise\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 80
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an input and returns True if all the elements of the list are unique, False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True",
        "num_ids": 64
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))",
        "num_ids": 48
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element in unique_list:\n            return False\n        else:\n            unique_list.append(element)\n    return True",
        "num_ids": 70
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a list are unique.\n    \"\"\"\n    return len(test_list) == len(set(test_list))",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n        else:\n            return False\n    return True",
        "num_ids": 74
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]",
        "num_ids": 47
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"The two lists must have the same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result",
        "num_ids": 88
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"Lists are of different lengths.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result",
        "num_ids": 85
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]",
        "num_ids": 52
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n\n    Parameters:\n    nums1 (list): The first list to subtract from.\n    nums2 (list): The second list to subtract.\n\n    Returns:\n    list: The result of subtracting the two lists element-wise.\n    \"\"\"\n\n    result = []\n\n    # Iterate over the lists using a for loop\n    for i in range(len(nums1)):\n        # Subtract the ith element of nums2 from the ith element of nums1\n        result.append(nums1[i] - nums2[i])\n\n    return result",
        "num_ids": 135
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of equal length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 86
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "num_ids": 62
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    # convert the integer into a string and store in a list\n    num_str = [int(d) for d in str(n)]\n    \n    # check the frequency of each digit\n    for digit in range(10):\n        count = num_str.count(digit)\n        if count > digit:\n            return False\n    \n    return True",
        "num_ids": 76
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for d in digits:\n        if digits.count(d) > d:\n            return False\n    return True",
        "num_ids": 44
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    \n    # iterate over each digit in the string\n    for digit in s:\n        # check if the digit is greater than or equal to its frequency in the string\n        if int(digit) >= s.count(digit):\n            return False\n    \n    # if we've made it this far, the number is valid\n    return True",
        "num_ids": 86
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string and store it in a list\n    digits = list(str(n))\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # Iterate over each digit in the list\n    for digit in digits:\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            digit_freq[digit] = 1\n    # Iterate over the frequency of each digit and check if it's less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > int(digit):\n            return False\n    return True",
        "num_ids": 212
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Get the digits of the number\n    digits = [int(i) for i in str(n)]\n\n    # Check the frequency of each digit\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True",
        "num_ids": 94
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n): \n    # get the digits of the number\n    digits = [int(d) for d in str(n)]\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    # iterate through each digit and store its frequency in the dictionary\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for d in digits:\n        if freq[d] > d:\n            return False\n    return True",
        "num_ids": 128
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    \n    for digit in digits:\n        freq[digit] += 1\n        \n    for i in range(10):\n        if freq[i] > i:\n            return False\n        \n    return True",
        "num_ids": 69
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # create a list of 10 zeros\n    while n>0:\n        freq[n%10] += 1 # count the frequency of each digit\n        n //= 10 # remove the last digit from the number\n    return all(f<=i for i,f in enumerate(freq)) # check if all the frequencies are less than or equal to the digit itself",
        "num_ids": 127
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    if n < 0:\n        return False\n\n    digits = [int(d) for d in str(n)]\n    freq = [digits.count(d) for d in digits]\n\n    for f in freq:\n        if f > d:\n            return False\n\n    return True",
        "num_ids": 64
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string to count the frequency of each digit.\n    s = str(n)\n    for digit in range(10):\n        count = s.count(str(digit))\n        # Check if the frequency of the digit is less than or equal to the digit itself.\n        if count > digit:\n            return False\n    return True",
        "num_ids": 112
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    :param list: A list of elements\n    :param element: An element to check against\n    :return: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    if len(set(list)) == 1 and list[0] == element:\n        return True\n    else:\n        return False",
        "num_ids": 106
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function checks whether all elements in a list are equal to a given element.\n    \"\"\"\n    return all(x == elem for x in lst)",
        "num_ids": 43
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    :param lst: list of elements to check\n    :param element: the element to check against\n    :return: True if all items in the list are equal to the given element, False otherwise\n    \"\"\"\n    for item in lst:\n        if item!= element:\n            return False\n    return True",
        "num_ids": 96
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(i == elem for i in lst):\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True",
        "num_ids": 56
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    '''\n    Checks whether all elements in the given list are equal to the given element.\n    '''\n    return all(elem == item for item in lst)",
        "num_ids": 42
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element as arguments and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for i in lst:\n        if i!= elem:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == item for item in lst):\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb{2}|\\bb{3}\\b)'\n    return bool(re.search(pattern, text))",
        "num_ids": 46
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=bb{2,3})'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a[b]{2,3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    return pattern.search(text) is not None",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r\"a\\bb{2,3}\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Generate a modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize variables for max_sum and current_sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the modified array\n    for i in range(n * k):\n        current_sum += modified_array[i]\n        \n        # If current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n        \n        # Update max_sum if current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum",
        "num_ids": 198
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array a of size n and a number k as input,\n    where k is the number of times the original array needs to be repeated.\n    The function returns the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    '''\n\n    # repeat the array k times\n    repeated_array = a * k\n\n    # initialize the maximum sum variable to the first element of the repeated array\n    max_sum = repeated_array[0]\n\n    # initialize the current sum variable to the first element of the repeated array\n    current_sum = repeated_array[0]\n\n    # iterate through the remaining elements of the repeated array\n    for i in range(1, len(repeated_array)):\n        # add the current element to the current sum variable\n        current_sum += repeated_array[i]\n\n        # if the current sum is greater than the maximum sum, update the maximum sum variable\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum",
        "num_ids": 267
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(k): \n        curr_sum = 0\n        for j in range(n): \n            curr_sum += a[j]\n            if curr_sum > max_sum: \n                max_sum = curr_sum\n\n    return max_sum",
        "num_ids": 89
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = float('-inf')\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum += a[j]\n            max_sum = max(max_sum, sum)\n    return max_sum",
        "num_ids": 73
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array by repeating the given array k times\n    new_array = []\n    for i in range(k):\n        new_array += a\n    \n    # Find the largest sum of a contiguous subarray in the new array\n    max_sum = float('-inf')\n    for i in range(len(new_array)):\n        current_sum = 0\n        for j in range(i, len(new_array)):\n            current_sum += new_array[j]\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
        "num_ids": 173
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    sum_original = sum(a)\n    # Calculate the sum of the repeated array\n    sum_repeated = sum_original * k\n    # Calculate the maximum sum of a contiguous subarray\n    max_sum = float('-inf')\n    # Traverse through all possible subarrays of length n*k\n    for i in range(n*k-n+1):\n        subarray_sum = sum(a[i:i+n])\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n    # Return the maximum sum of a contiguous subarray in the repeated array\n    return max_sum * k",
        "num_ids": 194
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a new array of size n*k and copy the given array k times\n    b = a * k\n    \n    # Initialize max_sum and curr_sum to zero\n    max_sum = 0\n    curr_sum = 0\n    \n    # Traverse through the array and find the maximum sum\n    for i in range(n*k):\n        curr_sum += b[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        # If curr_sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    # Return the maximum sum\n    return max_sum",
        "num_ids": 157
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the given array k times and find the maximum sum\n    for i in range(k):\n        for j in range(n):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        # Reset the current sum to zero for the next iteration\n        current_sum = 0\n        \n    return max_sum",
        "num_ids": 153
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes three arguments:\n    a: list of integers\n    n: length of the array\n    k: number of times to repeat the given array\n    \n    It returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a new array by repeating the given array k times\n    repeated_array = a * k\n\n    # Initialize variables to store the current sum and the maximum sum seen so far\n    current_sum = 0\n    max_sum = float('-inf')\n\n    # Loop through the repeated array and keep track of the maximum sum seen so far\n    for i in range(len(repeated_array)):\n        current_sum += repeated_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum",
        "num_ids": 225
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n    a: List of integers representing the array.\n    n: Number of elements in the array.\n    k: Number of times to repeat the array.\n\n    Returns:\n    The largest sum of a contiguous array in the modified array.\n    \"\"\"\n\n    # If k is 1, return the maximum subarray sum in the original array\n    if k == 1:\n        return max_subarray_sum(a, 0, n-1)\n\n    # Repeat the array k times\n    repeated_array = a * k\n\n    # Find the maximum subarray sum in the repeated array\n    max_sum = max_subarray_sum(repeated_array, 0, len(repeated_array)-1)\n\n    return max_sum\n\n\ndef max_subarray_sum(a, low, high):\n    \"\"\"\n    Find the maximum subarray sum in the given array using Kadane's algorithm.\n\n    Args:\n    a: List of integers representing the array.\n    low: Starting index of the subarray.\n    high: Ending index of the subarray.\n\n    Returns:\n    The maximum subarray sum in the given array.\n    \"\"\"\n\n    # Base case\n    if low == high:\n        return a[low]\n\n    # Find the midpoint of the subarray\n    mid = (low + high) // 2\n\n    # Find the maximum subarray sum in the left half of the subarray\n    left_sum = max_subarray_sum(a, low, mid)\n\n    # Find the maximum subarray sum in the right half of the subarray\n    right_sum = max_subarray_sum(a, mid+1, high)\n\n    # Find the maximum subarray sum that crosses the midpoint\n    cross_sum = 0\n    current_sum = a[mid]\n    for i in range(mid-1, low-1, -1):\n        current_sum += a[i]\n        cross_sum = max(cross_sum, current_sum)\n\n    # Return the maximum of the three subarray sums\n    return max(left_sum, right_sum, cross_sum)",
        "num_ids": 490
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum of squares of first n even natural numbers to 0\n    sum_squares = 0\n    \n    # Loop through first n even natural numbers and add their squares to the sum_squares variable\n    for i in range(2, 2*n+1, 2):\n        sum_squares += i*i\n        \n    return sum_squares",
        "num_ids": 108
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(0, 2*n, 2):\n        # add square of each even natural number to sum\n        sum += i**2\n    \n    return sum",
        "num_ids": 89
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    \n    for i in range(2, 2*n, 2):\n        sum_of_squares += i**2\n        \n    return sum_of_squares",
        "num_ids": 74
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum",
        "num_ids": 64
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**2\n    return sum",
        "num_ids": 65
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "num_ids": 67
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through first n even numbers and add their squares to sum\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    \n    # return sum of squares\n    return sum",
        "num_ids": 93
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "num_ids": 76
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function finds the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list",
        "num_ids": 79
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result",
        "num_ids": 95
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = [sublist]\n        elif len(sublist) == max_len:\n            max_list.append(sublist)\n    return max_list",
        "num_ids": 109
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_sub_list = sub_list\n    return max_sub_list",
        "num_ids": 87
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with the maximum length.\n    \"\"\"\n    max_lst = []\n    max_len = 0\n    \n    for lst in lst:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    \n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst",
        "num_ids": 81
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate over all possible combinations of fence colors\n    for i in range(1, k+1):\n        # Calculate the number of ways to paint the fence with the current color\n        ways = 1\n        for j in range(2, n+1):\n            # Check if there are at most 2 adjacent posts with the same color\n            if i <= j-1 <= k-i:\n                ways *= j\n            else:\n                ways *= 2\n        # Add the number of ways to the total count\n        count += ways\n        \n    return count",
        "num_ids": 142
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Base cases\n    if n <= 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # Create a memoization table\n    memo = [[0] * k for _ in range(n)]\n\n    # Fill the memoization table using dynamic programming\n    for i in range(n):\n        for j in range(k):\n            if i == 0:\n                memo[i][j] = j + 1\n            elif i == 1:\n                memo[i][j] = k - j + 1\n            else:\n                memo[i][j] = sum(memo[i-2][max(j-1, 0):j+1])\n\n    # Return the number of ways to paint the fence\n    return memo[n-1][k-1]",
        "num_ids": 195
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for i in range(n)] # create a 2D list to store the number of ways for each position and color\n    \n    # base case: if we have only one post, we have only one way to paint it\n    for i in range(k):\n        dp[0][i] = 1\n        \n    # fill in the rest of the table using the recurrence relation\n    for i in range(1, n):\n        for j in range(k):\n            for l in range(j-1, -1, -1):\n                dp[i][j] += dp[i-1][l] # for each post, we can either paint it with any of the previous colors\n                \n    return dp[n-1][k-1] # return the number of ways for the last post to have k colors\n",
        "num_ids": 193
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n\n    for i in range(1, n):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = dp[i-1][j+1] + dp[i-1][j]\n            elif j == k-1:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i-1][j+1]\n\n    return dp[n-1][0]",
        "num_ids": 187
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D list to store the number of ways to paint the fence\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n    # Initialize the first row and column with 1, as there is only one way to paint the first post\n    for i in range(k+1):\n        dp[1][i] = 1\n    for i in range(n+1):\n        dp[i][1] = 1\n    # Iterate over the remaining posts and fill in the DP table\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # If the fence is already painted with j-1 colors, then there is only one way to paint the ith post\n            if dp[i-1][j-1] > 0:\n                dp[i][j] = 1\n            # If the fence is not already painted with j-1 colors, then there are 2 ways to paint the ith post\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    # Return the number of ways to paint the fence\n    return dp[n][k]",
        "num_ids": 289
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the count of ways for each color at each post\n    ways = [[0] * (k + 1) for _ in range(n)]\n\n    # Initialize the first two posts with one way each\n    for i in range(k):\n        ways[0][i] = 1\n    ways[0][k] = 1\n\n    # Fill in the rest of the array\n    for i in range(1, n):\n        for j in range(k):\n            # Two adjacent posts cannot have the same color\n            ways[i][j] = ways[i-1][j]\n            # One adjacent post can have the same color\n            for l in range(k):\n                if l!= j:\n                    ways[i][j] += ways[i-1][l]\n\n    # The total number of ways is the sum of the ways for each color at the last post\n    total_ways = sum(ways[n-1])\n\n    return total_ways",
        "num_ids": 224
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 1:\n        return k\n    \n    dp = [[0] * k for i in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = 1\n        \n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j]\n            if i > 1:\n                dp[i][j] += dp[i-2][j]\n                \n    return dp[n-1][k-1]",
        "num_ids": 174
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D list with all elements as 0\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n\n    # Initialize the first two elements in dp as 1\n    for i in range(k+1):\n        dp[1][i] = 1\n\n    # Fill the remaining positions in dp using the recurrence relation\n    for i in range(2, n+1):\n        for j in range(k+1):\n            # If the current position has 2 adjacent posts with same color, then there are 0 ways to paint it\n            if j-1 >= 0 and dp[i-1][j-1] > 0:\n                dp[i][j] += dp[i-1][j-1]\n\n            # If the current position has 2 adjacent posts with different colors, then there is 1 way to paint it\n            if j-2 >= 0 and dp[i-1][j-2] > 0:\n                dp[i][j] += dp[i-1][j-2]\n\n    # Return the last element of the last row in dp, which contains the number of ways to paint the fence\n    return dp[n][k]",
        "num_ids": 325
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0]*k for i in range(n)]\n    for i in range(n):\n        dp[i][i%k] = 1 # for single color, there is only one way to paint the fence\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            for m in range(1, k+1):\n                if m == 1: # for first color, there is only one way to paint the fence\n                    dp[i][j%k] += dp[i+1][(j+1)%k]\n                elif m == k: # for last color, there is only one way to paint the fence\n                    dp[i][j%k] += dp[i+1][j%k]\n                else: # for colors in between, there are two possible ways to paint the fence\n                    dp[i][j%k] += dp[i+1][(j+1)%k] + dp[i+1][(j-1)%k]\n    return dp[0][0] # return the number of ways of painting the fence",
        "num_ids": 269
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # initialize a table to store the number of ways of painting each post\n    ways = [1] + [0] * (n-1)\n    \n    # iterate over the posts from left to right\n    for i in range(1, n):\n        # for each post, iterate over the colors from 1 to k\n        for j in range(1, k+1):\n            # if the previous post has the same color, add the number of ways of painting it to the number of ways of painting the current post\n            if i > 1 and j == fence[i-2]:\n                ways[i] += ways[i-2]\n    \n    return ways[n-1]",
        "num_ids": 160
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n / m\n    return int(q)",
        "num_ids": 44
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    '''\n    return n // m",
        "num_ids": 41
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    n (int): The first number.\n    m (int): The second number.\n\n    Returns:\n    int: The quotient of n and m.\n    \"\"\"\n\n    quotient = n // m\n\n    return quotient",
        "num_ids": 76
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "num_ids": 43
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    return n // m",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find the quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1",
        "num_ids": 58
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Divide by zero error\"\n    else:\n        return n // m",
        "num_ids": 55
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Calculate the square of the hypotenuse\n    c = math.pow(w, 2) + math.pow(h, 2)\n    #Calculate the square of the other side of the right angled triangle\n    a = math.pow(c, 0.5)\n    #Calculate the third side\n    b = c / a\n    #Round the result to the nearest integer and return the third side\n    return round(b)",
        "num_ids": 130
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle given the length of the first two sides.\n    '''\n    if w**2 + h**2 == 0:\n        raise ValueError(\"The given values cannot form a right angled triangle.\")\n    else:\n        return math.sqrt(w**2 + h**2)",
        "num_ids": 87
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 51
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(math.pow(w,2) + math.pow(h,2))",
        "num_ids": 59
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 < 10**-8:\n        return \"Not a right angled triangle.\"\n    else:\n        return math.sqrt(10**2 - (w**2 + h**2))",
        "num_ids": 86
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(math.pow(w, 2) + math.pow(h, 2))",
        "num_ids": 61
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c",
        "num_ids": 54
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)",
        "num_ids": 50
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value",
        "num_ids": 80
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in listval:\n            if i > max_val:\n                max_val = i\n        return max_val",
        "num_ids": 83
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of mixed data types.\n    \"\"\"\n    if not lst:\n        return None\n    max_val = lst[0]\n    for val in lst:\n        if isinstance(val, int) and val > max_val:\n            max_val = val\n        elif isinstance(val, float) and val > max_val:\n            max_val = val\n        elif isinstance(val, str) and len(val) > len(max_val):\n            max_val = val\n    return max_val",
        "num_ids": 121
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list of heterogeneous elements and returns the maximum value.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "num_ids": 63
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = lst[0]  # Initialize max_val to the first element of the list\n    for i in lst:\n        if i > max_val:\n            max_val = i  # If the current element is greater than max_val, update max_val to the current element\n    return max_val",
        "num_ids": 95
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val",
        "num_ids": 66
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val",
        "num_ids": 97
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function finds the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_divisor = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor",
        "num_ids": 71
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 60
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 62
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum",
        "num_ids": 69
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as an input and returns the sum of all its divisors.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "num_ids": 71
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all its divisors.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 65
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer number as an argument.\n    It returns the sum of all divisors of the given number.\n    \"\"\"\n    # initialize sum of divisors to 0\n    div_sum = 0\n    \n    # iterate through all numbers from 1 to the given number\n    for i in range(1, number+1):\n        \n        # check if i is a divisor of the given number\n        if number % i == 0:\n            \n            # add i to the sum of divisors\n            div_sum += i\n    \n    # return the sum of divisors\n    return div_sum",
        "num_ids": 133
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 63
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total",
        "num_ids": 58
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    This function returns the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is defined as a pair of elements (a[i], a[j]) such that i < j and a[i] > a[j].\n    '''\n    n = len(arr)\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n    return inversion_count",
        "num_ids": 128
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Merge sort implementation\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    inv_count += (len(left_half) - i)\n                k += 1\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    \n    merge_sort(arr)\n    return inv_count",
        "num_ids": 269
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    # merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n            merge_sort(left_half)\n            merge_sort(right_half)\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] < right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    inv_count += (mid - i) # count inversions\n                k += 1\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n    \n    merge_sort(arr)\n    return inv_count",
        "num_ids": 284
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    mid = len(arr) // 2\n    left_inv_count = get_Inv_Count(arr[:mid])\n    right_inv_count = get_Inv_Count(arr[mid:])\n    merge_inv_count = 0\n    \n    i = j = 0\n    temp = []\n    \n    while i < len(arr[:mid]) and j < len(arr[mid:]):\n        if arr[i] <= arr[j+mid]:\n            temp.append(arr[i])\n            i += 1\n        else:\n            temp.append(arr[j+mid])\n            j += 1\n            merge_inv_count += len(arr[:mid]) - i\n    \n    temp += arr[i:]\n    temp += arr[j:mid]\n    \n    arr[:] = temp\n    \n    return left_inv_count + right_inv_count + merge_inv_count",
        "num_ids": 226
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion is the occurrence of a pair of elements where the left element is greater than the right element.\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count",
        "num_ids": 106
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_inv_count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    # sort the array\n    arr.sort()\n    \n    # loop through the array and count the number of inversions\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                \n    return count",
        "num_ids": 110
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    # merge sort algorithm\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        \n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n            \n            left = merge_sort(left)\n            right = merge_sort(right)\n            \n            arr = merge(left, right)\n        \n        return arr\n    \n    arr = merge_sort(arr)\n    return inv_count",
        "num_ids": 245
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    count = 0\n    n = len(arr)\n\n    # merge sort implementation\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                    count += len(left_half[i:])\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    merge_sort(arr)\n    return count",
        "num_ids": 261
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 80
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    \n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    \n    return flattened_list",
        "num_ids": 80
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for sublist in list1:\n        if type(sublist) == list:\n            result.extend(flatten_list(sublist))\n        else:\n            result.append(sublist)\n    return result",
        "num_ids": 73
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list",
        "num_ids": 86
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "num_ids": 76
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes in a nested list and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if type(sublist) == list:\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n    list1 (list): A nested list containing integers, strings, or other lists.\n\n    Returns:\n    list: A flattened list containing all elements from the input list and its sublists.\n\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list",
        "num_ids": 123
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and flattens it into a single list.\n    \"\"\"\n    flattened_list = []\n    \n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n            \n    return flattened_list",
        "num_ids": 87
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "num_ids": 80
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a defaultdict with default value 0\n    d = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for s, t, d in stdata:\n        # Add the value to the dictionary\n        d += t\n        # Keep track of the maximum aggregate seen so far\n        max_agg = max(max_agg, d)\n    \n    return max_agg",
        "num_ids": 92
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each possible length of the sequence\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for i in range(len(stdata)):\n        # Iterate over the possible lengths of the sequence\n        for j in range(i+1, len(stdata)+1):\n            # Calculate the sum of the tuples from i to j-1\n            agg = sum(t[0] for t in stdata[i:j])\n\n            # Update the maximum aggregate for the current length of the sequence\n            max_agg[j] = max(max_agg[j], agg)\n\n    # Return the maximum aggregate for the longest sequence\n    return max(max_agg.values())",
        "num_ids": 186
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each student's scores\n    freq = defaultdict(int)\n    for s, t, a in stdata:\n        freq[s] += 1\n    \n    # Create a dictionary to store the sum of scores for each student\n    score_sum = defaultdict(int)\n    for s, t, a in stdata:\n        score_sum[s] += a\n    \n    # Calculate the maximum aggregate for each student\n    max_agg = {}\n    for s in freq:\n        max_agg[s] = score_sum[s] / freq[s]\n    \n    # Find the maximum aggregate across all students\n    max_aggregate = max(max_agg.values())\n    \n    return max_aggregate",
        "num_ids": 184
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list of tuples and update the frequency dictionary\n    for item, cost in stdata:\n        freq_dict[item] += cost\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for cost in freq_dict.values():\n        max_agg = max(max_agg, cost)\n\n    return max_agg",
        "num_ids": 123
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each element in the list of tuples.\n    freq = defaultdict(int)\n    for t in stdata:\n        freq[t[0]] += t[1]\n\n    # Calculate the maximum aggregate.\n    max_agg = 0\n    for t in stdata:\n        max_agg += t[1] * (len(stdata) - freq[t[0]])\n\n    return max_agg",
        "num_ids": 127
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of tuples with the same first element\n    sums = defaultdict(int)\n\n    # Iterate through the list of tuples and add the second element to the sum for each first element\n    for t in stdata:\n        sums[t[0]] += t[1]\n\n    # Create a new dictionary to store the maximum aggregate for each first element\n    max_agg = {}\n\n    # Iterate through the list of tuples and calculate the maximum aggregate for each first element\n    for t in stdata:\n        if t[0] not in max_agg:\n            max_agg[t[0]] = t[1]\n        else:\n            max_agg[t[0]] = max(max_agg[t[0]], sums[t[0]] - t[1])\n\n    # Return the maximum aggregate for each first element\n    return max_agg",
        "num_ids": 216
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list of tuples\n    freq = defaultdict(int)\n    for elem in stdata:\n        freq[elem] += 1\n        \n    # initialize variables to store the maximum aggregate and current aggregate\n    max_agg = 0\n    curr_agg = 0\n    \n    # loop through each element in the list of tuples and calculate the aggregate\n    for elem in stdata:\n        curr_agg += elem * freq[elem]\n        if curr_agg > max_agg:\n            max_agg = curr_agg\n        freq[elem] -= 1\n    \n    return max_agg",
        "num_ids": 161
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for item in stdata:\n        freq[item[1]] += 1\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for item in stdata:\n        if freq[item[1]] == 1:\n            max_agg += item[0]\n        else:\n            max_agg += item[0] * (freq[item[1]] - 1)\n\n    return max_agg",
        "num_ids": 140
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for t in stdata:\n        d[t[0]] += t[1]\n        d[t[1]] += t[0]\n    \n    max_agg = 0\n    for k, v in d.items():\n        max_agg = max(max_agg, v)\n    \n    return max_agg",
        "num_ids": 107
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = defaultdict(int)\n    for x, y in stdata:\n        freq_dict[x] += y\n\n    # Find the maximum frequency of an element in the list\n    max_freq = max(freq_dict.values())\n\n    # Find the elements with the maximum frequency and their corresponding frequencies\n    max_elems = [(x, y) for x, y in freq_dict.items() if y == max_freq]\n\n    # Calculate the maximum aggregate as the product of the maximum frequency and the sum of its elements\n    max_aggregate = max_freq * sum([x for x, y in max_elems])\n\n    return max_aggregate",
        "num_ids": 187
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        if binary_str[0:n] == binary_str[-n:]:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary number to a string of bits\n        bits = bin(i)[2:].zfill(n)\n        \n        # Calculate the sum of the first n bits and the last n bits\n        first_sum = sum(map(int, bits[:n]))\n        last_sum = sum(map(int, bits[-n:]))\n        \n        # If the sums are equal, increment the count\n        if first_sum == last_sum:\n            count += 1\n    \n    return count",
        "num_ids": 139
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    \n    # function to check if a given binary number is a valid sequence\n    def is_valid(num):\n        return bin(num).count('1') == n and bin(num).count('0') == n\n        \n    # iterate through all possible binary numbers of length 2n\n    for i in range(2**n):\n        # check if the number is a valid sequence\n        if is_valid(i):\n            # iterate through all possible binary numbers of length n\n            for j in range(2**n):\n                # check if the last n bits are equal to the first n bits of the current sequence\n                if bin(j)[-n:] == bin(i)[:n]:\n                    count += 1\n                    \n    return count",
        "num_ids": 204
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    # Initialize a list to store all binary sequences of length 2n\n    seq_list = []\n    # Loop through all binary numbers of length 2n\n    for i in range(2**n):\n        # Convert the binary number to a string\n        binary = bin(i)[2:].zfill(n)\n        # Calculate the sum of the first n bits\n        first_sum = sum(int(bit) for bit in binary[:n])\n        # Calculate the sum of the last n bits\n        last_sum = sum(int(bit) for bit in binary[n:])\n        # Check if the sums are equal, and add the binary string to the list if they are\n        if first_sum == last_sum:\n            seq_list.append(binary)\n    # Return the count of binary sequences in the list\n    return len(seq_list)",
        "num_ids": 191
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        # convert the decimal number to binary string\n        binary = bin(i)[2:].zfill(n)\n        # calculate the sum of first n bits and last n bits\n        first_n_bits_sum = sum(int(bit) for bit in binary[:n])\n        last_n_bits_sum = sum(int(bit) for bit in binary[-n:])\n        if first_n_bits_sum == last_n_bits_sum:\n            count += 1\n    return count",
        "num_ids": 169
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_n_bits = int(binary_str, 2)\n        last_n_bits = int(binary_str[::-1], 2)\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    # iterate over all possible combinations of first n bits\n    for i in range(2**n):\n        # convert the integer to binary string and remove the prefix '0b'\n        binary_str = bin(i)[2:]\n        # pad the binary string with zeros if its length is less than n\n        binary_str = binary_str.zfill(n)\n        # find the complement of the binary string to get the second set of bits\n        complement = ''.join(['1' if bit == '0' else '0' for bit in binary_str])\n        # convert the complement to an integer\n        complement_int = int(complement, 2)\n        # add the count for this binary sequence\n        count += i == complement_int\n    return count",
        "num_ids": 173
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        # Convert decimal number to binary\n        binary = bin(i)[2:].zfill(n)\n        # Check if first n bits and last n bits have same sum\n        if sum([int(digit) for digit in binary[:n]]) == sum([int(digit) for digit in binary[n:]]): \n            count += 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:]\n        if len(bits) < 2*n:\n            bits = '0'*(2*n-len(bits)) + bits\n        if int(bits[:n],2) == int(bits[n:],2):\n            count += 1\n    return count",
        "num_ids": 90
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    \n    def recursive_depth(d, depth):\n        nonlocal max_depth\n        if isinstance(d, dict):\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n            for value in d.values():\n                recursive_depth(value, depth)\n    \n    recursive_depth(d, 0)\n    return max_depth",
        "num_ids": 106
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 1\n    \n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    \n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n    \n    return depth",
        "num_ids": 101
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as input and returns the depth of the dictionary.\n\n    Args:\n    d: A dictionary\n    \n    Returns:\n    An integer representing the depth of the dictionary.\n    \"\"\"\n\n    if not isinstance(d, dict):\n        return 0\n\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n\n    return depth",
        "num_ids": 103
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n    return depth",
        "num_ids": 78
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                depth = max(depth, 1 + dict_depth(value))\n        return depth\n    else:\n        return 0",
        "num_ids": 79
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0",
        "num_ids": 59
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    while isinstance(d, dict):\n        d = next(iter(d.values()))\n        depth += 1\n    return depth",
        "num_ids": 56
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    Recursively determine the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return depth\n    if not d:\n        return depth\n    max_depth = depth\n    for key, value in d.items():\n        max_depth = max(max_depth, dict_depth(value, depth + 1))\n    return max_depth",
        "num_ids": 89
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    k = ranges[index]\n    l = ranges[index+1]\n    \n    # Calculate the new position after rotations\n    new_index = (index - rotations) % n\n    \n    return arr[new_index]",
        "num_ids": 68
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #calculate the length of the array\n    n = len(arr)\n    #calculate the number of times the array is rotated\n    rotations = rotations % n\n    \n    #rotate the array\n    arr = arr[rotations:]+arr[:rotations]\n    #calculate the index of the element in the rotated array\n    index = (index + rotations) % n\n    \n    return arr[index]",
        "num_ids": 120
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Define the range of the array\n    start_range = ranges[0]\n    end_range = ranges[1]\n    # Define the number of rotations\n    num_rotations = rotations\n    # Define the given index\n    given_index = index\n    # Calculate the new index after rotating the array\n    new_index = (given_index - start_range) % (end_range - start_range) + start_range\n    # Apply the rotation to the array\n    rotated_arr = arr[num_rotations:] + arr[:num_rotations]\n    # Return the element at the new index in the rotated array\n    return rotated_arr[new_index]",
        "num_ids": 159
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Finding the range of values that the index can take\n    left, right = ranges\n    # Adding the rotation to the index\n    index = (index + rotations) % n\n    # Finding the element at the new index\n    element = arr[index]\n    return element\n",
        "num_ids": 81
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Step 1: Convert ranges into a list of tuples\n    ranges = [(i[0], i[1]) for i in ranges]\n\n    # Step 2: Reverse the first range (if necessary)\n    if index >= ranges[0][1]:\n        ranges[0] = (ranges[0][0], index)\n    else:\n        ranges[0] = (ranges[0][1], ranges[0][0])\n\n    # Step 3: Rotate the list by the given number of rotations\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Step 4: Find the element at the given index\n    for i in ranges:\n        if i[0] <= index <= i[1]:\n            return arr[i[0]:i[1]+1][index-i[0]]",
        "num_ids": 210
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # convert ranges to list of lists\n    ranges = [list(map(int, x.split(\":\"))) for x in ranges.split(\",\")]\n    # apply rotations to the given array\n    arr = arr[rotations:] + arr[:rotations]\n    # loop through the ranges and find the element at the given index\n    for r in ranges:\n        if index >= r[0] and index <= r[1]:\n            return arr[index]\n    # if element not found in any range, return None\n    return None",
        "num_ids": 126
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the range of indices to be rotated\n    start_range = index - ranges\n    end_range = index + ranges\n\n    # Apply rotation\n    rotated_arr = arr[start_range:] + arr[:start_range]\n    for _ in range(rotations):\n        rotated_arr = rotated_arr[1:] + rotated_arr[:1]\n\n    # Return the element at the given index\n    return rotated_arr[index]",
        "num_ids": 107
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_element(arr, ranges, rotations, index):\n    \"\"\"\n    Finds the element at a given index after a specified number of rotations.\n\n    :param arr: List of integers\n    :param ranges: List of tuples representing the ranges of the rotations\n    :param rotations: List of integers representing the rotations\n    :param index: Integer representing the index of the element to find\n    :return: The element at the given index after the specified number of rotations\n    \"\"\"\n    # Determine the length of the array\n    n = len(arr)\n\n    # Find the rotation index that contains the given index\n    i = 0\n    while ranges[i][1] < index:\n        i += 1\n\n    # Compute the number of rotations to reach the given index\n    rotations_index = sum(rotations[:i]) + (index - ranges[i][0])\n\n    # Find the element at the given index after the specified number of rotations\n    return arr[(rotations_index % n)]",
        "num_ids": 212
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # First, we need to calculate the total number of elements in the array\n    total_elements = len(arr) * ranges\n\n    # We need to calculate the actual index of the element after the rotations\n    actual_index = (index + rotations) % total_elements\n\n    # We need to calculate the range of the element we want to find\n    element_range = actual_index // len(arr)\n\n    # We need to calculate the index of the element in the range we just calculated\n    element_index = actual_index % len(arr)\n\n    # Finally, we return the element at the calculated index\n    return arr[element_index]",
        "num_ids": 151
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr[ranges[0]:ranges[1]+1]\n    rotations = rotations % len(arr)\n    arr = arr[rotations:] + arr[:rotations]\n    return arr[index]",
        "num_ids": 84
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [w.lower() for w in words] # convert all words to lowercase\n    pattern = re.compile('^p.*') # match any word starting with 'p'\n    matches = [w for w in words if pattern.match(w)] # filter words that match pattern\n    if len(matches) < 2: # if there are not at least two matches, return empty list\n        return []\n    else:\n        return matches[:2] # return the first two matches",
        "num_ids": 138
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*')\n    result = [word for word in words if pattern.match(word)]\n    if len(result) == 2:\n        return result\n    else:\n        return \"Sorry, there are not enough words starting with 'p'.\"\n\nwords = ['apple', 'pear', 'peach', 'pineapple', 'watermelon', 'orange', 'kiwi', 'plum']\nprint(start_withp(words))",
        "num_ids": 142
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if re.match(r'^p', word)]\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' found\"\n    else:\n        return f\"The first two words starting with 'p' are {p_words[0]} and {p_words[1]}\"",
        "num_ids": 115
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]",
        "num_ids": 95
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(r'p\\w+', word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return \"Not enough words starting with 'p'.\"",
        "num_ids": 113
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w*\\b')\n    matches = [word for word in words if pattern.match(word)]\n    return matches[:2]",
        "num_ids": 73
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    return p_words",
        "num_ids": 70
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*\\s\\w*')\n    for word in words:\n        if pattern.match(word):\n            return word.split()\n    return None",
        "num_ids": 77
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w*\\b')\n    words_starting_with_p = [word for word in words if pattern.search(word)]\n    return words_starting_with_p[:2]",
        "num_ids": 85
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w+\\b')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    return p_words[:2]",
        "num_ids": 88
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a dictionary to store the maximum sum of increasing subsequence up to the ith index.\n    dp = {0: 0}\n\n    # Iterate through all the indices from 1 to n.\n    for i in range(1, n+1):\n        # Initialize the maximum sum of increasing subsequence up to the ith index.\n        max_sum = float('-inf')\n\n        # Iterate through all the indices from 0 to i-1.\n        for j in range(i):\n            # If the value at jth index is greater than the value at the ith index,\n            # then add the value at the jth index to the maximum sum of increasing subsequence up to the ith index.\n            if a[j] < a[i]:\n                max_sum = max(max_sum, dp[j])\n\n        # Add the value at the ith index to the maximum sum of increasing subsequence up to the ith index.\n        max_sum += a[i]\n\n        # Store the maximum sum of increasing subsequence up to the ith index in the dp dictionary.\n        dp[i] = max_sum\n\n    # Return the maximum sum of increasing subsequence up to the ith index and including the kth element after the ith index.\n    return dp[index] + a[index+k-1]\n",
        "num_ids": 304
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == k - 1:\n        return a[index]\n    if k == 1:\n        return a[index]\n    if k < index:\n        return 0\n\n    dp = [0] * n\n    dp[0] = a[index]\n    for i in range(1, n):\n        if i < index:\n            dp[i] = dp[i - 1]\n        elif i == index:\n            dp[i] = a[index]\n        else:\n            dp[i] = dp[i - 1] + a[i]\n\n    for i in range(k - 2, index - 1, -1):\n        if dp[i] > dp[i + 1]:\n            return dp[i] + a[index]\n\n    return dp[k - 2]",
        "num_ids": 195
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(index):\n        for j in range(i, -1, -1):\n            if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                dp[i] = dp[j] + a[i]\n    if k > index:\n        return dp[index]\n    else:\n        return dp[index] - a[k] + a[index]",
        "num_ids": 166
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    \n    max_sum = 0\n    for i in range(index):\n        if a[i] < a[index] and dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    if k > index:\n        max_sum += a[k]\n    \n    return max_sum",
        "num_ids": 216
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index])\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)",
        "num_ids": 123
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the variables\n    dp = [0] * (n)\n    prev = [0] * (n)\n\n    # Fill the dp array\n    for i in range(n):\n        if i == 0:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[j] + a[i] for j in range(i))\n\n    # Fill the prev array\n    for i in range(n):\n        if i == 0:\n            prev[i] = -1\n        else:\n            prev[i] = max(j for j in range(i) if dp[j] + a[i] == dp[i])\n\n    # Initialize the variables\n    max_sum = 0\n    max_index = -1\n\n    # Traverse the dp and prev arrays\n    for i in range(index, n):\n        if prev[i]!= -1 and a[i] <= a[prev[i]]:\n            continue\n        elif prev[i]!= -1 and a[i] > a[prev[i]] and a[i] <= a[k]:\n            sum = dp[prev[i]] + a[i]\n            if sum > max_sum:\n                max_sum = sum\n                max_index = i\n        elif prev[i]!= -1 and a[i] > a[prev[i]] and a[i] > a[k]:\n            sum = dp[prev[i]] + a[i]\n            if sum > max_sum:\n                max_sum = sum\n                max_index = i\n\n    return max_sum\n",
        "num_ids": 407
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*n # Initialize dp list with zeros\n    \n    for i in range(index, n):\n        if i == index:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[j]+a[i] for j in range(index)) # Finding maximum sum for each prefix until the ith index\n    \n    # Finding the maximum sum of increasing subsequence from prefix until the ith index and also including a given kth element which is after i, i.e., k > i.\n    max_sum = max(dp[i]+a[k] for i in range(index))\n    \n    return max_sum",
        "num_ids": 208
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[0] = a[0]\n\n    # Fill the dp array\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], a[i])\n\n    # Find the sum of all increasing subsequence including a[index] and a[k]\n    curr_sum = dp[index]\n    for i in range(index+1, k+1):\n        curr_sum += dp[i]\n\n    # Add the sum of all increasing subsequence excluding a[index] and a[k]\n    max_sum = curr_sum\n    for i in range(index-1, -1, -1):\n        curr_sum -= a[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum",
        "num_ids": 197
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize dp array with zeros\n    dp = [0] * n\n    # Initialize maximum sum and maximum index\n    max_sum = float('-inf')\n    max_index = -1\n    # Iterate over prefix until ith index\n    for i in range(index):\n        # Check if kth element is greater than the current element\n        if k > i:\n            # Calculate the maximum sum that can be obtained by including the kth element in the current subsequence\n            temp_sum = dp[i] + a[k]\n            # Check if the current sum is greater than the maximum sum\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_index = k\n        # Calculate the maximum sum that can be obtained by excluding the current element from the current subsequence\n        dp[i] = max(dp[i], a[i])\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including the kth element which is after i\n    return max_sum\n",
        "num_ids": 278
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the maximum sum of increasing subsequence\n    max_sum = []\n\n    # Traverse through the array from left to right\n    for i in range(n):\n        # Check if i is equal to index or not\n        if i!= index:\n            # Calculate the sum of increasing subsequence from prefix until i\n            if k > i:\n                current_sum = sum(a[:i+1]) + a[k]\n            else:\n                current_sum = sum(a[:i+1])\n\n            # Check if the current sum is greater than the maximum sum so far\n            if len(max_sum) == 0 or current_sum > max_sum[-1]:\n                max_sum.append(current_sum)\n\n    # Return the maximum sum of increasing subsequence\n    return max(max_sum)",
        "num_ids": 195
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    if m >= len(tuplex) or n <= 0 or m < 0 or n > len(tuplex[m]):\n        return None\n    else:\n        colon = deepcopy(tuplex[m][n-1:])\n        for i in range(m+1, len(tuplex)):\n            colon.extend(deepcopy(tuplex[i][n-1:]))\n        return colon",
        "num_ids": 116
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[m-1:n]\n    return new_tuplex",
        "num_ids": 70
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): a tuple of integers.\n    m (int): the starting index of the colon (inclusive).\n    n (int): the ending index of the colon (inclusive).\n\n    Returns:\n    tuple: a new tuple containing the selected elements of the original tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]",
        "num_ids": 116
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copying the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slicing the tuple based on m and n values\n    colon_tuplex = tuplex_copy[m-1:n]\n\n    return colon_tuplex",
        "num_ids": 88
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return None\n    if m < 0:\n        m = 0\n    if n > len(tuplex):\n        n = len(tuplex)\n    return deepcopy(tuplex[m:n+1])",
        "num_ids": 98
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes in a tuple and returns a colon of the tuple.\n\n    :param tuplex: A tuple of any type.\n    :param m: An integer representing the starting index of the colon.\n    :param n: An integer representing the ending index of the colon.\n\n    :return: A new tuple containing the elements of the original tuple in the range [m:n+1].\n    '''\n\n    # Create a deep copy of the input tuple.\n    tuplex_copy = deepcopy(tuplex)\n\n    # Create a new tuple to hold the colon.\n    colon = ()\n\n    # Iterate through the range [m:n+1] and append the corresponding elements to the colon tuple.\n    for i in range(m, n+1):\n        colon += (tuplex_copy[i],)\n\n    return colon",
        "num_ids": 192
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns the colon of a tuple.\n    '''\n    colon = deepcopy(tuplex[m:n+1])\n    return colon",
        "num_ids": 49
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Given a tuple of integers and two integers m and n,\n    return a new tuple that contains the elements from m to n-1 from tuplex.\n    \"\"\"\n    newtuplex = deepcopy(tuplex)\n    return newtuplex[m-1:n]",
        "num_ids": 78
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deep copy the input tuple\n    tupl = deepcopy(tuplex)\n    # slice the tuple and return\n    return tupl[m:n]",
        "num_ids": 68
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[m-1:n]\n    return new_tuplex",
        "num_ids": 70
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the list to store the products\n    products = []\n    \n    # Loop through the lists and find the largest product from each list\n    for i in range(N):\n        product = max(nums1[i], nums2[i])\n        products.append(product)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top N largest products\n    return products[:N]",
        "num_ids": 130
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]",
        "num_ids": 60
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Create a list to store the products of the selected factors\n    products = []\n\n    # Loop through the two lists\n    for num1 in nums1:\n        for num2 in nums2:\n            # Check if the product of the selected factors is greater than the smallest product in the list\n            if num1 * num2 > min(products) if products else 0:\n                # Add the product to the list\n                products.append(num1 * num2)\n\n    # Sort the list in descending order and return the first N elements\n    return sorted(products, reverse=True)[:N]",
        "num_ids": 165
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_products = []\n    max_factors = []\n\n    # Compute all possible pairs of factors from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the current pair of factors\n            product = nums1[i] * nums2[j]\n            # If the product is larger than any previously seen product, add it to the list of max products\n            if len(max_products) < N or product > max_products[-1]:\n                max_products.append(product)\n                max_factors.append((nums1[i], nums2[j]))\n                # If the list of max products has reached its maximum size, remove the smallest element\n                if len(max_products) > N:\n                    min_index = min(range(len(max_products)), key=max_products.__getitem__)\n                    max_products.pop(min_index)\n                    max_factors.pop(min_index)\n\n    # Return the list of max products and their corresponding factors\n    return max_products, max_factors",
        "num_ids": 277
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize the maximum product and the current product\n    max_product = 0\n    curr_product = 1\n    \n    # iterate over the first N factors of each list\n    for i in range(N):\n        curr_product *= nums1[i] * nums2[i]\n        max_product = max(max_product, curr_product)\n    \n    return max_product",
        "num_ids": 122
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the arrays in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for the maximum product and the indices of the factors\n    max_product = float('-inf')\n    max_indices = []\n\n    # Iterate through the arrays, selecting one factor from each array and multiplying them together\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                max_indices = [(i, j)]\n            elif product == max_product:\n                max_indices.append((i, j))\n\n    return max_product, max_indices",
        "num_ids": 199
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables\n    products = []\n    max_nums = []\n    \n    # Iterate over both lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the two factors\n            product = nums1[i] * nums2[j]\n            # Append the product to the list of products\n            products.append(product)\n    \n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # Select the specified number of largest products from the list and return them\n    for i in range(N):\n        max_nums.append(products[i])\n    return max_nums",
        "num_ids": 182
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the lists to find the largest product from each pair of factors\n    for i in range(N):\n        for j in range(N):\n            # Check that i and j are not equal to avoid duplicates\n            if i!= j:\n                # Calculate the product of the two factors and add it to the result list\n                product = nums1[i] * nums2[j]\n                result.append(product)\n\n    # Sort the result list in descending order\n    result.sort(reverse=True)\n\n    # Return the first N elements of the result list\n    return result[:N]",
        "num_ids": 175
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    \n    # Loop through each number in the first list\n    for num1 in nums1:\n        # Loop through each number in the second list\n        for num2 in nums2:\n            # Multiply the two numbers and append the product to the list of products\n            products.append(num1 * num2)\n    \n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # Return the specified number of largest products\n    return products[:N]",
        "num_ids": 151
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the products\n    products = []\n    \n    # Loop through each combination of factors from the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Multiply the selected factors and append to the products list\n            products.append(nums1[i] * nums2[j])\n    \n    # Sort the products in descending order and return the top N products\n    return sorted(products, reverse=True)[:N]",
        "num_ids": 145
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 36
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n\n    Args:\n        a (float): First number\n        b (float): Second number\n\n    Returns:\n        float: The maximum of the two numbers\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "num_ids": 73
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 35
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "num_ids": 37
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number.\n    \"\"\"\n    return n & -n",
        "num_ids": 38
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n << 1",
        "num_ids": 49
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer as an argument and returns the integer with the leftmost unset bit set to 1.\n    '''\n    # Using bitwise operator to check the leftmost unset bit\n    if n & (n - 1) == 0:\n        # If the number is a power of 2\n        return n\n    else:\n        # If the number is not a power of 2\n        return n | (n + 1)",
        "num_ids": 108
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit in a binary number.\n    '''\n    # Create a mask to select the rightmost set bit\n    mask = n & (n - 1)\n\n    # Clear the rightmost set bit and set the left most unset bit\n    n &= ~mask\n    n |= (n >> 1)\n\n    return n",
        "num_ids": 85
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit of a given number.\n    '''\n    # Find the right most bit that is set to 0\n    # If all bits are set to 1, return 0\n    if n == 0:\n        return 1\n    right_most_unset_bit = 1 << (len(bin(n)) - 2) - 1\n    if (n & right_most_unset_bit)!= 0:\n        return set_left_most_unset_bit(n & ~right_most_unset_bit)\n    return right_most_unset_bit",
        "num_ids": 142
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a number.\n    '''\n    return n | (n + 1)\n",
        "num_ids": 42
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n-1) == 0:\n        return n\n    else:\n        return set_left_most_unset_bit(n & (n-1))",
        "num_ids": 69
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes a number as input and returns the number with the left most unset bit set to 1.\n    '''\n    # Find the rightmost set bit\n    rightmost_set_bit = 1 << 31\n    while not n & rightmost_set_bit:\n        rightmost_set_bit >>= 1\n    return n | rightmost_set_bit",
        "num_ids": 95
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n ^ (n-1)) + 1",
        "num_ids": 46
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the leftmost unset bit of a number.\n\n    :param n: An integer value.\n    :return: An integer value with the leftmost unset bit set.\n    '''\n    return n | (n + 1)",
        "num_ids": 63
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Calculate the volume of a cone with base radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 55
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculates the volume of a cone with base radius r and height h.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V",
        "num_ids": 55
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h",
        "num_ids": 46
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 62
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))",
        "num_ids": 105
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    return (1/3) * math.pi * r**2 * h",
        "num_ids": 58
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Find the volume of a cone.\n\n    Parameters:\n        r (float): The radius of the base of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    '''\n    return (math.pi * r ** 2) / 3 * h",
        "num_ids": 87
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as arguments and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(f\"The volume of the cone is {volume_cone(radius, height)} cubic units.\")",
        "num_ids": 116
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius of the base of the cone and the height as inputs\n    and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "num_ids": 67
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone and returns the volume of the cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n",
        "num_ids": 57
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes a positive integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power *= 2\n    return power//2",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power*2) <= n:\n        power *= 2\n    return power",
        "num_ids": 65
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (2**i) <= n:\n        i += 1\n    return 2**(i-1)",
        "num_ids": 67
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the highest power of 2 less than or equal to n\n    highest_power_of_2 = 0\n    \n    # Loop through all the numbers between 1 and n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n            # If it is, check if it is greater than the current highest power of 2\n            if i > highest_power_of_2:\n                # If it is, update the highest power of 2\n                highest_power_of_2 = i\n    \n    return highest_power_of_2",
        "num_ids": 186
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 2\n    while power_of_2 <= n:\n        n = n - power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 86
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    power_of_2 = 1\n    while (power_of_2 <= n):\n        n -= power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2",
        "num_ids": 59
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n = n >> 1  # Right shift n by 1 bit\n        power <<= 1  # Left shift power by 1 bit\n    return power >> 1  # Right shift power by 1 bit to get the highest power of 2",
        "num_ids": 102
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    \n    while(power <= n):\n        n -= power\n        power *= 2\n        \n    return power // 2",
        "num_ids": 65
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    \n    while 2**power <= n:\n        power += 1\n        \n    return 2**(power-1)",
        "num_ids": 66
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Return the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n >>= 1\n        power <<= 1\n    return power >> 1",
        "num_ids": 60
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    This function finds then'th Lucas number using recursion.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 66
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n+1):\n            c = a + b\n            a, b = b, c\n        return b",
        "num_ids": 91
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 71
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n and returns then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 75
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(0)) # 2\nprint(find_lucas(1)) # 1\nprint(find_lucas(5)) # 11\nprint(find_lucas(10)) # 123",
        "num_ids": 130
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "num_ids": 73
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    This function applies a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "num_ids": 60
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(lst, string):\n    '''\n    This function applies a given format string to all of the elements in a list.\n    '''\n    for i in range(len(lst)):\n        lst[i] = string.format(lst[i])\n    return lst",
        "num_ids": 58
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(lst, string):\n    '''\n    Apply a given format string to all elements in a list.\n    '''\n    result = []\n    for element in lst:\n        result.append(string.format(element))\n    return result",
        "num_ids": 51
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in lst]",
        "num_ids": 47
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "num_ids": 62
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list",
        "num_ids": 63
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    This function takes a list and a format string as input and returns a new list with all the elements of the list\n    formatted with the format string.\n    '''\n    return [string.format(i) for i in list_]",
        "num_ids": 59
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    This function takes two arguments - a list of strings and a format string.\n    It applies the given format string to all the strings in the list and returns the updated list.\n    \"\"\"\n    updated_list = []\n    for string in list_:\n        updated_list.append(string + string)\n    return updated_list",
        "num_ids": 78
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "num_ids": 62
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]",
        "num_ids": 47
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {k: v for k, v in zip(l1, l2)}\n    d2 = {k: v for k, v in zip(l1, l3)}\n    return {'d1': d1, 'd2': d2}",
        "num_ids": 93
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    \n    # iterate through the three lists\n    for i in range(len(l1)):\n        # create an empty dictionary for each list\n        nested_dict = {}\n        \n        # add the elements from each list to the nested dictionary\n        nested_dict['list1'] = l1[i]\n        nested_dict['list2'] = l2[i]\n        nested_dict['list3'] = l3[i]\n        \n        # add the nested dictionary to the main dictionary with the index as the key\n        my_dict[i] = nested_dict\n        \n    return my_dict",
        "num_ids": 166
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        temp_dict = {}\n        temp_dict['name'] = l1[i]\n        temp_dict['age'] = l2[i]\n        temp_dict['gender'] = l3[i]\n        result.append(temp_dict)\n    return result",
        "num_ids": 107
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Iterate over the three lists and add key-value pairs to the dictionary\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n        \n    # Return the final dictionary\n    return result_dict",
        "num_ids": 114
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                result[l1[i]][l2[j]][l3[k]] = None\n    return result",
        "num_ids": 120
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][\"name\"] = l2[i]\n        result[l1[i]][\"age\"] = l3[i]\n    return result",
        "num_ids": 97
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result",
        "num_ids": 82
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert three lists into a nested dictionary.\n\n    :param l1: List 1.\n    :param l2: List 2.\n    :param l3: List 3.\n    :return: A nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the nested dictionary.\n    result = {}\n\n    # Loop through each element in the first list.\n    for i in range(len(l1)):\n        # Initialize an empty dictionary for each element in the first list.\n        result[l1[i]] = {}\n\n        # Loop through each element in the second list.\n        for j in range(len(l2)):\n            # Initialize an empty dictionary for each element in the second list.\n            result[l1[i]][l2[j]] = {}\n\n            # Loop through each element in the third list.\n            for k in range(len(l3)):\n                # Add the third list element as a key-value pair to the nested dictionary.\n                result[l1[i]][l2[j]][l3[k]] = l3[k]\n\n    return result",
        "num_ids": 248
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    max_sum = n\n    \n    for i in range(2, n+1):\n        # Calculate the maximum sum possible for i\n        max_sum_i = 0\n        max_sum_i += get_max_sum(i//2)\n        max_sum_i += get_max_sum(i//3)\n        max_sum_i += get_max_sum(i//4)\n        max_sum_i += get_max_sum(i//5)\n        \n        # Add i to the maximum sum possible\n        max_sum += i\n        \n        # Update the maximum sum if necessary\n        if max_sum_i + i > max_sum:\n            max_sum = max_sum_i + i\n    \n    return max_sum",
        "num_ids": 179
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "num_ids": 130
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 129
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return max(n + get_max_sum(n//2), n)\n    elif n % 3 == 0:\n        return max(n + get_max_sum(n//3), n)\n    elif n % 4 == 0:\n        return max(n + get_max_sum(n//4), n)\n    elif n % 5 == 0:\n        return max(n + get_max_sum(n//5), n)\n    else:\n        return n",
        "num_ids": 184
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n        return max_sum",
        "num_ids": 137
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + n\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + n\n    elif n % 4 == 0:\n        return get_max_sum(n/4) + n\n    elif n % 5 == 0:\n        return get_max_sum(n/5) + n\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 170
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)",
        "num_ids": 129
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return max(n + get_max_sum(n//2), get_max_sum(n//2))\n    elif n % 3 == 0:\n        return max(n + get_max_sum(n//3), get_max_sum(n//3))\n    elif n % 4 == 0:\n        return max(n + get_max_sum(n//4), get_max_sum(n//4))\n    else:\n        return max(n + get_max_sum(n//5), get_max_sum(n//5))",
        "num_ids": 214
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))",
        "num_ids": 128
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(n, n/2 + get_max_sum(n/2), n/3 + get_max_sum(n/3), n/4 + get_max_sum(n/4), n/5 + get_max_sum(n/5))\n",
        "num_ids": 143
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list",
        "num_ids": 102
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_len = len(max(input_list, key=len))\n    for i in input_list:\n        if len(i) == max_len:\n            return i",
        "num_ids": 71
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_length_list.append(input_list[i])\n    return max_length_list",
        "num_ids": 134
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    This function returns the list with maximum length from a given list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 84
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 80
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result = lst\n    return result",
        "num_ids": 74
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n            \n    return max_list",
        "num_ids": 110
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function checks if the given tuple contains no duplicates.\n    '''\n    # Using set() function to remove duplicate elements from the tuple\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "num_ids": 44
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True",
        "num_ids": 52
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    \n    # iterate over the tuple\n    for elem in test_tup:\n        # check if the element is already in the set\n        if elem in unique_set:\n            # if so, return False\n            return False\n        # if not, add it to the set\n        else:\n            unique_set.add(elem)\n    \n    # if all elements are unique, return True\n    return True",
        "num_ids": 122
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None  # no non-repeating character found",
        "num_ids": 82
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a dictionary to count the frequency of characters\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    # Find the first character that has a frequency of 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None",
        "num_ids": 143
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string.\n    freq_dict = {}\n    # Loop through each character in the string and update the dictionary accordingly.\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    # Loop through the string again to find the first non-repeated character.\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    # If all characters are repeated, return None.\n    return None",
        "num_ids": 165
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None  # no non-repeating character found",
        "num_ids": 82
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over the string and return the first character that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no such character exists, return None\n    return None",
        "num_ids": 148
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return \"All characters are repeating\"",
        "num_ids": 111
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to keep track of the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the string again and return the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None",
        "num_ids": 145
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 52
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    # regex pattern to check if string starts and ends with the same character\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n\n    # check if string matches the pattern\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(r'^[a-z]$|^([a-z]).*\\1$', string):\n        return True\n    else:\n        return False",
        "num_ids": 70
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nprint(check_char('abc')) # True\nprint(check_char('abb')) # False\nprint(check_char('a')) # True",
        "num_ids": 111
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))\n",
        "num_ids": 46
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted list is even, take the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1])/2\n    else:\n        # If the length of the sorted list is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median",
        "num_ids": 157
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and b > c:\n        return b\n    elif b > a and a > c:\n        return a\n    elif c > a and a > b:\n        return a\n    elif c > b and b > a:\n        return b\n    elif a == b and b == c:\n        return a\n    else:\n        return \"Invalid input\"",
        "num_ids": 102
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of these numbers.\n    '''\n    numbers = sorted([a,b,c])\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        return numbers[len(numbers)//2]",
        "num_ids": 93
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the list has an even length, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        # If the list has an odd length, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n        \n    return median",
        "num_ids": 157
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median\n",
        "num_ids": 101
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median value.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median value of the sorted numbers\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    # Return the median value\n    return median",
        "num_ids": 137
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = [a, b, c]\n    lst.sort()\n    if len(lst) % 2 == 0:\n        median = (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2\n    else:\n        median = lst[len(lst)//2]\n    return median",
        "num_ids": 100
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    median = numbers[1]\n    return median",
        "num_ids": 49
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # find the median\n    median = 0\n    if len(sorted_numbers) % 2 == 0:\n        # if there are even number of elements, take the average of middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        # if there are odd number of elements, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median",
        "num_ids": 161
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    # find the median of the three numbers\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        median = numbers[len(numbers)//2]\n    # return the median\n    return median",
        "num_ids": 122
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result",
        "num_ids": 79
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num < 0:\n            num = abs(num)  # make the number positive to compute the sum of digits\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result",
        "num_ids": 109
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        # Convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of digits\n        sum_of_digits = sum(digits)\n        # Print the sum of digits of the number\n        print(f\"The sum of digits of {num} is {sum_of_digits}\")",
        "num_ids": 115
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_of_digits_list.append(digit_sum)\n    return sum_of_digits_list",
        "num_ids": 96
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        total_sum += sum\n    return total_sum",
        "num_ids": 87
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        result.append(sum_of_digits)\n    return result",
        "num_ids": 91
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n        sum_list.append(sum_digits)\n    return sum_list",
        "num_ids": 95
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result",
        "num_ids": 72
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        total_sum += digit_sum\n    return total_sum",
        "num_ids": 82
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input, and performs the bitwise xor operation\n    across them.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 81
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "num_ids": 81
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "num_ids": 78
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "num_ids": 81
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "num_ids": 49
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if type(item) == tuple:\n            unique_tuples.add(item)\n    return len(unique_tuples)",
        "num_ids": 71
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)",
        "num_ids": 53
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tuple in test_list:\n        if tuple in freq_dict:\n            freq_dict[tuple] += 1\n        else:\n            freq_dict[tuple] = 1\n    return len(freq_dict)",
        "num_ids": 83
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(item))\n    return len(freq)",
        "num_ids": 58
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            if item not in freq:\n                freq[item] = 1\n            else:\n                freq[item] += 1\n    return len(freq)",
        "num_ids": 82
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(x) for x in test_list)\n    return len(unique_tuples)",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)",
        "num_ids": 66
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_count = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            if item not in freq_count:\n                freq_count[item] = 1\n            else:\n                freq_count[item] += 1\n    return len(freq_count)",
        "num_ids": 92
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)",
        "num_ids": 74
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(x + y for x, y in zip(test_tup1[i], test_tup2[i])),)\n    return result_tup",
        "num_ids": 98
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(map(sum, zip(test_tup1[i], test_tup2[i]))), )\n    return result_tup",
        "num_ids": 95
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp_tup = ()\n        for num1, num2 in zip(tup1, tup2):\n            temp_tup += (num1 + num2,)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 116
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    \n    # iterate over the elements of the tuple and perform addition\n    for i in range(len(test_tup1)):\n        tup_temp = ()\n        for j in range(len(test_tup1[i])):\n            tup_temp += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (tup_temp,)\n    \n    return result_tup",
        "num_ids": 135
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)",
        "num_ids": 117
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_list = []\n        for j in range(len(test_tup1[i])):\n            inner_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_list))\n    return tuple(result)",
        "num_ids": 123
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup",
        "num_ids": 123
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(3, 4)) # Output: 3",
        "num_ids": 56
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b",
        "num_ids": 40
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 43
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 44
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments, a and b, and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 47
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 42
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two arguments:\n    tuplex: The tuple in which we want to check for the element.\n    tuple1: The element whose existence we want to check.\n    \n    The function returns True if the element exists within the tuple, and False otherwise.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n\n    :param tuplex: The tuple to search in.\n    :param tuple1: The tuple to search for.\n    :return: True if all elements in `tuple1` are present in `tuplex`, False otherwise.\n    '''\n    for elem in tuple1:\n        if elem not in tuplex:\n            return False\n    return True",
        "num_ids": 95
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and returns True if the first tuple contains the second tuple, else it returns False.\n    '''\n    for elem in tuple1:\n        if elem not in tuplex:\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] == tuplex:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, else False.\n    \"\"\"\n    if x % 2!= 0: # if the remainder of the number divided by 2 is not equal to 0, it's odd\n        return True\n    else:\n        return False",
        "num_ids": 76
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd,\n    otherwise it returns False.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 58
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 49
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is an even number\")\n    else:\n        print(f\"{x} is an odd number\")",
        "num_ids": 67
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 53
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as an argument and returns True if the parity of the number is odd, else False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "num_ids": 56
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function checks whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "num_ids": 50
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string and a list of digits\n    s = str(n)\n    digits = [int(d) for d in s]\n    \n    # Find the index of the rightmost digit that is smaller than its adjacent digit\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    if i < 0:\n        # No such digit found\n        return -1\n    \n    # Find the rightmost digit that is smaller than the digit at index i\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the two digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits after the swapped one\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(str(d) for d in digits))",
        "num_ids": 261
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the number to a string\n    num = str(n)\n\n    # Convert the string to a list of digits\n    digits = list(num)\n\n    # Find the index of the rightmost digit that is smaller than its next digit\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n\n    # If no such index exists, return -1\n    if i < 0:\n        return -1\n\n    # Find the rightmost digit that is smaller than the digit at i\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Swap the digits at indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits after index i\n    digits[i+1:] = digits[len(digits)-1:i:-1]\n\n    # Convert the list of digits back to a string and return it\n    return int(''.join(digits))",
        "num_ids": 259
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize variables\n    result = \"\"\n    num_list = list(num_str)\n    \n    # Loop through the digits in the number\n    for i in range(len(num_list)):\n        # Loop through the digits after the current digit\n        for j in range(i+1, len(num_list)):\n            # If the current digit is less than the next digit, swap them and update the result string\n            if num_list[i] < num_list[j]:\n                temp = num_list[i]\n                num_list[i] = num_list[j]\n                num_list[j] = temp\n                result = int(\"\".join(num_list))\n                break\n        # If a swap was made, break out of the inner loop\n        if result:\n            break\n    \n    return result",
        "num_ids": 223
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    # Find the index of the rightmost digit that needs to be swapped\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    # If no such digit exists, return -1\n    if i < 0:\n        return -1\n    # Find the index of the smallest digit greater than digits[i] to the right of i\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    # Swap digits[i] with digits[j]\n    digits[i], digits[j] = digits[j], digits[i]\n    # Sort the rest of the digits\n    digits[i+1:] = sorted(digits[i+1:])\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))",
        "num_ids": 238
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the input number.\n    '''\n    \n    # Convert the input number into a list of digits\n    digits = list(str(n))\n    \n    # Reverse the list of digits to start comparing from the least significant digit\n    digits.reverse()\n    \n    # Initialize variables to keep track of the indices of the digits to be swapped\n    i = 0\n    j = len(digits) - 1\n    \n    # Initialize a flag variable to keep track of whether a swap is made or not\n    swap_made = False\n    \n    # Loop through the list of digits and find the indices of the digits to be swapped\n    while i < j:\n        if digits[i] < digits[j]:\n            i += 1\n        else:\n            j -= 1\n            swap_made = True\n    \n    # If no swap is made, the input number is the largest possible number, so return None\n    if not swap_made:\n        return None\n    \n    # Swap the digits at the indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the list of digits back to its original order and convert it back to an integer\n    return int(\"\".join(digits))",
        "num_ids": 276
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    result = []\n    for i in range(len(num)-1, -1, -1):\n        max_num = max(int(num[i+1:]), int(num[:i+1+1]))\n        result.append(str(max_num))\n    return int(''.join(result))",
        "num_ids": 110
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string for easy manipulation\n    num = str(n)\n    \n    # Initialize variables for the digit and its index that needs to be swapped\n    digit_to_swap = ''\n    index_to_swap = 0\n    \n    # Iterate over the digits of the number\n    for i in range(len(num)):\n        # If the digit is greater than the previous digit and the digit is greater than the digit to the left of it,\n        # or if it's the first digit and it's greater than the digit to the right of it,\n        # then we know that this digit needs to be swapped with the digit to the left of it.\n        if (int(num[i]) > int(num[i-1]) if i > 0 else False) or (i == 0 and int(num[i]) > int(num[i+1])):\n            digit_to_swap = num[i]\n            index_to_swap = i\n            break\n    \n    # If no digit needs to be swapped, then the number is already sorted in descending order,\n    # so we return None to indicate that there is no next bigger number.\n    if not digit_to_swap:\n        return None\n    \n    # Find the largest digit that is smaller than the digit to be swapped\n    for i in range(len(num)-1, -1, -1):\n        if int(num[i]) < int(digit_to_swap):\n            largest_digit = num[i]\n            break\n    \n    # Swap the digit to be swapped with the largest digit that is smaller than it\n    num = num[:index_to_swap] + largest_digit + num[index_to_swap+1:] + digit_to_swap + num[index_to_swap+2:]\n    \n    # Convert the string back to an integer and return it\n    return int(num)",
        "num_ids": 434
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string so we can manipulate its digits\n    n = str(n)\n    # Create a list of the digits in the number\n    digits = list(n)\n    # Create a dictionary to keep track of the indices of each digit\n    digit_indices = {digit: i for i, digit in enumerate(digits)}\n    # Find the largest digit that is smaller than the digit next to it\n    largest_index = None\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            largest_index = i\n    # If there is no such digit, return None\n    if largest_index is None:\n        return None\n    # Swap the largest digit with the digit next to it\n    digits[largest_index], digits[largest_index+1] = digits[largest_index+1], digits[largest_index]\n    # Sort the digits after the largest digit\n    digits[largest_index+1:] = sorted(digits[largest_index+1:])\n    # Reconstruct the number from the sorted digits and the indices of the digits\n    result = int(''.join(digits))\n    for digit, index in digit_indices.items():\n        if digits[index]!= digit:\n            result = result - int(digit) + int(digits[index])\n    return result",
        "num_ids": 292
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the given number.\n    \"\"\"\n    num_str = str(n)\n    digits = [int(digit) for digit in num_str]\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            j = i+1\n            while j < len(digits) and digits[j] > digits[i]:\n                j += 1\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            digits[i+1:] = sorted(digits[i+1:])\n            return int(\"\".join(str(digit) for digit in digits))\n    return -1",
        "num_ids": 175
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the index of the rightmost digit that needs to be swapped\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            index = i\n            break\n    \n    # If there is no such digit, return -1 (no bigger number possible)\n    if index == 0:\n        return -1\n    \n    # Swap the digits and reverse the list\n    digits[index-1], digits[index] = digits[index], digits[index-1]\n    digits = digits[:index] + digits[index:][::-1]\n    \n    # Convert the list back to a number and return it\n    return int(''.join(str(digit) for digit in digits))",
        "num_ids": 217
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for other in nums2:\n            heapq.heappush(heap, (num + other, num, other))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [pair for _, num, other in heap for pair in [(num, other)]]",
        "num_ids": 98
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function finds k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        value, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n    return result",
        "num_ids": 165
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(heap, pair)\n\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n\n    return pairs",
        "num_ids": 121
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs",
        "num_ids": 118
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1+num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(p[1], p[2]) for p in pairs]",
        "num_ids": 100
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(pair[1], pair[2]) for pair in sorted(pairs)]",
        "num_ids": 102
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for num2 in nums2:\n            pair = (num, num2)\n            heapq.heappush(pairs, pair)\n    return heapq.nsmallest(k, pairs)",
        "num_ids": 75
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (abs(num1 - num2), num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [(pair[1], pair[2]) for pair in sorted(pairs, key=lambda x: x[0])]",
        "num_ids": 113
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, num1, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs",
        "num_ids": 87
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    \n    for num in nums1:\n        for num2 in nums2:\n            pair = (num, num2)\n            heapq.heappush(heap, pair)\n    \n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n    \n    return pairs",
        "num_ids": 91
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf') # initialize minimum product to infinity\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1] # calculate product of two tuples\n            if product < min_product:\n                min_product = product # update minimum product if necessary\n    \n    return min_product",
        "num_ids": 140
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as an argument and returns the minimum product from the pairs of tuples.\n    '''\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product",
        "num_ids": 82
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of the tuples in the given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 109
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n    \n    # Iterate through all tuples within the list\n    for tup in list1:\n        # Check if the length of the tuple is 2\n        if len(tup) == 2:\n            # Calculate the product of the tuple elements\n            product = tup[0] * tup[1]\n            # If the product is less than the current minimum, update the minimum\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product",
        "num_ids": 151
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as an input and returns the minimum product of the two tuples\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 116
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 109
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 122
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][0] * list1[j][1]) < (list1[i][1] * list1[j][0]):\n                product = list1[i][0] * list1[j][1]\n            else:\n                product = list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "num_ids": 162
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for item in listval:\n        if type(item) == int:\n            if item < minimum:\n                minimum = item\n        elif type(item) == float:\n            if item < minimum:\n                minimum = item\n        elif type(item) == str:\n            if len(item) < len(str(minimum)):\n                minimum = item\n    return minimum",
        "num_ids": 112
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    \n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    \n    return min_val",
        "num_ids": 68
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function will return the minimum value from a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum",
        "num_ids": 57
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(lst):\n    \"\"\"\n    Return the minimum value in the list.\n    If there are multiple minimum values, return the first one.\n    \"\"\"\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 68
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for val in listval:\n        if val < minimum:\n            minimum = val\n    return minimum",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        return min(listval[0], min_val(listval[1:]))",
        "num_ids": 70
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values and returns the minimum value.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_value = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    \n    return min_value",
        "num_ids": 94
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in the list.\n    \"\"\"\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val",
        "num_ids": 63
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val",
        "num_ids": 66
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if type(item) is int and item < min_val:\n            min_val = item\n        elif type(item) is float and item < min_val:\n            min_val = item\n        elif type(item) is str and len(item) < len(min_val):\n            min_val = item\n    return min_val",
        "num_ids": 120
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)",
        "num_ids": 61
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in re.split('_', word))",
        "num_ids": 53
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 42
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "num_ids": 53
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word",
        "num_ids": 80
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "num_ids": 42
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Converts the given snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, re.findall(r'[a-zA-Z][a-z]*', word)))",
        "num_ids": 60
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\", \"\")",
        "num_ids": 44
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "num_ids": 53
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake_case string to camelCase.\n    '''\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)",
        "num_ids": 56
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all the odd numbers from it.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 65
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list",
        "num_ids": 58
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list",
        "num_ids": 62
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]",
        "num_ids": 43
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n and returns the nth element of the first tuple in the list.\n    \"\"\"\n    return lst[n-1][0]",
        "num_ids": 51
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [lst[n] for lst in list1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and returns the nth element from each tuple.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result",
        "num_ids": 61
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and returns the nth element from each tuple.\n    '''\n    return [lst[i][n] for i in range(len(lst))]",
        "num_ids": 51
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Parameters:\n    lst (list): The list of tuples to extract from.\n    n (int): The index of the element to extract.\n\n    Returns:\n    The nth element from the list of tuples.\n    \"\"\"\n    return lst[n-1][1]",
        "num_ids": 80
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]",
        "num_ids": 46
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes two parameters:\n    list1 - a list of tuples\n    n - the index of the element to be extracted\n\n    The function returns the nth element of the list of tuples.\n    '''\n\n    # Initialize an empty list to store the extracted elements\n    result = []\n\n    # Loop through the list of tuples\n    for tup in list1:\n        # Extract the nth element from each tuple and append it to the result list\n        result.append(tup[n])\n\n    # Return the result list\n    return result",
        "num_ids": 120
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    # extract the nth element from each tuple in the list\n    result = [x[n] for x in list1]\n    return result",
        "num_ids": 61
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a list of tuples.\n    '''\n    return [t[n] for t in lst]",
        "num_ids": 40
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in a sequence exists in another sequence.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "num_ids": 47
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    return any(value in list2 for value in list1)",
        "num_ids": 43
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in list1 \n    exists in list2 or vice versa, else it returns False.\n    \"\"\"\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, else False.\n\n    Args:\n        list1 (list): A list of integers.\n        list2 (list): A list of integers.\n\n    Returns:\n        bool: True if any value in the first list exists in the second list, else False.\n\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False\n",
        "num_ids": 110
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and returns True if there is any overlapping value in the two lists,\n    otherwise it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 62
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in the first sequence exists in the second sequence.\n    '''\n    return any(elem in list2 for elem in list1)",
        "num_ids": 43
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    If a value exists in list2, it returns True. Otherwise, it returns False.\n    '''\n\n    for value in list1:\n        if value in list2:\n            return True\n\n    return False",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    return any(elem in list2 for elem in list1)",
        "num_ids": 45
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 129
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return max(max1*max2, min1*min2)",
        "num_ids": 136
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n    max_val = arr[0]\n    min_val = arr[0]\n    max_prod = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        max_prod = max(max_prod, arr[i], arr[i]*max_val, arr[i]*min_val)\n    return max_prod",
        "num_ids": 138
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)\n",
        "num_ids": 176
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        current_product = arr[i] * max_product\n        current_min_product = arr[i] * min_product\n        \n        if current_product > max_product:\n            max_product = current_product\n            max_pair = (arr[i], max_pair[0])\n        \n        if current_min_product > max_product:\n            max_product = current_min_product\n            max_pair = (arr[i], max_pair[0])\n        \n        if current_product < min_product:\n            min_product = current_product\n            max_pair = (max_pair[0], arr[i])\n        \n        if current_min_product < min_product:\n            min_product = current_min_product\n            max_pair = (max_pair[0], arr[i])\n    \n    return max_pair",
        "num_ids": 270
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "num_ids": 95
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = max(arr)\n    min_num = min(arr)\n    if max_num < 0:\n        return max(max_num * arr[arr.index(max_num)], max_num * arr[arr.index(min_num)])\n    else:\n        return max(max_num * arr[arr.index(max_num)], max_num * arr[arr.index(min_num)], min_num * arr[arr.index(min_num)])",
        "num_ids": 139
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = [arr[i], arr[j]]\n    return max_pair, max_product",
        "num_ids": 126
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    min_num = arr[0]\n    max_pair = []\n    \n    for num in arr:\n        if num > max_num:\n            max_num = num\n            max_pair = [max_num, min_num]\n        elif num < min_num:\n            min_num = num\n            max_pair = [max_num, min_num]\n        elif num == max_num and num == min_num:\n            max_pair = [max_num, min_num]\n        elif num == max_num:\n            pass\n        elif num == min_num:\n            pass\n    \n    return max_pair",
        "num_ids": 170
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair",
        "num_ids": 115
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = None\n    for tup in Input:\n        if common is None:\n            common = tup[0]\n        elif tup[0]!= common:\n            return None\n    return common",
        "num_ids": 65
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = Input[0][0]  # Get the first element of the first tuple\n    for i in range(1, len(Input)):\n        if Input[i][0]!= first_element:\n            return None  # If there is any tuple with different first element, return None\n    return first_element  # If all tuples have the same first element, return it\n",
        "num_ids": 109
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tpl in Input:\n        key = tpl[0]\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(tpl)\n    return groups",
        "num_ids": 70
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] in groups:\n            groups[tup[0]].append(tup)\n        else:\n            groups[tup[0]] = [tup]\n    return groups",
        "num_ids": 74
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the first element of the tuples\n    that occurs most frequently.\n    '''\n    # initialize a dictionary to store the frequency of each first element\n    freq = {}\n\n    # loop through each tuple in the input list\n    for t in Input:\n        # if the first element of the tuple is already in the dictionary, increment its frequency\n        if t[0] in freq:\n            freq[t[0]] += 1\n        # if the first element of the tuple is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[t[0]] = 1\n\n    # initialize variables to keep track of the maximum frequency and the corresponding first element\n    max_freq = 0\n    max_element = None\n\n    # loop through the dictionary to find the first element with the maximum frequency\n    for element, frequency in freq.items():\n        if frequency > max_freq:\n            max_freq = frequency\n            max_element = element\n\n    return max_element",
        "num_ids": 221
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element == None:\n            common_element = tup[0]\n        elif tup[0]!= common_element:\n            return None\n    return common_element",
        "num_ids": 75
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_first_element = None\n    \n    # Iterate over all the tuples in the input list\n    for tup in Input:\n        # If the current tuple has a first element\n        if tup[0] is not None:\n            # If the first element matches the common first element so far\n            if common_first_element is None or tup[0] == common_first_element:\n                # Set the common first element to the current first element\n                common_first_element = tup[0]\n            else:\n                # If there are multiple common first elements, return None\n                return None\n    \n    return common_first_element",
        "num_ids": 135
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = set()\n    for tup in Input:\n        first_element.add(tup[0])\n    return first_element",
        "num_ids": 56
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple_ in Input:\n        if common_element is None:\n            common_element = tuple_[0]\n        elif common_element!= tuple_[0]:\n            return None\n    return common_element",
        "num_ids": 75
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group = []\n    for i in Input:\n        if len(group) == 0:\n            group.append(i)\n        elif group[0][0] == i[0]:\n            group.append(i)\n        else:\n            yield group\n            group = [i]\n    yield group",
        "num_ids": 89
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element",
        "num_ids": 85
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    This function takes a list as input and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    result = None\n    \n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            result = i\n            \n    return result",
        "num_ids": 75
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 78
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function finds the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    \n    return max_element",
        "num_ids": 79
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list that has the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element",
        "num_ids": 83
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem",
        "num_ids": 58
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 86
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))",
        "num_ids": 54
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(rounded_list)\n    print(result)",
        "num_ids": 88
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(rounded_list))",
        "num_ids": 83
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))",
        "num_ids": 78
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = sum([round(num) for num in list1])\n    result = total_sum * len(list1)\n    print(result)",
        "num_ids": 77
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))",
        "num_ids": 72
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of cubes of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+2, 2):\n        sum += i**3\n    return sum",
        "num_ids": 67
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return (n*(n+1)*(2*n+1))**2",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 64
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum_even = 0\n        for i in range(2, 2*n+1, 2):\n            sum_even += i**3\n        return sum_even",
        "num_ids": 81
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, 2*n+1, 2):\n        cube_sum += i**3\n    return cube_sum",
        "num_ids": 70
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables\n    sum = 0\n    count = 0\n\n    # Loop through first n even natural numbers and add their cubes to sum\n    while count < n:\n        sum += count ** 3\n        count += 2\n\n    # Return the sum of cubes\n    return sum",
        "num_ids": 88
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "num_ids": 58
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]",
        "num_ids": 64
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string[:-2]",
        "num_ids": 69
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 56
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1] # removing the last delimiter",
        "num_ids": 62
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as an input and returns the concatenated string.\n    The string is formed by concatenating each element of the tuple with the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))",
        "num_ids": 63
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    \"\"\"\n    This function concatenates each element of a tuple by a delimiter.\n    \"\"\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            result += str(test_tup[i])\n        else:\n            result += str(test_tup[i]) + delimiter\n    return result",
        "num_ids": 92
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "num_ids": 59
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            result += delimiter\n    return result",
        "num_ids": 80
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    \"\"\"\n    This function takes a tuple of strings as input and concatenates each string element of the tuple by the specified delimiter.\n    \"\"\"\n    result = ''\n    for i in test_tup:\n        result += i + delimiter\n    return result.rstrip(delimiter)",
        "num_ids": 67
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes in a tuple and a delimiter string and returns a new tuple with the\n    elements of the original tuple concatenated by the delimiter string.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        new_tup += (elem + delimiter,)\n    return new_tup[:-1]",
        "num_ids": 79
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_average_of_cubes(n):\n    \"\"\"\n    This function finds the average of cubes of first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers whose cubes are to be averaged.\n\n    Returns:\n        float: The average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n",
        "num_ids": 99
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg",
        "num_ids": 66
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg\n\nprint(find_Average_Of_Cube(5)) # Output: 1.6666666666666667",
        "num_ids": 102
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "num_ids": 85
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg_of_cubes = sum_of_cubes / n\n    return avg_of_cubes",
        "num_ids": 95
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is\", find_Average_Of_Cube(n))",
        "num_ids": 109
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average = sum_cubes/n\n    return average",
        "num_ids": 75
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average",
        "num_ids": 81
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg",
        "num_ids": 66
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    This function extracts only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple = rear_tuple + (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 70
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple = rear_tuple + (string[-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return tuple(rear_list)",
        "num_ids": 67
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[rear_index],)\n    return rear_tuple",
        "num_ids": 81
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(s[-1] for s in test_tuple)",
        "num_ids": 48
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = ()\n    for string in test_tuple:\n        rear_index_tuple += (string[len(string)-1],)\n    return rear_index_tuple",
        "num_ids": 73
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[::-1][0])\n    return rear_list",
        "num_ids": 66
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            for j in range(len(list1[i])):\n                if list1[i][j] == x:\n                    count += 1\n        elif list1[i] == x:\n            count += 1\n    return count",
        "num_ids": 112
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the count of sublists containing the element.\n\n    :param list1: A list of elements\n    :param x: An element to search in the list\n    :return: An integer value representing the count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i:]\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 120
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count",
        "num_ids": 68
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count",
        "num_ids": 98
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 70
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function filters out the odd numbers from a list of numbers and returns a new list.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))",
        "num_ids": 51
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n    return [n for n in nums if n % 2 == 0]",
        "num_ids": 40
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 58
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as an input and returns a new list containing only the odd numbers from the input list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums",
        "num_ids": 75
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the input list.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 55
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]",
        "num_ids": 40
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Returns a new list with only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 39
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None",
        "num_ids": 107
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 103
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'\\d{4}-\\d{2}-\\d{2}$', dt):\n        parts = dt.split('-')\n        return '{}-{}-{}'.format(parts[2], parts[1], parts[0])\n    else:\n        return None",
        "num_ids": 102
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt",
        "num_ids": 86
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 107
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None",
        "num_ids": 107
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = re.findall('\\d+', dt)\n    new_dt = dd+'-'+mm+'-'+yyyy\n    return new_dt",
        "num_ids": 77
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "num_ids": 103
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None",
        "num_ids": 109
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)",
        "num_ids": 78
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 130
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes an array as input and sorts it using the shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    # sorting the array with shell sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "num_ids": 143
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        \n        # Do a gapped insertion sort for this gap size. \n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted \n            # up to position i \n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n            \n        # Reduce the gap for the next iteration\n        gap //= 2\n    \n    return my_list",
        "num_ids": 186
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n\n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    while gap > 0:\n\n        # Insertion sort with gap\n        for i in range(gap, n):\n            temp = my_list[i]\n\n            # shift earlier gap-sorted elements up until the correct location for temp is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # put temp in its correct location\n            my_list[j] = temp\n\n        # Reduce the gap for the next iteration\n        gap //= 2\n\n    return my_list",
        "num_ids": 231
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list",
        "num_ids": 130
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "num_ids": 130
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2",
        "num_ids": 126
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result",
        "num_ids": 77
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] and test_tup2[i]),)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup",
        "num_ids": 83
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(map(lambda x: x[i] & x[i+1], zip(test_tup1, test_tup2))))\n    return result",
        "num_ids": 92
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes in the coefficients of a parabola (a, b, and c) and returns the x-coordinate of its directrix.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Calculate and return the x-coordinate of the directrix\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix of the parabola has two solutions: {x1} and {x2}.\"\n    elif discriminant == 0:\n        x = (-b)/(2*a)\n        return f\"The directrix of the parabola has one solution: {x}.\"\n    else:\n        return f\"The parabola has no real directrices.\"\n",
        "num_ids": 215
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d == 0:\n        x = -b / (2*a)\n        print(\"The directrix of the parabola is at x =\", x)\n    elif d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        print(\"The directrix of the parabola is between x =\", x1, \"and x =\", x2)\n    else:\n        print(\"The parabola has no real directrices.\")",
        "num_ids": 171
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    :param a: The coefficient of the quadratic term.\n    :param b: The coefficient of the linear term.\n    :param c: The constant term.\n    :return: The x-coordinate of the directrix.\n    \"\"\"\n\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the roots of the discriminant\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n\n        # Check which root is the correct one\n        if root1 > 0:\n            return root1\n        elif root2 > 0:\n            return root2\n        else:\n            return \"No directrix exists.\"\n\n    # Check if the discriminant is equal to zero\n    elif discriminant == 0:\n        # Calculate the root of the discriminant\n        root = -b / (2 * a)\n\n        # Check if the root is positive\n        if root > 0:\n            return root\n        else:\n            return \"No directrix exists.\"\n\n    # If the discriminant is less than zero, there are no real roots\n    else:\n        return \"No directrix exists.\"",
        "num_ids": 322
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x_directrix = (-b + math.sqrt(discriminant)) / (2*a)\n        \n        # Return the x-coordinate\n        return x_directrix\n    else:\n        print(\"The parabola has no directrix.\")",
        "num_ids": 122
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 'No directrix exists for this equation.'\n    else:\n        directrix = -b / (2 * a)\n        return f'The directrix of the parabola is {directrix}.'",
        "num_ids": 85
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        print(\"Not a parabola\")\n        return None\n    \n    delta = b**2 - 4*a*c\n    \n    if delta < 0:\n        print(\"No real solution\")\n        return None\n    \n    x = (-b - math.sqrt(delta)) / (2*a)\n    \n    return x",
        "num_ids": 108
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than 0\n    if delta > 0:\n        # Calculate the two roots\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return (x1, x2)\n    else:\n        # If the discriminant is 0, there is only one root\n        x = -b / (2*a)\n        return x",
        "num_ids": 160
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2 * a)\n    return directrix",
        "num_ids": 50
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return [x1, x2]\n    elif delta == 0:\n        x = -b / (2*a)\n        return [x]\n    else:\n        return None",
        "num_ids": 130
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"Coefficient of x^2 cannot be zero.\")\n    else:\n        return -b/(2*a)",
        "num_ids": 66
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 54
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)):\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))",
        "num_ids": 51
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element.\n    \n    :param list1: The first list of integers.\n    :param list2: The second list of integers.\n    :return: True if the lists have at least one common element, False otherwise.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False",
        "num_ids": 90
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "num_ids": 56
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median\n    median = (base1 + base2) / 2\n    \n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # calculate the median length\n    median_length = 2 * area / (base1 + base2)\n    \n    return median_length",
        "num_ids": 109
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median",
        "num_ids": 53
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = 0.5 * (base1 + base2) * height\n    median_length = 2 * area / median\n    return median_length",
        "num_ids": 83
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    return median",
        "num_ids": 51
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (height * median) / 2\n    return area\n\nprint(median_trapezium(5, 7, 12))",
        "num_ids": 84
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length",
        "num_ids": 60
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height",
        "num_ids": 52
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height",
        "num_ids": 52
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median length\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n    \n    # Calculate the median perimeter\n    median_perimeter = 2 * (base1 + base2)\n    \n    # Calculate the median height\n    median_height = 2 * area / median_perimeter\n    \n    # Round off the median height to two decimal places\n    median_height = round(median_height, 2)\n    \n    # Return the median length\n    return median_height",
        "num_ids": 162
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 50
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            return True\n    print(f\"{number} is not greater than any element of the array.\")\n    return False",
        "num_ids": 80
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than any of the elements of the array, and False otherwise.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "num_ids": 48
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\Sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 50
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 51
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 50
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the last digit of that number.\n    \"\"\"\n    return n % 10",
        "num_ids": 37
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10",
        "num_ids": 36
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n    \"\"\"\n    return n % 10",
        "num_ids": 31
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number.\n    \"\"\"\n    return n % 10",
        "num_ids": 31
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit",
        "num_ids": 58
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function returns the last digit of a given number n.\n    \"\"\"\n    return n % 10",
        "num_ids": 32
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "num_ids": 34
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit",
        "num_ids": 56
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an input and returns the negative numbers in the list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 59
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from a given list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result",
        "num_ids": 51
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 70
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 72
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]",
        "num_ids": 42
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list",
        "num_ids": 61
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    return ''.join(filter(lambda x: int(x) % 2 == 0, str1))",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for i, char in enumerate(str1) if i % 2 == 0)",
        "num_ids": 50
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])",
        "num_ids": 46
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:  # check if the ASCII code of the character is even\n            result += char  # add the even character to the result string\n    return result",
        "num_ids": 74
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i % 2 == 0:\n            new_str += i\n    return new_str",
        "num_ids": 59
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join(char for i, char in enumerate(str1) if i % 2 == 0)",
        "num_ids": 46
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result",
        "num_ids": 56
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is even (i.e., its ASCII code is divisible by 2)\n        if ord(char) % 2 == 0:\n            # If the character is even, append it to the result string\n            result += char\n    \n    # Return the result string\n    return result",
        "num_ids": 124
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if ord(i)%2!= 0:\n            result += i\n    return result",
        "num_ids": 54
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 105
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or \\\n               (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count",
        "num_ids": 144
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function counts the number of bidirectional tuple pairs in the list.\n    A tuple pair is bidirectional if the elements in each tuple are in reverse order.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 107
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns the number of bidirectional tuples.\n    A bidirectional tuple is a tuple where the first and last element are the same.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][-1] and test_list[j][0] == test_list[i][-1]:\n                count += 1\n    return count",
        "num_ids": 131
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list as input and returns the count of bidirectional tuple pairs.\n    A tuple pair is said to be bidirectional if the elements of the tuples are in the same order.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count",
        "num_ids": 134
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i], test_list[j]) in [(test_list[j], test_list[i])] and test_list[i]!= test_list[j]:\n                    count += 1\n    return count",
        "num_ids": 112
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    # Iterate over all possible pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the current pair is bidirectional\n            if (test_list[i][0] == test_list[j][1] and\n                test_list[i][1] == test_list[j][0]):\n                count += 1\n    \n    return count",
        "num_ids": 125
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total",
        "num_ids": 48
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Joins a list of multiple integers into a single integer.\n\n    Args:\n    L (list): List of integers\n\n    Returns:\n    int: Single integer\n    \"\"\"\n    return int(''.join(str(x) for x in L))",
        "num_ids": 62
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num",
        "num_ids": 62
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result",
        "num_ids": 50
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join([str(i) for i in L]))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(i) for i in L))",
        "num_ids": 46
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "num_ids": 36
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns the position and value of the first adverb in the sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        position = match.start()\n        return (position, adverb)\n    else:\n        return None",
        "num_ids": 99
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find the first adverb using regular expressions\n    pattern = r'\\b(?:an?|every|everywhere|here|in|near|nowhere|of|on|outside|under|until)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n\n    # If an adverb is found, return its position and text\n    if match:\n        return {'position': match.start(), 'text': match.group()}\n    else:\n        return None",
        "num_ids": 140
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # If no adverbs found, return None\n    if len(adverbs) == 0:\n        return None\n\n    # Find the position of the first adverb\n    first_adverb = adverbs[0]\n    first_pos = text.find(first_adverb)\n\n    # Return the first adverb and its position as a tuple\n    return (first_adverb, first_pos)",
        "num_ids": 153
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|really|quite|rather|extremely|most|usually|regularly|constantly|frequently|seldomly|constantly|always|never|sometimes|occasionally|sometimes|hardly|scarcely|reluctantly|readily|painfully|impatiently|earnestly|earnestly|quickly|slowly|quickly|slowly|usually|generally|seriously|insanely|extremely|insanely|highly|lowly|mildly|adequately|exactly|approximately|almost|nearly|near|right|left|up|down|ahead|behind|near|far|close|near|far|close|far|near|next|previous|current|former|recent|distant|nearby|faraway|remote|local)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "num_ids": 270
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'  # matches adverbs ending in \"ly\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None",
        "num_ids": 71
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text using a regular expression\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    \n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n    \n    # Find the position of the first adverb in the text\n    first_adverb = adverbs[0]\n    first_adverb_pos = text.index(first_adverb)\n    \n    # Return a tuple with the first adverb and its position\n    return (first_adverb, first_adverb_pos)",
        "num_ids": 164
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None\n",
        "num_ids": 83
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    if not adverbs:\n        return \"No adverb found in the sentence.\"\n    else:\n        adverb = adverbs[0]\n        position = text.index(adverb)\n        return f\"The first adverb in the sentence is {adverb} and its position is {position}.\"",
        "num_ids": 127
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the given text\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n\n    # Return the first adverb and its position in the text\n    if adverbs:\n        return (adverbs[0], text.index(adverbs[0]))\n    else:\n        return None",
        "num_ids": 95
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # find all adverbs in the text using a regular expression\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # if there are no adverbs, return an empty list\n    if not adverbs:\n        return []\n    # find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    position = text.index(first_adverb)\n    # return a list containing the first adverb and its position\n    return [first_adverb, position]",
        "num_ids": 134
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the surface area of the cube.\n    '''\n    surfacearea = 6 * l**2\n    return surfacearea",
        "num_ids": 47
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube and returns its surface area.\n    '''\n    return 6 * l**2",
        "num_ids": 36
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area",
        "num_ids": 46
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    return area",
        "num_ids": 45
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2",
        "num_ids": 39
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    area = 6 * (l ** 2)\n    return area",
        "num_ids": 45
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2",
        "num_ids": 38
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "num_ids": 73
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio",
        "num_ids": 71
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num",
        "num_ids": 73
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None # initialize largest_neg to None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num # update largest_neg if a smaller negative number is found\n    return largest_neg # return the largest negative number",
        "num_ids": 98
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    \n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    \n    return max_neg",
        "num_ids": 69
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg",
        "num_ids": 77
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and abs(list1[i]) > abs(max_neg):\n            max_neg = list1[i]\n    return max_neg",
        "num_ids": 92
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest",
        "num_ids": 57
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initialize the largest variable to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num # update the largest variable if the current number is negative and larger than the previous largest\n    if largest == float('-inf'):\n        print(\"There are no negative numbers in the list.\")\n    else:\n        print(\"The largest negative number in the list is:\", largest)",
        "num_ids": 117
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest",
        "num_ids": 65
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for elem in tup:\n            trimmed_tup += (elem, )\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 83
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        new_tup = tup[:K] + tup[-K:]\n        result_list.append(new_tup)\n    return result_list",
        "num_ids": 76
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = []\n        for elem in tup:\n            new_tup.append(elem[K:])\n        result.append(tuple(new_tup))\n    return result",
        "num_ids": 81
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[K:])\n    return trimmed_list",
        "num_ids": 62
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([x[K:] for x in tup])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 78
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[K:])\n    return trimmed_list",
        "num_ids": 62
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        trimmed = tuple(t[k] for k in range(K))\n        result.append(trimmed)\n    return result",
        "num_ids": 70
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list",
        "num_ids": 80
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_tuple = tuple(test_list[i][K:])\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list",
        "num_ids": 81
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = tuple(tup[i] for i in range(len(tup)) if i < K)\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list",
        "num_ids": 87
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "num_ids": 82
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 86
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup",
        "num_ids": 119
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function performs index-wise multiplication of the elements of two tuples.\n    If the lengths of the tuples are not equal, it will return a tuple of None values for the missing indices.\n    '''\n    result_tup = []\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result_tup.append(test_tup1[i] * test_tup2[i])\n        else:\n            result_tup.append(None)\n    return tuple(result_tup)",
        "num_ids": 152
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result",
        "num_ids": 80
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "num_ids": 79
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and performs index-wise multiplication of their elements.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for item in tup:\n        if item in count:\n            result.append((item, count[item]))\n        else:\n            result.append((item, 0))\n    return result",
        "num_ids": 90
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = []\n    for element in lst:\n        if element in count:\n            result.append((element, count[element]))\n        else:\n            result.append((element, 0))\n    return result",
        "num_ids": 90
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count.values()",
        "num_ids": 53
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = {}\n    for i in lst:\n        if i in tup:\n            count_dict[i] = tup.count(i)\n    return count_dict",
        "num_ids": 53
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input. It returns the count of all elements of list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = [count_dict[i] for i in tup]\n    return count_tup",
        "num_ids": 76
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as inputs and returns a dictionary containing the count of each element in the list in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict",
        "num_ids": 79
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object from the list\n    counter = Counter(lst)\n\n    # Initialize an empty dictionary to store the count of each element in the tuple\n    result = {}\n\n    # Iterate over the elements of the tuple\n    for elem in tup:\n        # If the element is in the list, update the result dictionary with the count of the element in the list\n        if elem in lst:\n            result[elem] = counter[elem]\n\n    # Return the result dictionary\n    return result",
        "num_ids": 139
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for elem in tup:\n        if elem in count:\n            print(f\"{elem}: {count[elem]}\")",
        "num_ids": 72
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = Counter(lst)\n    \n    # create a list to store the count of each element in the tuple\n    result_list = []\n    for element in tup:\n        if element in count_dict:\n            result_list.append(count_dict[element])\n        else:\n            result_list.append(0)\n    return result_list",
        "num_ids": 129
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for item in lst:\n        if item in count_dict:\n            print(f\"{item}: {count_dict[item]}\")",
        "num_ids": 78
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of individual elements in the input list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 62
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the cubes of each element.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 61
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "num_ids": 50
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 53
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result",
        "num_ids": 50
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 53
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "num_ids": 53
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perrin_sum(n):\n    '''\n    Calculate the sum of the first n Perrin numbers.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop over the first n Perrin numbers\n    for i in range(1, n+1):\n        # Add the i-th Perrin number to the sum\n        sum += 1/i**2\n        \n    # Return the sum\n    return sum",
        "num_ids": 92
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 64
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a perrin number\n        if is_perrin(i):\n            # Add i to the sum\n            sum += i\n            \n    return sum\n\ndef is_perrin(num):\n    \"\"\"\n    Helper function to check if a number is a perrin number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the string is a palindrome\n    return num_str == num_str[::-1]",
        "num_ids": 165
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "num_ids": 63
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = 1\n    q = 1\n    total = 0\n    \n    for i in range(n):\n        total += p\n        temp = p\n        p = q\n        q = temp + q\n        \n    return total\n\nprint(cal_sum(10)) # Output: 728",
        "num_ids": 88
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += (i*(i+1))//2\n    return total",
        "num_ids": 52
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers up to n.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i*(i-1)\n    return s\n\nprint(cal_sum(10))",
        "num_ids": 67
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        sum += i**2 + i + 1 \n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(10)) # Output: 157",
        "num_ids": 81
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            new_list.append(l[i])\n    return new_list",
        "num_ids": 74
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size value as input and returns a list of strings of specified size.\n    '''\n    result_list = []\n    for i in range(0, len(str_list), size):\n        result_list.append(' '.join(str_list[i:i+size]))\n    return result_list",
        "num_ids": 87
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and returns a list of strings of the specified size.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(' '.join(l[i:i+str]))\n    return result",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    Returns a new list with the extracted strings.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list: List of string values.\n        size: The size of the string to be extracted.\n\n    Returns:\n        A list of extracted strings.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result",
        "num_ids": 96
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            result.append(str[i])\n    return result",
        "num_ids": 69
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Parameters:\n        lst: list of string values\n        size: desired size of strings to extract\n\n    Returns:\n        List of strings of specified size extracted from the input list.\n    \"\"\"\n    result = []\n    for s in lst:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result",
        "num_ids": 95
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of specified size.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(str_list[i:i+size])\n    return result",
        "num_ids": 77
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all white spaces from the string using regular expression\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2",
        "num_ids": 68
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing all whitespaces from the string using regular expressions\n    text2 = re.sub(r\"\\s+\", \"\", text1)\n    return text2",
        "num_ids": 70
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to replace whitespaces with empty string\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 60
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces from the string using regular expressions\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 44
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as an argument and returns the string with all whitespaces removed.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 55
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "num_ids": 50
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the loss amount on a sale if the given amount has loss, otherwise returns 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "num_ids": 68
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount on a sale if the sale amount is less than the actual cost.\n    If the sale amount is greater than or equal to the actual cost, returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 82
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes actual cost of a product and the amount sold to calculate the loss amount.\n    If the sale amount is greater than the actual cost, then the loss amount is calculated.\n    If the sale amount is equal to or less than the actual cost, then 0 is returned.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0",
        "num_ids": 111
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0",
        "num_ids": 67
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    This function calculates the loss amount on a sale.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "num_ids": 63
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments:\n    - actual_cost: The actual cost of the product before the sale.\n    - sale_amount: The amount that was sold.\n\n    It returns the loss amount if there is any loss, else it returns 0.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount",
        "num_ids": 97
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Function to calculate loss amount if the sale has loss, else return 0.\n    '''\n    loss_amount = 0\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    return loss_amount",
        "num_ids": 69
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "num_ids": 70
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two parameters: actual_cost and sale_amount.\n    It calculates the loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0",
        "num_ids": 79
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and finds the sum of all the even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "num_ids": 78
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of the number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n            if i!= n // i:\n                sum_of_factors += n // i\n    return sum_of_factors",
        "num_ids": 117
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if (n//i) % 2 == 0:\n                    sum += n//i\n    return sum",
        "num_ids": 113
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i!= i:\n                if n//i % 2 == 0:\n                    sum += n//i\n    return sum",
        "num_ids": 110
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum ",
        "num_ids": 78
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of that number.\n    \"\"\"\n    sum = 0  # initialize sum to 0\n\n    # loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # check if i is a factor of n\n        if n % i == 0:\n            # if i is even, add it to the sum\n            if i % 2 == 0:\n                sum += i\n\n    return sum",
        "num_ids": 119
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            if (n // i) % 2 == 0 : \n                sum += n // i \n    return sum ",
        "num_ids": 106
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    This function takes a number as input and returns the sum of all the even factors of the number.\n    \"\"\"\n    sum = 0 \n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            if (n//i) % 2 == 0 : \n                sum += n//i \n    return sum ",
        "num_ids": 111
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of the number.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)",
        "num_ids": 119
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all even factors of n.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        \n        # Check if i is a factor of n\n        if n % i == 0:\n            \n            # If i is even, add it to the sum\n            if i % 2 == 0:\n                sum += i\n            \n            # Check if the other factor is even and add it to the sum\n            j = n // i\n            if j % 2 == 0:\n                sum += j\n    \n    # Return the sum\n    return sum",
        "num_ids": 169
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 60
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text, flags=re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 57
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns all words that contain the letter 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 78
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 46
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches",
        "num_ids": 67
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 62
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 62
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function takes a string as an argument and returns all the words containing the letter 'z'.\n    \"\"\"\n    # Use regex to match all words containing the letter 'z'\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    \n    return matches",
        "num_ids": 84
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    # Regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Find all matches in the text and return them as a list\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 84
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 64
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "num_ids": 85
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"This month has 30 days.\")\n    elif monthnum == 2:\n        print(\"This month has 28 or 29 days.\")\n    else:\n        print(\"This month has 31 days.\")",
        "num_ids": 88
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 74
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"The month has 30 days.\")\n    elif monthnum == 2:\n        print(\"The month has 28 or 29 days.\")\n    else:\n        print(\"The month has 31 days.\")",
        "num_ids": 88
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    :param monthnum: An integer representing the month number (1-12)\n    :return: True if the month number contains 31 days, False otherwise\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True",
        "num_ids": 105
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return None",
        "num_ids": 105
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return True if monthnum2 % 2 == 0 else False",
        "num_ids": 87
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and (2021 % 4!= 0 or (2021 % 100 == 0 and 2021 % 400!= 0))):\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False",
        "num_ids": 123
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return None\n",
        "num_ids": 110
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 2:  # February has 28 or 29 days\n        return True\n    elif monthnum in [4, 6, 9, 11]:  # April, June, September, November have 30 days\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:  # January, March, May, July, August, October, December have 31 days\n        return True\n    else:\n        return False",
        "num_ids": 128
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    This function takes a list of strings as input and returns a new list with each string in reverse order.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "num_ids": 76
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "num_ids": 70
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list",
        "num_ids": 70
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list",
        "num_ids": 61
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]",
        "num_ids": 45
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])  # initialize the minimum length as the length of the first sublist\n    min_sublist = lst[0]  # initialize the minimum sublist as the first sublist\n    \n    for sublist in lst:  # iterate through all sublists\n        if len(sublist) < min_len:  # if the length of the current sublist is less than the minimum length\n            min_len = len(sublist)  # update the minimum length\n            min_sublist = sublist  # update the minimum sublist\n            \n    return min_sublist",
        "num_ids": 152
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 84
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = lst[i:j]\n            if len(sublst) < min_len:\n                min_len = len(sublst)\n                min_lst = sublst\n    return min_lst",
        "num_ids": 111
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist",
        "num_ids": 85
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst",
        "num_ids": 99
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = []\n    \n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_lst = sublst\n    \n    return min_lst",
        "num_ids": 84
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 84
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')  # initialize minimum length to maximum possible value\n    min_lst = []  # initialize sublist with no elements\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sub_lst = lst[i:j+1]  # get sublist from i to j\n            if len(sub_lst) < min_len:  # if sublist length is less than current minimum\n                min_len = len(sub_lst)  # update minimum length\n                min_lst = sub_lst  # update minimum sublist\n    \n    return min_lst  # return minimum sublist",
        "num_ids": 167
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    for sub_lst in lst:\n        if len(sub_lst) == min_len:\n            return sub_lst",
        "num_ids": 95
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst",
        "num_ids": 87
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two arguments, length and breadth, and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area",
        "num_ids": 48
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle given its length and width.\n    '''\n    area = l * b\n    return area\n\nlength = float(input(\"Enter the length of the rectangle: \"))\nwidth = float(input(\"Enter the width of the rectangle: \"))\n\nprint(f\"The area of the rectangle is {rectangle_area(length, width):.2f}\")",
        "num_ids": 94
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments l and b, which represent the length and breadth of a rectangle, respectively.\n    It returns the area of the rectangle.\n    '''\n    return l * b",
        "num_ids": 52
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes length and breadth of a rectangle as arguments and returns its area.\n    '''\n    return l * b",
        "num_ids": 38
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * breadth",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and breadth of a rectangle and returns its area.\n    \"\"\"\n    area = l * b\n    return area",
        "num_ids": 41
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(length, width):\n    '''\n    This function takes length and width of a rectangle as input and returns its area.\n    '''\n    area = length * width\n    return area",
        "num_ids": 40
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "num_ids": 31
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "num_ids": 35
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 35
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)",
        "num_ids": 48
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as an argument and returns a new string with all uppercase substrings removed.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 59
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)",
        "num_ids": 54
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Use regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use findall() to find all matches and join() to concatenate them\n    return ''.join(pattern.findall(str1))",
        "num_ids": 65
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regex to match all uppercase substrings in the string\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n\n    # create a new string that does not contain any uppercase substrings\n    new_str = re.sub('[A-Z]+', '', str1)\n\n    return new_str",
        "num_ids": 99
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns the string with all uppercase substrings removed.\n    '''\n    # Use regex to match all uppercase substrings\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n    \n    # Use a list comprehension to remove all matches from the original string\n    filtered_str = ''.join([char for char in str1 if char.islower()])\n    \n    # Return the filtered string\n    return filtered_str",
        "num_ids": 110
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Use regular expressions to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Find all non-overlapping matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # Replace each uppercase substring with an empty string\n    result = re.sub('|'.join(matches), '', str1)\n    return result",
        "num_ids": 89
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if type(sublist) == list:\n            result.append(sublist[0])\n    return result",
        "num_ids": 59
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    This function will extract the first element of each sublist from the given list and return a new list.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst",
        "num_ids": 62
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in a list.\n    \"\"\"\n    return [sublist[0] for sublist in lst]",
        "num_ids": 38
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function returns a new list containing only the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 51
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "num_ids": 39
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "num_ids": 39
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function extracts the first element of each sublist in a list.\n    '''\n    return [sublist[0] for sublist in lst]",
        "num_ids": 40
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list with the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 58
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "num_ids": 49
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of uppercase letters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 34
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the number of uppercase characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    # Base case: if the list is empty, return an empty list\n    if not lst:\n        return []\n\n    # Recursive case: for each element in the list, create all possible\n    # combinations of the remaining elements and append the current element\n    # to each combination.\n    combos = []\n    for i, elem in enumerate(lst):\n        remaining_elems = lst[:i] + lst[i+1:]\n        for combo in combinations_list(remaining_elems):\n            combos.append([elem] + combo)\n\n    return combos",
        "num_ids": 142
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    comb_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            comb = lst[i] + lst[j]\n            comb_lst.append(comb)\n    return comb_lst",
        "num_ids": 90
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result",
        "num_ids": 80
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    n = len(lst)\n    comb_lst = []\n    for i in range(2**n):\n        # convert integer to binary string with n bits\n        binary = bin(i)[2:].zfill(n)\n        # convert binary string to combination of elements in lst\n        comb = [lst[j] for j in range(n) if binary[j] == '1']\n        comb_lst.append(comb)\n    return comb_lst",
        "num_ids": 133
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result",
        "num_ids": 84
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend(list(itertools.combinations(list1, i)))\n    return result",
        "num_ids": 70
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of the elements in the given list.\n    '''\n    combos = []\n    for i in range(1, len(lst) + 1):\n        combos += list(itertools.combinations(lst, i))\n    return combos",
        "num_ids": 69
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(list1[i]+list1[j])\n    return result",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result",
        "num_ids": 78
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_product = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            temp = max_ending_here * arr[i]\n            max_ending_here = max(arr[i], max(temp, min_ending_here * arr[i]))\n            min_ending_here = min(arr[i], min(temp, min_ending_here * arr[i]))\n            max_product = max(max_product, max_ending_here)\n        return max_product",
        "num_ids": 196
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here *= num\n        min_ending_here *= num\n\n        if max_ending_here < min_ending_here:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n        if min_ending_here < 0:\n            min_ending_here = 1\n\n    return max_product",
        "num_ids": 165
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        temp_max_product = max(arr[i], max_so_far * arr[i], min_so_far * arr[i])\n        max_so_far = max(arr[i], max_so_far * arr[i], min_so_far * arr[i])\n        min_so_far = min(arr[i], max_so_far * arr[i], min_so_far * arr[i])\n        max_product = max(max_product, temp_max_product)\n\n    return max_product",
        "num_ids": 195
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 1\n        elif max_ending_here > max_product:\n            max_product = max_ending_here\n    return max_product",
        "num_ids": 117
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product",
        "num_ids": 115
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here *= arr[i]\n        elif arr[i] < 0:\n            max_ending_here *= arr[i]\n            min_ending_here *= arr[i]\n        else:\n            max_ending_here = 1\n            min_ending_here = 1\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n        if min_ending_here < 0 and max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n\n    return max_product",
        "num_ids": 218
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product == 0:\n            current_product = 1\n    return max_product",
        "num_ids": 98
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            start_index = i\n            \n        if current_product < 0:\n            current_product = 1\n            \n    return arr[start_index:start_index+len(str(max_product))], max_product",
        "num_ids": 150
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n    \n    for i in range(len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], float('-inf'))\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "num_ids": 118
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    curr_product = arr[0]\n\n    # Traverse through all subarrays and multiply the elements\n    for i in range(1, n):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n\n    return max_product",
        "num_ids": 117
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and the value of n as input. It returns True if all values in the dictionary are the same, False otherwise.\n    '''\n    values = list(dict.values())\n    # Checking if all values are same\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False",
        "num_ids": 85
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Check if all values in the dictionary are the same.\n    If yes, return the value. Otherwise, return None.\n    \"\"\"\n    values = set(dict.values())\n    if len(values) == 1:\n        return list(values)[0]\n    else:\n        return None",
        "num_ids": 72
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(value == values[0] for value in values)",
        "num_ids": 53
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for key, value in dict.items():\n        if value == n:\n            count += 1\n    if count == len(dict):\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    This function checks if all values are same in a dictionary.\n    :param dictionary: the dictionary to be checked.\n    :param n: the value to be checked for.\n    :return: True if all values are same, False otherwise.\n    \"\"\"\n    for value in dictionary.values():\n        if value!= n:\n            return False\n    return True",
        "num_ids": 84
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for i in range(n):\n        if i == 0:\n            value = dict[i]\n        else:\n            if dict[i]!= value:\n                return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values are the same in a dictionary.\n    :param dict: dictionary whose values are to be checked.\n    :param n: the value that all values in the dictionary should have.\n    :return: True if all values are the same, False otherwise.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True",
        "num_ids": 92
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \"\"\"\n    values = list(d.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(d, n):\n    '''\n    This function checks if all values in a dictionary are the same.\n    Args:\n    d: a dictionary\n    n: a list of keys to check in the dictionary\n    Returns:\n    True if all values are the same, False otherwise\n    '''\n    # check if all values are the same\n    if len(set(d[k] for k in n)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 99
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dictionary, value):\n    '''\n    This function takes a dictionary and a value as input and returns True if all values in the dictionary are equal to the given value, False otherwise.\n    '''\n    for val in dictionary.values():\n        if val!= value:\n            return False\n    return True",
        "num_ids": 64
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            new_dict[key] = dict1[key]\n    return new_dict",
        "num_ids": 66
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 67
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 61
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= \"\"}",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary without empty items.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 66
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with empty items dropped.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict",
        "num_ids": 66
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n\n    if n == 1:\n        return arr[0]\n\n    # Initialize the maximum product and maximum subsequence found so far\n    max_product = float('-inf')\n    max_subsequence = []\n\n    # Initialize the minimum element in the subsequence and the index of the element\n    min_element = arr[0]\n    min_index = 0\n\n    # Traverse the array\n    for i in range(n):\n        # If the current element is less than the minimum element, update the minimum element and the index of the element\n        if arr[i] < min_element:\n            min_element = arr[i]\n            min_index = i\n        # If the current element is greater than the minimum element, update the maximum product and the maximum subsequence\n        elif arr[i] > min_element:\n            max_product = max(max_product, arr[min_index] * arr[i])\n            max_subsequence = [arr[min_index], arr[i]]\n\n    return max_product\n",
        "num_ids": 257
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n    res = arr[0]\n    if arr[0] < arr[1]:\n        res = arr[1]\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            res = arr[i]\n        elif arr[i] > arr[i-2] * arr[i]:\n            res = arr[i] * arr[i-1]\n    return res",
        "num_ids": 145
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i] < max_product * arr[i]:\n            max_product = arr[i]\n    return max_product",
        "num_ids": 63
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_min = arr[i]\n        elif arr[i] > curr_min:\n            curr_min = arr[i]\n\n        max_product = max(max_product, curr_max * curr_min)\n\n    return max_product",
        "num_ids": 152
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        if arr[0] < arr[1]:\n            max_so_far = arr[0]\n            max_ending_here = arr[1]\n        else:\n            max_so_far = arr[1]\n            max_ending_here = arr[0]\n            \n        for i in range(2, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n            elif arr[i] > max_so_far:\n                max_so_far = max_ending_here\n                max_ending_here = arr[i]\n            else:\n                max_ending_here *= arr[i]\n                \n        return max_so_far",
        "num_ids": 218
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_so_far * arr[i]:\n            min_so_far = arr[i]\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n        max_so_far = max(max_so_far, max_ending_here * min_so_far)\n    return max_so_far",
        "num_ids": 247
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        elif arr[i] < curr_min:\n            curr_min = arr[i]\n\n        max_product = max(max_product, curr_max)\n\n    return max_product",
        "num_ids": 139
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = 0\n    max_index = 0\n    max_ending_here = 1\n    \n    for i in range(n):\n        max_ending_here = max(1, max_ending_here)\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n            max_index = i\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product * max(arr[:max_index+1])",
        "num_ids": 157
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n\n    # Initialize variables to keep track of the maximum product and the ending index of the increasing subsequence\n    max_product = float('-inf')\n    end_index = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is greater than the previous element, update the maximum product and the ending index\n        if i > 0 and arr[i] > arr[i-1]:\n            max_product = max(max_product, arr[i] * arr[end_index])\n            end_index = i\n        # If the current element is less than or equal to the previous element, reset the ending index\n        else:\n            end_index = i\n\n    # Return the maximum product\n    return max_product",
        "num_ids": 205
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize variables\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # Compute the maximum product for all possible increasing subsequences\n    for i in range(1, n):\n        curr_num = arr[i]\n        max_ending_here_prev = max_ending_here\n        min_ending_here_prev = min_ending_here\n        max_ending_here = max(max_ending_here_prev * curr_num, min_ending_here_prev * curr_num, curr_num)\n        min_ending_here = min(max_ending_here_prev * curr_num, min_ending_here_prev * curr_num, curr_num)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 213
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the sum of the pairwise neighboring elements.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        sum_tup = sum_tup + (test_tup[i] + test_tup[i+1],)\n    return sum_tup",
        "num_ids": 87
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "num_ids": 77
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))",
        "num_ids": 61
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "num_ids": 51
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product",
        "num_ids": 40
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product",
        "num_ids": 40
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_product_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = (result * i) % n\n    return result",
        "num_ids": 56
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n",
        "num_ids": 30
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, otherwise False.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False",
        "num_ids": 66
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "num_ids": 43
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False\n\nl = [1, 2, 3, 4, 5]\nprint(check_Consecutive(l)) # True\n\nl = [1, 2, 3, 5, 6]\nprint(check_Consecutive(l)) # False",
        "num_ids": 104
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether a given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False",
        "num_ids": 62
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if abs(l[i] - l[i+1]) == 1:\n            return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an argument and returns True if the list contains consecutive numbers, otherwise, it returns False.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False",
        "num_ids": 76
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise False.\n    '''\n    consecutive = False\n    for i in range(len(l)-1):\n        if abs(l[i]-l[i+1]) == 1:\n            consecutive = True\n            break\n    return consecutive",
        "num_ids": 77
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list of numbers as input and checks if the list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        print(\"Empty List\")\n        return\n    \n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            print(True)\n            return\n    print(False)\n    \n",
        "num_ids": 90
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1 & set2)",
        "num_ids": 75
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the tuple list to sets to find the intersection of elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of sets\n    intersection_set = set1.intersection(set2)\n    # Convert the intersection set back to tuple list\n    intersection_list = list(intersection_set)\n    # Sort the tuple list in ascending order based on the first element of each tuple\n    intersection_list.sort(key=lambda x: x[0])\n    return intersection_list",
        "num_ids": 158
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to remove duplicates and then convert back to lists\n    set1 = list(set(test_list1))\n    set2 = list(set(test_list2))\n    # Create a set of tuples for the intersection\n    intersection = set([tuple(x) for x in set1 if x in set2])\n    # Convert the set of tuples back to a list of tuples and return it\n    return list(intersection)",
        "num_ids": 137
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets and convert back to a list of tuples\n    result = list(set1.intersection(set2))\n    # Return the result\n    return result",
        "num_ids": 112
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to get the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    result = []\n    for item in intersection:\n        result.append(tuple(item))\n    \n    return result",
        "num_ids": 117
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from the first list\n    set1 = set(test_list1)\n    # Create a set of tuples from the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Return the intersection as a list\n    return list(intersection)",
        "num_ids": 121
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))",
        "num_ids": 77
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)",
        "num_ids": 82
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create sets of tuples from the two lists\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples\n    result = list(map(lambda x: tuple(x), intersection))\n\n    return result",
        "num_ids": 134
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert lists to sets to find the intersection of elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set to list and return\n    return list(intersection)",
        "num_ids": 111
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 57
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in the given string'str1' with 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 55
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    This function replaces all occurrences of a given character 'ch' in a string'str1' with a new character 'newch'\n    '''\n    return str1.replace(ch, newch)",
        "num_ids": 58
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    \"\"\"\n    result = \"\"\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result",
        "num_ids": 77
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in a string'str1' with the character 'newch'.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str",
        "num_ids": 96
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 47
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character ch in a string str1 with the new character newch.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1",
        "num_ids": 58
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of ch in str1 with newch.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 43
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the character ch in the string str1 with the new character newch.\n    '''\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str",
        "num_ids": 80
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "num_ids": 57
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted dictionary by value.\n    '''\n    sorted_dict = {}\n    for key, value in sorted(dict1.items(), key=lambda x: x[1], reverse=True):\n        sorted_dict[key] = value\n    return sorted_dict\n",
        "num_ids": 82
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    return dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 69
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "num_ids": 62
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "num_ids": 50
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict",
        "num_ids": 69
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function will sort a dictionary by value.\n    '''\n    # Creating a counter object from the dictionary\n    counter = Counter(dict1)\n    # Sorting the counter object by value in descending order\n    sorted_counter = counter.most_common()[::-1]\n    # Creating a new dictionary with sorted values\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    # Returning the sorted dictionary\n    return sorted_dict",
        "num_ids": 121
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    return max(nums) + min(nums)",
        "num_ids": 47
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    return max(nums) + min(nums)",
        "num_ids": 47
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1] + sorted_nums[0]",
        "num_ids": 56
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the smallest and largest values in the array\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # Return the sum of the smallest and largest values\n    return smallest + largest",
        "num_ids": 73
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "num_ids": 59
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    \n    return largest + smallest",
        "num_ids": 95
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num",
        "num_ids": 63
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    return smallest + largest",
        "num_ids": 77
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function converts the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 29
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lower case, otherwise it returns False.\n    \"\"\"\n    return string.islower()",
        "num_ids": 43
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are in lower case, and False otherwise.\n    \"\"\"\n    # Check if all characters in the string are in lower case\n    if string.islower():\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are in lowercase, False otherwise.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True",
        "num_ids": 55
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are in lower case, else False.\n    '''\n    return string.islower()",
        "num_ids": 44
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "num_ids": 32
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case,\n    and False otherwise.\n    '''\n    return string.islower()",
        "num_ids": 43
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase. Otherwise, it returns False.\n    '''\n    for char in string:\n        if not 'a' <= char <= 'z':\n            return False\n    return True",
        "num_ids": 63
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1",
        "num_ids": 80
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Using regex, create a pattern that matches any lowercase letter followed by any number of lowercase letters\n    pattern = re.compile(r'[a-z]+[a-z]+')\n    # Find all matches of the pattern in the given string and store them in a list\n    matches = pattern.findall(str1)\n    # Replace each match with an empty string and return the modified string\n    return pattern.sub('', str1)",
        "num_ids": 121
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to match lowercase substrings\n    matches = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Replace each lowercase substring with empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1",
        "num_ids": 93
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+' # regex pattern to match lowercase substrings\n    return re.sub(pattern, '', str1, flags=re.IGNORECASE)",
        "num_ids": 70
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')  # pattern to match lowercase substrings\n    return pattern.sub('', str1)  # substitute matches with empty string",
        "num_ids": 69
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)",
        "num_ids": 35
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)",
        "num_ids": 47
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # find all lowercase substrings using regular expressions\n    matches = re.findall(r'\\b[a-z]+\\b', str1)\n    # replace each lowercase substring with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1",
        "num_ids": 94
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b' # Regular expression pattern to match lowercase substrings\n    return re.sub(pattern, '', str1) # Returns the string with lowercase substrings removed.",
        "num_ids": 74
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from the given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)",
        "num_ids": 55
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n",
        "num_ids": 61
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return int(str(n)[0])",
        "num_ids": 39
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])",
        "num_ids": 32
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)\n",
        "num_ids": 47
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes in a number and returns the first digit of the number.\n    \"\"\"\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit",
        "num_ids": 53
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its first digit.\n    \"\"\"\n    return n // 10**(len(str(n))-1)",
        "num_ids": 43
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    if n >= 0:\n        return n % 10\n    else:\n        return -((-n) % 10)",
        "num_ids": 54
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])",
        "num_ids": 32
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function returns the first digit of a number.\n    '''\n    return int(str(n)[0])",
        "num_ids": 33
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    if n < 0:  # if the number is negative, take its absolute value\n        n = abs(n)\n    return n // 10**(len(str(n))-1)",
        "num_ids": 51
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]",
        "num_ids": 45
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_odd(nums):\n    \"\"\"\n    Returns a list of odd integers from the given list of integers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]",
        "num_ids": 43
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Returns a new list with only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 1]",
        "num_ids": 44
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 64
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "num_ids": 63
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    Takes a list of integers and returns a new list containing only the odd integers.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst",
        "num_ids": 63
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst",
        "num_ids": 61
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list(filter(lambda x: x % 2 == 1, list))",
        "num_ids": 47
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    # Calculate sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculate sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # Calculate and return the difference\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 155
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 91
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # Calculate the difference\n    diff = sum_of_cubes - sum_of_numbers\n\n    # Return the difference\n    return diff",
        "num_ids": 132
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)\n",
        "num_ids": 97
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize sum_of_cubes and sum_of_numbers variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the square of the number to the sum_of_cubes variable\n        sum_of_cubes += i**3\n        # add the number to the sum_of_numbers variable\n        sum_of_numbers += i\n        \n    # calculate the difference and return it\n    return sum_of_cubes - sum_of_numbers",
        "num_ids": 172
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes in the value of n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_n**2 - sum_of_cubes",
        "num_ids": 111
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Computes the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of cubes of the first n natural numbers\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    \n    # Compute the sum of the first n natural numbers\n    numbers_sum = sum(range(1, n+1))\n    \n    # Compute and return the difference\n    return cubes_sum - numbers_sum",
        "num_ids": 115
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n",
        "num_ids": 91
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    numbers_sum = sum(range(1, n+1))\n    return numbers_sum - cubes_sum",
        "num_ids": 83
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural",
        "num_ids": 92
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i]^A[j] & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1: # check if xor of i and j is odd\n                count += 1\n    return count",
        "num_ids": 72
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] ^ A[j] & 1:\n                count += 1\n    return count",
        "num_ids": 61
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result",
        "num_ids": 75
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "num_ids": 85
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string",
        "num_ids": 90
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()",
        "num_ids": 34
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    # convert the integers to strings to easily compare their digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # compare the digits of the two integers and add the difference to the sum\n    for i in range(len(n1_str)):\n        if n1_str[i]!= n2_str[i]:\n            sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return sum",
        "num_ids": 149
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n\n    Parameters:\n        n1 (int): The first integer.\n        n2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between n1 and n2.\n\n    \"\"\"\n    # Convert the integers into lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference and sum it up\n    diff_sum = sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])\n\n    return diff_sum",
        "num_ids": 173
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Find the length of the longest string\n    max_len = max(len(n1_str), len(n2_str))\n    \n    # Initialize a variable to store the sum of the per-digit differences\n    digit_diff_sum = 0\n    \n    # Iterate over the strings, comparing digits pairwise\n    for i in range(max_len):\n        # If one string is shorter than the other, pad the shorter string with zeros\n        if len(n1_str) <= i:\n            n1_str = '0' + n1_str\n        if len(n2_str) <= i:\n            n2_str = '0' + n2_str\n        \n        # Add the absolute difference between the digits to the sum\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return digit_diff_sum",
        "num_ids": 257
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and get their lengths\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # Initialize the sum to zero\n    digit_diff_sum = 0\n    \n    # Loop through each digit and add the absolute difference to the sum\n    for i in range(max(n1_len, n2_len)):\n        # Get the current digit positions for both numbers\n        if i < n1_len:\n            n1_digit = int(n1_str[n1_len - 1 - i])\n        else:\n            n1_digit = 0\n        if i < n2_len:\n            n2_digit = int(n2_str[n2_len - 1 - i])\n        else:\n            n2_digit = 0\n        \n        # Add the absolute difference between the two digits to the sum\n        digit_diff_sum += abs(n1_digit - n2_digit)\n    \n    return digit_diff_sum",
        "num_ids": 279
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers into strings\n    n1 = str(n1)\n    n2 = str(n2)\n    \n    # Initialize the sum of differences\n    diff_sum = 0\n    \n    # Iterate through each digit of the integers\n    for i in range(len(n1)):\n        # Subtract the integer value of the current digit from the corresponding digit in n2\n        diff = abs(int(n1[i]) - int(n2[i]))\n        \n        # Add the difference to the sum\n        diff_sum += diff\n    \n    return diff_sum",
        "num_ids": 152
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to be able to iterate over their digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum of per-digit differences to zero\n    digit_diff_sum = 0\n    \n    # Iterate over the digits of the two integers and calculate the per-digit difference\n    for i in range(len(n1_str)):\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return digit_diff_sum",
        "num_ids": 160
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Calculate the sum of the per-digit differences\n    total_diff = 0\n    for i in range(len(str1)):\n        diff = abs(int(str1[i]) - int(str2[i]))\n        total_diff += diff\n\n    return total_diff",
        "num_ids": 122
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < n2:\n        n1, n2 = n2, n1\n    diff = 0\n    while n1 > 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff",
        "num_ids": 108
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    sum_of_diff = 0\n    for i in range(len(n1_digits)):\n        sum_of_diff += abs(n1_digits[i] - n2_digits[i])\n    return sum_of_diff",
        "num_ids": 128
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the digits of each number\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference and add it to a sum\n    distance_sum = 0\n    for i in range(len(digits1)):\n        distance_sum += abs(digits1[i] - digits2[i])\n    \n    return distance_sum",
        "num_ids": 134
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -1000000\n    max_ending_here = 0\n\n    for i in range(0, size):\n        max_ending_here += a[i]\n\n        if (max_ending_here > max_so_far):\n            max_so_far = max_ending_here\n\n        if (max_ending_here < 0):\n            max_ending_here = 0\n\n    return max_so_far",
        "num_ids": 114
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum",
        "num_ids": 86
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function finds the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 118
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
        "num_ids": 120
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "num_ids": 97
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "num_ids": 120
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the variables to keep track of the maximum sublist sum and the current sublist sum\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    # Traverse through the list starting from the second element\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum",
        "num_ids": 136
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = test_tup1 + test_tup2\n    union_tup = sorted(list(set(union_tup)))\n    return union_tup",
        "num_ids": 76
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set union to get unique elements from both tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Sort the elements and return as tuple\n    return tuple(sorted(union_set))",
        "num_ids": 94
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # converting the tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # finding the union of the sets using the '|' operator\n    union_set = set1 | set2\n\n    # converting the set back to a tuple\n    union_tup = tuple(union_set)\n\n    # sorting the tuple and returning it\n    return tuple(sorted(union_tup))",
        "num_ids": 132
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one and remove duplicates\n    combined_tup = tuple(set(test_tup1 + test_tup2))\n    \n    # Sort the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n    \n    # Return the sorted tuple\n    return sorted_tup",
        "num_ids": 103
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to sets to find union of elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_tuple = tuple(sorted(union_set))\n    # Return the sorted tuple\n    return sorted_tuple",
        "num_ids": 136
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Using set() to find the union of elements\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Converting set back to tuple and sorting\n    sorted_union_tup = tuple(sorted(union_set))\n    \n    return sorted_union_tup",
        "num_ids": 105
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and finds the union of their elements.\n    The function returns a sorted list of the union elements.\n    \"\"\"\n    union_list = list(set(test_tup1).union(test_tup2))\n    return sorted(union_list)",
        "num_ids": 77
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Combine the two tuples into a new tuple\n    union_tup = test_tup1 + test_tup2\n    \n    # Sort the union tuple in ascending order and return it\n    return sorted(union_tup)",
        "num_ids": 60
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n    # Create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the set to a list\n    union_list = list(union_set)\n    # Sort the list in ascending order\n    union_list.sort()\n    # Return the sorted list\n    return union_list",
        "num_ids": 155
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1) | set(test_tup2))\n    union.sort()\n    return union",
        "num_ids": 70
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = lst[i:j]\n            if len(sublst) > max_len:\n                max_len = len(sublst)\n    return max_len",
        "num_ids": 99
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    \n    # iterate through the list\n    for i in range(len(lst)):\n        \n        # calculate the length of the sublist starting at i\n        length = 1\n        for j in range(i+1, len(lst)):\n            if lst[j]!= lst[i]:\n                break\n            length += 1\n        \n        # update the max length if the current sublist is longer\n        if length > max_length:\n            max_length = length\n    \n    return max_length",
        "num_ids": 138
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Returns the length of the longest sublist in the given list.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 1\n        else:\n            current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "num_ids": 110
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len",
        "num_ids": 97
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 86
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n    return max_len",
        "num_ids": 101
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length",
        "num_ids": 76
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    return max_length",
        "num_ids": 103
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max_length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length",
        "num_ids": 92
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length",
        "num_ids": 96
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 56
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'  # pattern to match strings between quotation marks\n    matches = re.findall(pattern, text)  # find all matches using the pattern\n    return matches  # return the list of matches",
        "num_ids": 78
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = pattern.findall(text)\n    return matches",
        "num_ids": 53
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = re.findall(pattern, text)\n    return values",
        "num_ids": 58
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    # Find all matches of the pattern \"word1=\" followed by anything inside quotation marks\n    matches = re.findall(r'\\b\\w+(?=[=])\\s*(?P<value>\"[^\"]+\"|\\S+)', text)\n    # Return a list of the extracted values\n    return [match[1:-1] for match in matches]",
        "num_ids": 88
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip('\"') for match in matches]\n    return values",
        "num_ids": 68
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 35
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "num_ids": 54
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    return list(word)",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and splits it into individual characters.\n\n    Parameters:\n    word (str): The string to split into characters.\n\n    Returns:\n    list: A list of characters from the input string.\n    \"\"\"\n\n    # Splitting the string into characters using list comprehension\n    split_list = [char for char in word]\n\n    # Returning the list of characters\n    return split_list",
        "num_ids": 92
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters in the string.\n    '''\n    return list(word)",
        "num_ids": 35
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)",
        "num_ids": 31
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    return list(word)",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "num_ids": 28
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n\n    Parameters:\n    word (str): The input string.\n\n    Returns:\n    List[str]: A list of characters.\n    '''\n\n    return list(word)",
        "num_ids": 50
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Input must be non-negative'\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "num_ids": 80
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total",
        "num_ids": 80
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input: number must be non-negative\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "num_ids": 83
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer n and returns the sum of its digits.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum",
        "num_ids": 80
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be non-negative\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum",
        "num_ids": 81
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum",
        "num_ids": 60
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)",
        "num_ids": 82
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum",
        "num_ids": 80
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and iterate over its characters\n    total = 0\n    for digit in str(n):\n        # Convert each character back to an integer and add it to the total\n        total += int(digit)\n    return total",
        "num_ids": 77
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError('Input must be non-negative')\n    else:\n        return sum(int(d) for d in str(n))",
        "num_ids": 66
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a list is sorted or not.\n\n    Args:\n    list1 (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 90
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a given list is sorted or not.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))",
        "num_ids": 50
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n\n    :param list1: A list of integers or floats.\n    :return: True if the list is sorted in ascending order, False otherwise.\n    '''\n\n    if len(list1) <= 1:\n        return True\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True",
        "num_ids": 105
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted and False otherwise.\n    \"\"\"\n    sorted_list = sorted(list1)\n    if list1 == sorted_list:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    :param lst: list of integers\n    :return: True if the list is sorted, False otherwise\n    \"\"\"\n    n = len(lst)\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
        "num_ids": 85
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    n = len(lst)\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
        "num_ids": 64
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted or not.\n\n    Args:\n    lst -- a list of integers\n\n    Returns:\n    True if the list is sorted, False otherwise.\n    \"\"\"\n    n = len(lst)\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True",
        "num_ids": 85
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "num_ids": 45
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "num_ids": 51
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_list = []\n    for i in range(length):\n        empty_dict = {}\n        empty_list.append(empty_dict)\n    return empty_list",
        "num_ids": 61
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts",
        "num_ids": 57
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]",
        "num_ids": 36
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 61
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 46
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function takes a list of lists and sorts each sublist of strings\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1",
        "num_ids": 58
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 46
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()",
        "num_ids": 46
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n",
        "num_ids": 47
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1",
        "num_ids": 50
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.update(num)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return list(unique_nums)",
        "num_ids": 78
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists and removes any duplicate numbers from each list.\n    \"\"\"\n    unique_nums = []\n    for lst in nums:\n        unique_lst = list(set(lst))\n        unique_nums.append(unique_lst)\n    return unique_nums",
        "num_ids": 70
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return len(unique_nums)",
        "num_ids": 64
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return unique_nums\n",
        "num_ids": 84
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for lst in nums:\n        unique_nums = unique_nums.union(set(lst))\n    return list(unique_nums)",
        "num_ids": 61
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_nums:\n            unique_nums.append(nums[i])\n    return unique_nums",
        "num_ids": 74
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums",
        "num_ids": 75
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of lists containing two unique numbers from each list.\n    \"\"\"\n    unique_nums = []\n    for i in range(len(nums)):\n        if len(nums[i])!= len(set(nums[i])):  # checking if the length of the list is equal to the length of the set of the list\n            unique_nums.append(nums[i])  # adding the list to unique_nums if it has duplicate numbers\n    result = []\n    for i in range(len(unique_nums)):\n        if len(unique_nums[i]) == 2:  # checking if the length of the list is equal to 2\n            result.append(unique_nums[i])  # adding the list to result if it has 2 unique numbers\n    return result",
        "num_ids": 189
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Given a list of lists of numbers, returns two unique numbers from each list.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.append(num_list[0])\n        unique_nums.append(num_list[1])\n    return list(set(unique_nums))",
        "num_ids": 81
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                unique_nums.discard(nums[i])\n            else:\n                unique_nums.add(nums[i])\n    return list(unique_nums)",
        "num_ids": 105
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    return reduce(lambda x, y: x * y, unique_list)",
        "num_ids": 83
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of all the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "num_ids": 66
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_numbers = []\n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    \n    product = 1\n    for i in unique_numbers:\n        product *= i\n    \n    return product",
        "num_ids": 84
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create an empty list to hold unique numbers\n    unique_numbers = []\n\n    # Loop through each number in the list\n    for num in list_data:\n        # If the number is not already in the list of unique numbers, add it\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Loop through each unique number in the list of unique numbers\n    for unique_num in unique_numbers:\n        # Multiply the product by the unique number\n        product *= unique_num\n\n    # Return the product\n    return product",
        "num_ids": 160
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 65
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product",
        "num_ids": 41
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 66
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function finds the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return area",
        "num_ids": 59
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area",
        "num_ids": 82
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder and returns its surface area.\n    '''\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area",
        "num_ids": 63
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The surface area of the cylinder.\n    '''\n    area = 2 * math.pi * r * (r + h)\n    return area",
        "num_ids": 91
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)",
        "num_ids": 48
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Function to find the surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The surface area of the cylinder.\n    \"\"\"\n\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area\n",
        "num_ids": 106
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder.\n    Parameters:\n        r: The radius of the cylinder.\n        h: The height of the cylinder.\n    Returns:\n        The surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area",
        "num_ids": 99
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and its height as inputs and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area",
        "num_ids": 82
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r ** 2",
        "num_ids": 58
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False",
        "num_ids": 88
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    n = len(A)\n    m = len(B)\n\n    while j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n\n        if i == n:\n            return True\n\n    return False",
        "num_ids": 110
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function will take two lists as input and return True if the first list is a sublist of the second list, otherwise it will return False.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    return False",
        "num_ids": 101
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function takes two lists as input and returns True if the first list is a sublist of the second list.\n    \"\"\"\n    if len(B) < len(A):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n        \n    return False",
        "num_ids": 91
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if list B is a sublist of list A, else False.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False",
        "num_ids": 89
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(set(B)): \n        return True \n    else: \n        return False",
        "num_ids": 56
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    start = 0\n    end = len(A) - 1\n\n    while start <= end:\n        if A[start] == B[0]:\n            # check if B is a sublist of A\n            j = 1\n            i = start + 1\n            while i <= end and j < len(B):\n                if A[i]!= B[j]:\n                    break\n                i += 1\n                j += 1\n            if j == len(B):\n                return True\n        start += 1\n    return False",
        "num_ids": 143
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and returns True if A is a sublist of B, else False.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    while i <= len(B) - len(A):\n        j = 0\n        while j < len(A):\n            if A[j]!= B[i+j]:\n                break\n            j += 1\n        if j == len(A):\n            return True\n        i += 1\n    \n    return False",
        "num_ids": 126
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)-len(A)+1):\n        for j in range(len(A)):\n            if B[i+j]!= A[j]:\n                break\n        else:\n            return True\n    return False",
        "num_ids": 84
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10\n\nn = int(input(\"Enter a number: \"))\nprint(\"Last digit of factorial of\", n, \"is\", last_Digit_Factorial(n))",
        "num_ids": 98
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n!\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 63
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    last_digit = factorial % 10\n    return last_digit",
        "num_ids": 75
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit of its factorial.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10",
        "num_ids": 64
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer as input and returns the last digit of the factorial of that number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    last_digit = factorial % 10\n    \n    return last_digit",
        "num_ids": 75
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return int(str(math.factorial(n))[-1])",
        "num_ids": 73
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1): \n        fact *= i\n    \n    last_digit = fact % 10\n    \n    return last_digit",
        "num_ids": 69
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit in the factorial of n.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    return fact % 10",
        "num_ids": 62
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n! (n factorial).\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10  # returns the last digit of n!",
        "num_ids": 74
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result",
        "num_ids": 88
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('The lists must have the same length.')\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result",
        "num_ids": 123
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Flatten the lists into a single list\n    flat_list = [elem for sublist in zip(list1, list2, list3) for elem in sublist]\n    \n    return flat_list",
        "num_ids": 130
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function interleaves the three given lists of the same length into a single flat list.\n    \"\"\"\n    # checking if the lists are of equal length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"The three lists must be of equal length.\")\n    # creating an empty list to store the interleaved list\n    interleaved_list = []\n    # iterating through the three lists simultaneously and appending each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # returning the interleaved list\n    return interleaved_list",
        "num_ids": 180
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        raise ValueError('All lists must be of the same length.')\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result",
        "num_ids": 135
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list",
        "num_ids": 98
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists are of equal length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists must be of equal length.')\n\n    # Interleave the lists into a single flat list\n    interleaved_list = [x for tup in zip(list1, list2, list3) for x in tup]\n\n    return interleaved_list",
        "num_ids": 129
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n\n    return dissimilar",
        "num_ids": 101
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements",
        "num_ids": 90
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements",
        "num_ids": 95
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elems.append((test_tup1[i], test_tup2[i]))\n    return dissimilar_elems",
        "num_ids": 102
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result",
        "num_ids": 86
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and finds the dissimilar elements in them.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append((i, test_tup1[i], test_tup2[i]))\n    if len(dissimilar_elements) == 0:\n        print(\"The two tuples are identical.\")\n    else:\n        print(\"The dissimilar elements are:\")\n        for i in range(len(dissimilar_elements)):\n            print(f\"Index {dissimilar_elements[i][0]}: {dissimilar_elements[i][1]} vs. {dissimilar_elements[i][2]}\")",
        "num_ids": 186
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(i)\n    return result",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list",
        "num_ids": 95
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], (list, tuple)):\n            new_tuple.append(even_ele(test_tuple[i], even_fnc))\n        else:\n            if even_fnc(test_tuple[i]):\n                new_tuple.append(test_tuple[i])\n    return new_tuple",
        "num_ids": 123
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and removes the uneven elements using an even function.\n    '''\n    result = []\n    for sub_tuple in test_tuple:\n        if type(sub_tuple) == tuple:\n            sub_tuple = list(sub_tuple)\n            for i in range(len(sub_tuple)):\n                if not even_fnc(sub_tuple[i]):\n                    sub_tuple.remove(sub_tuple[i])\n            result.append(tuple(sub_tuple))\n        else:\n            if even_fnc(sub_tuple):\n                result.append(sub_tuple)\n    return tuple(result)",
        "num_ids": 153
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        for i in range(len(test_tuple)):\n            if isinstance(test_tuple[i], tuple):\n                even_ele(test_tuple[i], even_fnc)\n            else:\n                if not even_fnc(test_tuple[i]):\n                    test_tuple = test_tuple[:i] + test_tuple[i+1:]\n        return test_tuple\n    else:\n        return test_tuple",
        "num_ids": 134
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Function to check if a number is even or not.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\ntest_tuple = ((1, 2, 3), 4, (5, 6, 7, 8))\nresult = even_ele(test_tuple, is_even)\nprint(result)",
        "num_ids": 198
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: A tuple containing nested tuples and other elements\n    :param even_fnc: A function that returns True if an element is even, False otherwise\n    :return: A new tuple with uneven elements removed\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_item = even_ele(item, even_fnc)\n            if new_item:\n                new_tuple.append(new_item)\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return tuple(new_tuple) if new_tuple else None",
        "num_ids": 165
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == int or type(item) == float:\n            if even_fnc(item):\n                new_tuple.append(item)\n        else:\n            new_item = []\n            for subitem in item:\n                if type(subitem) == int or type(subitem) == float:\n                    if even_fnc(subitem):\n                        new_item.append(subitem)\n                else:\n                    new_subitem = []\n                    for subsubitem in subitem:\n                        if type(subsubitem) == int or type(subsubitem) == float:\n                            if even_fnc(subsubitem):\n                                new_subitem.append(subsubitem)\n                    if new_subitem:\n                        new_item.append(new_subitem)\n            if new_item:\n                new_tuple.append(new_item)\n    return new_tuple",
        "num_ids": 239
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Define a function to check if a number is even or not.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 146
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: A tuple containing mixed elements.\n    :param even_fnc: A function that returns True if a number is even.\n    :return: A new tuple with uneven elements removed.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)",
        "num_ids": 133
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)): \n        if isinstance(test_tuple[i], (list, tuple)): \n            even_ele(test_tuple[i], even_fnc) \n        elif even_fnc(test_tuple[i]): \n            continue \n        else: \n            test_tuple[i] = None \n    test_tuple = tuple(filter(lambda x: x is not None, test_tuple)) \n    return test_tuple ",
        "num_ids": 131
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return tuple(result)",
        "num_ids": 91
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square base.\n    base_area = 4 * b**2\n\n    # Calculate the surface area of the square sides.\n    side_area = 4 * b * s\n\n    # Calculate the total surface area of the pyramid.\n    total_area = base_area + 4 * (s * b)\n\n    # Return the total surface area of the pyramid.\n    return total_area",
        "num_ids": 127
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with given base edge and height.\n\n    :param base_edge: the length of the base edge of the square pyramid\n    :param height: the height of the square pyramid\n    :return: the surface area of the square pyramid\n    \"\"\"\n\n    # Calculate the area of each face of the square pyramid\n    face_area = base_edge ** 2\n\n    # Calculate the volume of the square pyramid\n    volume = (base_edge ** 2) * height / 3\n\n    # Calculate the total surface area of the square pyramid\n    surface_area = 4 * face_area + 6 * volume\n\n    return surface_Area",
        "num_ids": 158
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes in two arguments: the base edge of the square pyramid and the height of the pyramid.\n    It returns the total surface area of the pyramid rounded to two decimal places.\n    '''\n    # Calculate the area of each side of the square pyramid\n    area_of_side = base_edge ** 2\n    # Calculate the area of the square base\n    area_of_base = 4 * area_of_side\n    # Calculate the area of the pyramid top\n    area_of_top = (base_edge * height) / 2\n    # Calculate the total surface area of the pyramid\n    total_area = area_of_side * 4 + area_of_top + area_of_base\n    # Round the total surface area to two decimal places and return it\n    return round(total_area, 2)",
        "num_ids": 195
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the base\n    base_area = 2 * b * s\n    \n    # calculate the height of the pyramid\n    h = (b**2 + s**2)**0.5\n    \n    # calculate the area of the square pyramid\n    square_pyramid_area = (b * s + b * h + s * h) * 2\n    \n    # calculate the total surface area\n    total_area = base_area + square_pyramid_area\n    \n    return total_area",
        "num_ids": 142
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes in the base edge and height of a square pyramid and returns its surface area.\n    \"\"\"\n    # Calculate the surface area of the square base\n    base_area = 4 * b ** 2\n    \n    # Calculate the area of the square face\n    face_area = 2 * b * s\n    \n    # Calculate the area of the triangle on the top\n    top_area = 0.5 * b * s ** 2\n    \n    # Add up all the areas to get the total surface area\n    total_area = base_area + face_area + top_area\n    \n    # Return the total surface area\n    return total_area",
        "num_ids": 145
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the square base\n    area = b**2\n    \n    # calculate the area of the square apex\n    apex_area = 0.5*b*s\n    \n    # calculate the area of the square sides\n    side_area = 2*b*s\n    \n    # add up the areas to get the total surface area\n    total_area = 4*area + apex_area + side_area\n    \n    # return the total surface area\n    return total_area",
        "num_ids": 138
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes two arguments, base and height, which are the base edge and height of the square pyramid respectively.\n    It returns the total surface area of the square pyramid.\n    '''\n    total_area = 4*base*height + 2*(base**2)\n    return total_area",
        "num_ids": 76
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two arguments: base edge and height of the square pyramid.\n    It returns the surface area of the pyramid.\n    '''\n    # Calculate the areas of the triangular base and the square sides\n    area_base = (b * s) / 2\n    area_side = b ** 2\n    area_top = area_base + area_side\n    \n    # Calculate the surface area\n    surface_area = 2 * area_top + 2 * area_base\n    \n    return surface_area",
        "num_ids": 120
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(base_edge, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the base\n    base_area = 4 * base_edge**2\n    \n    # Calculate the area of the square top\n    top_area = base_edge**2\n    \n    # Calculate the area of the triangle sides\n    triangle_area = 2 * base_edge * height\n    \n    # Calculate the total surface area\n    total_area = base_area + 2 * top_area + 3 * triangle_area\n    \n    return total_area",
        "num_ids": 132
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    This function takes two arguments: base edge b and height s of the square pyramid.\n    It returns the surface area of the square pyramid.\n    '''\n    # calculate the area of one face of the square pyramid\n    area_face = b * s\n    \n    # calculate the total area of the square pyramid\n    total_area = 4 * area_face\n    \n    # calculate the area of the square base\n    base_area = b ** 2\n    \n    # calculate the area of the triangle on the top of the square pyramid\n    top_triangle_area = (b * s) / 2\n    \n    # add the areas of the square base and the triangle on top of the square pyramid\n    total_area = total_area + base_area + top_triangle_area\n    \n    # return the total area of the square pyramid\n    return total_area",
        "num_ids": 190
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 38
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1:\n        print(\"Dictionary is not empty\")\n    else:\n        print(\"Dictionary is empty\")",
        "num_ids": 47
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an argument and returns True if the dictionary is empty, and False otherwise.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    else:\n        return False",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 44
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)",
        "num_ids": 31
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(d):\n    \"\"\"\n    Check if a dictionary is empty.\n\n    :param d: The dictionary to check.\n    :return: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    return not bool(d)",
        "num_ids": 51
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function takes a dictionary as input and checks if it is empty or not.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    else:\n        return False",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(num):\n            c += catalan_number(i) * catalan_number(num-i-1)\n        return c\n",
        "num_ids": 78
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(num):\n            sum += catalan_number(i) * catalan_number(num - i - 1)\n        return sum",
        "num_ids": 80
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n\n    :param num: An integer representing the position of the catalan number to return.\n    :return: An integer representing the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - i - 1)\n        return res",
        "num_ids": 122
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(num):\n            c += catalan_number(i) * catalan_number(num-i-1)\n        return c",
        "num_ids": 80
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        \n        for i in range(2, num + 1):\n            catalan[i] = catalan[i-1] * (2*i - 1) // (i)\n        \n        return catalan[num]",
        "num_ids": 122
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        res = 0\n        for i in range(n):\n            res += catalan_number(i) * catalan_number(n - i - 1)\n        return res",
        "num_ids": 79
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]",
        "num_ids": 114
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n\n    Args:\n    num (int): The index of the catalan number to be returned.\n\n    Returns:\n    int: The nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]",
        "num_ids": 149
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan",
        "num_ids": 97
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        c = 1\n        for i in range(2, num+1):\n            c = (2 * i - 1) * c // i\n        return c",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    adverbs = [match for match in matches if text[match.start()-1]!='']\n    positions = [text.find(adverb) for adverb in adverbs]\n    return adverbs, positions\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog barks loudly and the cat meows softly.\"\nadverbs, positions = find_adverbs(text)\nprint(adverbs)  # Output: ['quickly', 'loudly','softly']\nprint(positions)  # Output: [10, 37, 50]",
        "num_ids": 176
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.findall(text)\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return []",
        "num_ids": 66
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None",
        "num_ids": 83
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        return f\"The first adverb ending with 'ly' is '{adverb}' at position {start_pos} to {end_pos}.\"\n    else:\n        return \"No adverb ending with 'ly' found in the given string.\"\n\ntext = \"I went to the gym yesterday. I am so tired today.\"\nprint(find_adverbs(text))",
        "num_ids": 177
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Finds the first adverb ending with \"ly\" in the given text and returns it along with its positions.\n    \"\"\"\n    pattern = r\"\\b\\w*ly\\b\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start()\n    return None",
        "num_ids": 85
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with 'ly' and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        return (adverb, start_pos, end_pos)\n    else:\n        return None",
        "num_ids": 113
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string of text as input and returns the first adverb ending with ly and its positions in the text.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None",
        "num_ids": 90
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return \"No adverbs ending with 'ly' found in the text.\"\n    else:\n        adverbs = []\n        for match in matches:\n            start_pos = text.find(match)\n            adverbs.append((match, start_pos))\n        return adverbs",
        "num_ids": 109
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1] for _ in range(len(heap))]",
        "num_ids": 106
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 86
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 86
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap has more than n items, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Sort the heap in descending order and return the result\n    return sorted(heap, reverse=True)",
        "num_ids": 140
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\nitems = [\n    {'name': 'book', 'price': 10},\n    {'name': 'pen', 'price': 3},\n    {'name': 'pencil', 'price': 2},\n    {'name': 'ruler', 'price': 5},\n    {'name': 'calculator', 'price': 8}\n]\n\nprint(expensive_items(items, 3))",
        "num_ids": 154
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)",
        "num_ids": 82
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = [heapq.heappop(heap)[1] for i in range(len(heap))]\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]",
        "num_ids": 80
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n\n    Args:\n    items: A list of dictionaries containing item details\n    n: The number of items to be returned\n\n    Returns:\n    A list containing the n most expensive items in the dataset.\n    \"\"\"\n\n    # Create a heap with the initial n items\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, (item['price'], item['name']))\n\n    # Iterate over the remaining items and compare their prices with the minimum price in the heap\n    for item in items[n:]:\n        if item['price'] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (item['price'], item['name']))\n\n    # Extract the n most expensive items from the heap and return them as a list\n    result = [heapq.heappop(heap)[1] for i in range(n)]\n    return result",
        "num_ids": 224
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    # Splitting the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Adding the first part to the end\n    l = second_part + first_part\n\n    return l",
        "num_ids": 83
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    return l[n-1:] + l[:n-1]",
        "num_ids": 48
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 49
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \"\"\"\n    return l[n-1:] + l[:n-1]",
        "num_ids": 46
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]",
        "num_ids": 42
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 33
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and converts it to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 35
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and returns a tuple of the same elements.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 33
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple with the same elements.\n    '''\n    return tuple(listx)",
        "num_ids": 37
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a tuple.\n    \"\"\"\n    return tuple(lst)",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "num_ids": 28
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple with the same elements.\n    '''\n    return tuple(lst)",
        "num_ids": 35
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as an argument and returns the same list as a tuple.\n    \"\"\"\n    tuple_list = tuple(listx)\n    return tuple_list",
        "num_ids": 46
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        return max(nums) - min(nums)",
        "num_ids": 59
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 48
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest value in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest value in the list.\n    \"\"\"\n    return max(nums) - min(nums)",
        "num_ids": 68
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff",
        "num_ids": 62
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between the last and first element of the sorted list\n    return nums[-1] - nums[0]",
        "num_ids": 70
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number.\n\n    :param nums: a list of numbers\n    :return: the difference between the largest and smallest number in the list\n    \"\"\"\n    return max(nums) - min(nums)",
        "num_ids": 68
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)",
        "num_ids": 42
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)",
        "num_ids": 63
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 43
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root*root == num:\n            squares.append(num)\n    return squares",
        "num_ids": 72
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares = []\n    \n    # iterate through all numbers from a to b (inclusive)\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        root = num ** 0.5\n        if root == int(root):\n            # if it is, add it to the list\n            perfect_squares.append(num)\n    \n    return perfect_squares",
        "num_ids": 120
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create an empty list to store the perfect squares\n    squares = []\n\n    # loop through the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        root = num ** 0.5\n        if root == int(root):\n            # if the number is a perfect square, append it to the list\n            squares.append(num)\n    \n    # return the list of perfect squares\n    return squares",
        "num_ids": 127
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            print(i)",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all the perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = num ** 0.5\n        if root == int(root):\n            # If it is, add it to the list of perfect squares\n            perfect_squares.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares",
        "num_ids": 129
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root*root == num:\n            result.append(num)\n    return result",
        "num_ids": 73
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num > 0 and num**(1/2) == int(num**(1/2)):\n            result.append(num)\n    return result",
        "num_ids": 75
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all the perfect squares between two given numbers.\n    \"\"\"\n    # initializing an empty list to store the perfect squares\n    squares = []\n    \n    # looping through each number between a and b (inclusive)\n    for num in range(a, b+1):\n        \n        # checking if the number is a perfect square\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            squares.append(num)\n    \n    # returning the list of perfect squares\n    return squares",
        "num_ids": 116
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num > 0:\n            square_root = num ** 0.5\n            if square_root == int(square_root):\n                result.append(num)\n    return result",
        "num_ids": 83
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Create an empty list to store the perfect squares\n    squares = []\n\n    # Loop through each number in the range\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            # If the number is a perfect square, append it to the list of perfect squares\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares",
        "num_ids": 125
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y",
        "num_ids": 66
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    :param rho: Distance from the origin.\n    :param theta: Angle in radians.\n    :return: A tuple containing the rectangular coordinates (x, y).\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.real)",
        "num_ids": 98
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 66
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y",
        "num_ids": 77
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)",
        "num_ids": 59
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    return r * cmath.exp(complex(0,theta))",
        "num_ids": 72
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The distance from the origin.\n    theta (float): The angle in radians.\n\n    Returns:\n    A tuple containing the x and y coordinates.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)",
        "num_ids": 96
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))[0]\n    theta = cmath.polar(complex(x,y))[1]\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 93
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "num_ids": 59
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x,y))\n    theta = cmath.phase(complex(x,y))\n    return r * cmath.cos(theta), r * cmath.sin(theta)",
        "num_ids": 77
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 71
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Save the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # Swap the elements\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    # Return the modified list\n    return newList",
        "num_ids": 93
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 67
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and returns the same list with the first and last elements swapped.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0] # swapping the first and last elements\n    return newList",
        "num_ids": 69
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"After swapping, the list is:\", newList)",
        "num_ids": 66
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 56
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 74
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    if len(newList) < 2:  # check if the list has at least two elements\n        print(\"The list must have at least two elements to swap.\")\n    else:\n        first_element = newList[0]  # get the first element of the list\n        last_element = newList[-1]  # get the last element of the list\n        newList[0] = last_element  # replace the first element with the last element\n        newList[-1] = first_element  # replace the last element with the first element\n        print(\"The list after swapping the first and last elements is:\", newList)",
        "num_ids": 168
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return int(binomial_Coeff(n-1,k-1)*n/k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum = 0\nfor i in range(k):\n    sum += binomial_Coeff(n-1,i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum)",
        "num_ids": 159
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The maximum number of elements in the sequence.\n    k (int): The number of consecutive terms.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    result = 0\n\n    # Find the product of all the binomial co-efficients\n    for i in range(k):\n        result += math.comb(n, i)\n\n    return result",
        "num_ids": 138
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n    \n    Parameters:\n    n (int): the value of n\n    k (int): the value of k\n    \n    Returns:\n    int: the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    \n    result = 1\n    for i in range(k):\n        result *= (n-i)//(i+1)\n        \n    return result",
        "num_ids": 100
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate through the range of k to n\n    for i in range(k, n+1):\n        # Calculate the product of consecutive binomial co-efficients and add it to the sum\n        sum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n        \n    return sum",
        "num_ids": 116
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    if k == 0:\n        return result\n    for i in range(1, k+1):\n        result = result * (n-i+1) / i\n    return int(result)",
        "num_ids": 80
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nresult = binomial_Coeff(n, k)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", result)",
        "num_ids": 119
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(k):\n        res = res*(n-i)/(i+1)\n    return res",
        "num_ids": 65
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k, which represent the number of terms in the sequence and the number of terms to be selected, respectively.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k): \n        product = 1\n        for j in range(i+1): \n            product = product * (n-j) // (j+1) \n        sum = sum + product \n    return sum",
        "num_ids": 116
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments: n and k.\n    n represents the number of elements in the set from which we are choosing elements.\n    k represents the number of elements to be chosen from the set.\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        # Initialize the product of the first k elements\n        product = 1\n        # Initialize the sum of the products\n        sum_of_products = 0\n        # Loop through all possible k-combinations of elements from n\n        for i in range(k):\n            # Calculate the binomial coefficient for the current combination\n            binomial_coef = comb(n, i)\n            # Multiply the binomial coefficient with the product of previous k elements\n            product *= binomial_coef\n            # Add the product to the sum of products\n            sum_of_products += product\n        return sum_of_products\n\nfrom scipy.special import comb",
        "num_ids": 221
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return None\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n",
        "num_ids": 88
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+(\\d+)', r'\\1', ip)",
        "num_ids": 51
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into octets\n    octets = ip.split('.')\n    # Loop through the octets and remove any leading zeroes\n    for i in range(len(octets)):\n        octets[i] = re.sub(r'^\\s*0+', '', octets[i])\n    # Join the octets back into an ip address\n    new_ip = '.'.join(octets)\n    return new_ip",
        "num_ids": 124
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^(?:[0]{1,2}\\.){3}[0-9]+$', ip):\n        # If the ip address contains leading zeroes, remove them\n        ip = ip.replace('000.', '').replace('00.', '').replace('0.', '')\n        return ip\n    else:\n        return ip",
        "num_ids": 103
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an ip address.\n    \"\"\"\n    # Use a regular expression to match an ip address with optional groups for each octet\n    ip_pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    # Use the regular expression to check if the input is a valid ip address\n    if not re.match(ip_pattern, ip):\n        raise ValueError(f\"{ip} is not a valid ip address\")\n    # Split the ip address into its octets and remove leading zeroes\n    octets = [o.lstrip('0') or '0' for o in ip.split('.')]\n    # Join the octets back together with a dot\n    return '.'.join(octets)",
        "num_ids": 184
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r\"^0*(\\d+\\.\\d+\\.\\d+\\.\\d+)$\", r\"\\1\", ip)",
        "num_ids": 62
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0*)([1-9][0-9]*\\.){3}([1-9][0-9]*)$', r'\\2\\3', ip)\n    return ip",
        "num_ids": 77
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "num_ids": 48
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an ip address as input and returns the same ip address with leading zeroes removed.\n    '''\n    pattern = re.compile(r'0+(\\d+)')\n    match = pattern.search(ip)\n    while match:\n        ip = ip[:match.start()] + ip[match.end():]\n        match = pattern.search(ip)\n    return ip",
        "num_ids": 95
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "num_ids": 48
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)",
        "num_ids": 44
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes in a list of numbers and returns the difference of the first even and first odd number in the list.\n    \"\"\"\n    # Initialize variables\n    even_num = None\n    odd_num = None\n    \n    # Loop through the list to find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n        else:\n            odd_num = num\n            \n    # Calculate and return the difference\n    if even_num and odd_num:\n        return even_num - odd_num\n    else:\n        return None",
        "num_ids": 137
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    return even[0] - odd[0]",
        "num_ids": 85
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    return abs(even - odd)",
        "num_ids": 102
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    return abs(even_num - odd_num)",
        "num_ids": 68
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    \n    # If the first number in the list is even, find the first odd number and subtract it from the even number\n    if even_num % 2 == 0:\n        for num in lst:\n            if num % 2!= 0:\n                odd_num = num\n                break\n    \n    # If the first number in the list is odd, find the first even number and subtract it from the odd number\n    else:\n        for num in lst:\n            if num % 2 == 0:\n                even_num = num\n                break\n    \n    # Return the difference of the two numbers\n    return abs(even_num - odd_num)",
        "num_ids": 190
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n            \n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    \n    if even is None or odd is None:\n        return None\n    \n    return abs(even - odd)",
        "num_ids": 111
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            return even_num - odd_num\n    return None",
        "num_ids": 123
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return abs(num - even)\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return abs(num - odd)",
        "num_ids": 106
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    return abs(even - odd)",
        "num_ids": 98
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n\n    if even and odd:\n        return abs(even - odd)\n    else:\n        return None",
        "num_ids": 110
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Initializing the count of swaps\n    count = 0\n\n    # Initializing the mappings\n    mp1 = {}\n    mp2 = {}\n\n    # Iterating through the string and mapping each character with its index\n    for i in range(n1):\n        mp1[str1[i]] = i\n\n    # Iterating through the string and mapping each character with its index\n    for i in range(n2):\n        mp2[str2[i]] = i\n\n    # Iterating through both the strings simultaneously\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            # Swapping the characters and updating the count of swaps\n            str1, str2 = swap_chars(str1, i, mp1[str2[i]])\n            count += 1\n\n    return count\n\n\ndef swap_chars(s, i, j):\n    return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:], s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n",
        "num_ids": 281
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n    \n    # Initialize variables\n    count = 0\n    i = 0\n    \n    # Iterate over the lists while they are not equal\n    while lst1!= lst2:\n        # Check if the current digits are the same\n        if lst1[i] == lst2[i]:\n            i += 1\n            continue\n        \n        # Find the index of the next digit that is different in lst2\n        for j in range(i+1, len(lst2)):\n            if lst1[i] == lst2[j]:\n                # Swap the digits and increment the count\n                lst2[i], lst2[j] = lst2[j], lst2[i]\n                count += 1\n                i = 0\n                break\n    \n    return count",
        "num_ids": 204
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings into lists of 0's and 1's\n    nums1 = [int(i) for i in str1]\n    nums2 = [int(i) for i in str2]\n\n    # initialize variables to keep track of swaps\n    count = 0\n    indices = {}\n\n    # loop through the numbers and find the index of each number in the other string\n    for num in nums1:\n        if num not in indices:\n            indices[num] = nums2.index(num)\n\n    # loop through the numbers and swap them if necessary\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            temp = nums1[i]\n            nums1[i] = nums2[i]\n            nums2[i] = temp\n            count += 1\n\n    # loop through the indices and swap the numbers at those indices if necessary\n    for index in indices:\n        if indices[index]!= nums1.index(index):\n            temp = nums1[index]\n            nums1[index] = nums1[indices[index]]\n            nums1[indices[index]] = temp\n            count += 1\n\n    return count",
        "num_ids": 264
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1!= n2:\n        return -1\n    \n    count = 0\n    \n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            count += 1\n            \n    return count\n    \n",
        "num_ids": 79
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < n and str1[j] == str2[i]:\n                j += 1\n            if j == n:\n                return \"Invalid Input\"\n            k = i + 1\n            while k < j and str1[k]!= str2[i]:\n                str1[k], str1[j] = str1[j], str1[k]\n                k += 1\n                count += 1\n    return count",
        "num_ids": 176
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i+1\n            while j < n and str1[j]!= str2[i]:\n                j += 1\n            if j == n:\n                return -1\n            k = j\n            while str1[k]!= str2[i]:\n                str1[k], str1[k-1] = str1[k-1], str1[k]\n                k -= 1\n            count += j-i-1\n    return count",
        "num_ids": 144
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # if both strings are equal, then no swaps are needed\n    if str1 == str2:\n        return 0\n    \n    # initialize variables\n    count = 0\n    n = len(str1)\n    \n    # loop through each character in both strings and count the number of swaps needed\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n    \n    return count",
        "num_ids": 102
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n    \n    # Initialize variables\n    n = len(lst1)\n    count = 0\n    \n    # Loop through the lists and count the number of swaps\n    for i in range(n):\n        if lst1[i]!= lst2[i]:\n            j = i + 1\n            while j < n and lst1[j] == lst2[i]:\n                j += 1\n            if j < n:\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                lst2[i], lst2[j] = lst2[j], lst2[i]\n                count += 1\n    \n    return count",
        "num_ids": 190
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    This function takes two binary numbers represented as strings and returns the minimum number of swaps required to convert one to the other.\n    '''\n    n = len(str1)\n    count = 0\n    visited = [False]*n\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            if visited[i] == False : \n                visited[i] = True\n                j = i + 1\n                while j < n and str1[j] == str2[j] : \n                    j += 1\n                if j == n : \n                    count += 1\n                else : \n                    for k in range(j,n) : \n                        if str1[k]!= str2[k] : \n                            if visited[k] == False : \n                                count += 1\n                                visited[k] = True\n                i = j - 1\n    return count",
        "num_ids": 203
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n = len(str1)\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple(tuple_list))\n    return size",
        "num_ids": 50
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(\"Size of tuple in bytes:\", size)",
        "num_ids": 56
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    \n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    \n    return size",
        "num_ids": 59
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list)\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size",
        "num_ids": 72
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size",
        "num_ids": 65
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size",
        "num_ids": 59
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return None\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            k -= 1\n    if k == 1:\n        return arr1[i-1]\n    elif k == 2:\n        return arr2[j-1]\n    elif k == 0:\n        return arr1[i-1]\n    elif k > 2 and arr1[i-1] == arr2[j-1]:\n        return arr1[i-1]\n    else:\n        return None",
        "num_ids": 196
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n = len(arr1)\n    m = len(arr2)\n    \n    if n > m:\n        arr1, arr2, n, m = arr2, arr1, m, n\n        \n    i = max(0, k - m)\n    j = min(k, n)\n    \n    while i <= j:\n        mid1 = (i + j) // 2\n        mid2 = k - mid1\n        \n        if arr1[mid1] > arr2[mid2 - 1]:\n            j = mid1 - 1\n        elif arr1[mid1] < arr2[mid2]:\n            i = mid1 + 1\n        else:\n            return arr1[mid1]\n    \n    return None",
        "num_ids": 186
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and returns the kth smallest element among them.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > n1 + n2:\n        return -1\n    if k <= n1:\n        return find_kth(arr1, arr2, n1 + n2 - k)\n    if arr1[n1-1] > arr2[0]:\n        return find_kth(arr1[:n1-1], arr2, k)\n    if arr1[n1-1] < arr2[0]:\n        return find_kth(arr1, arr2[1:], k-n1)\n    if arr1[n1-1] == arr2[0]:\n        return arr1[n1-1]",
        "num_ids": 194
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays, arr1 and arr2, and a value k and returns the kth element\n    from the merged and sorted array.\n    \"\"\"\n    merged = arr1 + arr2\n    merged.sort()\n    return merged[k-1]",
        "num_ids": 72
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    if arr1[mid1] > arr2[mid2]:\n        if k <= len(arr1) - mid1:\n            return find_kth(arr1[mid1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2:], k - len(arr1) + mid1)\n    else:\n        if k <= len(arr2) - mid2:\n            return find_kth(arr1, arr2[mid2:], k)\n        else:\n            return find_kth(arr1[mid1:], arr2, k - len(arr2) + mid2)",
        "num_ids": 260
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays as input and returns the kth element.\n    \"\"\"\n    if k > len(arr1) + len(arr2):\n        return None\n    \n    # Find the middle point of the first array\n    mid1 = len(arr1) // 2\n    \n    # If the middle element of the first array is greater than the kth element\n    # (Note that the arrays are already sorted)\n    if arr1[mid1] > k:\n        # Search in the first half of the first array\n        return find_kth(arr1[:mid1], arr2, k)\n    # If the middle element of the first array is less than the kth element\n    elif arr1[mid1] < k:\n        # Search in the second half of the first array and in the second array\n        return find_kth(arr1[mid1+1:], arr2, k - arr1[mid1] - 1)\n    # If the middle element of the first array is equal to the kth element\n    else:\n        # Return the middle element of the first array\n        return arr1[mid1]",
        "num_ids": 255
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    n = n1 + n2\n    \n    # Initialize two pointers for traversing the arrays\n    i = 0\n    j = 0\n    \n    # Traverse the arrays until the kth element is found\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            break\n    \n    # Check if k is less than the number of elements in the first array\n    if k <= i:\n        return arr1[k-1]\n    \n    # Check if k is greater than or equal to the number of elements in both arrays\n    elif k > i + j:\n        return arr2[k-1-i]\n    \n    # If k is between i and i+j, then the kth element is present in both arrays\n    else:\n        return arr1[i-1]",
        "num_ids": 261
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if k > len(arr1) + len(arr2):\n        return None\n\n    # Merge the two sorted arrays\n    merged_arr = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n\n    # Find the kth element\n    return merged_arr[k-1]",
        "num_ids": 237
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and finds the kth element from both arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 + n2:\n        return \"k is out of range\"\n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    left, right, mid = 0, n1, 0\n    while left < right:\n        mid = (left + right) // 2\n        if arr2[mid] < arr1[k - 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr1[k - 1]",
        "num_ids": 176
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[k-1]",
        "num_ids": 56
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number into a string\n    num = str(number)\n    # Get the length of the string\n    length = len(num)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the digits in the string\n    for digit in num:\n        # Convert the digit back to an integer\n        digit_int = int(digit)\n        # Multiply the digit by the length of the string\n        product = digit_int * length\n        # Add the product to the sum\n        sum += product\n    # If the sum is equal to the original number, then it's an Armstrong number\n    if sum == number:\n        return True\n    else:\n        return False",
        "num_ids": 171
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    An Armstrong number is an n-digit number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    n = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 120
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether a number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    \"\"\"\n    n = number\n    sum = 0\n    order = len(str(n))\n    while n > 0:\n        digit = n % 10\n        sum += digit ** order\n        n //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "num_ids": 117
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes a number as input and checks whether it is an Armstrong number or not.\n    An Armstrong number is an integer such that the sum of its digits raised to the power of the number of digits is equal to the number itself.\n    '''\n    temp = number\n    sum = 0\n    count = 0\n\n    # calculate the number of digits in the number\n    while temp!= 0:\n        count += 1\n        temp //= 10\n\n    # calculate the sum of the digits raised to the power of the number of digits\n    temp = number\n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** count\n        temp //= 10\n\n    # check whether the number is an Armstrong number or not\n    if number == sum:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")",
        "num_ids": 203
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    \"\"\"\n\n    # Convert the given number into a string to iterate over its digits\n    num_str = str(number)\n\n    # Find the length of the number\n    num_len = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_powers = sum([int(digit) ** num_len for digit in num_str])\n\n    # Check if the sum of powers is equal to the given number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False",
        "num_ids": 175
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the length of the number\n    length = len(number_str)\n    # Calculate the sum of the cubes of its digits\n    sum_of_cubes = 0\n    for digit in number_str:\n        sum_of_cubes += int(digit) ** length\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False",
        "num_ids": 139
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    order = len(str(number))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, otherwise False.\n    \"\"\"\n    # Convert the number to a string to perform string operations\n    number_str = str(number)\n    # Get the length of the number\n    n = len(number_str)\n    # Calculate the sum of the nth power of each digit of the number\n    sum_of_power = sum(int(digit) ** n for digit in number_str)\n    # Check if the sum is equal to the original number\n    if sum_of_power == number:\n        return True\n    else:\n        return False",
        "num_ids": 141
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Get the length of the number\n    number_length = len(number_str)\n\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum(int(digit) ** number_length for digit in number_str)\n\n    # Check if the sum is equal to the original number\n    return sum_of_cubes == number",
        "num_ids": 124
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n    digits = [int(digit) for digit in str(number)]\n    n = len(digits)\n    sum_of_squares = sum([digit ** n for digit in digits])\n    return sum_of_squares == number",
        "num_ids": 138
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    return total, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "num_ids": 65
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "num_ids": 60
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n    \n    # loop through first n natural numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    \n    # calculate sum and average\n    sum_of_n = total\n    average = sum_of_n / count\n    \n    return sum_of_n, average",
        "num_ids": 103
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    return total, average",
        "num_ids": 59
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n\n    Args:\n    n (int): The number of natural numbers to include in the sum and average.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n\n    # Initialize the sum and count variables\n    sum_n = 0\n    count = 0\n\n    # Iterate through the first n natural numbers\n    for i in range(1, n+1):\n        sum_n += i\n        count += 1\n\n    # Calculate the average\n    average = sum_n / count\n\n    # Return the sum and average as a tuple\n    return (sum_n, average)",
        "num_ids": 150
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    return sum, avg",
        "num_ids": 68
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average",
        "num_ids": 65
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even and False if it is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as an input and returns True if it is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and checks whether it is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")",
        "num_ids": 60
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even, and False if it is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 54
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even,\n    and False if it is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n as input and returns True if it is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 47
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_even(n):\n    \"\"\"\n    This function takes a number as an argument and returns True if it is even, otherwise False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 80
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function returns the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found!\"",
        "num_ids": 82
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 84
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found\"",
        "num_ids": 85
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None",
        "num_ids": 57
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found.\"",
        "num_ids": 85
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, it returns None.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None",
        "num_ids": 94
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = None\n    for char in str1:\n        if str1.count(char) > 1:\n            repeated_char = char\n            break\n    return repeated_char",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found\"",
        "num_ids": 82
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None",
        "num_ids": 62
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludics.append(i)\n        elif i % 2 == 0:\n            ludics.append(i)\n        elif i % 3 == 0:\n            ludics.append(i)\n        elif i % 5 == 0:\n            ludics.append(i)\n        elif i % 7 == 0:\n            ludics.append(i)\n        else:\n            for j in range(11, 100):\n                if i % j == 0:\n                    break\n                elif j == 97:\n                    ludics.append(i)\n                    break\n    return ludics",
        "num_ids": 196
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(2, n + 1):\n        is_lucid = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 119
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n    return ludic",
        "num_ids": 93
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lucid(n):\n    '''\n    A helper function that determines if a given integer is lucid or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 4:\n        return False\n    elif n % 2 == 0:\n        return is_lucid(n // 2)\n    else:\n        return is_lucid(3 * n + 1)\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic",
        "num_ids": 165
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(num)\n    return ludics",
        "num_ids": 116
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 116
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum += j\n        if sum == i:\n            ludic.append(i)\n    return ludic",
        "num_ids": 100
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lucid(n):\n    '''\n    A helper function to check if a number is lucid or not.\n    '''\n    s = str(n)\n    return '0' not in s and int(s) == sum([int(digit) ** len(s) for digit in s])\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            result.append(i)\n    return result",
        "num_ids": 136
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics",
        "num_ids": 114
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if i == sum(sorted(str(i))) and i!= 1:\n            ludics.append(i)\n    return ludics",
        "num_ids": 84
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Reverses the order of words in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)",
        "num_ids": 52
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)",
        "num_ids": 101
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "num_ids": 61
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = \" \".join(words[::-1])\n    return reversed_words",
        "num_ids": 34
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of words in the list\n    words = words[::-1]\n    # join the reversed words back into a string\n    s =''.join(words)\n    return s",
        "num_ids": 84
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = [] # create an empty list to store reversed words\n    for word in words:\n        reversed_word = word[::-1] # reverse the current word\n        reversed_words.append(reversed_word) # append the reversed word to the list\n    reversed_string =''.join(reversed_words) # join the reversed words with a space in between\n    return reversed_string # return the reversed string",
        "num_ids": 128
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)",
        "num_ids": 68
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)",
        "num_ids": 41
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse each word in the list and join them back into a string\n    reversed_words = \" \".join([word[::-1] for word in words])\n    \n    return reversed_words",
        "num_ids": 84
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and reverses the order of words in it.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = \"\"\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence",
        "num_ids": 112
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                break\n        else:\n            print(num,\"is a prime number\")\n    else:\n        print(num,\"is not a prime number\")",
        "num_ids": 95
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 73
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True",
        "num_ids": 98
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True",
        "num_ids": 108
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is 2\n    if num == 2:\n        return True\n    \n    # check if the number is divisible by any number between 2 and num/2\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    \n    # if the number is not divisible by any number between 2 and num/2, then it is a prime number\n    return True",
        "num_ids": 141
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    '''\n    # First check if the number is less than 2\n    if num < 2:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number\n    return True",
        "num_ids": 138
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it's a prime number, otherwise False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 68
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # If the number is less than or equal to 1, it is not prime\n    if num <= 1:\n        return False\n    # If the number is 2, it is a prime number\n    elif num == 2:\n        return True\n    # If the number is even, it is not a prime number\n    elif num % 2 == 0:\n        return False\n    # If the number is odd, check if it is divisible by any odd number\n    else:\n        for i in range(3, num):\n            if num % i == 0:\n                return False\n        return True",
        "num_ids": 152
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degree (float): A degree value.\n\n    Returns:\n        float: The equivalent value in radians.\n    \"\"\"\n    return math.radians(degree)",
        "num_ids": 55
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n\n    Parameters:\n    degree (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    '''\n\n    radians = math.radians(degree)\n    return radians",
        "num_ids": 62
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    This function converts degrees to radians.\n    \"\"\"\n    radian = degree * (math.pi / 180)\n    return radian",
        "num_ids": 45
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians",
        "num_ids": 43
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian",
        "num_ids": 45
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degree to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "num_ids": 39
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)",
        "num_ids": 35
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    return result",
        "num_ids": 77
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 86
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as input, and returns the matching substring, start index, and end index of the pattern if it exists in the string.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None",
        "num_ids": 89
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, start, end))\n    return result",
        "num_ids": 109
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 89
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    # If there are multiple matches, return the first one\n    match = matches[0]\n    start = text.index(match)\n    end = start + len(match)\n    return match, start, end",
        "num_ids": 77
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 86
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        match_string = match.group()\n        return match_string, start_index, end_index\n    return None, None, None",
        "num_ids": 113
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 87
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "num_ids": 53
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number.\n    \"\"\"\n    bell = 1\n    for i in range(1, n + 1):\n        bell = bell * i\n    return bell",
        "num_ids": 54
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        sum = 0\n        for i in range(n): \n            sum += bell_Number(i)\n        return sum ",
        "num_ids": 66
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0]*(n+1)\n        bell[0] = 0\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]",
        "num_ids": 121
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_Number(i)\n        return sum\n\nprint(bell_Number(5)) # Output: 55",
        "num_ids": 87
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n + 1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]",
        "num_ids": 111
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates nth bell number using dynamic programming.\n    '''\n\n    if n == 1:\n        return 1\n\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[1] = 1\n    bell_numbers[2] = 1\n\n    for i in range(3, n + 1):\n        bell_numbers[i] = bell_numbers[i - 1] + bell_numbers[i - 2]\n\n    return bell_numbers[n]",
        "num_ids": 126
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_num = [0] * (n+1)\n        bell_num[0] = 0\n        bell_num[1] = 1\n        for i in range(2, n+1):\n            bell_num[i] = bell_num[i-1] + bell_num[i-2]\n        return bell_num[n]",
        "num_ids": 141
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    if n == 0: \n        return 1\n    else: \n        return sum([bell_Number(i) for i in range(n)])",
        "num_ids": 40
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_Number(i)\n        return sum",
        "num_ids": 60
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n\n    bell = [0] * (n+1)  # Initialize a list to store bell numbers\n\n    for i in range(n+1):\n        # Base cases\n        if i == 0:\n            bell[i] = 1\n        elif i == 1:\n            bell[i] = 1\n\n        # Using the formula for bell numbers\n        else:\n            bell[i] = bell[i-1] + bell[i-2]\n\n    return bell[n]",
        "num_ids": 140
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L-1] + list1[L:]",
        "num_ids": 29
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the k'th element from the list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list",
        "num_ids": 75
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a number k as input, removes the k'th element from the list and returns the updated list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list",
        "num_ids": 88
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a number k as arguments and returns a new list with the kth element removed.\n    \"\"\"\n    if k > len(list1) or k < 1:\n        return \"Invalid k value\"\n    else:\n        new_list = list1[:k-1] + list1[k:]\n        return new_list",
        "num_ids": 90
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(lst, k):\n    '''\n    Returns a new list with the k'th element removed.\n    '''\n    return lst[:k-1] + lst[k:]",
        "num_ids": 43
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as inputs and returns a new list with the same elements except for the kth element.\n    \"\"\"\n    # Create a new list with all elements except for the kth element\n    new_list = list1[:k-1] + list1[k:]\n    return new_list",
        "num_ids": 84
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Returns a new list with the k'th element removed.\n    '''\n    if k >= len(list1):\n        return \"Error: k is out of range.\"\n    else:\n        new_list = list1[:k] + list1[k+1:]\n        return new_list",
        "num_ids": 77
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a new list with the k-th element removed.\n    \"\"\"\n    return lst[:k-1] + lst[k:]",
        "num_ids": 43
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a list of lists representing a matrix and returns the maximum of the Nth column.\n    '''\n    max_val = -float('inf') # initialize max value to negative infinity\n    for row in test_list:\n        max_val = max(max_val, row[N-1]) # update max value if current value is greater\n    return max_val",
        "num_ids": 95
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = []\n    for i in range(len(test_list)):\n        column.append(test_list[i][N-1])\n    return max(column)",
        "num_ids": 78
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf') # initialize max_val to negative infinity\n    for row in test_list:\n        if row[N-1] > max_val: # check if current element is greater than max_val\n            max_val = row[N-1] # update max_val to current element\n    return max_val",
        "num_ids": 114
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    column = [lst[N-1] for lst in test_list]\n    return max(column)",
        "num_ids": 64
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val",
        "num_ids": 107
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val",
        "num_ids": 96
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the maximum value of then'th column.\n    \"\"\"\n    # get the length of the matrix (number of rows)\n    num_rows = len(test_list)\n\n    # create a list to store the maximum values for each column\n    max_list = []\n\n    # iterate over the columns of the matrix\n    for col in range(num_rows):\n        # get then'th column of the matrix\n        col_values = [row[col] for row in test_list]\n\n        # find the maximum value in then'th column\n        max_val = max(col_values)\n\n        # append the maximum value to the list\n        max_list.append(max_val)\n\n    # find the maximum value of then'th column\n    max_n = max(max_list)\n\n    # return the maximum value of then'th column\n    return max_n",
        "num_ids": 208
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    # get then'th column as a list\n    col = [row[N] for row in test_list]\n    # find the max of then'th column\n    max_val = max(col)\n    return max_val",
        "num_ids": 63
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = [row[N-1] for row in test_list]\n    return max(col)",
        "num_ids": 64
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column_list = []\n    for i in range(len(test_list)):\n        column_list.append(test_list[i][N-1])\n    return max(column_list)",
        "num_ids": 84
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    if not all(len(sublist) == 2 for sublist in lst):\n        raise ValueError(\"Each sublist should have exactly two elements.\")\n    \n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    \n    return [first_list, second_list]",
        "num_ids": 129
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "num_ids": 35
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 82
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]",
        "num_ids": 81
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]",
        "num_ids": 99
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append(sublist[0])\n    return [merged_list, [sublist[1] for sublist in lst]]",
        "num_ids": 50
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]",
        "num_ids": 111
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result",
        "num_ids": 85
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i[1]\n    return total",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i][1])\n        else:\n            result.append(test_list[i][1] + result[i-1])\n    return result",
        "num_ids": 100
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i][1]\n    return cummulative_sum",
        "num_ids": 81
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for value in test_list:\n        total_sum += value\n    return total_sum",
        "num_ids": 64
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i[1]\n    return total",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum",
        "num_ids": 58
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for i in nums:\n        total = sum(i)\n        avg = total / len(i)\n        result.append(avg)\n    return result",
        "num_ids": 68
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    average_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        average_list.append(avg)\n    return average_list",
        "num_ids": 69
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        avg = sum / len(nums[i])\n        result.append(avg)\n    return result",
        "num_ids": 96
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "num_ids": 71
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        sum = 0\n        count = 0\n        for j in i:\n            sum += j\n            count += 1\n        avg = sum / count\n        result.append(avg)\n    return result",
        "num_ids": 85
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        avg = total / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 78
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n    \n    # Iterate through each tuple in the input tuple of tuples\n    for num in nums:\n        # Calculate the sum of the values in each tuple and append to the avg_list\n        avg_list.append(sum(num)/len(num))\n    \n    # Return the list of averages\n    return avg_list",
        "num_ids": 113
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result",
        "num_ids": 68
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tupples must have the same length\"\n    else:\n        result = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n        return result",
        "num_ids": 99
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] % test_tup2[i]),)\n\n    return result_tup",
        "num_ids": 118
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup",
        "num_ids": 114
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Checking if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The tuples are not of the same length.\"\n    \n    # Performing the element-wise modulo operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup",
        "num_ids": 136
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n    \n    return result_tup",
        "num_ids": 115
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i], )\n\n    return result_tup",
        "num_ids": 113
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))",
        "num_ids": 91
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup",
        "num_ids": 85
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    n = len(steps)\n    if d >= n:\n        return 0\n    visited = [False] * n\n    queue = [(0, 0, 0)]\n    while queue:\n        pos, jumps, level = queue.pop(0)\n        if pos == n-1:\n            return jumps\n        if level > d:\n            return -1\n        for i in range(1, steps[pos]+1):\n            if pos+i < n and not visited[pos+i]:\n                queue.append((pos+i, jumps+1, level+1))\n                visited[pos+i] = True\n        for i in range(-1, -steps[pos]-1, -1):\n            if pos+i >= 0 and not visited[pos+i]:\n                queue.append((pos+i, jumps+1, level+1))\n                visited[pos+i] = True\n    return -1",
        "num_ids": 243
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:\n        return 0\n    elif d < 0:\n        return -1\n    else:\n        jumps = 1\n        current_step = 0\n        remaining_steps = steps - 1\n        \n        while current_step < remaining_steps:\n            if current_step + d >= remaining_steps:\n                return jumps\n            else:\n                current_step += d\n                jumps += 1\n                \n        return -1",
        "num_ids": 140
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes in two arguments:\n    - steps (int): the maximum number of steps allowed to reach the destination point\n    - d (int): the length of the jump required to reach the destination point\n    \n    The function returns the minimum number of jumps required to reach the destination point.\n    '''\n    # Initialize the variables\n    n = d\n    jumps = 1\n    i = 1\n    \n    # Initialize a list to keep track of visited points\n    visited = [(0, 0)]\n    \n    # While the current point has not been visited and the maximum number of steps has not been reached\n    while (n > 0) and (i <= steps):\n        # Check if the next possible point is within the boundaries of the grid and has not been visited\n        if (i+d <= len(steps)) and ((i+d, 0) not in visited):\n            # Add the next possible point to the list of visited points\n            visited.append((i+d, 0))\n            # Update the current position and the number of jumps required\n            n -= d\n            jumps += 1\n        # Check if the current point is the destination point\n        if (i+d == len(steps)):\n            # Return the number of jumps required to reach the destination point\n            return jumps\n        # Move to the next position in the grid\n        i += 1\n        \n    # If the maximum number of steps has been reached before reaching the destination point, return -1\n    return -1",
        "num_ids": 314
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    current_step = 0\n    while current_step < steps-1:\n        farthest_reach = current_step + d\n        if farthest_reach >= steps-1:\n            return jumps + 1\n        i = current_step + 1\n        while i <= farthest_reach:\n            if i == farthest_reach or i + steps[i] >= farthest_reach:\n                jumps += 1\n                break\n            i += 1\n        current_step = farthest_reach\n    return jumps",
        "num_ids": 130
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the current position to the origin\n    current = (0, 0)\n    # Initialize the distance to reach the end of the jump\n    distance = abs(d)\n    # Initialize the number of jumps needed to reach the end\n    jumps = 1\n    \n    # While the current position is not at the end\n    while current!= (d, 0):\n        # Check if the current position can reach the end of the jump\n        if current[0] + distance >= d:\n            # If it can, update the distance to the end of the jump\n            distance = d - current[0]\n        else:\n            # If it cannot, update the distance to the next point in the jump\n            distance = min(distance, steps[current[0]][current[1]])\n        \n        # Update the current position to the next point in the jump\n        current = (current[0] + distance, current[1])\n        \n        # Increment the number of jumps needed to reach the end\n        jumps += 1\n    \n    # Return the number of jumps needed to reach the end\n    return jumps",
        "num_ids": 231
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the count of jumps and the list of visited cells\n    count = 0\n    visited = [(0, 0)]\n\n    # Initialize the queue with the first cell (0, 0) and its distance from the origin\n    queue = [(0, 0, steps-1)]\n\n    # Perform BFS on the graph\n    while queue:\n        # Dequeue the next cell from the queue\n        cell = queue.pop(0)\n        x, y, distance = cell\n\n        # If we have reached the destination, return the count of jumps required\n        if (x, y) == (d, 0):\n            return count\n\n        # If we have not yet visited this cell, mark it as visited and add it to the queue\n        if (x, y) not in visited:\n            visited.append((x, y))\n            if x > 0:\n                queue.append((x-1, y, distance-1))\n            if x < d:\n                queue.append((x+1, y, distance-1))\n            if y > 0:\n                queue.append((x, y-1, distance-1))\n            if y < steps-1:\n                queue.append((x, y+1, distance-1))\n\n    # If we have not yet reached the destination, return -1 to indicate failure\n    return -1",
        "num_ids": 293
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0 or d == 0:\n        return 0\n    if steps == 1:\n        return d\n    dp = [float('inf')] * (steps+1)\n    dp[0] = 0\n    dp[1] = d\n    for i in range(2, steps+1):\n        for j in range(1, i+1):\n            if j == 1:\n                dp[i] = min(dp[i], dp[j-1] + 1)\n            elif j > dp[i-j]:\n                break\n            else:\n                dp[i] = min(dp[i], dp[j-1] + dp[i-j])\n    return dp[steps]",
        "num_ids": 205
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    n = len(steps)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    jumps = float('inf')\n\n    # Fill the DP table\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if i+steps[j] >= j:\n                dp[i][j] = dp[i][j-1] + 1\n            if dp[i][j] < jumps:\n                jumps = dp[i][j]\n\n    return jumps",
        "num_ids": 153
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Create an empty list to store the distances from the origin\n    dist = [0] * steps\n\n    # Initialize the minimum jumps needed to reach the end point\n    jumps = steps\n\n    # Initialize the current step to 0\n    step = 0\n\n    # While the current step is less than the number of steps\n    while step < steps - 1:\n        # Calculate the maximum distance that can be reached from the current step\n        max_dist = step + d\n\n        # Check if the maximum distance is within the range of steps\n        if max_dist < steps - 1:\n            # If it is, update the current distance to be the maximum distance\n            dist[step + d] = max_dist + dist[step]\n\n            # Update the minimum jumps needed to reach the end point\n            if dist[max_dist + 1] + 1 < jumps:\n                jumps = dist[max_dist + 1] + 1\n\n        # Move to the next step\n        step += 1\n\n    # Return the minimum jumps needed to reach the end point\n    return jumps",
        "num_ids": 232
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # initialize the visited array\n    visited = [[0 for j in range(d+1)] for i in range(d+1)]\n    \n    # initialize the number of jumps to 0\n    jumps = 0\n    \n    # mark the point (0, 0) as visited\n    visited[0][0] = 1\n    \n    # initialize the queue with the starting point (0, 0)\n    queue = [(0, 0)]\n    \n    # loop until the queue is empty\n    while queue:\n        # dequeue the front element of the queue\n        curr = queue.pop(0)\n        \n        # check if the current point is at the destination (d, 0)\n        if curr[0] == d and curr[1] == 0:\n            return jumps\n        \n        # check the adjacent points in a 3x3 grid\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                # calculate the next point to visit\n                next_row = curr[0] + i\n                next_col = curr[1] + j\n                \n                # check if the next point is within bounds and not already visited\n                if 0 <= next_row <= d and 0 <= next_col <= d and visited[next_row][next_col] == 0 and steps[next_row][next_col]!= 0:\n                    # mark the next point as visited\n                    visited[next_row][next_col] = 1\n                    # enqueue the next point\n                    queue.append((next_row, next_col))\n                    \n        # increment the number of jumps\n        jumps += 1\n    \n    # if no path is found, return -1\n    return -1",
        "num_ids": 366
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result",
        "num_ids": 60
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result",
        "num_ids": 60
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 59
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result",
        "num_ids": 79
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Length of both lists should be same.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result",
        "num_ids": 84
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "num_ids": 61
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as an argument and moves all the numbers to the end of the string.\n    \"\"\"\n    # Initialize two empty lists\n    num_list = []\n    non_num_list = []\n    \n    # Split the string into two parts - one for numbers and one for non-numbers\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    \n    # Combine the two lists into one string\n    new_str = \"\".join(num_list) + \"\".join(non_num_list)\n    \n    return new_str",
        "num_ids": 146
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if not char.isdigit():\n            result += char\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result",
        "num_ids": 75
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    digits = ''.join(filter(str.isdigit, test_str))\n    letters = ''.join(filter(str.isalpha, test_str))\n    return letters + digits",
        "num_ids": 69
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    return ''.join(char_list + num_list)",
        "num_ids": 91
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # initialize two empty lists to hold the numbers and the non-numbers\n    numbers = []\n    non_numbers = []\n    \n    # iterate through the words and separate the numbers and non-numbers\n    for word in words:\n        if word.isdigit():\n            numbers.append(word)\n        else:\n            non_numbers.append(word)\n    \n    # join the non-numbers list with a space and return the final string\n    return \" \".join(non_numbers + numbers)",
        "num_ids": 145
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Splitting the string into a list of words\n    words = test_str.split()\n    \n    # Creating an empty list to store the words with numbers at the end\n    result = []\n    \n    # Looping through the list of words\n    for word in words:\n        # Checking if the word is a number\n        if word.isdigit():\n            # If it's a number, add it to the result list\n            result.append(word)\n        else:\n            # If it's not a number, add it to the result list at the end\n            result.append(word)\n    \n    # Joining the result list back into a string\n    result_str = \" \".join(result)\n    \n    # Returning the modified string\n    return result_str",
        "num_ids": 183
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    str_list = list(test_str)\n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            num_list.append(str_list[i])\n            str_list[i] = ''\n    return ''.join(str_list + num_list)",
        "num_ids": 105
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result",
        "num_ids": 63
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize two empty lists, one for words containing numbers and one for words not containing numbers\n    num_words = []\n    non_num_words = []\n    # iterate over the words and append them to the appropriate list\n    for word in words:\n        if any(char.isdigit() for char in word):\n            num_words.append(word)\n        else:\n            non_num_words.append(word)\n    # concatenate the non-number words with the number words, separated by a space\n    return''.join(non_num_words + num_words)",
        "num_ids": 168
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    str_list = list(test_str)\n    for char in str_list:\n        if char.isdigit():\n            num_str += char\n        else:\n            str_list.remove(char)\n    str_list += num_str\n    return ''.join(str_list)",
        "num_ids": 97
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [1] * n  # dp[i] = size of largest subset ending at index i\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
        "num_ids": 135
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    max_size = 0\n    for len_sub in range(2, n+1):\n        for i in range(n-len_sub+1):\n            j = i+len_sub-1\n            if a[i]%a[j] == 0 and dp[i+1][j-1]:\n                dp[i][j] = True\n                max_size = max(max_size, len_sub)\n    return max_size",
        "num_ids": 179
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j])\n        if dp[i]:\n            dp[i] += 1\n    return max(dp)",
        "num_ids": 141
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[False for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i][j-1] or dp[i+1][j]\n                \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if dp[i][j]:\n                return j-i+1\n    \n    return 0",
        "num_ids": 167
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the remainders of each number modulo 2\n    remainders = {}\n    for num in a:\n        remainder = num % 2\n        if remainder in remainders:\n            remainders[remainder].append(num)\n        else:\n            remainders[remainder] = [num]\n\n    # Sort the remainders dictionary by the size of the lists (in descending order)\n    sorted_remainders = sorted(remainders.items(), key=lambda x: len(x[1]), reverse=True)\n\n    # Find the size of the largest subset of numbers that are divisible by 2\n    largest_subset_size = 0\n    for remainder, nums in sorted_remainders:\n        if remainder == 0 and len(nums) % 2 == 0:\n            # Divisible by 2 and even length, so largest subset size is 2 * number of pairs\n            largest_subset_size = 2 * len(nums) // 2\n        elif remainder == 0 and len(nums) % 2 == 1:\n            # Divisible by 2 but odd length, so largest subset size is 2 * (number of pairs - 1)\n            largest_subset_size = 2 * (len(nums) // 2)\n        elif remainder == 1 and len(nums) % 2 == 0:\n            # Not divisible by 2 but even length, so largest subset size is number of pairs\n            largest_subset_size = len(nums) // 2\n        elif remainder == 1 and len(nums) % 2 == 1:\n            # Not divisible by 2 but odd length, so largest subset size is number of pairs - 1\n            largest_subset_size = len(nums) // 2\n\n    return largest_subset_size",
        "num_ids": 420
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    max_subset_size = 0\n    for i in range(len(a)):\n        if a[i] % 2!= 0:  # if the number is odd, skip it and move on to the next one\n            continue\n        for j in range(i+1, len(a)):\n            if a[j] % 2!= 0:  # if the number is odd, skip it and move on to the next one\n                continue\n            if a[j] % a[i] == 0:  # if the numbers are divisible, add their size to the max subset size\n                max_subset_size += 2\n            else:\n                break  # if the numbers are not divisible, stop checking for pairs with this number and move on to the next one\n    return max_subset_size",
        "num_ids": 216
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    a.sort() # sort the list in ascending order\n    n = len(a)\n    dp = [1] * n # initialize dp array with 1s\n    ans = 1 # initialize answer to 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1 # update dp[i] if a[i] is divisible by a[j] and adding a[j] to subset increases its size\n        ans = max(ans, dp[i]) # update answer if dp[i] is larger than the current answer\n    return ans",
        "num_ids": 170
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * (n+1)\n    dp[0] = True\n    dp[1] = True\n    \n    # loop through the array to check if a number is divisible by all numbers before it\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if a[i-1] % a[j-1] == 0 and dp[j]:\n                dp[i] = True\n                break\n    \n    # find the largest subset that is divisible by every pair\n    ans = 0\n    for i in range(n, 0, -1):\n        if dp[i]:\n            ans = i\n            break\n    \n    return ans",
        "num_ids": 190
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        largest_size = 0\n        for i in range(len(a)):\n            if i == len(a)-1 or a[i+1] % a[i] == 0:\n                size = 1 + largest_subset(a[:i] + a[i+1:])\n                if size > largest_size:\n                    largest_size = size\n        return largest_size",
        "num_ids": 136
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        if dp[i - 1]:\n            dp[i] = a[i] % a[i - 1] == 0\n        else:\n            dp[i] = False\n    if dp[-1]:\n        return n\n    else:\n        return dp.index(True)",
        "num_ids": 129
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = n - 1\n    k = (n + n + 1) // 2\n    \n    while True:\n        if i > j:\n            print(\"No median exists.\")\n            return None\n        \n        left1 = arr1[i]\n        right1 = arr1[j]\n        left2 = arr2[i]\n        right2 = arr2[j]\n        \n        if left1 <= right2 and left2 <= right1:\n            if k == 0:\n                print(max(left1, left2))\n                return None\n            elif k == 1:\n                print(max(right1, right2))\n                return None\n            elif k > n:\n                print(min(left1, left2))\n                return None\n            else:\n                if left1 > left2:\n                    arr1[i], arr2[i] = arr2[i], arr1[i]\n                    arr1[j], arr2[j] = arr2[j], arr1[j]\n                if k == n or k == n - 1:\n                    print(min(left1, left2))\n                else:\n                    print(max(left1, left2))\n                return None\n            \n        elif left1 <= right2:\n            i += 1\n        else:\n            j -= 1",
        "num_ids": 309
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n    \"\"\"\n    i = 0\n    j = 0\n    median = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n    if n % 2 == 0:\n        return (median[n//2] + median[n//2 - 1]) / 2\n    else:\n        return median[n//2]",
        "num_ids": 187
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    merged_list = arr1 + arr2\n    sorted_list = sorted(merged_list)\n    if n % 2 == 0:\n        # If n is even\n        median = (sorted_list[n//2] + sorted_list[n//2 - 1]) / 2\n    else:\n        # If n is odd\n        median = sorted_list[n//2]\n    return median",
        "num_ids": 121
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    # Find the middle index of the sorted arrays\n    mid = n // 2\n    \n    # Find the median of the two arrays\n    if arr1[mid] > arr2[mid]:\n        return arr1[mid]\n    elif arr1[mid] < arr2[mid]:\n        return arr2[mid]\n    else:\n        return arr1[mid - 1]",
        "num_ids": 93
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        return arr1[n//2]",
        "num_ids": 80
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, return the average of the middle two elements\n        return (max(arr1[n//2 - 1], arr2[n//2 - 1]) + min(arr1[n//2], arr2[n//2])) / 2\n    else:\n        # If n is odd, return the middle element\n        return max(arr1[n//2 - 1], arr2[n//2 - 1])",
        "num_ids": 142
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists into one sorted list\n    arr = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < n:\n        arr.append(arr1[i])\n        i += 1\n    while j < n:\n        arr.append(arr2[j])\n        j += 1\n\n    # find the median\n    if n % 2 == 0:\n        median = (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        median = arr[n//2]\n\n    return median",
        "num_ids": 210
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize variables for median calculation\n    i = 0\n    j = 0\n    median = 0\n\n    # Find the median of the two lists\n    while (i + j) < n:\n        # Check if arr1[i] is smaller than arr2[j]\n        if arr1[i] < arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n\n    # If the lists have the same length, return the average of the middle elements\n    if (n % 2) == 0:\n        return (max(arr1[i-1], arr2[j-1]) + median) / 2\n    # If the lists have different lengths, return the median element\n    else:\n        return median",
        "num_ids": 207
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function returns the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, return average of middle two elements\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2.0\n    else:\n        # If n is odd, return middle element\n        return arr1[n//2]",
        "num_ids": 103
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    median = 0\n    \n    while (i+j!= n):\n        if (arr1[i] < arr2[j]):\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n    \n    return median",
        "num_ids": 104
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes in a list of numbers and returns a new list where each number in the original list is raised to the power of n.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 65
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes two arguments:\n    nums: a list of numbers.\n    n: an integer, the power to which each number in the list should be raised.\n\n    It returns a new list containing the n-th power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 90
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "num_ids": 52
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]",
        "num_ids": 43
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as an argument and returns the uppercase version of the string.\n    \"\"\"\n    return string.upper()",
        "num_ids": 36
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n\n    :param string: the string to convert\n    :type string: str\n\n    :return: the uppercase string\n    :rtype: str\n    '''\n    return string.upper()",
        "num_ids": 53
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, else it returns False.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True",
        "num_ids": 57
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase,\n    and False otherwise.\n    \"\"\"\n    for char in string:\n        if char.islower():\n            return False\n    return True",
        "num_ids": 57
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()",
        "num_ids": 35
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The list after swapping first and last element is:\", newList)",
        "num_ids": 70
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0] \n    last_element = newList[-1] \n    newList[0] = last_element \n    newList[-1] = first_element \n    return newList ",
        "num_ids": 76
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and swaps the first and last element of the list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList",
        "num_ids": 70
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as an input and swaps the first and last element of the list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"New List after swapping:\", newList)",
        "num_ids": 90
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 75
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "num_ids": 75
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an argument and returns a new list where the first and last element are interchanged. \n    '''\n    newList[-1], newList[0] = newList[0], newList[-1]  # swapping the first and last elements using tuple unpacking\n    return newList",
        "num_ids": 76
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "num_ids": 57
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    \"\"\"\n    # Find the diameter of the semicircle\n    diameter = r * 2\n    \n    # Find the length of the largest side of the triangle\n    side = math.sqrt(r ** 2 - (math.sqrt(r ** 2) - r) ** 2)\n    \n    # Find the area of the triangle\n    area = 0.5 * side * diameter\n    \n    return area",
        "num_ids": 127
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    # The length of the side of the triangle is half the circumference of the circle divided by the square root of 2\n    a = r * math.sqrt(2) / 2\n    \n    # The height of the triangle is half the radius of the circle\n    h = r / 2\n    \n    # The area of the triangle is half the product of the length and height\n    area = 0.5 * a * h\n    \n    return area",
        "num_ids": 103
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = math.pi * r**2 / 2 # area of the semicircle\n    h = math.sqrt(r**2 - (r/2)**2) # height of the triangle's base\n    area_triangle = 0.5 * h * r # area of the triangle\n    return area_triangle, area - area_triangle # return both areas",
        "num_ids": 117
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the radius of the semicircle\n    semicircle_radius = r / (2 * math.tan(math.pi/5))\n    \n    # Calculate the length of the longest side of the triangle\n    longest_side = 2 * semicircle_radius * math.sin(math.pi/5)\n    \n    # Calculate the area of the triangle\n    area = (semicircle_radius**2) * (longest_side**2) / (4 * semicircle_radius)\n    \n    return area",
        "num_ids": 153
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = math.sqrt(r**2 - (r/2)**2)\n    return 0.5*r*h",
        "num_ids": 72
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    d = 2 * r\n    # Calculate the circumference of the semicircle\n    c = 2 * math.pi * r\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * d * r ** 2 / c\n    return area",
        "num_ids": 116
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 2*math.pi*r*math.sin(math.pi/3)\n    return area",
        "num_ids": 69
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    diameter = r * 2\n    # Calculate the radius of the inscribed circle\n    radius = r / math.sqrt(2)\n    # Calculate the height of the triangle\n    height = radius * math.sqrt(3) / 2\n    # Calculate the area of the triangle\n    area = (height * diameter) / 2\n    return area",
        "num_ids": 126
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the area of the semicircle\n    area_semicircle = math.pi * r**2\n    \n    # Calculate the length of the largest triangle's hypotenuse\n    h = r * math.sin(math.pi/3)\n    \n    # Calculate the area of the largest triangle\n    area_triangle = (1/2) * h * r\n    \n    # Return the area of the largest triangle\n    return area_triangle if area_triangle < area_semicircle else area_semicircle",
        "num_ids": 145
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The maximum area of a triangle inscribed in a semicircle with radius r is pi * r^2 / 2.\n    # We can find the radius of the largest inscribed triangle by finding the value of r for which\n    # the area of the triangle is greater than or equal to pi * r^2 / 2.\n    area = 0.5 * math.pi * r ** 2\n    while area >= 0.5 * math.pi * r ** 2:\n        r -= 0.001\n        area = 0.5 * math.pi * r ** 2\n    # The area of the largest triangle inscribed in a semicircle with radius r is pi * r^2 / 2 - 0.5 * pi * (r - 0.001)^2.\n    return math.pi * r ** 2 / 2 - 0.5 * math.pi * (r - 0.001) ** 2\n",
        "num_ids": 258
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] <= 0 or array[i] > end:\n            raise ValueError(\"Invalid input\")\n\n    for i in range(start, end+1):\n        j = array[i] - 1\n        if array[i]!= array[j]:\n            temp = array[i]\n            while array[j]!= temp:\n                temp_j = array[j]\n                array[j] = temp\n                j = temp_j - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n    \n    return end+1 + 1",
        "num_ids": 180
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return start + 1\n    mid = (start + end) // 2\n    if array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)",
        "num_ids": 128
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Check if array is empty or not\n    if start > end:\n        return None\n\n    # Calculate the middle index of the array\n    mid = (start + end) // 2\n\n    # Check if the middle element is missing or not\n    if mid > 0 and array[mid] - array[mid - 1] > 1:\n        return array[mid]\n\n    # Check if the left half is missing or not\n    if array[mid] - array[start] > mid - start + 1:\n        return find_First_Missing(array, start, mid - 1)\n\n    # Check if the right half is missing or not\n    else:\n        return find_First_Missing(array, mid + 1, end)\n",
        "num_ids": 211
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    n = end - start + 1\n    \n    # Check if the list is already sorted\n    sorted_flag = True\n    for i in range(1, n):\n        if array[i-1] > array[i]:\n            sorted_flag = False\n            break\n    \n    if sorted_flag:\n        # Check for missing number in a sorted list\n        for i in range(n):\n            if array[i]!= i+start:\n                return i+start\n        return n+start\n    \n    # If list is not sorted, sort it and find missing number\n    sorted_array = sorted(array)\n    for i in range(n):\n        if sorted_array[i]!= i+start:\n            return i+start\n    return n+start",
        "num_ids": 188
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    n = end - start + 1\n    missing_num = n + 1\n\n    for i in range(n):\n        if array[i] <= 0 or array[i] > n:\n            return \"Invalid Input\"\n        if array[i] > 0:\n            missing_num = array[i]\n            break\n\n    for i in range(missing_num,n+1):\n        if i not in array:\n            return i\n\n    return \"All numbers are present\"",
        "num_ids": 157
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Finds the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list of int): the sorted list of natural numbers\n        start (int, optional): the starting index to search for missing numbers. Defaults to 0.\n        end (int, optional): the ending index to search for missing numbers. Defaults to None, which means the end of the list.\n\n    Returns:\n        int: the smallest missing number from the list\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Find the sum of all numbers from start to end\n    total = sum(array[start:end+1])\n\n    # Sum up all numbers from 0 to the end of the array\n    expected_sum = sum(range(end+1))\n\n    # Calculate the missing number\n    missing = expected_sum - total\n\n    return missing",
        "num_ids": 200
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number from the list.\n    \"\"\"\n\n    if end is None:\n        end = len(array)\n\n    # iterate through the array and mark all the elements as positive\n    for i in range(start, end):\n        index = array[i] - start\n        if index >= 0 and index < end - start and array[index] > 0:\n            array[index] = -array[index]\n\n    # iterate through the array and return the first positive element\n    for i in range(start, end):\n        index = array[i] - start\n        if index == i:\n            return i + 1\n\n    # if all elements are positive, then return the length of the array + 1\n    return end + 1",
        "num_ids": 186
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If all numbers are present in the list, it returns the next number greater than the last number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize a dictionary to keep track of the frequency of each number in the array\n    frequency_dict = {}\n    for num in array[start:end+1]:\n        frequency_dict[num] = frequency_dict.get(num, 0) + 1\n\n    # Traverse the array and find the first missing number\n    for i in range(start, end+1):\n        if i+1 not in frequency_dict:\n            return i+1\n\n    # If all numbers are present, return the next number greater than the last number in the list\n    return end+2",
        "num_ids": 203
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If end is not provided, then the last index of the array is taken as the end.\n    if end == None:\n        end = len(array) - 1\n    \n    # Initialize a variable to keep track of the first missing number.\n    first_missing = 0\n    \n    # Loop through the array and check for missing numbers.\n    for i in range(start, end+1):\n        if array[i] == i+1:\n            continue\n        elif array[i] == i:\n            # If the current element is the correct number, move on to the next element.\n            continue\n        else:\n            # If the current element is not the correct number, update the first_missing variable.\n            first_missing = i\n            break\n    \n    # Loop through the array again and check for missing numbers.\n    for i in range(start, end+1):\n        if array[i] == first_missing+1:\n            continue\n        elif array[i] == first_missing:\n            # If the current element is the correct number, move on to the next element.\n            continue\n        else:\n            # If the current element is not the correct number, update the first_missing variable.\n            first_missing = i\n            break\n    \n    # Return the first missing number.\n    return first_missing",
        "num_ids": 309
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i] < start or array[i] > end:\n            continue\n        num = array[i]\n        if num == i:\n            continue\n        elif array[num] == num:\n            array[num] = num - start\n        else:\n            continue\n    \n    for i in range(start, end+1):\n        if array[i] == start + i:\n            continue\n        elif array[i] == start + i - 1:\n            return start + i\n        else:\n            return start + i - 1",
        "num_ids": 157
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 38
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string",
        "num_ids": 44
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 36
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "num_ids": 40
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_even(numbers):\n    '''\n    This function takes a list of numbers as input and returns a list containing even numbers from the input list.\n    '''\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "num_ids": 42
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result",
        "num_ids": 55
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_numbers(lst):\n    \"\"\"\n    Returns a list of even numbers from the input list.\n\n    Parameters:\n        lst (list): A list of numbers.\n\n    Returns:\n        A list of even numbers.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]",
        "num_ids": 66
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with only the even numbers.\n    \"\"\"\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 69
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers",
        "num_ids": 42
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "num_ids": 61
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list): \n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "num_ids": 42
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes two arguments:\n    - ele (tuple): A tuple of two integers representing a coordinate\n    - sub (list, optional): A list of tuples representing the previously calculated adjacent coordinates. Defaults to an empty list.\n    \n    This function returns a list of tuples representing all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    adjacent = [(ele[0]+1, ele[1]), (ele[0], ele[1]+1), (ele[0]-1, ele[1]), (ele[0], ele[1]-1)]\n    # This line creates a list of tuples representing the adjacent coordinates of the given coordinate tuple.\n\n    for coord in sub:\n        # This loop removes any previously calculated adjacent coordinates from the list of adjacent coordinates.\n        if coord in adjacent:\n            adjacent.remove(coord)\n\n    return adjacent",
        "num_ids": 184
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    sub.extend(adj)\n    if len(set(sub)) == len(sub):\n        return sub\n    else:\n        return adjac(ele, sub)",
        "num_ids": 102
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjac_coords = []\n    x, y = ele\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adjac_coords.append((i, j))\n    return adjac_coords",
        "num_ids": 99
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    if sub:\n        return [adj for adj in adjacent if adj not in sub]\n    else:\n        return adjacent",
        "num_ids": 92
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = coord\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]",
        "num_ids": 62
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the coordinate boundaries for the board\n    boundaries = [(0, 0), (0, 4), (4, 0), (4, 4)]\n    # Check if the given coordinate is within the boundaries\n    if ele not in boundaries:\n        return []\n    # Define the adjacent coordinates\n    adj = [(ele[0]+dx, ele[1]+dy) for dx in range(-1, 2) for dy in range(-1, 2) \n          if (dx!= 0 or dy!= 0) and (ele[0]+dx, ele[1]+dy)!= ele]\n    # Filter the adjacent coordinates that are not within the boundaries\n    adj = [a for a in adj if a in boundaries]\n    # Remove duplicates from the list of adjacent coordinates\n    adj = list(set(adj))\n    # Add the current sublist to the list of sublists\n    sub.append(adj)\n    # Recursively call the function for each adjacent coordinate\n    for a in adj:\n        adjac(a, sub)\n    # Return the list of sublists\n    return sub",
        "num_ids": 256
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    if sub:\n        return [c for c in adj if c not in sub]\n    else:\n        return adj",
        "num_ids": 89
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacents = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [s for s in adjacents if s not in sub]",
        "num_ids": 85
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a coordinate tuple as input and returns a list of all adjacent coordinates\n    \"\"\"\n    row, col = ele\n    adj_list = []\n    \n    # Check all adjacent cells\n    if row > 0:\n        adj_list.append((row-1, col))\n    if row < 2:\n        adj_list.append((row+1, col))\n    if col > 0:\n        adj_list.append((row, col-1))\n    if col < 2:\n        adj_list.append((row, col+1))\n    \n    # Check for sublist input\n    if sub:\n        sub_list = []\n        for coord in adj_list:\n            if coord in sub:\n                sub_list.append(coord)\n        return sub_list\n    else:\n        return adj_list",
        "num_ids": 182
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(len(ele)):\n        if i == 0:\n            for j in range(-1, 2):\n                if j!= 0:\n                    adj.append(ele[0] + j, ele[1] + 1)\n        elif i == 1:\n            for j in range(-1, 2):\n                if j!= 0:\n                    adj.append(ele[0] + 1, ele[1] + j)\n        elif i == 2:\n            for j in range(-1, 2):\n                if j!= 0:\n                    adj.append(ele[0] + j, ele[1] - 1)\n        else:\n            for j in range(-1, 2):\n                if j!= 0:\n                    adj.append(ele[0] - 1, ele[1] + j)\n    return adj",
        "num_ids": 224
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "num_ids": 44
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 21
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")",
        "num_ids": 44
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        print(f\"Original text: {text}\\nReplaced text: {new_text}\")\n    else:\n        new_text = text.replace('_','')\n        print(f\"Original text: {text}\\nReplaced text: {new_text}\")",
        "num_ids": 108
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 43
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 56
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')",
        "num_ids": 56
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')",
        "num_ids": 45
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        return new_text\n    else:\n        new_text = text.replace('_','')\n        return new_text",
        "num_ids": 76
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 81
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            pass\n    for num in zeroes:\n        num_list.remove(num)\n    return num_list",
        "num_ids": 89
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    return non_zeroes + zeroes",
        "num_ids": 89
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    return non_zeros + zeros",
        "num_ids": 83
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as an argument and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            pass\n    for num in zeroes:\n        num_list.remove(num)\n        num_list.append(num)\n    return num_list",
        "num_ids": 99
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes in a list of numbers and moves all zeroes to the end of the list.\n    \"\"\"\n\n    # Create two pointers, one at the beginning and one at the end of the list.\n    left = 0\n    right = len(num_list) - 1\n\n    # Iterate through the list, swapping any zeroes that are encountered with the non-zero number\n    # that is currently at the right pointer.\n    while left < right:\n        if num_list[left] == 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            right -= 1\n        else:\n            left += 1\n\n    # Return the modified list.\n    return num_list",
        "num_ids": 171
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes",
        "num_ids": 82
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeros to the end of the list.\n    \"\"\"\n    zeros = []\n    non_zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    return non_zeros + zeros",
        "num_ids": 87
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeros to the end of the list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    # Separate the zeroes and non-zeroes in two lists\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    # Combine the non-zeroes and zeroes in the original order\n    result = non_zeroes + zeroes\n    \n    return result",
        "num_ids": 127
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes",
        "num_ids": 57
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Create two empty lists to store zeroes and non-zeroes\n    zero_list = []\n    non_zero_list = []\n\n    # Loop through the input list and separate the zeroes and non-zeroes\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n\n    # Concatenate non-zeroes and zeroes to form the final list\n    final_list = non_zero_list + zero_list\n\n    # Return the final list\n    return final_list",
        "num_ids": 159
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 77
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through each element of the list\n    for i in range(n-1) : \n        # Iterate through each element after i\n        for j in range(i+1,n) : \n            # Add the xor of the pair to the sum\n            sum += arr[i] ^ arr[j]\n    \n    # Return the sum\n    return sum",
        "num_ids": 124
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum of xor to 0\n    xor_sum = 0\n    \n    # Loop through all possible pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the pair of numbers and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the final sum of xor\n    return xor_sum",
        "num_ids": 134
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 81
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and finds the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    sum_xor = 0\n    \n    # Iterate over all pairs of numbers in the list and calculate their xor\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    \n    return sum_xor",
        "num_ids": 100
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "num_ids": 85
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum to zero\n    xor_sum = 0\n    \n    # Iterate through all pairs of elements in the list\n    for i in range(n-1):\n        for j in range(i+1,n):\n            # Calculate the xor of the current pair and add to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return xor_sum",
        "num_ids": 120
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    \n    # Iterate over all pairs of elements in the list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            \n            # Calculate the xor of the two numbers\n            xor_sum += arr[i] ^ arr[j]\n    \n    return xor_sum",
        "num_ids": 105
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i]^arr[j]\n    return xor_sum",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes an array and its size as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "num_ids": 83
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n\n    Args:\n        iterable (iterable): An iterable object to sort.\n\n    Returns:\n        A sorted list of elements.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 100
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 62
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "num_ids": 50
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "num_ids": 72
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 60
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a heap\n    heap = iterable.copy()\n    hq.heapify(heap)\n    \n    # Sort the heap in ascending order\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list",
        "num_ids": 92
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = []\n\n    # build a max heap from the iterable\n    for num in iterable:\n        hq.heappush(heap, num)\n\n    # sort the heap in descending order\n    for i in range(len(heap)-1, 0, -1):\n        # swap the maximum element with the last element of the heap\n        hq.heappop(heap)\n        # heapify the remaining elements in the heap\n        hq.heapify(heap)\n\n    return heap",
        "num_ids": 136
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list",
        "num_ids": 73
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return \"No profit\"\n    elif sale_amount == actual_cost:\n        return \"No profit and no loss\"\n    else:\n        return \"No loss\"",
        "num_ids": 60
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        print(\"The sale has made a profit\")\n    elif sale_amount == actual_cost:\n        print(\"The sale has not made any profit or loss\")\n    else:\n        print(\"The sale has made a loss\")",
        "num_ids": 90
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        print(f\"The sale had a profit of {profit:.2f}.\")\n        return False\n    elif profit == 0:\n        print(\"The sale had no profit or loss.\")\n        return True\n    else:\n        print(f\"The sale had a loss of {-profit:.2f}.\")\n        return False",
        "num_ids": 99
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if sale_amount > actual_cost:\n        print(\"The sale has a profit.\")\n    elif sale_amount < actual_cost:\n        print(\"The sale has a loss.\")\n    else:\n        print(\"The sale has no profit or loss.\")",
        "num_ids": 68
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given sale amount has no profit and no loss.\n\n    Args:\n    actual_cost (float): Actual cost of the item\n    sale_amount (float): Amount that was sold\n\n    Returns:\n    bool: True if there is no profit and no loss, False otherwise\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 97
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    This function takes in the actual cost of the item and the sale amount.\n    It checks whether the sale has no profit and no loss.\n    '''\n    if sale_amount >= actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"There is a profit or loss\")",
        "num_ids": 81
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    Returns True if there is no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"There is profit.\")\n    elif sale_amount < actual_cost:\n        print(\"There is loss.\")\n    else:\n        print(\"There is no profit or loss.\")",
        "num_ids": 63
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        return \"This sale has no profit or loss.\"\n    else:\n        return \"This sale has profit or loss.\"",
        "num_ids": 50
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        print(\"There is no profit.\")\n    elif sale_amount < actual_cost:\n        print(\"There is no loss.\")\n    else:\n        print(\"The sale amount is the same as the actual cost.\")",
        "num_ids": 69
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert the temperature from celsius to kelvin\n    t += 273.15\n    \n    # Calculate the wind chill index using the formula WCI = 13.12 + 0.6215 * vT - 11.37 * math.pow(v, 0.16) + 0.3965 * vT * math.pow(v, 0.16)\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer and return it\n    return round(wci)",
        "num_ids": 230
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index (in Celsius) given the wind velocity (in km/h) and temperature (in Celsius).\n    \"\"\"\n    # Convert the wind velocity from km/h to m/s\n    v_mps = v * 0.277778\n\n    # Calculate the wind chill index using the formula\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * math.pow(v_mps, 0.16) + 0.3965 * t * math.pow(v_mps, 0.16)\n\n    # Round the result to the nearest integer\n    return round(wind_chill)",
        "num_ids": 178
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the Wind Chill Index based on the given wind velocity in km/h and temperature in celsius.\n    Returns the Wind Chill Index rounded to the nearest integer.\n    '''\n    # Convert temperature to kelvin\n    t += 273.15\n    \n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.pow(t, 0.16) + 0.4275 * v * math.pow(t, 0.16)\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    # Return the wind chill index\n    return wci",
        "num_ids": 178
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_f = (t * 1.8) + 32  # convert temperature to farenheit\n    v_ms = v / 3.6  # convert velocity from km/h to m/s\n    wind_chill_index = 13.12 + (0.6215 * t_f) - (11.37 * math.pow(v_ms, 0.16)) + (0.3965 * t_f * math.pow(v_ms, 0.16))\n    return round(wind_chill_index)",
        "num_ids": 182
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the Wind Chill Index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    temp = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    wind_chill = 35.74 + 0.6215*temp - 35.75*(math.pow((v/1.6),0.16)) + 0.4275*temp*(math.pow((v/1.6),0.16))\n    return round(wind_chill)",
        "num_ids": 187
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes two arguments: wind velocity in km/h and temperature in celsius.\n    It calculates the wind chill index using the formula:\n    Wind chill = 13.12 + 0.6215 * T - 11.37 * v^0.16 + 0.3965 * T * v^0.16\n    The function returns the wind chill index rounded to the next integer.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = t * 9/5 + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t_f - 11.37 * v**0.16 + 0.3965 * t_f * v**0.16\n    \n    # Round the wind chill index to the next integer and return it\n    return round(wind_chill_index)",
        "num_ids": 237
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    return round(wind_chill_index)",
        "num_ids": 123
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert velocity to m/s\n    v = v / 3.6\n    \n    # Calculate the wind chill index\n    # Reference: https://en.wikipedia.org/wiki/Wind_chill#Wind_chill_index\n    a = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * t * math.pow(v, 0.16)\n    wind_chill_index = 13.12 + 0.0053 * t + ((a * v) / (0.62197 - 0.39656 * v))\n    # Round to the next integer\n    return round(wind_chill_index)",
        "num_ids": 228
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert temperature from celsius to kelvin\n    tk = t + 273.15\n    \n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * tk - 11.37 * math.pow(v, 0.16) + 0.3965 * tk * math.pow(v, 0.16)\n    \n    # round the wind chill index to the nearest integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded",
        "num_ids": 171
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity from km/h to m/s\n    v = v / 3.6\n    \n    # calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index",
        "num_ids": 181
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length_sum += len(name)\n    return length_sum",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n        else:\n            total += len(name)\n    return total",
        "num_ids": 86
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result",
        "num_ids": 74
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    sum_length = sum([len(name) for name in filtered_names])\n    return sum_length",
        "num_ids": 86
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length",
        "num_ids": 80
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)",
        "num_ids": 55
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile('\\([^()]*\\)')\n    return regex.sub('', items)",
        "num_ids": 56
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string or list of strings as input and removes any text that is between parentheses.\n    '''\n\n    if type(items) == str:\n        # Remove any text within parentheses using regular expressions\n        items = re.sub(r'\\([^)]*\\)', '', items)\n        # Remove any remaining parentheses from the string\n        items = re.sub(r'\\(|\\)', '', items)\n    elif type(items) == list:\n        new_list = []\n        # Loop through each item in the list and remove the parentheses\n        for item in items:\n            item = re.sub(r'\\([^)]*\\)', '', item)\n            item = re.sub(r'\\(|\\)', '', item)\n            new_list.append(item)\n        # Set the list to the new list with parentheses removed\n        items = new_list\n\n    return items",
        "num_ids": 192
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items",
        "num_ids": 88
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)",
        "num_ids": 58
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    return pattern.sub('', items)",
        "num_ids": 56
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)' # pattern to match parenthesis and what is inbetween them\n    return re.sub(pattern, '', items) # remove the matched pattern from the string",
        "num_ids": 77
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'\n    items = re.sub(pattern, '', items)\n    return items",
        "num_ids": 57
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    return pattern.sub('', items)",
        "num_ids": 54
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^()]*\\)')  # pattern to match anything between parenthesis\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items",
        "num_ids": 78
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count < n:\n        num += 1 + 10*count\n        count += 1\n    return num",
        "num_ids": 67
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1)*((2*n)-1))/2",
        "num_ids": 58
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    num1 = 1\n    num2 = 1\n    count = 1\n    \n    # Loop until we find the nth nonagonal number\n    while count < n:\n        # Compute the next nonagonal number\n        next_num = num1 + num2\n        # Update the variables for the next iteration\n        num1 = num2\n        num2 = next_num\n        count += 1\n    \n    # Return the nth nonagonal number\n    return next_num",
        "num_ids": 126
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += count\n        count += 1\n    return num",
        "num_ids": 55
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(3*n-1))//2",
        "num_ids": 40
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    count = 1\n    \n    # Iterate through the loop until the nth nonagonal number is found\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    \n    # Return the nth nonagonal number\n    return a",
        "num_ids": 94
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 1\n        count += 1\n",
        "num_ids": 57
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = (n * (3 * n - 1)) // 2\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th nonagonal number is: {is_nonagonal(n)}\")",
        "num_ids": 88
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return bool(re.search(pattern, text))",
        "num_ids": 71
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz(?=\\S)\\S*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 82
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*z)[a-zA-Z]+z[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 69
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)[a-z]*z[a-z]*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 97
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\w*?\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz(?=[^aeiou]*[aeiou])(?=[^aeiou]*[aeiou][^aeiou]*$)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r'\\b(?!.*(?:^|[-_])z|z(?=[-_.]))[a-zA-Z]+(?<!z)\\b')\n    return bool(pattern.search(text))",
        "num_ids": 94
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz(?!\\w)\\w*\\b(?!z)'  # matches 'z' that is not followed by a word boundary and then zero or more word characters before another word boundary, but not followed by 'z'\n    return bool(re.search(pattern, text))  # returns True if pattern is found in text, otherwise False",
        "num_ids": 119
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = re.compile(r'\\b(?!.*\\b\\w*z\\w*\\b)\\w*z\\w*\\b')\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 100
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # reverse the array up to position k\n    reversed_array = input[:k][::-1] + input[k:]\n    return reversed_array",
        "num_ids": 46
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input and returns a reversed array upto the position k.\n    '''\n    # Initialize variables for the start and end index of the array\n    start = 0\n    end = k - 1\n\n    # Swap the elements of the array from start to end index\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # Return the reversed array upto the position k\n    return input[:k]",
        "num_ids": 131
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input and returns the reversed array upto position k.\n\n    :param input: list - An array of integers\n    :param k: int - The position upto which the array needs to be reversed\n    :return: list - The reversed array upto position k\n    \"\"\"\n\n    # Initialize variables\n    n = len(input)\n    start = 0\n    end = k - 1\n\n    # Reverse the first k elements\n    input[start:end+1] = reversed(input[start:end+1])\n\n    # Reverse the remaining elements\n    input[k:] = reversed(input[k:])\n\n    return input",
        "num_ids": 154
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as input and returns the reversed array upto the position k.\n    '''\n    if k >= len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]",
        "num_ids": 74
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and reverses it up to the given position.\n    \"\"\"\n    n = len(input)\n    for i in range(n-1, k-1, -1):\n        input[i], input[k-1] = input[k-1], input[i]\n    return input",
        "num_ids": 85
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    return input[:k][::-1] + input[k:]",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in an array and a value k and returns the array reversed up to the position k.\n    '''\n    # reverse the array up to k\n    input[:k] = input[:k][::-1]\n\n    return input",
        "num_ids": 65
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]",
        "num_ids": 48
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Base case\n    if k == 0:\n        return input\n    \n    # Recursive case\n    else:\n        return input[k-1] + reverse_Array_Upto_K(input[:k-1], k-1)",
        "num_ids": 64
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_array_upto_k(arr, k):\n    '''\n    Reverses the array up to the given position k (inclusive).\n    '''\n    # reverse the entire array\n    arr.reverse()\n    # reverse the first k elements of the array\n    arr[:k+1] = arr[:k+1][::-1]\n    # reverse the remaining elements of the array\n    arr[k+1:] = arr[k+1:][::-1]\n    return arr",
        "num_ids": 102
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new tuple with the original tuple and the dictionary\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 73
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 60
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as input.\n    The function adds the dictionary to the tuple and returns a new tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup",
        "num_ids": 68
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    n = len(cost)\n    max_avg = 0\n\n    # Loop through all possible paths\n    for i in range(n):\n        for j in range(n):\n            # Initialize variables for the current path\n            current_avg = 0\n            current_cost = 0\n            current_count = 1\n            \n            # Check if the current cell is the end of a path\n            if i == n-1 and j == n-1:\n                current_avg = cost[i][j]\n                max_avg = max(current_avg, max_avg)\n                continue\n            \n            # Check if we can move right from the current cell\n            if j < n-1:\n                new_avg, new_cost, new_count = max_average_helper(i, j+1, cost)\n                if new_avg > current_avg or (new_avg == current_avg and new_cost < current_cost):\n                    current_avg = new_avg\n                    current_cost = new_cost\n                    current_count = new_count + 1\n            \n            # Check if we can move down from the current cell\n            if i < n-1:\n                new_avg, new_cost, new_count = max_average_helper(i+1, j, cost)\n                if new_avg > current_avg or (new_avg == current_avg and new_cost < current_cost):\n                    current_avg = new_avg\n                    current_cost = new_cost\n                    current_count = new_count + 1\n            \n            # Update max_avg if the current path is better\n            max_avg = max(max_avg, current_avg)\n    \n    return max_avg\n\ndef max_average_helper(i, j, cost):\n    \"\"\"\n    Helper function to compute the maximum average of a path starting at (i,j)\n    \"\"\"\n    n = len(cost)\n    current_avg = 0\n    current_cost = 0\n    current_count = 1\n    \n    # Check if the current cell is the end of a path\n    if i == n-1 and j == n-1:\n        current_avg = cost[i][j]\n        return current_avg, current_avg, current_count\n    \n    # Check if we can move right from the current cell\n    if j < n-1:\n        new_avg, new_cost, new_count = max_average_helper(i, j+1, cost)\n        if new_avg > current_avg or (new_avg == current_avg and new_cost < current_cost):\n            current_avg = new_avg\n            current_cost = new_cost\n            current_count = new_count + 1\n    \n    # Check if we can move down from the current cell\n    if i < n-1:\n        new_avg, new_cost, new_count = max_average_helper(i+1, j, cost)\n        if new_avg > current_avg or (new_avg == current_avg and new_cost < current_cost):\n            current_avg = new_avg\n            current_cost = new_cost\n            current_count = new_count + 1\n    \n    # Update max_avg if the current path is better\n    return current_avg, current_cost + cost[i][j], current_count",
        "num_ids": 806
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n\n    # Define helper function to compute the average of a path\n    def average(path):\n        return sum(cost[i][j] for i, j in path) / len(path)\n\n    # Define recursive function to find all paths\n    def find_path(i, j, path):\n        if i == n - 1 and j == n - 1:\n            path.append((i, j))\n            avg = average(path)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path.copy()\n            return\n        if i < n - 1:\n            path.append((i, j))\n            find_path(i + 1, j, path)\n            path.pop()\n        if j < n - 1:\n            path.append((i, j))\n            find_path(i, j + 1, path)\n            path.pop()\n\n    # Find all paths and compute the maximum average\n    find_path(0, 0, [])\n\n    return max_avg, max_path",
        "num_ids": 255
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # Compute average for each possible path starting from cell (i,j)\n            if i == 0 and j == 0:\n                # If starting cell, average is cost of cell itself\n                avg = cost[i][j]\n            else:\n                # Compute average as total cost divided by number of cells visited\n                if i == 0:\n                    avg = cost[i][j] + cost[i][j-1]\n                elif j == 0:\n                    avg = cost[i][j] + cost[i-1][j]\n                else:\n                    avg = cost[i][j] + min(cost[i-1][j], cost[i][j-1])\n            # Update max_avg if current average is greater\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg",
        "num_ids": 310
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            curr_avg = dp[i][j] / (i+j+1)\n            max_avg = max(max_avg, curr_avg)\n    return max_avg",
        "num_ids": 281
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_path = []\n    i = n-1\n    j = n-1\n    while i > 0 and j > 0:\n        if dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n        max_path.append((i,j))\n    max_path.reverse()\n    max_avg = sum([cost[i][j] for i, j in max_path])/(n*n)\n    return max_avg, max_path",
        "num_ids": 336
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n\n    # Create a 2D list to store the maximum path average for each cell\n    max_avg_path = [[0 for i in range(n)] for j in range(n)]\n\n    # Initialize the maximum path average for the top-left cell to be the cost of that cell\n    max_avg_path[0][0] = cost[0][0]\n\n    # Fill the rest of the cells in the max_avg_path list using the following recursive formula:\n    # max_avg_path(i, j) = max(max_avg_path(i-1, j), max_avg_path(i, j-1)) + cost(i,j)\n    for i in range(1, n):\n        max_avg_path[i][0] = max_avg_path[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        max_avg_path[0][j] = max_avg_path[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            max_avg_path[i][j] = max(max_avg_path[i-1][j], max_avg_path[i][j-1]) + cost[i][j]\n\n    # Find the maximum path average from all possible paths\n    max_avg = max_avg_path[n-1][n-1]\n    for i in range(n-1, 0, -1):\n        for j in range(n-1, 0, -1):\n            if max_avg_path[i][j] == max_avg:\n                print((i,j))\n                return max_avg_path[i][j]/(i+1+j+1)\n\n    return max_avg_path[n-1][n-1]/(n**2)",
        "num_ids": 437
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize a list to store the maximum averages for all possible paths\n    max_averages = []\n\n    # Initialize a variable to store the maximum average found so far\n    max_average = -float('inf')\n\n    # Iterate over all possible paths\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost)):\n            # Calculate the total cost of the path using dynamic programming\n            total_cost = cost[i][j]\n            if i > 1:\n                total_cost += max(max_averages[i-1][j], max_averages[i-2][j])\n            if j > 1:\n                total_cost += max(max_averages[i][j-1], max_averages[i][j-2])\n            if i > 1 and j > 1:\n                total_cost -= min(max_averages[i-1][j], max_averages[i-2][j], max_averages[i][j-1], max_averages[i][j-2])\n\n            # Calculate the average cost of the path and store it in the list of maximum averages\n            average_cost = total_cost / (i + j - (max(i-2, 0) + max(j-2, 0)))\n            max_averages.append([average_cost, i+j-2])\n\n            # Update the maximum average found so far\n            if average_cost > max_average:\n                max_average = average_cost\n\n    # Find the path with the maximum average and return it\n    max_index = max_averages.index([max_average, len(cost)-1])\n    path = [(i, j) for i in range(max_index+1) for j in range(max_index+1) if i+j-max_index == 1]\n    return path",
        "num_ids": 516
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost or not cost[0]:\n        return 0\n    \n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        \n    # Fill the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        \n    # Fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    # Find the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                max_avg = max(max_avg, (dp[i][j] - dp[i][j-1]) / (j+1))\n            elif j == 0:\n                max_avg = max(max_avg, (dp[i][j] - dp[i-1][j]) / (i+1))\n            else:\n                max_avg = max(max_avg, (dp[i][j] - dp[i-1][j] - dp[i][j-1] + dp[i-1][j-1]) / (i+j+2))\n                \n    return max_avg",
        "num_ids": 479
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n\n    # Initialize the maximum average to negative infinity\n    max_avg = float('-inf')\n\n    # Loop over all possible paths starting from the top-left cell\n    for i in range(n):\n        for j in range(n):\n            # Initialize the current average to zero and the number of cells visited to one\n            curr_avg = cost[i][j]\n            num_cells = 1\n\n            # Recursively compute the average for all possible paths from this cell\n            for k in range(i-1, i+2):\n                for l in range(j-1, j+2):\n                    if k >= 0 and k < n and l >= 0 and l < n and (k!= i or l!= j):\n                        curr_avg += cost[k][l]\n                        num_cells += 1\n\n            # Update the maximum average if necessary\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n\n    return max_avg",
        "num_ids": 218
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_avg = float('-inf')\n    \n    # Calculate the cost of the path ending at each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                \n    # Calculate the average of each path and update the maximum average if necessary\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                avg = dp[i][j] / (j+1)\n            elif j == 0:\n                avg = dp[i][j] / (i+1)\n            else:\n                avg = (dp[i][j] - min(dp[i-1][j], dp[i][j-1])) / (i+j-1)\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg",
        "num_ids": 442
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, height_weight in students.items():\n        if height_weight[0] > h and height_weight[1] > w:\n            filtered_students[student] = height_weight\n    return filtered_students",
        "num_ids": 127
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, height_weight in students.items():\n        if height_weight[0] >= h and height_weight[1] >= w:\n            filtered_students[student] = height_weight\n    return filtered_students",
        "num_ids": 127
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students",
        "num_ids": 122
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "num_ids": 121
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = filter(lambda x: x[1][0] >= h and x[1][1] >= w, students.items())\n    return dict(filtered_students)",
        "num_ids": 113
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "num_ids": 60
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "num_ids": 87
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "num_ids": 58
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for i in range(1, power + 1):\n        base_sum += int(base) ** i\n    return base_sum",
        "num_ids": 78
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base *= 10\n    return sum",
        "num_ids": 71
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base**power):\n        sum_of_digits += int(digit)\n    return sum_of_digits",
        "num_ids": 79
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for i in range(power):\n        digit = base % 10\n        total_sum += digit\n        base = base // 10\n    return total_sum",
        "num_ids": 84
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base):\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits",
        "num_ids": 79
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes two arguments, base and power.\n    It calculates the sum of all digits of the base to the specified power.\n    '''\n    # convert the base and power to strings\n    base_str = str(base)\n    power_str = str(power)\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through each digit of the power\n    for digit in power_str:\n        # convert the digit back to an integer\n        digit_int = int(digit)\n\n        # calculate the power of the base\n        power_base = base ** digit_int\n\n        # convert the power of the base to a string and loop through each digit\n        for digit_power in str(power_base):\n            # convert the digit to an integer and add it to the sum variable\n            digit_int_power = int(digit_power)\n            sum += digit_int_power\n\n    # return the sum\n    return sum\n",
        "num_ids": 210
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total",
        "num_ids": 67
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum",
        "num_ids": 62
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    for digit in str(base):\n        power_sum += int(digit) ** power\n    return power_sum",
        "num_ids": 73
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base ** power):\n        sum += int(digit)\n    return sum",
        "num_ids": 67
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"[^\"]+\"|\\S+'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 39
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # find all occurrences of double quotes\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    \n    # return all matches\n    return matches",
        "num_ids": 45
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" from a given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 53
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" from the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 54
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" from the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result",
        "num_ids": 58
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 58
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "num_ids": 57
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.findall(text1)\n    return match\n\ntext = 'The quick brown fox \"jumps over\" the lazy dog \"and\" the cat \"walks away\".'\nprint(extract_quotation(text))",
        "num_ids": 99
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Using regular expressions to extract quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    # Returning the list of quotation marks values\n    return matches",
        "num_ids": 58
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup",
        "num_ids": 111
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 120
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "num_ids": 96
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "num_ids": 112
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)-1\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result",
        "num_ids": 89
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result",
        "num_ids": 107
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1  # The length of the output tuple is one less than the length of the input tuple.\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(n))\n    return tuple(result_tup)",
        "num_ids": 134
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers and returns a tuple of length N-1 where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "num_ids": 102
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum as a new list.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 70
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 98
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum as a new list.\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n    return sum_lst",
        "num_ids": 76
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list of the sums of corresponding elements in the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Input lists must have the same length.\")\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 82
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists and returns the sum of the corresponding elements of the lists.\n\n    Parameters:\n    lst1 (list): The first list\n    lst2 (list): The second list\n\n    Returns:\n    list: The list of sums\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"Error: The two lists should have the same length.\")\n        return\n    \n    return [lst1[i] + lst2[i] for i in range(len(lst1))]",
        "num_ids": 119
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise sum of the input lists.\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]",
        "num_ids": 59
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length\")\n    return [a + b for a, b in zip(lst1, lst2)]",
        "num_ids": 108
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "num_ids": 99
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            yield from g\n",
        "num_ids": 60
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) > 1:\n            result += group[0:1]\n        else:\n            result += group\n    return result",
        "num_ids": 83
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) == 1:\n            result.append(k)\n        else:\n            result.extend(list(g))\n    return result",
        "num_ids": 81
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n        else:\n            result.extend(list(g))\n    return result",
        "num_ids": 81
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if len(list(g)) > 1]",
        "num_ids": 57
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group = list(g)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.extend(group[0::len(group)-1])\n    return result",
        "num_ids": 94
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone with radius r and height h.\n    '''\n    return math.pi * r * (r + math.sqrt(r ** 2 + h ** 2))",
        "num_ids": 63
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(h**2 + r**2))\n    return lateralsurface",
        "num_ids": 74
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi*r*(r+math.sqrt(h**2+r**2))\n    return lateralsurface",
        "num_ids": 73
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateralsurface_area",
        "num_ids": 75
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * h\n    return lateralsurface",
        "num_ids": 60
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\nlateral_surface_area = lateralsurface_cone(r, h)\n\nprint(\"The lateral surface area of the cone is:\", lateral_surface_area)",
        "num_ids": 139
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone, and returns the lateral surface area of the cone.\n    '''\n    lateral_area = math.pi * r * (r + h)\n    return lateral_area",
        "num_ids": 71
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * r * h) + (math.pi * r ** 2)\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The lateral surface area of the cone is:\", lateralsurface_cone(r, h))",
        "num_ids": 123
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+math.sqrt(h*h+r*r))\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The lateral surface area of the cone is\", lateralsurface_cone(r,h))",
        "num_ids": 123
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given the radius and height of the base.\n\n    Args:\n        r (float): The radius of the base of the cone.\n        h (float): The height of the cone from the base to the top.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    '''\n\n    return math.pi * r * h + 2 * math.pi * r**2",
        "num_ids": 112
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[.,\\s]')\n    return pattern.sub(':', text)",
        "num_ids": 58
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 52
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    result = re.sub(pattern, ':', text)\n    return result",
        "num_ids": 60
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r'\\s', ':', text)\n    \n    # Replace commas with colons\n    text = re.sub(r',', ':', text)\n    \n    # Replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    \n    return text",
        "num_ids": 103
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[., ]', ':', text)",
        "num_ids": 45
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, and dots with a colon using regex\n    colon_text = re.sub(r\"[\\s,.]\", \":\", text)\n    return colon_text",
        "num_ids": 74
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)",
        "num_ids": 46
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[\\s,.]', ':', text)",
        "num_ids": 50
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.]+')\n    return pattern.sub(':', text)\n",
        "num_ids": 54
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)\n\ntext = \"Hello, World!\"\nprint(replace_specialchar(text)) # Output: \"Hello:World!\"",
        "num_ids": 79
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1",
        "num_ids": 127
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
        "num_ids": 122
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 128
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "num_ids": 124
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 135
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "num_ids": 127
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "num_ids": 64
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result",
        "num_ids": 124
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function finds the index of the first occurrence of a given number x in a sorted array A.\n    If the number is not found in the array, it returns -1.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result",
        "num_ids": 140
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A, or -1 if x is not in A.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "num_ids": 151
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prefix_prod = [1]\n    for i in range(1, n):\n        prefix_prod.append(prefix_prod[i-1] * arr[i-1])\n\n    suffix_prod = [1]\n    for i in range(n-2, -1, -1):\n        suffix_prod.append(suffix_prod[i+1] * arr[i+1])\n\n    suffix_prod.reverse()\n\n    result = 0\n    for i in range(n):\n        result += prefix_prod[i] * suffix_prod[i]\n\n    return result",
        "num_ids": 195
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    suffix_prod = [1] * n\n\n    # Compute prefix products\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    # Compute suffix products\n    for i in range(n - 2, -1, -1):\n        suffix_prod[i] = suffix_prod[i + 1] * arr[i + 1]\n\n    # Compute sum of products of all possible sublists\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += prefix_prod[i] * suffix_prod[j]\n\n    return ans",
        "num_ids": 180
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = arr[i:j]\n            res += math.prod(sublist)\n    return res",
        "num_ids": 99
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    # Traverse all subarrays\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            # Update result\n            res += prod\n    return res",
        "num_ids": 73
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    \n    # Multiplying each element with its index and adding it to the result.\n    for i in range(n):\n        res += arr[i]*i\n    \n    # Now multiplying each element with the sum of all previous elements.\n    for i in range(1, n):\n        res += arr[i]*sum(arr[:i])\n    \n    return res",
        "num_ids": 98
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    postfix_prod = [1] * n\n    prefix_sum = [0] * n\n    postfix_sum = [0] * n\n\n    # prefix product array\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    # postfix product array\n    for i in range(n - 2, -1, -1):\n        postfix_prod[i] = postfix_prod[i + 1] * arr[i + 1]\n\n    # prefix sum array\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i]\n\n    # postfix sum array\n    for i in range(n - 1, -1, -1):\n        postfix_sum[i] = postfix_sum[i + 1] + arr[i]\n\n    # sum of products of all possible sublists\n    res = 0\n    for i in range(n):\n        res += prefix_prod[i] * postfix_prod[i]\n\n    return res",
        "num_ids": 268
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the given list.\n    '''\n    n = len(arr)\n    # Initialize variables\n    max_prod = 1\n    curr_prod = 1\n    result = 0\n    # Traverse the list from left to right\n    for i in range(n):\n        # Multiply the current element with the previous maximum product and add it to result\n        result += curr_prod\n        # Update the current product by taking the minimum of the current element and the previous maximum product\n        curr_prod = min(arr[i], curr_prod * arr[i])\n        # Update the maximum product if the current product becomes greater than it\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n    # Return the sum of products of all possible sublists\n    return result - max_prod",
        "num_ids": 200
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    # Create a list to store prefix products of all subarrays\n    prefix_product = [1] * n\n    # Calculate prefix products of all subarrays\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n    # Create a list to store suffix products of all subarrays\n    suffix_product = [1] * n\n    # Calculate suffix products of all subarrays\n    for i in range(n - 2, -1, -1):\n        suffix_product[i] = suffix_product[i + 1] * arr[i + 1]\n    # Calculate sum of products of all subarrays\n    result = 0\n    for i in range(n):\n        result += prefix_product[i] * suffix_product[i]\n    return result",
        "num_ids": 227
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            temp = 1\n            for k in range(i, j+1):\n                temp *= arr[k]\n            ans += temp\n    \n    return ans",
        "num_ids": 74
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n    postfix_prod = [1] * n\n\n    # Compute prefix products\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    # Compute postfix products\n    for i in range(n - 2, -1, -1):\n        postfix_prod[i] = postfix_prod[i + 1] * arr[i + 1]\n\n    # Compute sum of products of all possible sublists\n    ans = 0\n    for i in range(n):\n        ans += prefix_prod[i] * postfix_prod[i]\n\n    return ans",
        "num_ids": 170
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the number\n    binary = bin(n)[2:]\n    # Convert the binary representation to a list of bits\n    bits = list(binary)\n    # Toggle the bits except for the first and last bit\n    for i in range(1, len(bits)-1):\n        if bits[i] == '0':\n            bits[i] = '1'\n        else:\n            bits[i] = '0'\n    # Convert the list of toggled bits to a string of bits\n    binary_string = ''.join(bits)\n    # Convert the string of toggled bits back to an integer\n    toggled_n = int(binary_string, 2)\n    # Return the toggled integer\n    return toggled_n",
        "num_ids": 168
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111110 # binary representation of 00000000111111110\n    toggled_bits = n ^ mask\n    return toggled_bits",
        "num_ids": 110
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # get the mask for all bits except the first and last bit\n    mask = 0b11111110\n    \n    # toggle the bits using the mask\n    toggled_bits = n ^ mask\n    \n    # set the first and last bit of the toggled bits\n    toggled_bits |= 0b00000011\n    \n    return toggled_bits",
        "num_ids": 91
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n    \"\"\"\n    # XOR all bits with first and last bit set to 1\n    n = n ^ (0b11 << 1)\n    # XOR all bits with first and last bit set to 0\n    n = n ^ (0b11 >> 1)\n    return n",
        "num_ids": 88
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Toggle all the bits except the first and last bits\n    n = (n >> 1) ^ ((n & 1) << 31)\n    # Return the modified number\n    return n",
        "num_ids": 100
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    This function takes a number as input and toggles the bits of the number except for the first and last bit.\n    '''\n    # Using bitwise XOR operator to toggle all the bits except the first and last bit.\n    toggled_bits = n ^ (n >> 1) ^ (n << 1)\n    return toggled_bits",
        "num_ids": 84
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = (1 << 31) - 2  # mask with first and last bits set to 0\n    return (n ^ mask)  # XOR with the mask to toggle the middle bits",
        "num_ids": 101
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    mask = 0\n    for i in range(1, 32):\n        mask = mask | (1 << i)\n    return (n ^ mask)",
        "num_ids": 44
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of the number\n    binary_rep = bin(n)[2:]\n\n    # create a new binary string with the middle bits toggled\n    new_binary = binary_rep[:1] + ''.join(['0' if bit == '1' else '1' for bit in binary_rep[1:-1]]) + binary_rep[-1:]\n\n    # convert the new binary string back to an integer and return it\n    return int(new_binary, 2)",
        "num_ids": 113
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles the bits of a number except the first and last bit.\n    '''\n    # Get the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Get the bit pattern of the first bit\n    first_bit = 1 << (num_bits - 1)\n    \n    # Get the bit pattern of the last bit\n    last_bit = 1\n    \n    # Get the bit pattern of the middle bits\n    middle_bits = (first_bit - 1) ^ last_bit\n    \n    # Toggle the middle bits of n\n    n ^= middle_bits\n    \n    return n",
        "num_ids": 138
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i",
        "num_ids": 109
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left_index = bisect.bisect_left(a, x)\n    return left_index\n",
        "num_ids": 60
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos",
        "num_ids": 89
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i-1",
        "num_ids": 86
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left",
        "num_ids": 98
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(pattern, string))",
        "num_ids": 71
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 78
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 83
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    This function takes a string as an argument and returns True if the string starts with a vowel, False otherwise.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(regex, string)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 86
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The string starts with a vowel.\")\n    else:\n        print(\"The string does not start with a vowel.\")",
        "num_ids": 97
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "num_ids": 79
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False \n",
        "num_ids": 80
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**-1) + geometric_sum(n-1)",
        "num_ids": 93
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)",
        "num_ids": 45
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return (1 - (1 / n)) * geometric_sum(n - 1)",
        "num_ids": 44
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return (1 / (n + 1)) * (geometric_sum(n - 1) + 1)\n\nn = int(input(\"Enter a number: \"))\nprint(geometric_sum(n))",
        "num_ids": 73
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "num_ids": 86
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - pow(1-0.5, n)) / (1 - 0.5)",
        "num_ids": 47
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-n) * geometric_sum(n-1)",
        "num_ids": 62
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1-n) + n * geometric_sum(n-1)",
        "num_ids": 57
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "num_ids": 39
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the geometric sum of n-1.\n    The geometric sum of a number n is defined as the sum of the first n positive integers, \n    each raised to the power of the sum of the first n positive integers.\n    For example, the geometric sum of 5 is 1+2+3+4+5 = 15, which is equal to 1^1 + 2^2 + 3^3 + 4^4 + 5^5.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)",
        "num_ids": 153
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_index(n):\n    '''\n    Returns the index of the smallest triangular number with n digits.\n    '''\n    count = 1\n    i = 1\n    while True:\n        triangular = (i * (i + 1)) // 2\n        if len(str(triangular)) == n:\n            return count\n        count += 1\n        i += 1",
        "num_ids": 85
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables\n    count = 0\n    num = 1\n    index = 0\n\n    # Loop until we reach the nth digit\n    while count < n:\n        # Add the current number to the index\n        index += num\n\n        # Increment the count and update the number\n        count += len(str(num))\n        num += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return index",
        "num_ids": 150
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    i = 1\n    while True:\n        triangular = int(i*(i+1)/2)\n        if len(str(triangular)) == n:\n            return i\n        i += 1",
        "num_ids": 77
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    triangular_num = 1\n    while len(str(triangular_num)) < n:\n        count += 1\n        triangular_num += count\n    return count",
        "num_ids": 105
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    # Find the index of the smallest triangular number with n digits.\n    # n is the number of digits.\n    # We know that the index of the smallest triangular number with n digits is n*(n+1)/2\n    return int(n*(n+1)/2)",
        "num_ids": 72
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # calculate the number of digits in the smallest triangular number with n digits\n    count = int(n * (n + 1) / 2)\n    # calculate the smallest triangular number with n digits\n    triangular_number = count * (count + 1) // 2\n    # convert triangular_number to string and return the length of the string\n    return len(str(triangular_number))",
        "num_ids": 100
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    triangular_number = 1\n    count = 1\n    while True:\n        if len(str(triangular_number)) == n:\n            return count\n        triangular_number += count\n        count += 1",
        "num_ids": 78
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_index(n):\n    triangular_number = (10 ** n) * (1 + math.ceil(math.sqrt(1 + 8 * (10 ** n)))) // 2\n    return triangular_number - 10 ** n\n",
        "num_ids": 63
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0 \n    for i in range(1, n+1): \n        count += i\n    return count\n\nn = int(input(\"Enter the number of digits in the triangular number: \"))\n\nprint(\"The index of smallest triangular number with\", n, \"digits is:\", find_Index(n))",
        "num_ids": 132
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # find the number of digits in the nth triangular number\n    num_digits = int(math.log10(n*(n+1)//2))+1\n    \n    # check if the number of digits is even or odd\n    if num_digits%2 == 0:\n        return num_digits//2\n    else:\n        return (num_digits+1)//2",
        "num_ids": 112
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple and returns a dictionary with the first element of the tuple as the key\n    and the second element of the tuple as the value.\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict",
        "num_ids": 96
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict",
        "num_ids": 113
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Converts the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Check if the tuple has an even length\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple length must be even\")\n\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Iterate over the tuple using a step of 2 (i.e. adjacent elements)\n    for i in range(0, len(test_tup), 2):\n        # Get the key and value from the tuple at the current index\n        key = test_tup[i]\n        value = test_tup[i+1]\n\n        # Add the key-value pair to the dictionary\n        result_dict[key] = value\n\n    return result_dict",
        "num_ids": 174
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as an argument and converts it to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 86
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict",
        "num_ids": 92
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 108
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "num_ids": 52
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function converts the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # check if the input is a tuple\n    if not isinstance(test_tup, tuple):\n        return None\n    \n    # initialize an empty dictionary\n    result_dict = {}\n    \n    # loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict",
        "num_ids": 130
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 83
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict",
        "num_ids": 83
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function will check whether all the characters in the string are same or not.\n    \"\"\"\n    return len(set(s)) == 1",
        "num_ids": 42
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function returns True if all the characters in a given string s are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True",
        "num_ids": 93
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function returns True if all characters in the string are the same,\n    and False otherwise.\n    \"\"\"\n    return s.count(s[0]) == len(s)",
        "num_ids": 49
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are the same,\n    otherwise it returns False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 60
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same, else returns False.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) > 1:\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                return False\n        return True",
        "num_ids": 103
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are the same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])",
        "num_ids": 70
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, else False.\n    \"\"\"\n    # converting the string to lowercase\n    s = s.lower()\n\n    # initializing a variable to store the first character of the string\n    first_char = s[0]\n\n    # looping through the string and checking if all characters are the same\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n\n    # if all characters are the same, then return True\n    return True",
        "num_ids": 127
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    return len(set(s)) == 1",
        "num_ids": 50
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (3 * (math.sqrt(3) / 2) * side ** 2) / 4\n    return area",
        "num_ids": 59
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron given the length of its longest side.\n    '''\n    # Calculate the semiperimeter\n    s = (3 * side) / (4 * math.tan(math.pi / 6))\n\n    # Calculate the area using Heron's formula\n    area = (math.sqrt(24 * side**2 + 16 * side**4) - 2 * side**3) / 3\n    \n    return area",
        "num_ids": 112
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3 * math.sqrt(2) * side ** 2) / 12",
        "num_ids": 56
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * (side ** 2)) / (4 * math.tan(math.pi / 4))\n    return area",
        "num_ids": 65
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron.\n    '''\n    return (6*math.sqrt(2))/(4*math.tan(math.pi/6)) * side**2",
        "num_ids": 56
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) / 4) ** 2) * side ** 2\n    return area",
        "num_ids": 64
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (6/4)*math.sqrt(6)*side**2\n    return area",
        "num_ids": 52
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (math.sqrt(6)/3) * side ** 2\n    return s",
        "num_ids": 55
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Args:\n    side (float): length of one side of the tetrahedron\n\n    Returns:\n    float: area of the tetrahedron\n    '''\n    s = side / 2\n    area = math.sqrt(6) / 4 * s ** 2\n    return area",
        "num_ids": 84
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (3 * side) / (2 * (2 ** 0.5))\n    \n    # Calculate the area of the tetrahedron\n    area = (math.sqrt(24 * s ** 2 + 1) + 6 * s) / 4\n    \n    return area",
        "num_ids": 106
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    temp = lst[-m:]\n    lst = lst[:-m]\n    lst.extend(temp)\n    return lst",
        "num_ids": 41
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m %= n\n    return lst[n-m:] + lst[:n-m]",
        "num_ids": 55
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function takes a list and a number m as input and returns the list after rotating it by m items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    return lst[n-m:] + lst[:n-m]",
        "num_ids": 70
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]",
        "num_ids": 57
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]",
        "num_ids": 49
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list to the right by n positions.\n    \"\"\"\n    return lst[n:] + lst[:n]",
        "num_ids": 36
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    reverse_list(list, 0, m - 1)\n    reverse_list(list, m, n - 1)\n    reverse_list(list, 0, n - 1)\n\ndef reverse_list(list, start, end):\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1",
        "num_ids": 160
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n  # To handle the case when m > n\n    \n    # Reverse the first m elements\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the remaining elements\n    list[m:] = list[m:][::-1]\n    \n    # Reverse the entire list\n    list = list[::-1]\n    \n    return list",
        "num_ids": 136
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    temp = list[:m]\n    list[m:] = list[:n-m]\n    list[:m] = temp\n    return list",
        "num_ids": 98
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n positions\n    \"\"\"\n    return lst[n:] + lst[:n]",
        "num_ids": 35
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    return None in test_tup",
        "num_ids": 38
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple has any None value, otherwise it returns False.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "num_ids": 58
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = set(str(num))\n        if all(int(digit)%num == 0 for digit in digits):\n            result.append(num)\n    return result",
        "num_ids": 102
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments startnum and endnum. \n    It then finds all the numbers between startnum and endnum where \n    every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        # checking if num is divisible by every digit in it\n        if all(num % int(digit) == 0 for digit in str(num)):\n            divisible_numbers.append(num)\n    return divisible_numbers",
        "num_ids": 128
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    lambda_func = lambda x: all(int(i) == 0 or x % int(i) == 0 for i in str(x))\n    result = filter(lambda_func, range(startnum, endnum+1))\n    return list(result)",
        "num_ids": 107
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))",
        "num_ids": 57
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            divisible_nums.append(num)\n    return divisible_nums",
        "num_ids": 141
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum+1) if all(int(digit) % num == 0 for digit in str(num))]",
        "num_ids": 51
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d)!= 0 and x % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))\n",
        "num_ids": 93
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda n: all(int(d) % n == 0 for d in str(n))\n\n    # Use filter() to get a list of all numbers in the given range that are divisible by every digit they contain\n    result = filter(is_divisible, range(startnum, endnum + 1))\n\n    # Return the list of numbers\n    return list(result)",
        "num_ids": 179
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    \"\"\"\n    def is_divisible_by_digits(n):\n        \"\"\"\n        A helper function to check if a given number is divisible by every digit it contains.\n        \"\"\"\n        digits = set(str(n))\n        return all(int(d) % n == 0 for d in digits)\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n\nprint(divisible_by_digits(10, 50))",
        "num_ids": 154
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    divisible = lambda x: all(int(digit) % x == 0 for digit in str(x))\n    return [num for num in range(startnum, endnum+1) if divisible(num)]",
        "num_ids": 96
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r**2 * a) / 360",
        "num_ids": 47
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * a / 360\n    \n",
        "num_ids": 48
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Find the area of a sector.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r ** 2) * a / 360 * math.pi",
        "num_ids": 60
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360",
        "num_ids": 41
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r * r) * (a / 360)",
        "num_ids": 90
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return 0.5 * math.pi * r**2 * a/360\n\nprint(sector_area(5, 360)) # Expected output: None\nprint(sector_area(5, 180)) # Expected output: 78.53981633974483",
        "num_ids": 105
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5)*math.pi*r**2*a/360",
        "num_ids": 90
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * math.pi * r**2) * a / 360",
        "num_ids": 93
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r * r) * a / 360\n\nr = float(input(\"Enter the radius of the circle: \"))\na = float(input(\"Enter the angle of the sector (in degrees): \"))\n\narea = sector_area(r, a)\nif area is None:\n    print(\"Angle should be less than or equal to 360 degrees.\")\nelse:\n    print(f\"The area of the sector is {area:.2f}\")",
        "num_ids": 136
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi",
        "num_ids": 86
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Find the length of the three strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store the length of the LCS for all possible prefixes\n    # of the three strings\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Extract the LCS from the table\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k] and table[i-1][j][k] > table[i][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] > table[i-1][j][k] and table[i][j-1][k] > table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs",
        "num_ids": 442
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D array to store the lengths of longest common subsequence of substrings\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the 2D array using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Extract the longest common subsequence\n    lcs_seq = \"\"\n    i = m\n    j = n\n    k = o\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_seq = X[i-1] + lcs_seq\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs_seq",
        "num_ids": 394
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    # create a 3D table to store lengths of LCS at every point\n    table = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # find the maximum length of LCS\n    max_length = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if table[i][j][k] > max_length:\n                    max_length = table[i][j][k]\n\n    # print the LCS\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] >= table[i][j - 1][k] and table[i - 1][j][k] >= table[i][j][k - 1]:\n            i -= 1\n        elif table[i][j - 1][k] >= table[i - 1][j][k] and table[i][j - 1][k] >= table[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs",
        "num_ids": 521
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequences\n    \"\"\"\n\n    # create three arrays to store the lengths of the common subsequences for the substrings of X, Y, and Z\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill the L matrix using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # create a variable to store the length of the longest common subsequence\n    lcs_length = L[m][n][p]\n\n    # create an array to store the longest common subsequence\n    lcs = [\"\"] * (lcs_length+1)\n    lcs[lcs_length] = \"\"\n\n    # backtrack to find the longest common subsequence\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[lcs_length-1] = X[i-1]\n            lcs_length -= 1\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs[1:])",
        "num_ids": 554
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = ''\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 404
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store lengths of longest common subsequence of substrings\n    L = [[0]*(p+1) for i in range(m+1)]\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][k] = L[i-1][k-1] + 1\n                else:\n                    L[i][k] = max(L[i-1][k], L[i][k-1], L[i-1][k-1])\n\n    # Find the longest common subsequence\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][k] >= L[i][k] and L[i-1][k] >= L[i-1][k-1]:\n            i -= 1\n        elif L[i][k-1] >= L[i-1][k] and L[i][k-1] >= L[i-1][k-1]:\n            k -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "num_ids": 401
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]",
        "num_ids": 204
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    max_len = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                    if lcs[i][j][k] > max_len:\n                        max_len = lcs[i][j][k]\n                        lcs_str = X[i-lcs[i][j][k]:i]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    return lcs_str",
        "num_ids": 257
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences as input and returns the longest common subsequence of the three sequences.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store the length of LCS of subsequence ending at i, j, k\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in a bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # Find the LCS by backtracking\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] >= dp[i][j-1][k] and dp[i-1][j][k] >= dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] >= dp[i-1][j][k] and dp[i][j-1][k] >= dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs",
        "num_ids": 457
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n  \n    # Create a table to store lengths of longest common subsequences of substrings. Note that LCS[i][j] contains the length of LCS of X[0..i-1] and Y[0..j-1] \n    LCS = [[0 for k in range(o+1)] for l in range(m+1)] \n  \n    # Following steps build LCS in bottom up fashion. Note that LCS[i][j] contains the length of LCS of X[0..i-1] and Y[0..j-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    LCS[i][j] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]): \n                    LCS[i][j] = LCS[i-1][j-1] + 1\n                else: \n                    LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1], LCS[i][j-1]) \n  \n    # LCS of X, Y and Z is stored in LCS[m][n] \n    return LCS[m][n] \n  \n",
        "num_ids": 356
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<!\\w)([A-Z][a-z]+)')\n    return pattern.sub(r' \\1', str1)",
        "num_ids": 75
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = r\"(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])(?=[A-Z])\"\n    return re.sub(pattern, r\" \", str1)",
        "num_ids": 87
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    result = pattern.sub(lambda x:''.join(x.group(0).split()), str1)\n    return result",
        "num_ids": 86
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z]\\w+', str1)\n    result =''.join(words)\n    return result",
        "num_ids": 68
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string)  # Find all capitalized words in string\n    for i in range(len(words)):\n        if i == 0:\n            string = string.replace(words[i], words[i].capitalize(), 1)\n        else:\n            string = string.replace(words[i],'' + words[i].capitalize(), 1)\n    return string",
        "num_ids": 134
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    This function takes a string as input and adds spaces between words starting with capital letters.\n    \"\"\"\n    # Splitting the string into words using regex\n    words = re.findall(r'\\b[A-Z][^\\s]*\\b', str1)\n    # Joining the words with a space and returning the final string\n    return''.join(words)",
        "num_ids": 93
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphabetic characters from the string\n    str1 = re.sub('[^a-zA-Z]+','', str1)\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    \n    # Insert spaces between the capitalized words\n    str1 =''.join(words)\n    \n    return str1",
        "num_ids": 116
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to match capital words\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Use join() method to insert spaces between capital words\n    new_str =''.join(capital_words)\n    # Return new string with spaces\n    return new_str",
        "num_ids": 109
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Replace each capitalized word with its capitalized version followed by a space\n    for word in capitalized_words:\n        str1 = str1.replace(word, word.capitalize() +'')\n    \n    # Return the modified string\n    return str1",
        "num_ids": 131
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Replace capitalized words with their corresponding space-separated form\n    for word in capitalized_words:\n        str1 = str1.replace(word,'' + word)\n    return str1",
        "num_ids": 116
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num_int in nums_int:\n        sorted_nums_str.append(str(num_int))\n    return sorted_nums_str",
        "num_ids": 108
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and sorts the strings in ascending order of their numeric values.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 55
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and sorts it in numerically order.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x) if x.isdigit() else x)",
        "num_ids": 59
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "num_ids": 53
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    nums.sort()\n    return nums",
        "num_ids": 61
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): List of strings containing numbers.\n\n    Returns:\n    list: List of strings containing numbers sorted in ascending order.\n\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 78
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n\n    :param nums_str: list of strings of numbers\n    :return: sorted list of strings of numbers\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 67
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all elements of the list to integers.\n    nums = [int(i) for i in nums_str]\n    # Sort the list of integers.\n    nums.sort()\n    # Convert the sorted list of integers back to strings and return it.\n    return [str(i) for i in nums]",
        "num_ids": 98
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function sorts a list of strings containing numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))",
        "num_ids": 46
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))",
        "num_ids": 49
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 46
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Create a new list with the elements of test_list\n    new_list = list(test_list)\n    \n    # Append the elements of test_tup to the new list\n    new_list.extend(test_tup)\n    \n    # Return the new list\n    return new_list",
        "num_ids": 91
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as input and adds the tuple to the list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 53
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes two parameters:\n    - test_list: A list of integers.\n    - test_tup: A tuple of integers.\n\n    The function appends the elements of the tuple to the list and returns the modified list.\n    '''\n    # Append all the elements of the tuple to the list.\n    test_list.extend(test_tup)\n    \n    # Return the modified list.\n    return test_list",
        "num_ids": 102
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "num_ids": 48
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Using the + operator to concatenate the tuple with the list\n    new_list = test_list + list(test_tup)\n    return new_list",
        "num_ids": 65
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    if i < 0 or i >= len(arr):\n        return True\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[smallest], arr[i] = arr[i], arr[smallest]\n        check_min_heap_helper(arr, smallest)\n    \n    return True",
        "num_ids": 159
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return True",
        "num_ids": 98
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case\n    if i < len(arr) // 2:\n        return True\n\n    # check if left child is smaller than parent\n    if arr[2*i] < arr[i]:\n        return False\n    \n    # check if right child is smaller than parent\n    if arr[2*i + 1] < arr[i]:\n        return False\n\n    # recursively check for other nodes\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i + 1)\n\ndef check_min_heap(arr):\n    # check if root is the smallest element\n    if arr[0] < arr[1]:\n        return False\n    \n    # check if every node satisfies the min heap property\n    return check_min_heap_helper(arr, 1)",
        "num_ids": 191
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)",
        "num_ids": 114
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        # Check if the left child of i is greater than arr[i]\n        if (2 * i + 1 < len(arr)) and (arr[2 * i + 1] < arr[i]):\n            return False\n        \n        # Check if the right child of i is greater than arr[i]\n        if (2 * i + 2 < len(arr)) and (arr[2 * i + 2] < arr[i]):\n            return False\n        \n        # Recursively call the function for left and right child\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    \n    # If we have reached the end of the array, then the array is a min heap\n    return True",
        "num_ids": 247
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    smallest = i\n\n    if left_child < len(arr) and arr[left_child] < arr[smallest]:\n        smallest = left_child\n\n    if right_child < len(arr) and arr[right_child] < arr[smallest]:\n        smallest = right_child\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i // 2]:\n            return False\n\n    return True",
        "num_ids": 264
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    if len(arr) == 0:\n        return True\n\n    for i in range(len(arr) // 2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True",
        "num_ids": 144
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Helper function to check if the given array represents min heap or not.\n    \"\"\"\n    left = 2*i + 1\n    right = 2*i + 2\n    largest = i\n\n    if left < len(arr) and arr[left] < arr[largest]:\n        largest = left\n\n    if right < len(arr) and arr[right] < arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        check_min_heap_helper(arr, largest)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Main function to check if the given array represents min heap or not.\n    \"\"\"\n    for i in range(len(arr)//2-1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr)//2, len(arr)):\n        if arr[i] < arr[i//2]:\n            return False\n\n    return True",
        "num_ids": 236
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n\n    if left < len(arr) and arr[left] < arr[largest]:\n        largest = left\n\n    if right < len(arr) and arr[right] < arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        check_min_heap_helper(arr, largest)\n\ndef check_min_heap(arr):\n    if len(arr) <= 1:\n        return True\n\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > arr[0]:\n            return False\n\n    return True",
        "num_ids": 216
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "num_ids": 106
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) - jacobsthal_num(n-2)",
        "num_ids": 95
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 63
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 105
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) - jacobsthal_num(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th Jacobsthal number is {jacobsthal_num(n)}\")",
        "num_ids": 102
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "num_ids": 166
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)",
        "num_ids": 165
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    test_list = sorted(test_list, key = lambda x: x[0])\n    result = []\n    for i in range(K):\n        result.append(test_list[i])\n    for i in range(K, n):\n        if test_list[i][0] < result[-1][0]:\n            result.pop()\n            result.append(test_list[i])\n    return result",
        "num_ids": 165
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element in the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Return the first k elements of the sorted list\n    return test_list[:K]",
        "num_ids": 79
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    heap = []\n    for i in range(K):\n        heapq.heappush(heap, test_list[i])\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n    return heap",
        "num_ids": 155
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])  # sort list by second element of tuple\n    return test_list[:K]  # return the first k elements of the sorted list",
        "num_ids": 73
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the test_list in ascending order of the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # create a new list to store the minimum k records\n    min_records = []\n\n    # iterate through the sorted test_list and add the first K records to min_records\n    for i in range(K):\n        min_records.append(test_list[i])\n\n    # return the min_records list\n    return min_records",
        "num_ids": 133
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the tuple list in ascending order based on first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # initialize an empty list to store the minimum k records\n    result = []\n\n    # iterate over the sorted list and add the first k tuples to the result list\n    for i in range(K):\n        result.append(sorted_list[i])\n\n    return result",
        "num_ids": 120
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[0])\n    return test_list[:K]",
        "num_ids": 53
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find minimum k records from tuple list.\n\n    :param test_list: a list of tuples\n    :param K: number of minimum records to find\n    :return: a list of minimum k records\n    \"\"\"\n    if K > len(test_list):\n        raise ValueError(\"K is greater than the length of the list\")\n\n    min_list = sorted(test_list, key=lambda x: x[1])[:K]\n\n    return min_list",
        "num_ids": 109
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list by second element of each tuple in descending order\n    sorted_list = sorted(test_list, key=lambda x:x[1], reverse=True)\n    # Return the first k elements from the sorted list\n    return sorted_list[:K]",
        "num_ids": 86
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    return test_list[:K]",
        "num_ids": 95
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of common elements that appear in all three lists at the same index.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 100
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 70
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 64
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements",
        "num_ids": 123
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result",
        "num_ids": 116
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of common elements from the three lists under the same index.\n    \"\"\"\n    result_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result_list.append(l1[i])\n    return result_list",
        "num_ids": 98
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common",
        "num_ids": 116
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list",
        "num_ids": 122
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest",
        "num_ids": 97
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "num_ids": 93
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest",
        "num_ids": 106
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element in the sorted list\n    return numbers[1]",
        "num_ids": 62
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n    \"\"\"\n    # find the smallest number in the list\n    smallest = min(numbers)\n    \n    # remove the smallest number from the list\n    numbers.remove(smallest)\n    \n    # find the new smallest number in the updated list\n    second_smallest = min(numbers)\n    \n    return second_smallest",
        "num_ids": 85
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest",
        "num_ids": 110
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]",
        "num_ids": 56
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return 'There is no second smallest number.'\n    else:\n        return second_smallest",
        "num_ids": 117
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # initialize the smallest and second smallest variables\n    smallest = second_smallest = float('inf')\n\n    # iterate over the list and update the smallest and second smallest variables\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    # return the second smallest number\n    return second_smallest",
        "num_ids": 118
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = min(numbers)\n    numbers.remove(smallest)\n    \n    second_smallest = min(numbers)\n    \n    return second_smallest",
        "num_ids": 71
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r\"a(?=b*)\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    return bool(re.match(pattern, text))",
        "num_ids": 37
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]+)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 51
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count",
        "num_ids": 122
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_reverse_pair(test_list[i], test_list[j]):\n                count += 1\n\n    return count\n\ndef is_reverse_pair(str1, str2):\n    '''\n    Helper function to check if two strings are reverse pairs.\n    '''\n    return str1 == str2[::-1]",
        "num_ids": 137
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 93
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count",
        "num_ids": 121
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 122
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 121
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count",
        "num_ids": 138
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "num_ids": 71
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s1, s2):\n    '''\n    Check if two strings are reverses of each other\n    '''\n    return s1 == s2[::-1]",
        "num_ids": 163
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        # Convert sublist to tuple to make it hashable\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    return sublist_dict",
        "num_ids": 147
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary\n    d = {}\n    # loop through all possible sublists of the given list\n    for i in range(len(list1)+1):\n        for j in range(i, len(list1)+1):\n            # convert the sublist to a tuple\n            sublist = tuple(list1[i:j])\n            # if the tuple is not already in the dictionary, add it with a value of 1\n            if sublist not in d:\n                d[sublist] = 1\n            # if the tuple is already in the dictionary, increment its value by 1\n            else:\n                d[sublist] += 1\n    return d",
        "num_ids": 200
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst not in counts:\n                counts[sublst] = 1\n            else:\n                counts[sublst] += 1\n    return counts",
        "num_ids": 83
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    # iterate over each element of the list\n    for elem in list1:\n        # check if the element is a list\n        if type(elem) == list:\n            # convert the list to a tuple and check if it's already in the dictionary\n            tup = tuple(elem)\n            if tup in count_dict:\n                # if it's already in the dictionary, increment its value by 1\n                count_dict[tup] += 1\n            else:\n                # if it's not in the dictionary, add it with a value of 1\n                count_dict[tup] = 1\n    # return the dictionary\n    return count_dict",
        "num_ids": 204
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert all the lists in the list to tuples\n    list1 = [tuple(lst) for lst in list1]\n    \n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # iterate through the list and count the number of times each tuple appears\n    for lst in list1:\n        if lst in count_dict:\n            count_dict[lst] += 1\n        else:\n            count_dict[lst] = 1\n    \n    # return the dictionary containing the count of each tuple\n    return count_dict",
        "num_ids": 173
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Counts the number of unique sublists in a list.\n    \"\"\"\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublst = tuple(lst[i:j])\n            if sublst not in counts:\n                counts[sublst] = 1\n            else:\n                counts[sublst] += 1\n    return counts",
        "num_ids": 103
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts",
        "num_ids": 86
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    Returns a dictionary with unique sublists as keys and their counts as values.\n    '''\n    unique_sublsts = {}\n    for sublst in lst:\n        if tuple(sublst) not in unique_sublsts:\n            unique_sublsts[tuple(sublst)] = 1\n        else:\n            unique_sublsts[tuple(sublst)] += 1\n    return unique_sublsts",
        "num_ids": 99
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists",
        "num_ids": 141
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists.append(sublist)\n\n    count_dict = {}\n    for sublist in sublists:\n        count = list1.count(list(sublist))\n        count_dict[sublist] = count\n\n    return count_dict",
        "num_ids": 165
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if round(float_num, 2) == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 77
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False",
        "num_ids": 83
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if the string is a decimal number with a precision of 2,\n    otherwise it returns False.\n    \"\"\"\n\n    # Check if the string is a valid decimal number\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    # Split the string into two parts\n    int_part, dec_part = num.split(\".\")\n\n    # Check if the decimal part has a precision of 2\n    if len(dec_part)!= 2:\n        return False\n\n    # Check if the integer part is zero\n    if int_part == \"0\":\n        return True\n\n    # Check if the integer part contains any non-zero digit\n    if int(int_part)!= 0:\n        return False\n\n    return True",
        "num_ids": 168
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        num = float(num)\n        return abs(num - int(num)) <= 0.01\n    except ValueError:\n        return False",
        "num_ids": 66
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) == 2:\n            return True\n        return False\n    except ValueError:\n        return False",
        "num_ids": 73
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 60
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function checks whether a given string is a decimal number with a precision of 2.\n\n    :param num: A string representing a decimal number\n    :return: A boolean value indicating whether the string is a decimal number or not\n    \"\"\"\n    if \".\" not in num:\n        return False\n    if num.count(\".\") > 1:\n        return False\n    decimal_part = num.split(\".\")[1]\n    if len(decimal_part) > 2:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "num_ids": 127
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal = float(num)\n        return abs(decimal - int(decimal)) < 0.01\n    except ValueError:\n        return False",
        "num_ids": 66
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num_float = float(num)\n        num_str = str(num_float)\n        if '.' in num_str and num_str.index('.') == num_str.rindex('.'):\n            return num_str.endswith('00') or num_str.endswith('0') or num_str.endswith('.')\n        else:\n            return False\n    except ValueError:\n        return False",
        "num_ids": 119
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        num_str = str(num)\n        if '.' not in num_str:\n            return True\n        else:\n            dot_index = num_str.index('.')\n            return abs(len(num_str) - dot_index - 1) <= 2",
        "num_ids": 82
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_element(arr):\n    '''\n    Check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function returns True if a list of numbers contains only one distinct element.\n    Otherwise, it returns False.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 56
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, else False.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 58
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1",
        "num_ids": 43
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    :param arr: List of numbers\n    :return: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 75
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 62
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "num_ids": 53
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return \"This month has 30 days.\"\n    elif monthnum == 2:\n        return \"This month has 28 days in leap years and 29 days in non-leap years.\"\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return \"This month has 31 days.\"\n    else:\n        return \"Invalid month number.\"\n\nmonthnum = int(input(\"Enter the month number (1-12): \"))\n\nprint(check_monthnumber_number(monthnum))",
        "num_ids": 222
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "num_ids": 122
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 30\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum == 2:\n        return 28\n    else:\n        return None",
        "num_ids": 87
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"30 days in the month\")\n    else:\n        print(\"31 days in the month\")\n\ncheck_monthnumber_number(4)  # Output: 30 days in the month\ncheck_monthnumber_number(7)  # Output: 31 days in the month",
        "num_ids": 110
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "num_ids": 98
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The month has 30 days.\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(\"The month has 30 days.\")\n    elif monthnum3 == 2:\n        print(\"The month has 28 or 29 days.\")\n    else:\n        print(\"Invalid month number entered.\")",
        "num_ids": 155
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return \"Month has 30 days.\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"Month has 31 days.\"\n    elif monthnum == 2:\n        return \"Month has 28/29 days.\"\n    else:\n        return \"Invalid month number.\"",
        "num_ids": 146
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        print(\"The month\", monthnum, \"has 30 days.\")\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The month\", monthnum, \"has 31 days.\")\n    else:\n        print(\"Invalid month number.\")",
        "num_ids": 137
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in (4, 6, 9, 11):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True",
        "num_ids": 84
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False",
        "num_ids": 98
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array as input and finds the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]  # Finding the difference between consecutive elements\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 109
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Initializing the minimum difference to infinity\n\n    # Looping through the array and finding the minimum difference\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff",
        "num_ids": 128
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    arr.sort() # sort the array in ascending order\n    min_diff = arr[1] - arr[0] # initialize minimum difference with the difference between first and second element\n    \n    for i in range(1,n-1): # loop through the array starting from second element\n        diff = arr[i+1] - arr[i] # calculate difference between current element and next element\n        if diff < min_diff: # if difference is smaller than current minimum difference, update minimum difference\n            min_diff = diff\n            \n    return min_diff # return minimum difference",
        "num_ids": 130
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # Calculate the minimum difference\n    \n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]  # Calculate the difference between current and previous elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if the current difference is smaller\n    \n    return min_diff",
        "num_ids": 110
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and returns the minimum difference between any two elements.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 89
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n): \n    '''\n    Find the minimum difference between any two elements in a given array\n    '''\n    arr.sort() # sort the array\n    min_diff = float('inf') # initialize the minimum difference to infinity\n    \n    for i in range(n-1):\n        diff = arr[i+1] - arr[i] # find the difference between current and next element\n        if diff < min_diff: # if the difference is less than the current minimum difference\n            min_diff = diff # update the minimum difference\n            \n    return min_diff # return the minimum difference\n    ",
        "num_ids": 128
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[j] - arr[i] < min_diff: \n                min_diff = arr[j] - arr[i] \n    return min_diff",
        "num_ids": 81
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Given an array of n integers, find the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return None  # cannot find a pair with a single element\n\n    arr.sort()  # sort the array in ascending order\n\n    min_diff = float('inf')  # initialize the minimum difference to infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # calculate the difference between the current element and the next one\n        if diff < min_diff:\n            min_diff = diff  # update the minimum difference if the current one is smaller\n\n    return min_diff if min_diff!= float('inf') else None  # return the minimum difference if it was found, otherwise None",
        "num_ids": 180
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "num_ids": 80
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Initializing minimum difference to infinity\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])  # Calculating the difference between two consecutive elements\n        if diff < min_diff:  # If the difference is less than minimum difference so far\n            min_diff = diff  # Updating the minimum difference\n    return min_diff  # Returning the minimum difference",
        "num_ids": 123
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 55
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of digits present in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits present in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1: \n        return 2\n    else: \n        p = 2\n        while True: \n            polite = True\n            for i in range(2, int(math.sqrt(p))+1): \n                if p % i == 0: \n                    polite = False\n                    break\n            if polite and p > 1: \n                n -= 1\n                if n == 0: \n                    return p\n            p += 1",
        "num_ids": 136
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 1\n    i = 2\n    while count < n:\n        j = 2\n        is_polite = True\n        while j <= int(math.sqrt(i)):\n            if i % j == 0:\n                is_polite = False\n                break\n            j += 1\n        if is_polite:\n            count += 1\n        i += 1\n    return i-1",
        "num_ids": 129
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while True:\n        if is_prime(i) and is_prime(i+1) and not is_prime(i+2):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n        \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "num_ids": 156
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 2\n        number = 2\n        while count < n:\n            if is_prime(number):\n                count += 1\n            if count == n:\n                return number\n            number += 1\n\ndef is_prime(num):\n    \"\"\"\n    This function takes an integer num as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 182
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else: \n        # Initialize variables for the loop \n        count = 1\n        num = 1\n        is_polite = False\n\n        # Loop until nth polite number is found \n        while not is_polite: \n            # Check if the current number is polite \n            if is_polite_num(num): \n                count += 1\n                if count == n: \n                    return num\n                num += 1\n            else: \n                num += 1\n\ndef is_polite_num(num): \n    '''\n    Check if a number is polite or not \n    '''\n    # Check if the number is divisible by any integer from 2 to sqrt(num) \n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False\n\n    # If the number is not divisible by any integer from 2 to sqrt(num) \n    return True",
        "num_ids": 249
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Find the nth polite number. \n    '''\n    count = 0\n    i = 2\n    while count < n:\n        is_polite = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        i += 1\n    return i - 1",
        "num_ids": 109
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        is_polite = True\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        num += 1\n        \n    return num-1 # return the nth polite number\n",
        "num_ids": 133
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    \n    while count < n:\n        j = 2\n        is_polite = True\n        \n        while j * j <= i:\n            if i % j == 0:\n                is_polite = False\n                break\n            \n            j += 1\n            \n        if is_polite and i!= 1:\n            count += 1\n        \n        i += 1\n    \n    return i - 1",
        "num_ids": 131
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_prime(i+2):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True",
        "num_ids": 114
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i % 2!= 0:\n            count += 1\n        i += 1\n    return i - 1",
        "num_ids": 133
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as an input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pair = []\n    for i in range(len(l1)-1):\n        pair.append((l1[i], l1[i+1]))\n    return pair",
        "num_ids": 73
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 65
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 65
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list\n",
        "num_ids": 76
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 48
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "num_ids": 65
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 69
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n                \n    return pairs_count",
        "num_ids": 70
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 102
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 66
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs",
        "num_ids": 102
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and the sum, and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "num_ids": 98
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    n = len(arr)\n    # sort the array to make the search faster\n    arr.sort()\n    i, j = 0, n - 1\n    # iterate over the array using two pointers\n    while i < j:\n        # if the sum of the current pair is equal to the target sum, increment the counter and move both pointers\n        if arr[i] + arr[j] == sum:\n            pairs_count += 1\n            i += 1\n            j -= 1\n        # if the sum of the current pair is less than the target sum, move the left pointer to increase the sum\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        # if the sum of the current pair is greater than the target sum, move the right pointer to decrease the sum\n        else:\n            j -= 1\n    return pairs_count",
        "num_ids": 202
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 108
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = n - 1\n\n    # Traverse the array using the two pointers\n    while left < right:\n        # If the sum of the current pair is equal to the required sum, increment the count\n        if arr[left] + arr[right] == sum:\n            count += 1\n\n            # Move the left pointer to find more pairs that add up to the required sum\n            left += 1\n        # If the sum of the current pair is less than the required sum, move the left pointer to find more pairs\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        # If the sum of the current pair is greater than the required sum, move the right pointer to find more pairs\n        else:\n            right -= 1\n\n    return count",
        "num_ids": 221
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count",
        "num_ids": 69
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing all the elements that are in one list but not in the other.\n    '''\n    return list(set(li1) - set(li2))",
        "num_ids": 56
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    result = []\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result",
        "num_ids": 58
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in one list but not in the other.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "num_ids": 71
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "num_ids": 58
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    result = []\n    \n    # Iterate over the first list and check if the element is not in the second list\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    \n    # Return the result list\n    return result",
        "num_ids": 92
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return ((n**4) * (3*n**2 - n - 2) // 3) + ((n-1)**4) + (2*n-1)**4",
        "num_ids": 94
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2!= 0:\n            sum += count ** 4\n            count += 1\n        else:\n            count += 1\n    return sum",
        "num_ids": 86
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes in the value of n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initializing variables\n    sum_odd = 0\n    count = 0\n    \n    # Loop through the odd numbers\n    for i in range(1, 2*n, 2):\n        # Calculate the fourth power of odd number\n        power = i**4\n        # Add it to the sum\n        sum_odd += power\n        # Increment the count\n        count += 1\n        \n        # Check if count is equal to n, if yes, break out of loop\n        if count == n:\n            break\n    \n    # Return the sum\n    return sum_odd",
        "num_ids": 150
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count ** 4\n        count += 2\n        \n    return sum",
        "num_ids": 68
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 67
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = [i for i in range(1, 2*n+1, 2)]  # Generate first n odd numbers\n    sum_of_odds = sum([i**4 for i in odd_nums])  # Find the sum of fourth power of odd_nums\n    return sum_of_odds",
        "num_ids": 104
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function will find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n        \n    odd_nums = [x for x in range(1, n+1, 2)]\n    odd_num_powers = [x**4 for x in odd_nums]\n    odd_num_sum = sum(odd_num_powers)\n    \n    return odd_num_sum",
        "num_ids": 109
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum",
        "num_ids": 62
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 81
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0",
        "num_ids": 72
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                balanced = False\n                break\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                balanced = False\n                break\n\n    return balanced",
        "num_ids": 140
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    if stack:\n        return False\n    else:\n        return True",
        "num_ids": 136
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n\n    return not stack",
        "num_ids": 84
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create an empty stack\n    stack = deque()\n\n    # Iterate over each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        # If the character is a closing parenthesis\n        elif char in [')', ']', '}']:\n            # If the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n            # If the stack is not empty, check the top of the stack\n            # If the top of the stack matches the closing parenthesis, pop it from the stack\n            # Otherwise, the expression is not balanced\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    # If the stack is empty, the expression is balanced\n    return not stack",
        "num_ids": 239
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 147
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "num_ids": 127
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)",
        "num_ids": 81
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = \"\"\n    for word in words:\n        if len(word)!= K:\n            result += word + \" \"\n    return result.strip()",
        "num_ids": 52
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)",
        "num_ids": 70
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    return''.join(word for word in words if len(word)!= K)",
        "num_ids": 60
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a new list with words of length K or less\n    filtered_words = [word for word in words if len(word) <= K]\n    \n    # Join the filtered words into a string and return it\n    return''.join(filtered_words)",
        "num_ids": 82
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)",
        "num_ids": 64
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Splitting the given string into words\n    words = test_str.split()\n\n    # Removing words with k length\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n\n    # Joining the words back to a string and returning it\n    return \" \".join(words)",
        "num_ids": 101
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)",
        "num_ids": 72
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)\n",
        "num_ids": 73
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    return''.join([word for word in words if len(word)!= K])",
        "num_ids": 39
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result\n    else:\n        return None",
        "num_ids": 61
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(m.start(), m.end()) for m in re.finditer(pattern, text)]\n    else:\n        return None",
        "num_ids": 89
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start, end = match.span()\n        result.append((match.group(), start, end))\n    if result:\n        return result\n    else:\n        return None",
        "num_ids": 102
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        index = text.find(match)\n        result.append((match, index))\n    return result",
        "num_ids": 95
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.start(), match.group()))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    output = []\n    for match in matches:\n        output.append((match.group(), match.start()))\n    if len(output) > 0:\n        return output\n    else:\n        return None",
        "num_ids": 106
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes in two arguments:\n    - text: a string\n    - pattern: a regular expression pattern to search for in the text\n\n    The function returns a list of tuples, where each tuple contains the substring found and its starting position in the text.\n    If there are no matches, the function returns None.\n    '''\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Extract the substrings and their positions from the matches\n    substrings = [(match.group(), match.start()) for match in matches]\n\n    # If there are no matches, return None\n    if not substrings:\n        return None\n\n    # Return the list of tuples containing the substrings and their positions\n    return substrings",
        "num_ids": 173
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = []\n    for match in re.finditer(pattern, text):\n        start, end = match.span()\n        matches.append((start, end))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 90
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.start(), match.group()))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 88
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two parameters - text and pattern.\n    text: A string which is the input string\n    pattern: A string which is the pattern to be searched for in the input string\n    \n    The function returns a list of tuples containing the occurrence and position of the pattern in the input string.\n    If there is no match, it returns None.\n    '''\n    matches = []\n    pattern = re.compile(pattern)\n    for match in pattern.finditer(text):\n        matches.append((match.start(), match.group()))\n    if matches:\n        return matches\n    else:\n        return None",
        "num_ids": 139
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 60
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list as an argument and checks whether every odd index contains odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and checks whether every odd index contains odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 66
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers and False otherwise.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "num_ids": 70
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0 or test_str[i-1] not in vowels:\n                if i == len(test_str)-1 or test_str[i+1] not in vowels:\n                    count += 1\n            elif i == len(test_str)-1 or test_str[i+1] not in vowels:\n                count += 1\n            elif test_str[i-1] not in vowels and test_str[i+1] not in vowels:\n                count += 1\n    \n    return count",
        "num_ids": 208
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 111
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = set('aeiou')\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 104
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "num_ids": 110
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    return count",
        "num_ids": 151
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n    return count",
        "num_ids": 93
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowel_count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n    return vowel_count",
        "num_ids": 97
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create a new list with only the non-repeated elements\n    non_repeated = [num for num in arr if freq_dict[num] == 1]\n    \n    # Calculate the sum of the non-repeated elements\n    return sum(non_repeated)",
        "num_ids": 149
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    # create a dictionary to count the occurrences of each element\n    counts = {}\n    for x in arr:\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n\n    # compute the sum of non-repeated elements\n    total = 0\n    for x in arr:\n        if counts[x] == 1:\n            total += x\n\n    return total",
        "num_ids": 93
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # Loop through each element in the list and update the frequency dictionary\n    for element in arr:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # Create an empty list to store the non-repeated elements\n    non_repeated_list = []\n    # Loop through the frequency dictionary and append non-repeated elements to the list\n    for element in freq_dict:\n        if freq_dict[element] == 1:\n            non_repeated_list.append(element)\n    # Calculate the sum of the non-repeated elements in the list and return it\n    return sum(non_repeated_list)",
        "num_ids": 199
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to keep track of non-repeated elements\n    non_repeated_dict = {}\n\n    # Traverse the list and add non-repeated elements to the dictionary\n    for num in arr:\n        if num not in non_repeated_dict:\n            non_repeated_dict[num] = 1\n\n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(non_repeated_dict.keys())\n\n    return sum_non_repeated",
        "num_ids": 133
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated = []\n    sum_non_repeated = 0\n    for num in arr:\n        if num not in non_repeated:\n            non_repeated.append(num)\n            sum_non_repeated += num\n    return sum_non_repeated",
        "num_ids": 85
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Loop through the list and count the frequency of each element\n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n            \n    # Loop through the dictionary and add the elements that have only one occurrence to the sum\n    sum_non_repeated = 0\n    for elem, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += elem\n    \n    return sum_non_repeated",
        "num_ids": 166
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through the list and update the count of each element in the dictionary\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Create an empty list to store the non-repeated elements\n    non_repeated_list = []\n\n    # Iterate through the dictionary and append all elements that have a count of 1 to the non-repeated list\n    for element, count in count_dict.items():\n        if count == 1:\n            non_repeated_list.append(element)\n\n    # Calculate the sum of the non-repeated elements and return it\n    non_repeated_sum = sum(non_repeated_list)\n    return non_repeated_sum",
        "num_ids": 219
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)",
        "num_ids": 43
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            non_repeated_sum += i\n    return non_repeated_sum",
        "num_ids": 73
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Creating an empty dictionary to store the count of each element in the list.\n    count_dict = {}\n\n    # Looping through each element in the list and incrementing the count of each element in the dictionary.\n    for element in arr:\n        if element not in count_dict:\n            count_dict[element] = 1\n        else:\n            count_dict[element] += 1\n\n    # Looping through the dictionary and adding up the values of the elements that have a count of 1.\n    sum_non_repeated = 0\n    for element in count_dict:\n        if count_dict[element] == 1:\n            sum_non_repeated += element\n\n    return sum_non_repeated",
        "num_ids": 183
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [[key, list(group)] for key, group in groupby(list1)]",
        "num_ids": 60
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Iterate over the sorted list using groupby\n    for key, group in groupby(list1):\n        # Create a list of consecutive duplicates and unpack them into sublists\n        sublist = list(group)\n        for i in range(len(sublist)-1):\n            if sublist[i] == sublist[i+1] - 1:\n                sublist[i] = sublist[i:i+2]\n                del sublist[i+1]\n        yield sublist",
        "num_ids": 159
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "num_ids": 58
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as an input and packs consecutive duplicates of the list elements into sublists.\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(list1)\n    # group the consecutive duplicates into sublists\n    grouped_list = [(key, list(group)) for key, group in groupby(sorted_list)]\n    # return the packed list\n    return grouped_list",
        "num_ids": 107
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0]-x[1]):\n        group = list(map(lambda x: x[1], g))\n        result.append(group)\n    return result",
        "num_ids": 95
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "num_ids": 58
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result",
        "num_ids": 68
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(list1)\n    # group the sorted list by consecutive duplicates\n    grouped_list = [(k, len(list(g))) for k, g in groupby(sorted_list)]\n    # create a list of sublists containing the consecutive duplicates\n    sublists = [list(group[0] for group in group_list) for group_list in grouped_list]\n    return sublists",
        "num_ids": 136
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for k, g in groupby(lst):\n        group_lst = list(g)\n        if len(group_lst) > 1:\n            result.append(group_lst)\n        else:\n            result.append(group_lst[0])\n    return result",
        "num_ids": 80
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list to group consecutive duplicates\n    sorted_list = sorted(list1)\n    # group consecutive duplicates using itertools.groupby\n    groups = groupby(sorted_list)\n    # iterate over the groups and pack them into sublists\n    result = []\n    for group in groups:\n        key, group_iter = group\n        # check if the group has at least 2 consecutive duplicates\n        if key == group_iter.next() and key == group_iter.next():\n            # if yes, pack them into a sublist and append to the result\n            result.append([key] * 3)\n        else:\n            # if no, append the key to the result\n            result.append(key)\n    return result",
        "num_ids": 191
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        key = tuple(sublist)\n        if key not in unique_lists:\n            unique_lists[key] = 1\n        else:\n            unique_lists[key] += 1\n    return unique_lists",
        "num_ids": 116
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary\n    unique_dict = {}\n    # Iterate through each element of the input list\n    for i in range(len(list1)):\n        # If the current element is a list, add it to the dictionary\n        if isinstance(list1[i], list):\n            # Turn the list to a tuple and add it to the dictionary\n            unique_dict[tuple(list1[i])] = unique_dict.get(tuple(list1[i]), 0) + 1\n    # Return the dictionary\n    return unique_dict",
        "num_ids": 172
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result_dict:\n            result_dict[sublist_tuple] += 1\n        else:\n            result_dict[sublist_tuple] = 1\n    return result_dict",
        "num_ids": 127
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in unique_list:\n            unique_list.append(tuple(sublist))\n            count_dict[tuple(sublist)] = list1.count(sublist)\n    return count_dict",
        "num_ids": 126
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in result:\n            result[sublist_tuple] = 1\n        else:\n            result[sublist_tuple] += 1\n    return result",
        "num_ids": 118
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is a list, convert it to a tuple and increment its count in the dictionary\n        if isinstance(element, list):\n            element = tuple(element)\n            counts[element] = counts.get(element, 0) + 1\n\n        # If the element is not a list, ignore it\n        else:\n            continue\n\n    return counts",
        "num_ids": 161
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_lists:\n            unique_lists[sublist_tuple] += 1\n        else:\n            unique_lists[sublist_tuple] = 1\n    return unique_lists",
        "num_ids": 127
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every sublist is converted to a tuple and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count",
        "num_ids": 135
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts",
        "num_ids": 83
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every sublist is counted.\n    \"\"\"\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = tuple(lst[i:j+1])\n            if sublist not in result:\n                result[sublist] = 1\n            else:\n                result[sublist] += 1\n    return result",
        "num_ids": 104
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(sum(test_list[i]))\n    comb_list = []\n    for i in range(1, len(sum_list)+1):\n        comb_list += list(combinations(range(len(sum_list)), i))\n    for comb in comb_list:\n        if sum([test_list[i][j] for i,j in enumerate(comb)]) == 10:\n            print(comb)",
        "num_ids": 157
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sums.append(tuple(sorted([sum(x) for x in combinations(test_list[i]+test_list[j], 2)])))\n    return sums",
        "num_ids": 138
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result",
        "num_ids": 123
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and finds all the combinations of sums.\n    '''\n    # Create an empty list to store the combinations of sums\n    combinations_list = []\n    \n    # Iterate through all possible combinations of tuples in the tuple list\n    for r in range(1, len(test_list)+1):\n        combinations_of_r = combinations(test_list, r)\n        for combo in combinations_of_r:\n            # Calculate the sum of each tuple in the combination\n            combo_sum = sum([sum(tup) for tup in combo])\n            # Add the combination and its sum to the list of combinations\n            combinations_list.append((combo, combo_sum))\n    \n    # Return the list of combinations\n    return combinations_list",
        "num_ids": 175
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and finds all the combinations of sums with tuples in the list.\n    '''\n    result = []\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == r:\n                result.append(comb)\n    return result",
        "num_ids": 95
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum([x[1] for x in test_list[i:j+1]]) == test_list[i][0]:\n                result.append(tuple(test_list[i:j+1]))\n    return result",
        "num_ids": 121
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Create an empty list to store all the combinations of sums with tuples\n    combinations_list = []\n\n    # Loop through each tuple in the test list\n    for tup in test_list:\n        # Find the sum of the tuple\n        tup_sum = sum(tup)\n\n        # Find all the combinations of tuples that add up to the sum of the tuple\n        # The combinations function takes two arguments - the iterable to be combined and the length of the combinations\n        # We use the tuple itself as the iterable and the length of the tuple as the length of the combinations\n        comb_tup = combinations(tup, len(tup))\n\n        # Loop through each combination of tuples\n        for c_tup in comb_tup:\n            # Convert the combination of tuples to a list and sum it\n            c_tup_sum = sum(list(c_tup))\n\n            # If the sum of the combination of tuples is equal to the sum of the tuple in the original list, append it to the combinations list\n            if c_tup_sum == tup_sum:\n                combinations_list.append(c_tup)\n\n    # Return the combinations list\n    return combinations_list",
        "num_ids": 278
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize a list to store the combinations\n    result = []\n    \n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Find all the tuples that have the same second element as the current tuple\n        same_second = [x for x in test_list[i:] if x[1] == test_list[i][1]]\n        \n        # Sort the list of tuples with the same second element in ascending order based on the third element of each tuple\n        same_second = sorted(same_second, key=lambda x: x[2])\n        \n        # Iterate through the sorted list of tuples with the same second element\n        for j in range(len(same_second)):\n            # Find all the tuples that have the same third element as the current tuple\n            same_third = [x for x in same_second[j:] if x[2] == same_second[j][2]]\n            \n            # Iterate through the list of tuples with the same third element\n            for k in range(len(same_third)):\n                # Find all the tuples that have the same sum as the current tuple\n                same_sum = [x for x in same_third[k:] if x[0] + x[1] + x[2] == test_list[i][0] + test_list[i][1] + test_list[i][2]]\n                \n                # Append the combinations to the result list\n                result.extend(same_sum)\n    \n    # Remove duplicate combinations from the result list\n    result = list(set(result))\n    \n    # Return the result list\n    return result",
        "num_ids": 442
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == 0:\n                result.append(tup)\n    return result",
        "num_ids": 93
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                result.append(comb)\n    return result",
        "num_ids": 125
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False\n\nn = int(input(\"Enter a number: \"))\n\nif count_divisors(n) : \n    print(\"The count of divisors is even.\")\nelse : \n    print(\"The count of divisors is odd.\")",
        "num_ids": 118
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n % math.sqrt(n) == 0:\n        count += 1\n    return count\n\ndef is_even(n):\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif is_even(n):\n    print(n, \"is even.\")\nelse:\n    print(n, \"is odd.\")",
        "num_ids": 150
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the count of its divisors is even, else False.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 93
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Count of divisors:\", count_divisors(n))",
        "num_ids": 105
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count",
        "num_ids": 75
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Number of divisors:\", count_divisors(n))\n\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")",
        "num_ids": 150
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the count of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count",
        "num_ids": 99
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n / i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even\")\nelse:\n    print(\"The count of divisors is odd\")",
        "num_ids": 126
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 115
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\ndef is_even(n):\n    \"\"\"\n    Check whether the count of divisors is even or not.\n    \"\"\"\n    count = count_divisors(n)\n    if count % 2 == 0:\n        print(n, \"has an even number of divisors.\")\n    else:\n        print(n, \"has an odd number of divisors.\")",
        "num_ids": 177
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n\n    return res",
        "num_ids": 84
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            sum += sum(arr[j:j+i])\n    return sum",
        "num_ids": 109
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1: # checking if length of subarray is odd\n                sum_odd += sum(arr[i:j+1])\n\n    return sum_odd",
        "num_ids": 132
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # loop through all possible odd length subarrays\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            # add the sum of each subarray to the running total\n            sum += sum(arr[j:j+i])\n    \n    return sum",
        "num_ids": 132
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            subarray = arr[i:j]\n            if len(subarray) % 2!= 0:\n                sum += sum(subarray)\n                \n    return sum",
        "num_ids": 127
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array as an argument and returns the sum of all odd length subarrays.\n    '''\n    # Initialize variables\n    n = len(arr)\n    sum_odd = 0\n    \n    # Loop through all possible odd lengths\n    for length in range(1, n+1, 2):\n        \n        # Loop through all possible starting indices\n        for start in range(n-length+1):\n            \n            # Add the sum of the subarray to the sum_odd variable\n            subarray = arr[start:start+length]\n            sum_odd += sum(subarray)\n            \n    return sum_odd",
        "num_ids": 137
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            ans += sum(arr[i:j+1])\n    return ans",
        "num_ids": 79
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            result += sum(arr[i:j])\n    return result",
        "num_ids": 105
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sub_arr = arr[i:j]\n            if len(sub_arr) % 2 == 1:\n                sum += sum(sub_arr)\n    return sum",
        "num_ids": 129
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function takes in a tuple of RGB values and returns a tuple of HSV values.\n    '''\n    hsv = colorsys.rgb_to_hsv(r, g, b)\n    return hsv",
        "num_ids": 67
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return (hue, saturation, value)",
        "num_ids": 216
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function takes rgb values as input and returns the hsv equivalent.\n    '''\n    # Converting the rgb values to a range of 0 to 1.\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Finding the maximum and minimum values of r, g, and b.\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculating the value.\n    v = max_val\n    \n    # Calculating the saturation.\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n    \n    # Calculating the hue.\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / (max_val - min_val)\n    elif max_val == g:\n        h = 2 + (b - r) / (max_val - min_val)\n    elif max_val == b:\n        h = 4 + (r - g) / (max_val - min_val)\n    \n    # Converting the hue to degrees.\n    h *= 60\n    \n    # Converting the hue to the range of 0 to 360.\n    if h < 0:\n        h += 360\n    \n    # Returning the hsv values as a tuple.\n    return (h, s, v)",
        "num_ids": 356
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if h < 0:\n        h += 360\n    s = 0 if cmax == 0 else delta / cmax\n    v = cmax\n    return h, s, v",
        "num_ids": 248
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60, 2)\n\n    if h < 0:\n        h += 360\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = round(delta / cmax * 100, 2)\n\n    v = round(cmax * 100, 2)\n\n    return h, s, v",
        "num_ids": 231
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return (hue, saturation, value)",
        "num_ids": 215
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value",
        "num_ids": 218
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three integer values (r, g, b) and returns the corresponding HSV values.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = (g - b) / delta % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    value = round(cmax * 100)\n    saturation = round(delta / cmax * 100)\n    return (hue, saturation, value)",
        "num_ids": 235
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: Red channel.\n    :param g: Green channel.\n    :param b: Blue channel.\n    :return: HSV color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n    saturation = round(delta / cmax * 100)\n    value = round(cmax * 100)\n\n    return hue, saturation, value",
        "num_ids": 242
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n\n    if delta == 0:\n        hue = 0\n    elif max_c == r:\n        hue = ((g - b) / delta) % 6\n    elif max_c == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if max_c == 0 else delta / max_c\n    value = max_c\n\n    return hue, saturation, value",
        "num_ids": 223
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    if even_num is None and odd_num is None:\n        return None\n    elif odd_num is None:\n        return even_num\n    elif even_num is None:\n        return odd_num\n    else:\n        return even_num * odd_num",
        "num_ids": 170
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Return the product of the first even and odd numbers in the list.\n    If there are no even or odd numbers, return None.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None",
        "num_ids": 129
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return \"List doesn't have even and odd numbers!\"",
        "num_ids": 112
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return \"None of the numbers in the list are even or odd!\"\n    else:\n        return product",
        "num_ids": 128
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as an input and returns the product of first even and odd number of the list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n\n    if even_num and odd_num:\n        return even_num * odd_num\n    else:\n        return \"No even and odd number found in the list.\"",
        "num_ids": 138
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_list = []\n    odd_list = []\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n            \n    if len(even_list) > 0:\n        product *= even_list[0]\n    if len(odd_list) > 0:\n        product *= odd_list[0]\n    \n    return product",
        "num_ids": 139
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    if len(lst) < 2:\n        return \"The list should have at least two elements.\"\n    \n    even_num = odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            elif even_num % 2 == 0:\n                continue\n            else:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n            elif odd_num % 2 == 1:\n                continue\n            else:\n                odd_num = num\n    \n    if even_num is None or odd_num is None:\n        return \"There are no even or odd numbers in the list.\"\n    else:\n        return even_num * odd_num",
        "num_ids": 202
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    product = even_num * odd_num\n    return product",
        "num_ids": 93
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_num = None\n    odd_num = None\n\n    # Finding the first even number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    # Finding the first odd number in the list\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        return None\n\n    else:\n        return even_num * odd_num",
        "num_ids": 151
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n                break\n        else:\n            odd_num = num\n            \n    if odd_num is None:\n        return None\n    else:\n        return even_num * odd_num",
        "num_ids": 120
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string using comma as separator\n    tuple_str = test_str.split(',')\n    # Converting each string element to integer\n    tuple_int = tuple(int(i) for i in tuple_str)\n    return tuple_int",
        "num_ids": 81
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and returns the corresponding integer tuple.\n    '''\n    # Splitting the input string by comma and converting each element to integer\n    int_tuple = tuple(map(int, test_str.strip('()').split(',')))\n    return int_tuple",
        "num_ids": 74
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the tuple string into a list of strings\n    str_list = test_str[1:-1].split(',')\n    # Converting each string in the list to an integer\n    int_list = [int(x) for x in str_list]\n    # Converting the list of integers into a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple",
        "num_ids": 111
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    test_list = eval(test_str)\n    # Convert each tuple element to an integer\n    result = []\n    for tup in test_list:\n        result.append(tuple(int(i) for i in tup))\n    # Return the resulting list of tuples as a tuple\n    return tuple(result)",
        "num_ids": 103
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples\n    test_list = eval(test_str)\n\n    # Convert each tuple element from string to integer\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = int(test_list[i][j])\n\n    # Convert the list of tuples to a tuple of tuples\n    test_tuple = tuple(tuple(i) for i in test_list)\n\n    # Return the tuple of tuples\n    return test_tuple",
        "num_ids": 148
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into individual integers\n    integer_list = test_str[1:-1].split(',')\n    # Convert each integer to an integer\n    integer_list = [int(x) for x in integer_list]\n    # Convert the list of integers to a tuple\n    integer_tuple = tuple(integer_list)\n    # Return the tuple\n    return integer_tuple",
        "num_ids": 108
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings representing tuples\n    tuples_str = test_str.split('), (')\n    \n    # Initialize an empty list to hold the integer tuples\n    tuples_int = []\n    \n    # Loop over the list of string tuples and convert them to integer tuples\n    for tup_str in tuples_str:\n        # Remove any whitespace from the string representation of the tuple\n        tup_str = tup_str.replace(' ', '')\n        # Convert the string representation of the tuple to a list of strings\n        tup_list = tup_str.split(',')\n        # Convert the list of strings to a list of integers\n        tup_int = [int(x) for x in tup_list]\n        # Add the integer tuple to the list of integer tuples\n        tuples_int.append(tup_int)\n    \n    # Convert the list of integer tuples to a tuple of tuples\n    tuples_int = tuple(tuples_int)\n    \n    return tuples_int",
        "num_ids": 228
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.strip('()').split(', ')\n    test_tuple = tuple(int(i) for i in test_list)\n    return test_tuple",
        "num_ids": 67
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple string to an integer tuple.\n    '''\n    # Split the string on commas and convert each element to an integer\n    int_tuple = tuple(int(num) for num in test_str[1:-1].split(','))\n    \n    return int_tuple",
        "num_ids": 70
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as an argument and converts it into an integer tuple.\n    \"\"\"\n    # Split the string into individual elements using comma as a separator\n    elements = test_str[1:-1].split(\",\")\n\n    # Convert the individual elements into integers and store them in a new list\n    int_elements = [int(elem) for elem in elements]\n\n    # Convert the list into an integer tuple and return it\n    return tuple(int_elements)",
        "num_ids": 110
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "num_ids": 56
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "num_ids": 51
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "num_ids": 55
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i",
        "num_ids": 55
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    return bool(re.search(pattern, text))",
        "num_ids": 34
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 73
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 66
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\bb{3}')\n    return pattern.search(text) is not None",
        "num_ids": 60
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 66
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function creates a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "num_ids": 51
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)",
        "num_ids": 46
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple",
        "num_ids": 53
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([test_str, test_list])",
        "num_ids": 46
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple",
        "num_ids": 56
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function creates a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple",
        "num_ids": 52
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every even index contains even numbers,\n    else returns False.\n\n    :param nums: list of numbers\n    :return: True if every even index contains even numbers, else False\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 95
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 62
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and checks whether every even index contains an even number.\n    '''\n\n    # Check if the input list is valid\n    if not isinstance(nums, list):\n        print(\"Invalid input! Input should be a list.\")\n        return\n\n    # Iterate through the list and check if every even index contains an even number\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            print(\"Every even index should contain an even number!\")\n            return\n    \n    print(\"All even indices contain even numbers.\")",
        "num_ids": 133
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result_tup.append(item)\n        else:\n            for nested_item in item:\n                result_tup.append(nested_item)\n    return tuple(result_tup)",
        "num_ids": 87
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes tuples from it.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)",
        "num_ids": 76
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function removes tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            result += remove_nested(i)\n    return result",
        "num_ids": 66
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)",
        "num_ids": 60
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if type(elem) is not tuple:\n            new_tup += (elem,)\n        else:\n            new_tup += elem\n    return new_tup",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            result.extend(remove_nested(elem))\n        else:\n            result.append(elem)\n    return tuple(result)",
        "num_ids": 74
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            for subitem in item:\n                result.append(subitem)\n    return tuple(result)",
        "num_ids": 78
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            result_tup += (i,)\n        else:\n            continue\n    return result_tup",
        "num_ids": 66
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(item)\n    return tuple(new_tup)",
        "num_ids": 73
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            result.extend(remove_nested(elem))\n        else:\n            result.append(elem)\n    return tuple(result)",
        "num_ids": 74
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_lists(input_lists):\n    '''\n    This function takes a list of lists as input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for i in input_lists:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 64
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Counts the number of lists in a given number of lists.\n\n    :param input_list: A list of lists to count.\n    :return: The number of lists in the input list.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count",
        "num_ids": 84
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the total number of lists in the input.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 65
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count",
        "num_ids": 62
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 135
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted list of integers\n    x (int): The integer to find the last position of\n\n    Returns:\n    int: The last position of the integer in the array\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the integer we're looking for, update the index\n        if arr[i] == x:\n            index = i\n    \n    # Return the index of the last occurrence of the integer in the array\n    return index",
        "num_ids": 151
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of x in arr. If x is not found, returns -1.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
        "num_ids": 130
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1",
        "num_ids": 120
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function returns the last position of an element in a sorted array.\n    If the element is not present in the array, it returns -1.\n    '''\n    if arr == [] or x > arr[-1]:\n        return -1\n    \n    # Binary search to find the last occurrence of x in arr\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n    \n    while low <= high:\n        if arr[mid] == x:\n            while mid < high and arr[mid+1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1",
        "num_ids": 166
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Returns the last position of an element in a sorted array.\n    '''\n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1",
        "num_ids": 120
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "num_ids": 124
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element to search for.\n\n    Returns:\n    int: The last position of the element in the array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result",
        "num_ids": 152
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If the mid element is equal to x, we need to find the last occurrence of x in the array\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not present in the array, we return -1\n    return -1",
        "num_ids": 160
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    :param arr: A sorted array of integers.\n    :param x: An integer to search for in the array.\n    :return: The last position of the element in the array.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1",
        "num_ids": 159
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 52
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'  # match 'a' followed by anything, ending in 'b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 65
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 80
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "num_ids": 53
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    '''\n    return sum(dict.values())",
        "num_ids": 39
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum",
        "num_ids": 48
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum",
        "num_ids": 55
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum",
        "num_ids": 50
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "num_ids": 35
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an input and returns the sum of all items in the dictionary.\n    \"\"\"\n    sum_of_items = 0\n    for key in dictionary:\n        sum_of_items += dictionary[key]\n    return sum_of_items",
        "num_ids": 65
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "num_ids": 49
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum",
        "num_ids": 47
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "num_ids": 35
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Returns the sum of all odd numbers between 1 and n (inclusive).\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))",
        "num_ids": 47
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Given a range of natural numbers (l, r), return the sum of all odd natural numbers within that range.\n    \"\"\"\n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Loop through each number in the range\n    for i in range(l, r+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add the odd number to the sum variable\n            total_sum += i\n            \n    # Return the total sum of all odd numbers\n    return total_sum",
        "num_ids": 124
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2 == 0:\n        n += 1\n    total = 0\n    for i in range(1, n, 2):\n        total += i\n    return total",
        "num_ids": 73
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(1, n+1, 2):\n        sum_odd += i\n    return sum_odd",
        "num_ids": 66
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total_sum = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total_sum += i\n            \n    return total_sum",
        "num_ids": 82
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))",
        "num_ids": 52
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(l, r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l > r:\n        l, r = r, l\n    return sum(i for i in range(l, r+1, 2))",
        "num_ids": 68
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    \n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    \n    return sum",
        "num_ids": 76
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Given a range [l, r], returns the sum of all odd natural numbers within the range.\n    \"\"\"\n    if l % 2 == 0:  # if l is even, move to the next odd number\n        l += 1\n    result = 0\n    for i in range(l, r+1, 2):\n        result += i\n    return result",
        "num_ids": 90
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    return sum(range(1, n+1, 2))",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total_sum = 0\n    for i in arr:\n        total_sum += i\n    return total_sum",
        "num_ids": 48
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes in an array and returns its sum.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all the elements in the array.\n    '''\n    return sum(arr)",
        "num_ids": 37
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all the elements in the array.\n    '''\n    return sum(arr)",
        "num_ids": 37
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_array(arr):\n    \"\"\"\n    Returns the sum of all the elements in an array.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes in an array as input and returns the sum of its elements.\n    \"\"\"\n    return sum(arr)",
        "num_ids": 34
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    result = 0\n    for i in arr:\n        result += i\n    return result",
        "num_ids": 48
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    This function rotates left d bits of a given number n.\n    Assuming that the number is 32 bit.\n    \"\"\"\n    mask = (2**d - 1) << (32 - d)\n    shifted_n = (n << d) & 0xffffffff\n    return (shifted_n | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 94
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    mask = (1 << 32) - 1  # to get a 32 bit mask\n    n &= mask  # to ensure that n is a 32 bit number\n    d %= 32  # to ensure that d is less than 32\n    if d == 0:\n        return n\n    else:\n        return ((n << d) & mask) | (n >> (32 - d))",
        "num_ids": 102
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    mask = (2**d-1) << (32-d)\n    n = (n << d) & 0xffffffff\n    n |= n >> (32-d)\n    n &= 0xffffffff\n    n ^= mask\n    return n",
        "num_ids": 63
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask",
        "num_ids": 62
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    This function rotates left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d-1) << (32-d)\n    return (n << d) | (n >> (32-d)) & mask",
        "num_ids": 75
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    This function rotates the left bits of a number n by d bits.\n    We assume that the number is 32 bit.\n    '''\n    # first we shift the number to the left by d bits\n    shifted_num = n << d\n    # then we shift the number to the right by (32-d) bits\n    result = shifted_num >> (32-d)\n    return result",
        "num_ids": 97
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    mask = 2**d - 1\n    shifted = (n << d) & 0xFFFFFFFF\n    return (shifted | (n >> (32 - d))) & 0xFFFFFFFF",
        "num_ids": 51
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes in two arguments n and d.\n    n: an integer representing the number to be rotated\n    d: an integer representing the number of bits to rotate the number left by\n    \n    This function returns the rotated number.\n    '''\n    # convert n to binary string\n    binary_n = bin(n)[2:].zfill(32)\n\n    # convert d to binary string\n    binary_d = bin(d)[2:].zfill(5)\n\n    # pad the binary string with zeros\n    padded_binary = binary_n.zfill(32 + len(binary_d))\n\n    # concatenate the binary_d with padded binary string\n    concatenated_binary = padded_binary + binary_d\n\n    # convert concatenated binary string to integer\n    rotated_number = int(concatenated_binary, 2)\n\n    return rotated_number",
        "num_ids": 192
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    # Extract the leftmost d bits of n and move them to the rightmost d bits\n    mask = (1 << d) - 1\n    shifted = n >> d\n    n &= ~mask\n    n |= shifted << (32 - d)\n    return n",
        "num_ids": 65
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF << (32 - d)\n    return (n << d) & mask | (n & ~mask)",
        "num_ids": 70
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 47
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 27
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = 'This is a    string with   multiple spaces.  '\nprint(remove_all_spaces(text))",
        "num_ids": 74
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 45
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 44
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 46
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n    \n    Args:\n        text (str): The input string.\n        \n    Returns:\n        The string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)",
        "num_ids": 68
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)",
        "num_ids": 46
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    \n    if x == y == z:\n        count += 1\n    \n    if x == y and y == z:\n        count += 1\n    \n    if x == z and y == z:\n        count += 1\n    \n    if x == y and z == y:\n        count += 1\n    \n    if x == z and y == x:\n        count += 1\n    \n    return count",
        "num_ids": 116
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if x == z and x!= y:\n        count += 1\n    if y == z and y!= x:\n        count += 1\n    \n    return count",
        "num_ids": 101
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    elif x!= y and y!= z and z!= x:\n        return 0\n    else:\n        return 1",
        "num_ids": 92
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    # Check for equal numbers\n    if x == y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    \n    # Return the count\n    return count",
        "num_ids": 112
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    else:\n        count = 1\n    return count",
        "num_ids": 85
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    \n    return count",
        "num_ids": 76
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 72
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    start = 0\n    end = n - 1\n    count = 0\n\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n\n    # If arr[start] is the minimum element, then rotation is not required.\n    # Otherwise, rotation is required.\n    if arr[start] <= arr[0]:\n        return 0\n\n    mid = start\n    for i in range(n):\n        if arr[i] > arr[mid]:\n            break\n        mid = (mid + 1) % n\n\n    # Now arr[mid] is the smallest element greater than arr[start].\n    # We can count the number of rotations required as follows:\n    count = 1\n    i = mid\n    j = mid + 1\n    while j!= start:\n        if arr[i] > arr[j]:\n            j = mid + 1\n            count += 1\n        i = (i + 1) % n\n        j = (j + 1) % n\n\n    return count",
        "num_ids": 252
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = 0\n        while j < n-1:\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n            j += 1\n    return count",
        "num_ids": 89
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
        "num_ids": 71
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the correct position of the element\n        # If the current element is already at its correct position\n        if arr[i] == i + 1:\n            continue\n        # If the current element is greater than the correct position\n        elif arr[i] > i + 1:\n            return -1\n        # If the current element is less than the correct position\n        else:\n            # Find the correct position of the element by comparing it with all the elements after it\n            for j in range(i + 1, n):\n                # If the current element is greater than the correct position, then we have found the correct position\n                if arr[j] > arr[i]:\n                    return j - i\n            # If we reach here, then the array is not rotated at all\n            return n",
        "num_ids": 194
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        # If we find a sorted array\n        if arr[i] <= arr[i+1]:\n            continue\n        # Otherwise, count the number of rotations\n        else:\n            j = i + 1\n            while j < n and arr[j] <= arr[j-1]:\n                j += 1\n            return j\n    return 0",
        "num_ids": 95
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] <= arr[mid + 1]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1",
        "num_ids": 177
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # Swap the minimum element with the first element of the remaining unsorted array\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    # Count the number of swaps required to sort the array\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count",
        "num_ids": 166
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function will count the number of rotations required to generate a sorted array.\n    :param arr: List of integers\n    :return: Number of rotations required to generate a sorted array\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for left and right pointers\n    left, right = 0, n - 1\n    # Initialize variables for count of rotations and pivot\n    count = 0\n    pivot = arr[0]\n    # Traverse the array from left to right\n    while left <= right:\n        # If the left pointer is less than the right pointer, then the array is not rotated\n        if arr[left] <= pivot <= arr[right]:\n            return count\n        # If the left pointer is less than the pivot, then increment the left pointer and decrement the right pointer\n        elif arr[left] < pivot:\n            left += 1\n        # If the right pointer is greater than the pivot, then decrement the right pointer and increment the left pointer\n        else:\n            right -= 1\n        # Increment the count of rotations\n        count += 1\n    # Return the count of rotations\n    return count",
        "num_ids": 243
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return n # No rotation required if the array is already sorted",
        "num_ids": 54
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            continue\n        else:\n            for j in range(i+1, n):\n                if arr[j] > arr[j-1]:\n                    break\n            if arr[j] > arr[i]:\n                k = j\n                while k > i:\n                    arr[k], arr[k-1] = arr[k-1], arr[k]\n                    k -= 1\n            else:\n                k = i\n                while k < j:\n                    arr[k], arr[k+1] = arr[k+1], arr[k]\n                    k += 1\n            count = 0\n            for p in range(n):\n                if arr[p] < arr[p+1]:\n                    count += 1\n                else:\n                    break\n            return count\n    return 0",
        "num_ids": 199
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n**2 == n",
        "num_ids": 83
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n) :\n    '''\n    This function takes an integer as input and returns True if the input is a perfect square else False.\n    '''\n    root = math.sqrt(n)\n    return (int(root + 0.5)) ** 2 == n",
        "num_ids": 66
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n**2 == n",
        "num_ids": 53
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Find the square root of n\n    sqrt_n = int(n**0.5)\n\n    # If the square root is an integer and is equal to n/sqrt_n, then n is a perfect square\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False",
        "num_ids": 104
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    return sqrt*sqrt == n",
        "num_ids": 83
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function returns True if the given number is a perfect square, otherwise, it returns False.\n    \"\"\"\n    i = 1\n    while i * i < n:\n        i += 1\n    return i * i == n",
        "num_ids": 59
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer as input and returns True if the number is a perfect square, else it returns False.\n    '''\n    if n == 0 or n == 1:\n        return True\n\n    left, right = 1, n\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False",
        "num_ids": 118
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    # If n is less than or equal to 1, it is not a perfect square\n    if n <= 1:\n        return False\n    \n    # Initialize the left and right pointers to the start and end of the range\n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        # If the mid^2 is equal to n, then n is a perfect square\n        if mid * mid == n:\n            return True\n        # If mid^2 is less than n, then n must be in the right half of the range\n        elif mid * mid < n:\n            left = mid + 1\n        # If mid^2 is greater than n, then n must be in the left half of the range\n        else:\n            right = mid - 1\n    \n    # If the loop terminates, it means n is not a perfect square\n    return False",
        "num_ids": 224
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    x = n // 2\n    y = x\n    while y < n:\n        y = (x + n // x) // 2\n    return y * y == n",
        "num_ids": 83
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False",
        "num_ids": 61
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of integers as an input and returns True if the product of all the integers in the list is even, otherwise it returns False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 80
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 53
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and checks whether the product of numbers in the list is even or not.\n    '''\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Loop through each element in the list and multiply it with the product variable\n    for num in arr: \n        product *= num\n    \n    # Check if the product is even or not\n    if product % 2 == 0: \n        return True\n    else: \n        return False",
        "num_ids": 108
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 67
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 57
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "num_ids": 53
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = [l]\n        elif sum(l) == max_sum:\n            max_list.append(l)\n    return max_list",
        "num_ids": 107
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "num_ids": 113
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list",
        "num_ids": 92
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_list = lst\n            max_sum = current_sum\n    return [max_list]\n",
        "num_ids": 97
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list with the maximum sum of its elements.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for l in lists:\n        s = sum(l)\n        if s > max_sum:\n            max_sum = s\n            max_list = l\n    return max_list",
        "num_ids": 90
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return [max_list]",
        "num_ids": 87
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists",
        "num_ids": 113
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list",
        "num_ids": 85
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')  # initialize max sum to negative infinity\n    max_lists = []  # initialize list of lists with max sum\n    \n    for lst in lists:\n        lst_sum = sum(lst)  # calculate sum of elements in current list\n        \n        if lst_sum > max_sum:  # if sum is greater than max sum, update max sum and max list\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:  # if sum is equal to max sum, append to list of max lists\n            max_lists.append(lst)\n    \n    return max_lists",
        "num_ids": 173
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Returns the maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    # Iterate over the characters of the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the current run\n        else:\n            # Check if the current run is longer than the previous maximum\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # Check if the last run is longer than the previous maximum\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run",
        "num_ids": 178
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 1\n\n    return max_run",
        "num_ids": 123
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n            \n        max_run = max(max_run, current_run)\n        \n    return max_run",
        "num_ids": 106
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function returns the maximum run of uppercase characters in the given string.\n\n    :param test_str: The string to be analyzed for maximum run of uppercase characters.\n    :return: Maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables for tracking maximum run and current run\n    max_run = 0\n    current_run = 0\n\n    # Iterate over each character in the string\n    for i in range(len(test_str)):\n        # If current character is uppercase and the previous character was also uppercase, increment current_run\n        if test_str[i].isupper() and i > 0 and test_str[i - 1].isupper():\n            current_run += 1\n        # If current character is not uppercase or the previous character was not uppercase, reset current_run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                current_run = 0\n\n    # Check if there is still a current run after all characters have been processed\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run",
        "num_ids": 252
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run",
        "num_ids": 111
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run",
        "num_ids": 127
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 69
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a list of numbers.\n\n    If no odd number is found, returns None.\n\n    :param nums: list of numbers\n    :return: first odd number in the list, or None if no odd number is found\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 84
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number is found, return None",
        "num_ids": 63
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "num_ids": 52
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None # no odd number found",
        "num_ids": 57
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 49
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number found in the list",
        "num_ids": 62
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # No odd number found in the list\n",
        "num_ids": 62
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found in the list, returns None.\n",
        "num_ids": 70
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "num_ids": 49
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and a value of K,\n    and returns True if the given tuples contain the value of K,\n    and False otherwise.\n    '''\n    for sub_tup in test_tup:\n        if K in sub_tup:\n            return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and checks if it contains K or not.\n    It returns True if it contains K and False otherwise.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 65
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two parameters:\n    - test_tup: A tuple containing the elements to be tested.\n    - K: An integer value representing the maximum element allowed in the tuple.\n    '''\n    if len(test_tup) == 0:\n        return False\n    \n    for element in test_tup:\n        if element > K:\n            return False\n    \n    return True",
        "num_ids": 89
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    \n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    \n    if count >= 1:\n        return True\n    else:\n        return False",
        "num_ids": 72
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 98
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True",
        "num_ids": 89
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            result = False\n            break\n    return result",
        "num_ids": 86
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    This function checks if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup2[i] < test_tup1[i]:\n                return False\n        return True\n    else:\n        return False",
        "num_ids": 100
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 75
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True",
        "num_ids": 79
    }
]