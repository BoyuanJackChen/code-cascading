[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert tuples to sets for easy comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the sets\n    shared = set1.intersection(set2)\n    \n    # Convert the set back to a list and return it\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert tuples to sets to get the unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    common_set = set1.intersection(set2)\n    # Convert the set back to tuple\n    common_tup = tuple(common_set)\n    # Return the common elements as a tuple\n    return common_tup"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of shared elements.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a set containing the common elements.\n    '''\n    # Convert the tuples to sets to find the intersection\n    common_set = set(test_tup1).intersection(set(test_tup2))\n    return common_set"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                result.append(i)\n    return result"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\nif is_not_prime(n):\n    print(n, \"is not a prime number\")\nelse:\n    print(n, \"is a prime number\")"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes in a number and returns True if it is not prime, and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, otherwise False.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by any integer from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n and returns True if it is not a prime number, otherwise False.\n    '''\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Check if the number is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the loop completes without finding a factor, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    # Push n elements onto the heap\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    # Iterate over the remaining elements in the list and pop them from the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n    # Return the n largest integers in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    largest.reverse()\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as inputs and returns the n largest integers from the list,\n    in descending order.\n    '''\n\n    # Create a max heap using heapq module\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n\n    # Pop the first n elements from the max heap and return them in descending order\n    result = []\n    for i in range(n):\n        result.append(-hq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function returns the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, -num)\n        else:\n            if -num > heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap, -num)\n    \n    largest_nums = [-num for num in heap]\n    largest_nums.sort()\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(heap))\n    \n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)  # Convert the list to a heap in-place\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))  # Extract the largest element and append it to the result list\n    result.reverse()  # Reverse the result list to return it in descending order\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function checks whether a given number x is a power of two or not.\n    '''\n    # If x is 0, return False, because 0 is not a power of two\n    if x == 0:\n        return False\n    \n    # Find the log base 2 of x\n    log_x = int(math.log2(x))\n    \n    # Check whether log_x is equal to x/2 or not\n    if log_x == x//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes a number as input and returns True if the number is a power of two,\n    otherwise, it returns False.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x /= 2\n    return True if x == 1 else False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    This function takes an integer as input and returns True if the number is a power of 2, else False.\n    \"\"\"\n    # Check if the number is a power of 2\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if the number is a power of two,\n    i.e., it can be written as 2^n for some non-negative integer n. Otherwise, it returns False.\n    '''\n    if x < 1:\n        return False\n    while x % 2 == 0:\n        x //= 2\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a positive integer\n    if x <= 0 or x!= int(x):\n        return False\n    \n    # convert x to binary and remove the prefix '0b'\n    binary = bin(x)[2:]\n    \n    # check if there is only one bit set\n    if binary.count('1') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and checks if it is a power of two or not.\n    If it is, it returns True, else it returns False.\n    '''\n    # checking if the input is a power of two or not\n    if x!= 0 and (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of 2,\n    i.e., the difference between x and the nearest power of 2 is 0 and x is not 0.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        power = 1\n        while power < x:\n            power *= 2\n        return (x == power) or (x == power/2)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    \n    while x!= 0:\n        if x & 1!= 0:\n            return False\n        x >>= 1\n        \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x <= 0:\n        return False\n    else:\n        return not (x & (x - 1))"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes a number as input and returns True if it is a power of 2, False otherwise.\n    \"\"\"\n    # if x is 0 or 1, it is not a power of 2\n    if x <= 1:\n        return False\n    \n    # check if x is a power of 2\n    while x % 2 == 0:\n        x /= 2\n        \n    # if x is 1, it is a power of 2\n    if x == 1:\n        return True\n    \n    # if x is not 1, it is not a power of 2\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words that are at least 4 characters long in the string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Create an empty list to store the words that are at least 4 characters long\n    result = []\n\n    # Loop through the list of words and check if each word is at least 4 characters long\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter the words which are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    # Return the filtered list of words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # pattern to match words of length 4 or more\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words in the string\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list of squares of the numbers in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the squares of individual elements in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Find the middle of the string\n    mid = len(str) // 2\n    \n    # Find the length of the first half of the string\n    first_half_len = len(str[:mid])\n    \n    # Find the length of the second half of the string\n    second_half_len = len(str[mid:])\n    \n    # Find the number of rotations required to get the same string in the first half\n    first_half_rotations = find_Rotations(str[:mid])\n    \n    # Find the number of rotations required to get the same string in the second half\n    second_half_rotations = find_Rotations(str[mid:])\n    \n    # Find the total number of rotations required to get the same string\n    total_rotations = first_half_len + second_half_len - 2\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rotations = min(first_half_rotations, second_half_rotations, total_rotations)\n    \n    return min_rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    flag = False\n    while count < n:\n        if str == str[n-count:]:\n            flag = True\n            break\n        count += 1\n    if flag:\n        return count\n    else:\n        return -1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as an argument and returns the minimum number of rotations required to get the same string.\n    '''\n    n = len(str)\n    if n <= 1:\n        return 0\n    mid = n // 2\n    if str[mid] == str[n-1]:\n        return find_Rotations(str[:mid])\n    else:\n        return 1 + min(find_Rotations(str[:mid]), find_Rotations(str[mid:]))"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    rotations = 1\n    while rotations < n:\n        if str == str[rotations:n] + str[0:rotations]:\n            return rotations\n        rotations += 1\n    return -1  # If no rotation found"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function finds the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    else:\n        mid = n // 2\n        if str[0] == str[mid]:\n            return find_Rotations(str[mid:])\n        else:\n            return min(find_Rotations(str[mid:]), find_Rotations(str[:mid])) + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    count = 1\n    temp = s + s\n    while temp[n:]!= s:\n        temp = temp[1:] + temp[0]\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    str_copy = str + str\n    count = 1\n    while str_copy[count:]!= str:\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif str == str[::-1]:\n        return 0\n    else:\n        min_rotations = n\n        for i in range(n):\n            new_str = str[i:] + str[:i]\n            if new_str == str:\n                return 0\n            elif new_str == str[::-1]:\n                return n - i\n            elif new_str < str:\n                min_rotations = min(min_rotations, find_Rotations(new_str))\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # find the mid-point of the string\n    mid = n // 2\n    \n    # check if the mid-point character is same as first character of the string\n    if str[mid] == str[0]:\n        return mid\n    \n    # if the mid-point character is not same as first character of the string\n    # then we need to find the minimum number of rotations required to get the same string\n    # in this case, we will find the minimum number of rotations required to get the same string\n    # by concatenating the first half of the string with the last half of the string\n    \n    # concatenate the first half of the string with the last half of the string\n    temp = str[mid:] + str[:mid]\n    \n    # recursively call the function with the concatenated string and return the result\n    return min(mid, n - mid) + find_Rotations(temp)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str) == 0 or len(str) == 1:\n        return 0\n    else:\n        return 1 + find_Rotations(str[1:])"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        return s\n    else:\n        # Find the index of first occurrence of the character\n        first_index = s.index(ch)\n        # Find the index of last occurrence of the character\n        last_index = s.rindex(ch)\n        # Create a new string with the characters from the first index to the last index\n        new_s = s[:first_index] + s[last_index+1:]\n        return new_s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s\n\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n\n    return s[:first_index] + s[last_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes in two arguments:\n    s: a string\n    ch: a character to be removed\n    \n    It returns the modified string with the first and last occurrences of the character removed.\n    \"\"\"\n    if s.count(ch) == 0:\n        return s\n    else:\n        index_first = s.find(ch)\n        index_last = s.rfind(ch)\n        if index_first == index_last:\n            return s[:index_first] + s[index_first + 1:]\n        else:\n            return s[:index_first] + s[index_last+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) >= 2:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_index = s.find(ch)\n        last_index = s.rfind(ch)\n        if first_index!= -1 and last_index!= -1 and first_index!= last_index:\n            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        # Check if character is present at the beginning\n        if s[0] == ch:\n            s = s[1:]\n        # Check if character is present at the end\n        if s[-1] == ch:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments: a string and a character.\n    It removes the first and last occurrence of the character from the string and returns the modified string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 1:\n            if s[0] == ch and s[-1] == ch:\n                return \"\"\n            elif s[0] == ch:\n                return s[1:]\n            elif s[-1] == ch:\n                return s[:-1]\n        else:\n            return s.replace(ch + s.split(ch)[0] + ch, \"\") + s.split(ch)[-1].replace(ch + s.split(ch)[-1].split(ch)[-1] + ch, \"\")"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    This function takes a string and a character as inputs and returns the string with the first and last occurrence of the given character removed.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        if s.count(ch) == 1:\n            return s.replace(ch,'',1)\n        else:\n            if s[0] == ch:\n                return s[1:]\n            else:\n                if s[-1] == ch:\n                    return s[:-1]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    This function removes the first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) >= 2:\n        if s.find(ch) == 0:\n            s = s[s.find(ch)+1:]\n        elif s.rfind(ch) == len(s)-1:\n            s = s[:s.rfind(ch)]\n        else:\n            s = s[:s.find(ch)] + s[s.find(ch)+1:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    elif s.count(ch) == 1:\n        if s.find(ch) == 0:\n            s = s[s.find(ch)+1:]\n        else:\n            s = s[:s.rfind(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip(ch) #remove leading and trailing ch\n    if ch in s: \n        s = s.replace(ch,'',1) #remove first occurrence of ch\n        s = s[:-1] #remove last character of the string\n        return s\n    else: \n        return \"Character not found in the string.\""
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = sorted(M, key=lambda x: sum(x))\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples (row sum, row index)\n    sums = [(sum(row), i) for i, row in enumerate(M)]\n    # Sort the list by row sum\n    sums.sort()\n    # Create a new matrix with sorted rows\n    sorted_M = [M[i] for _, i in sums]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = sorted(M, key=lambda row: sum(row))\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M_sorted = sorted(M, key=sum)\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Sort each row in ascending order\n        M[i].sort()\n    # Sort the rows of the matrix based on the sum of each row\n    M.sort(key=sum)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n    \n    # Create a list of tuples, where each tuple contains the sum of the row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    \n    # Sort the list by the sum of the rows\n    row_sums.sort()\n    \n    # Extract the sorted rows from the list of tuples and return them as a list of lists\n    return [row for sum, row in row_sums]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    # Get the number of rows and columns in the matrix\n    rows, cols = len(M), len(M[0])\n    \n    # Create a list of tuples where each tuple contains the sum of the corresponding row\n    sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # Sort the list of tuples in ascending order based on the sums\n    sums.sort()\n    \n    # Create a new matrix with the sorted rows\n    sorted_M = [[0] * cols for _ in range(rows)]\n    for i, row_index in sums:\n        sorted_M[row_index] = M[row_index]\n        \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    M (list of lists): The matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n    \"\"\"\n\n    sorted_M = []\n    while M:\n        # Find the row with the smallest sum\n        min_sum = float('inf')\n        min_index = None\n        for i, row in enumerate(M):\n            if sum(row) < min_sum:\n                min_sum = sum(row)\n                min_index = i\n        # Add the row with the smallest sum to the sorted matrix\n        sorted_M.append(M.pop(min_index))\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width, and height of a triangular prism as arguments.\n    It returns the volume of the triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Returns the volume of a triangular prism given its dimensions.\n    \"\"\"\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of the triangular prism as inputs and returns the volume of the prism.\n    \"\"\"\n    return 0.5 * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns its volume.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(length, width, height):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (length * width * height) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input parameters.\n    It returns the volume of the triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Check if the string contains lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r\"[a-z]+_[a-z]+\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function takes a string as input and returns True if the string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Split the string by underscore and lowercase letters\n    sequences = re.findall('[a-z]+_[a-z]+', text)\n    \n    # If there is only one sequence of lowercase letters joined by underscore, return True\n    if len(sequences) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=\\w)_\\w+(?=\\w)')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Define the set of characters to be removed\n    set_to_remove = set(input(\"Enter the characters to be removed: \"))\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Create a list to store the final result\n    result_list = []\n    # Iterate over the characters in the string\n    for char in char_list:\n        # If the character is not in the set to be removed, add it to the result list\n        if char not in set_to_remove:\n            result_list.append(char)\n    # Convert the result list back to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(string)\n    # initialize an empty list to store the characters to be removed\n    remove_chars = []\n    # loop through each character in the first string and check if it is present in the second string\n    for char in char_list:\n        if char in string:\n            remove_chars.append(char)\n    # remove the characters from the first string\n    for char in remove_chars:\n        char_list.remove(char)\n    # join the remaining characters into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for char in string_list:\n        if char in string:\n            string_list.remove(char)\n    return string_list"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, chars):\n    # Remove characters from string which are present in chars\n    for char in chars:\n        string = string.replace(char, '')\n    return list(string)\n\nstring = 'Hello, World!'\nchars = 'lo'\n\nresult = str_to_list(string, chars)\nprint(result)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string and returns a list of characters which are not present in the given string.\n    '''\n    # Initialize an empty list to store the characters not present in the string\n    result = []\n    # Loop through each character of the string\n    for char in string:\n        # Check if the character is not present in the string and append it to the result list\n        if char not in string:\n            result.append(char)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # initialize an empty list to store the characters to be removed\n    remove_chars = []\n    # iterate over each character in the string\n    for char in string:\n        # check if the character is not present in the second string\n        if char not in second_string:\n            # if the character is not present in the second string, add it to the list of characters to be removed\n            remove_chars.append(char)\n    # initialize an empty list to store the remaining characters\n    remaining_chars = []\n    # iterate over each character in the string\n    for char in string:\n        # check if the character is not present in the list of characters to be removed\n        if char not in remove_chars:\n            # if the character is not present in the list of characters to be removed, add it to the list of remaining characters\n            remaining_chars.append(char)\n    # join the remaining characters into a string and return it\n    return ''.join(remaining_chars)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, remove_chars):\n    # Create a boolean array \"present\" and initialize all elements as False.\n    present = [False] * NO_OF_CHARS\n\n    # Mark the characters to be removed as True in the present array.\n    for i in remove_chars:\n        present[ord(i)] = True\n\n    # Create a new string by iterating over the characters of the original string\n    # and adding only those characters which are not present in the remove_chars string.\n    new_string = \"\"\n    for i in string:\n        if not present[ord(i)]:\n            new_string += i\n\n    # Return the new string as a list of characters.\n    return list(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function takes in two arguments:\n    - string: the first string\n    - char_list: the second string\n\n    It removes all characters from the first string which are present in the second string.\n\n    Returns the modified string.\n    '''\n    for char in char_list:\n        string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, characters):\n    result = []\n    for char in string:\n        if char not in characters:\n            result.append(char)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    This function removes all characters from the first string which are present in the second string\n    '''\n\n    # Create a boolean array to store the presence of characters in remove_chars string\n    present = [False] * NO_OF_CHARS\n    for char in remove_chars:\n        present[ord(char)] = True\n\n    # Create an empty list to store the result\n    result = []\n\n    # Traverse through the string and add characters to the result list which are not present in remove_chars string\n    for char in string:\n        if not present[ord(char)]:\n            result.append(char)\n\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function checks whether a given array of integers contains any duplicate element or not.\n    If there are duplicate elements, it returns True, otherwise it returns False.\n    '''\n    # Using dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            return True\n        else:\n            freq[num] = 1\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # Loop through the array and increment the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    # Check if any of the counts are greater than 1, indicating a duplicate element\n    for count in count_dict.values():\n        if count > 1:\n            return True\n            \n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Initialize an empty dictionary to store the elements and their count\n    element_count = {}\n\n    # Iterate over the array and add each element to the dictionary\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    # Check if there exists any element with count greater than 1\n    for count in element_count.values():\n        if count > 1:\n            return True\n\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # initialize an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    # loop through each element in the array and increment its frequency count in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    # check if any frequency count in the dictionary is greater than 1\n    for count in freq_dict.values():\n        if count > 1:\n            return True\n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen_nums = set()\n    for num in arraynums:\n        if num in seen_nums:\n            return True\n        seen_nums.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function checks if the given array contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # If the number is divisible by 3, 5 and 7, then it is woodball\n    if x % 3 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if the given number is woodball or not.\n    '''\n    # If the number is divisible by 7, it is not woodball\n    if x % 7 == 0:\n        return False\n    \n    # If the number is divisible by 5 and 3, it is woodball\n    if x % 5 == 0 and x % 3 == 0:\n        return True\n    \n    # If the number is divisible by 5 or 3, it is not woodball\n    if x % 5 == 0 or x % 3 == 0:\n        return False\n    \n    # If none of the above conditions are met, it is not woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Check if the number is less than or equal to 1\n    if x <= 1:\n        return False\n    \n    # Check if the number is divisible by 2 or 3\n    if x % 2 == 0 or x % 3 == 0:\n        return False\n    \n    # Check if the number is divisible by 5 or 7\n    if x % 5 == 0 or x % 7 == 0:\n        return False\n    \n    # Check if the number is divisible by 11 or 13\n    if x % 11 == 0 or x % 13 == 0:\n        return False\n    \n    # If all the above conditions are not satisfied, the number is woodball\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n\n    :param x: The number to be checked.\n    :return: True if the number is woodball, False otherwise.\n    \"\"\"\n    # Check if the number is divisible by 7 and not divisible by 5.\n    if x % 7 == 0 and x % 5!= 0:\n        return True\n    # Check if the number is divisible by 5 and not divisible by 7.\n    elif x % 5 == 0 and x % 7!= 0:\n        return True\n    # Check if the number is divisible by both 5 and 7.\n    elif x % 5 == 0 and x % 7 == 0:\n        return False\n    # If none of the conditions are met, then the number is not woodball.\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x <= 1:\n        return True\n    elif x == 2:\n        return True\n    elif x % 3 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2:\n        return True\n    elif x == 4 or x == 7:\n        return True\n    elif x == 8 or x == 11:\n        return True\n    elif x == 13 or x == 16:\n        return True\n    elif x == 20 or x == 23:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    elif x < 0:\n        return False\n    else:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x % 4 == 0:\n        return False\n    elif x % 12 == 0:\n        return False\n    elif x % 20 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if a given number is a Woodall number or not.\n    \"\"\"\n    # Define the list of Woodall numbers\n    woodall_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check if x is in the woodall_numbers list\n    if x in woodall_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed number back to an integer\n    rev_num = int(rev_num)\n    # Check if the difference between the original number and twice the reversed number is 1\n    if num - 2 * rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return str(num) == str(num)[::-1] and num!= 0 and num - 2*int(str(num)[::-1]) == 1"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is one less than twice the reverse of the number, else False.\n    \"\"\"\n    # Reverse the number\n    num_rev = int(str(num)[::-1])\n    # Check if the number is one less than twice the reverse\n    if num == num_rev + 1 or num == num_rev - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    # Checking if the number is less than twice its reverse\n    if num < 10:\n        return False\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n    if num == reverse - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]) + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    return reverse * 2 == num - 1"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    # convert the number to a string to reverse it\n    num_str = str(num)\n    # reverse the string and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    # check if the reverse is twice the original number plus one\n    if rev_num == 2 * num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]) + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    if reverse >= 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Converting the number to a string\n    num_str = str(num)\n\n    # Reversing the string\n    rev_str = num_str[::-1]\n\n    # Converting the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # Checking if the original number is one less than twice the reversed number\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with them.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_num = find_Max_Num(arr[1:])\n        max_num_with_current = int(arr[0]) * 10**len(arr[1:]) + max_num\n        return max_num_with_current if max_num_with_current > max_num else max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Convert the list of digits to a string\n    arr_str = \"\".join(map(str, arr))\n    # Initialize the maximum number to the first digit in the list\n    max_num = arr[0]\n    # Check all possible combinations of digits to form larger numbers\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            # Convert the sublist of digits to a string\n            sub_str = arr_str[i:j]\n            # Convert the string back to an integer and check if it is larger than the current maximum\n            sub_num = int(sub_str)\n            if sub_num > max_num:\n                max_num = sub_num\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(\"\".join(map(str, arr[i:j])))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    res = ''\n    for num in arr:\n        res += str(num)\n    return int(res)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            current_num = int(\"\".join(map(str, arr[i:j])))\n            if current_num > max_num:\n                max_num = current_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the digits in descending order\n    arr.sort(reverse=True)\n\n    # Initialize a variable to store the maximum number\n    max_num = 0\n\n    # Iterate over all possible numbers that can be formed with the given digits\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            # Compute the product of the digits in the range\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            # Update the maximum number if the current product is greater\n            if product > max_num:\n                max_num = product\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    \"\"\"\n    # Convert the list of digits to a string and sort it in descending order\n    arr_str = ''.join(str(digit) for digit in arr)\n    arr_str = ''.join(sorted(arr_str, reverse=True))\n\n    # Find the maximum number that can be formed with the given list of digits\n    max_num = 0\n    for i in range(len(arr_str)):\n        max_num += arr[int(arr_str[i])] * (10 ** i)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of integers and returns the largest number that can be formed using those integers.\n    \"\"\"\n    arr.sort() # sort the array in ascending order\n    result = 0\n    power = 0\n    for num in arr:\n        result += num * 10**power # multiply each number by 10 raised to the power of its position\n        power += 1 # increment the power by 1 for each number\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function will take a list of digits as an input and return the largest number that can be formed with those digits.\n    '''\n    max_num = 0\n    arr.sort(reverse=True) # sort the list in descending order\n    \n    for i in range(len(arr)):\n        temp = 0\n        for j in range(i+1):\n            temp = temp*10 + arr[j]\n        if temp > max_num:\n            max_num = temp\n            \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite sign and False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign,\n    otherwise it returns False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number,\n    and False otherwise.\n    '''\n    octagonal_numbers = []\n    i = 1\n    while True:\n        octagonal_number = i*(3*i-1)//2\n        octagonal_numbers.append(octagonal_number)\n        i += 1\n        if len(octagonal_numbers) >= n:\n            return octagonal_numbers[n-1] == n\n"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    i = 1\n    while True:\n        octagonal = i * (2 * i - 1)\n        if octagonal >= n:\n            return octagonal\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    # initialize the variable to check if n is an octagonal number\n    octagonal = False\n    \n    # calculate the nth octagonal number\n    nth_octagonal = (n * (3 * n - 2)) // 2\n    \n    # check if the nth octagonal number is equal to n\n    if nth_octagonal == n:\n        octagonal = True\n    \n    # return the result\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    i = 1\n    octagonal = 0\n    \n    while True:\n        octagonal = i * (2 * i - 1)\n        \n        if octagonal >= n:\n            if octagonal == n:\n                return True\n            else:\n                return False\n        \n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # First octagonal number is 1\n    octagonal = 1\n    \n    # Loop until the nth octagonal number is found\n    for i in range(n-1):\n        octagonal += 8*i + 1\n        \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 0\n    i = 1\n    while True:\n        oct_num = i*(i+1)\n        if oct_num >= n:\n            break\n        i += 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    octagonal_num = 1\n    while count <= n:\n        octagonal_num += 8\n        count += 1\n    return octagonal_num - 8"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonals = []\n    i = 1\n    while len(octagonals) < n:\n        octagonals.append(i * (3 * i - 1) // 2)\n        i += 1\n    return octagonals[-1]"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_num = 0\n    while i <= n:\n        octagonal_num = i * (2 * i - 1)\n        i += 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        oct_num = num * (2*num - 1)\n        if oct_num == n:\n            return True\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            # Find the sum of digits of the substring\n            sub_sum = sum(int(c) for c in s[i:j+1])\n            # Check if the sum of digits is equal to the length of the substring\n            if sub_sum == (j - i + 1):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    # Dictionary to store the count of digits and their position\n    digit_count = defaultdict(int)\n    for i in range(n):\n        digit_count[int(s[i])] += 1\n        # Check if the sum of digits is equal to the length of the substring\n        if sum(digit_count.values()) == i+1:\n            count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                counts[substring] += 1\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sum(int(d) for d in sub) == len(sub):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function takes a string as input and returns the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    n = len(s)\n    # Create a dictionary to store the count of digits for each substring\n    d = defaultdict(int)\n    # Loop through all substrings and check if the sum of digits is equal to the length of the substring\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the sum of digits in the substring\n            sum_digits = sum(int(digit) for digit in s[i:j])\n            # Add 1 to the count if the sum of digits is equal to the length of the substring\n            if sum_digits == j-i:\n                count += 1\n                # Increment the count for this substring in the dictionary\n                d[s[i:j]] += 1\n    # Return the count and the dictionary of substring counts\n    return count, d"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[0] += 1\n        for j in range(i+1, n+1):\n            s_sum = sum(int(s[k]) for k in range(i, j))\n            if s_sum == j-i:\n                count[s_sum] += 1\n    return count[0] - 1 # exclude empty substring\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            digit_sum = sum(int(d) for d in sub)\n            if digit_sum == len(sub):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    length = len(s)\n    for i in range(length):\n        for j in range(i+1, length+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[substring] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(s[k]) for k in range(i, j+1)) == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[s[i]] += 1\n        if freq[str(sum(int(c) for c in s[:i+1]))] > 0:\n            count += 1\n        if freq[str(sum(int(c) for c in s[:i]))] > 0:\n            count -= 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list of numbers.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list of numbers.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][1]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i][0], test_list[j][0], abs(test_list[i][1]-test_list[j][1])))\n    return max(pairs, key=lambda x: x[2])[2]"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the test_list in ascending order\n    test_list.sort()\n    # Initialize the maximum difference variable to 0\n    max_diff = 0\n    # Iterate through the sorted test_list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current and the next elements\n        diff = test_list[i+1][0] - test_list[i][1]\n        # Check if the difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][1]\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts the tuples based on the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subject_marks):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples sorted by the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subject_marks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subject_marks_list):\n    \"\"\"\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    \"\"\"\n    return sorted(subject_marks_list, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    \n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n            \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if data_list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # If the first element of the list is itself a list,\n    # recursively call the function on that element\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    # If the first element of the list is not a list,\n    # return that element plus the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list of integers as input and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Return the nth Bell number using dynamic programming.\n\n    Args:\n    n (int): The index of the Bell number to be computed.\n\n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        b = [0] * (n + 1)\n        b[0] = 1\n        b[1] = 1\n        for i in range(2, n + 1):\n            b[i] = b[i - 1] + b[i - 2]\n        return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [1]\n    for i in range(n):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        bell_n = [0] * (n + 1)\n        bell_n[0] = 1\n        bell_n[1] = 1\n        for i in range(2, n + 1):\n            bell_n[i] = bell_n[i - 1] + bell_n[i - 2]\n        return bell_n[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [1]\n        for i in range(1, n+1):\n            bell_numbers.append(sum(bell_numbers))\n        return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function finds the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): the number of elements in the set of Bell numbers.\n\n    Returns:\n    int: the number of ways to partition the set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] for j in range(i))\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes in an integer n and returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_nums = [1]\n    for i in range(1, n+1):\n        bell_nums.append(sum(bell_nums[-i:]))\n    return bell_nums[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n and returns the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            is_increasing = False\n        elif A[i] < A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    is_increasing = True\n    is_decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_decreasing = False\n        elif A[i] < A[i-1]:\n            is_increasing = False\n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    A : list[int]\n    return : bool\n    '''\n    n = len(A)\n    # check if array is increasing\n    if all(A[i] <= A[i+1] for i in range(n-1)):\n        return True\n    # check if array is decreasing\n    elif all(A[i] >= A[i+1] for i in range(n-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # check if array has only one element\n    if len(A) == 1:\n        return True\n\n    # check if array is sorted in ascending order\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # check if array is sorted in descending order\n    if all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[0] <= A[1]:\n        if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n            return True\n        else:\n            return False\n    else:\n        if all(A[i] >= A[i+1] for i in range(len(A)-1)):\n            return True\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            is_increasing = False\n        elif A[i] > A[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    \n    # check for increasing sequence\n    increasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n            break\n    \n    # check for decreasing sequence\n    decreasing = True\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            decreasing = False\n            break\n    \n    # check for strictly increasing sequence\n    strictly_increasing = True\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            strictly_increasing = False\n            break\n    \n    # check for strictly decreasing sequence\n    strictly_decreasing = True\n    for i in range(1, n):\n        if A[i] >= A[i-1]:\n            strictly_decreasing = False\n            break\n    \n    # return the appropriate result\n    if increasing or decreasing:\n        return True\n    elif strictly_increasing or strictly_decreasing:\n        return False\n    else:\n        return None"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    This function returns True if the given array is monotonic, False otherwise.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    # Check if the array is increasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    # Check if the array is decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n <= 2:\n        return True\n    if A[0] > A[1]:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic,\n    meaning that all elements in the array are either non-decreasing or non-increasing.\n    If the array is not monotonic, the function returns False.\n    '''\n    \n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if all elements are non-decreasing\n    is_non_decreasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    \n    # Check if all elements are non-increasing\n    is_non_increasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Return the logical OR of the two conditions\n    return is_non_decreasing or is_non_increasing"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments - a list and a sublist.\n    It returns True if the sublist is present in the given list, otherwise it returns False.\n    \"\"\"\n    # If the length of the sublist is greater than the length of the list, it can't be present\n    if len(s) > len(l):\n        return False\n    \n    # Loop through all possible starting indices of the sublist in the list\n    for i in range(len(l) - len(s) + 1):\n        # If the sublist matches the slice of the list starting at index i, return True\n        if l[i:i+len(s)] == s:\n            return True\n        \n    # If no match is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if s is a sublist of l\n    return s == l[len(l)-len(s):]"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif l == []:\n        return False\n    else:\n        return is_sublist(l[1:], s) or is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n    l (list): The list to check.\n    s (list): The sublist to check for.\n\n    Returns:\n    bool: True if the list contains the sublist, False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, and False otherwise.\n    '''\n    length_set = set(len(t) for t in Input)\n    return len(length_set) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_set = set([len(t) for t in Input])\n    return len(length_set) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # find the length of the first tuple in the list\n    length = len(Input[0])\n    # loop through the list and check if all tuples have the same length\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(i) for i in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes in a list of tuples as input and returns True if all the tuples have equal length,\n    otherwise, it returns False.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = set(len(t) for t in Input)\n    return len(lengths) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, False otherwise.\n    \"\"\"\n    length = len(Input[0])  # get the length of the first tuple in the list\n    for tuple in Input:\n        if len(tuple)!= length:  # check if the length of the current tuple is different from the length of the first tuple\n            return False\n    return True  # if all tuples have equal length, return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(i) for i in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap!= 1 or shrink!= 1:\n        gap = max(1, int(gap / shrink))\n        if gap > 1:\n            for i in range(n - gap):\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        shrink = 1.3\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of Comb Sort algorithm to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n            for i in range(n - gap):\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                    sorted = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of the comb sort algorithm to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_valid(n):\n    \"\"\"\n    Check if the given number can be represented as the difference of two squares.\n    \"\"\"\n    for i in range(int(n**0.5), 0, -1):\n        if n == i**2 - (n - i**2):\n            return True\n    return False\n\ndef dif_Square(n):\n    \"\"\"\n    Check if the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_valid(n):\n        print(f\"{n} can be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    root = math.sqrt(n)\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    sqrt_n = math.sqrt(n)\n    if sqrt_n - int(sqrt_n) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    x = int(n**0.5)\n    return x*x == n\n\ndef dif_Square(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if is_square(n-i**2):\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    import math\n    square_root = math.sqrt(n)\n    if square_root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is a square number, else False.\n    \"\"\"\n    return int(n**0.5)**2 == n\n\ndef is_Difference_of_Squares(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer can be represented as the difference of two squares, else False.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5)+1):\n        if is_Square(n-i*i) and is_Square(n+i*i):\n            return True\n    return False\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if is_Difference_of_Squares(n):\n        print(f\"{n} can be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_difference_of_squares(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n    \"\"\"\n    for i in range(int(n**0.5)+1):\n        if i*i == n or (n-i*i)**0.5 == int((n-i*i)**0.5):\n            return True\n    return False\n\ndef test():\n    \"\"\"\n    Test the is_difference_of_squares function.\n    \"\"\"\n    assert is_difference_of_squares(5) == True\n    assert is_difference_of_squares(10) == True\n    assert is_difference_of_squares(15) == True\n    assert is_difference_of_squares(22) == False\n    assert is_difference_of_squares(23) == True\n    assert is_difference_of_squares(24) == False\n\nif __name__ == '__main__':\n    test()"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(2, int(n**0.5)+1):\n        if int(n/(2*i-1))**2 == n/(2*i-1) and int(n/(2*i+1))**2 == n/(2*i+1):\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_diff_square(n):\n    # Check if the given number is a perfect square\n    if int(n ** 0.5) ** 2 == n:\n        return False\n    \n    # Check if the given number is a difference of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        if (n - i * i) % (2 * i + 1) == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if patterns[i] == \"W\":\n            if colors[i] not in [\"W\", \"R\", \"Y\"]:\n                return False\n        elif patterns[i] == \"R\":\n            if colors[i] not in [\"R\", \"G\", \"B\"]:\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i] not in [\"G\", \"Y\", \"B\"]:\n                return False\n        else:\n            if colors[i] not in [\"B\", \"Y\", \"W\"]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the given colors sequence follows the pattern sequence.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the sequence of colors follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i%len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == len(colors)-1:\n            return True\n        elif patterns[i] == colors[i] or patterns[i] == \"any\":\n            continue\n        else:\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    pattern_len = len(patterns[0])\n    \n    for i in range(len(colors)-pattern_len+1):\n        sub_colors = colors[i:i+pattern_len]\n        if sub_colors not in patterns:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the colors and patterns arrays have the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        # check if the color matches the pattern\n        if colors[i]!= patterns[i]:\n            return False\n\n    # if we have made it through the loop without returning False, it's the same pattern\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the colors array has the same length as the patterns array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the patterns array contains only valid patterns\n    valid_patterns = ['R', 'G', 'B', 'Y', 'W']\n    for pattern in patterns:\n        if pattern not in valid_patterns:\n            return False\n    \n    # Check if the colors follow the sequence given in the patterns array\n    for i in range(len(colors)):\n        if colors[i] == 'R' and patterns[i]!= 'R':\n            return False\n        elif colors[i] == 'G' and patterns[i]!= 'G':\n            return False\n        elif colors[i] == 'B' and patterns[i]!= 'B':\n            return False\n        elif colors[i] == 'Y' and patterns[i]!= 'Y':\n            return False\n        elif colors[i] == 'W' and patterns[i]!= 'W':\n            return False\n        else:\n            continue\n    \n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    return [(t[0], t[1]) for t in test_list if all(x % K == 0 for x in t)]"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x, y) for x, y in test_list if all(i % K == 0 for i in x + y)]"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function finds tuples from the given list of tuples which have all elements divisible by k.\n    '''\n    result = []\n    for i in test_list:\n        if all(num % K == 0 for num in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as an input and returns True if the number is divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as an input and returns True if the number is divisible by 11, otherwise, it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the first word in the string is odd, False otherwise.\n    '''\n    words = s.split() # Splitting the string into words\n    if len(words) == 0: # Checking if there are any words in the string\n        return False\n    else:\n        return len(words[0]) % 2!= 0 # Returning True if the length of the first word is odd, False otherwise"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print(f\"The length of '{s}' is odd\")\n    else:\n        print(f\"The length of '{s}' is even\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    This function checks whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as an input and returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    If the length of the word is odd, it returns True, otherwise it returns False.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + 4*n - 2"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 0\n    b = 0\n    \n    # Calculate tetrahedral number\n    for i in range(n):\n        a += 1\n        b = (b + a) * 2\n        \n    return b"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 4 * n ** 3 + 1"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    result = (n*(n+1)*(n+2)*(n+3)) // 24\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) * (n+3) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    tetrahedral_num = (n*(n+1)*(n+2))//6\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1, 4, 10, 20, 35, 56, 84, 120, 165, 220]\n    if n < 1 or n > 10:\n        return \"Invalid input! The number of tetrahedral numbers is between 1 and 10.\"\n    else:\n        return tetrahedral_numbers[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(n):\n        count += (i + 1)\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 4 * (n - 1) ** 3 + tetrahedral_number(n - 1)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n\nprint(\"The volume of a sphere with radius 5 is:\", volume_sphere(5))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes in the radius of a sphere and returns its volume.\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculates the volume of a sphere with radius r.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nr = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(r))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # initializing the sum of ASCII values to 0\n    sum_ascii = 0\n    # iterating through the string\n    for i in strr:\n        # adding the ASCII value of each character to the sum\n        sum_ascii += ord(i)\n    # returning the character made by sum_ascii modulo 26\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    sum = 0\n    for char in strr:\n        sum += ord(char) - 64\n    \n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    result = chr(sum_ascii % 26)\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize sum of ASCII values to zero\n    sum_ascii = 0\n    \n    # Loop through each character of the string and add its ASCII value to the sum\n    for char in strr:\n        sum_ascii += ord(char)\n        \n    # Find the character made by adding the sum modulo 26\n    mod_sum = sum_ascii % 26\n    char_mod = chr(mod_sum + 65)\n    \n    return char_mod"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through the string and add the ASCII value of each character to the result variable\n    for char in strr:\n        result += ord(char)\n    \n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(result % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # initialize sum to 0\n    sum = 0\n    # loop through each character of the string\n    for i in strr:\n        # add ASCII value of each character to the sum\n        sum += ord(i)\n    # return the character made by sum modulo 26\n    return chr(sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Initialize the sum\n    sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Calculate the result by taking the sum modulo 26\n    result = sum % 26\n    # Convert the result to the corresponding character\n    char = chr(result + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Return the character made by sum modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # initialize sum to zero\n    sum = 0\n    # loop through each character in the string\n    for char in strr:\n        # add ASCII value of character to sum\n        sum += ord(char)\n    # return character made by adding sum modulo 26\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = sum([ord(i) for i in strr])\n    mod_sum_ascii = sum_ascii % 26\n    return chr(mod_sum_ascii + 65)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1): \n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n): \n    \"\"\"\n    This function finds the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"The first term of the sequence is 0.\"\n    elif n == 2:\n        return \"The second term of the sequence is 1.\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return \"The {}th number in the Newman Conway Sequence is {}.\".format(n, sequence[n])"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input. n must be greater than 0.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(num)\n        return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the Newman Conway Sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n-1]\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The {n}th number in the Newman Conway Sequence is {sequence(n)}.\")"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    if n == 1:\n        return \"The first number in the Newman-Conway sequence is 1.\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n        return f\"The {n}th number in the Newman-Conway sequence is {sequence[n]}.\""
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Not possible\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(num)\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = \"1 1\"\n        for i in range(2, n+1):\n            next_num = int(sequence.split()[-1]) + int(sequence.split()[-2])\n            sequence += \" \" + str(next_num)\n        return sequence.split()[-1]\n\nprint(newman_conway(0)) # None\nprint(newman_conway(1)) # 1\nprint(newman_conway(5)) # 15\nprint(newman_conway(10)) # 55"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as an input and returns its surface area.\n    '''\n    # calculate the surface area of a sphere using the formula A = 4 * pi * r^2\n    area = 4 * math.pi * r ** 2\n    \n    return area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function finds the surface area of a sphere.\n\n    Args:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n\n    # calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius r of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(radius)\nprint(\"The surface area of the sphere is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nr = float(input(\"Enter the radius of the sphere: \"))\nsurface_area = surfacearea_sphere(r)\nprint(\"The surface area of the sphere is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius r of a sphere and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(f\"The surface area of the sphere with radius {radius} is {surfacearea_sphere(radius):.2f}\")"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    # Calculate the surface area of the sphere using the formula A = 4\u03c0r\u00b2\n    surface_area = 4 * math.pi * (r ** 2)\n    \n    # Return the surface area of the sphere\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_nums = []\n    for i in range(1, n+1):\n        hex_nums.append(i*(2*i - 1))\n    return hex_nums[-1]\n\nn = int(input(\"Enter a number: \"))\nprint(\"The centered hexagonal number at position\", n, \"is\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_count = 1\n    num = 1\n    while hex_count <= n:\n        num += 6\n        hex_count += 1\n    return num - 6"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function finds the nth centered hexagonal number.\n    \"\"\"\n    i = n * 2 - 1\n    return i * (2 * i - 1)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (3*n**2 - n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n ** 2 - n)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal = n * (2 * n - 1)\n    return hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    hex_count = 0\n    current_num = 1\n    \n    # Loop until we find the nth centered hexagonal number\n    while hex_count < n:\n        # Add the current hexagon to the count and update the current number\n        hex_count += current_num\n        current_num += 1\n        \n    # Calculate the centered hexagonal number\n    centered_num = current_num + (n - hex_count + 1)\n    \n    return centered_num"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Initialize a new empty dictionary\n    merged_dict = {}\n    \n    # Merge the three dictionaries into a single dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = ct.ChainMap(dict1, dict2, dict3)\n    return dict(result)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in set(dict1.keys()).union(dict2.keys(),dict3.keys()):\n        merged_dict[key] = dict1.get(key, {})\n        merged_dict[key].update(dict2.get(key, {}))\n        merged_dict[key].update(dict3.get(key, {}))\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Loop through each dictionary and add the key-value pairs to the result dictionary\n    for dictionary in (dict1, dict2, dict3):\n        for key, value in dictionary.items():\n            result_dict[key] = value\n    \n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Get the frequency of all elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for elem in lst:\n        freq[elem] = freq.get(elem, 0) + 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns the frequency of all elements in a list as a dictionary.\n\n    Args:\n    lst (list): A list of elements to count the frequency of.\n\n    Returns:\n    dict: A dictionary where the keys are the unique elements in the list and the values are their respective frequencies.\n    \"\"\"\n\n    # Create an empty dictionary to store the frequencies\n    freq = {}\n\n    # Iterate through the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count\n        if element in freq:\n            freq[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq[element] = 1\n\n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    # Use Counter from collections module to count the frequency of all elements in the list\n    count = collections.Counter(lst)\n    return dict(count)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n <= 0:\n        return None\n    for i in range(n-1, 0, -1):\n        if i!= n-1:\n            if (n - i) > (n - (n-1)):\n                return i\n            else:\n                return n-1\n    return 0"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    closest = None\n    for i in range(n - 1, -1, -1):\n        if i == n:\n            break\n        if i % 5 == 0 and i % 2 == 0:\n            closest = i\n            break\n        elif i % 3 == 0 and i % 2 == 0:\n            closest = i\n            break\n        elif i % 5 == 0:\n            closest = i\n            break\n        elif i % 3 == 0:\n            closest = i\n            break\n        elif i % 2 == 0:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    num_list = list(range(1, N))\n    num_list.sort()\n    for i in range(len(num_list)-1):\n        if num_list[i+1] - N < N - num_list[i]:\n            return num_list[i]\n    return num_list[-1]"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_smaller = None\n    for i in range(N - 1, 0, -1):\n        if i < N:\n            closest_smaller = i\n            break\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if N % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if N % i == 0:\n            return i\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Check if n is already a smaller number\n    if n-1 == 0:\n        return n-1\n    \n    # Initialize the closest number variable\n    closest = None\n    \n    # Iterate over all numbers between 1 and n-1\n    for i in range(1, n):\n        # Check if the current number is closer than the previous closest\n        if abs(i-n) < abs(closest-n) if closest is not None else True:\n            closest = i\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    Find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i < n:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    '''\n    This function takes a number as input and returns the closest smaller number than n.\n    '''\n    # create a list of numbers\n    nums = [i for i in range(1, n)]\n    \n    # find the closest smaller number\n    closest = min(nums, key=lambda x: abs(x-n))\n    \n    # return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(1, n):\n        if abs(i - n) < abs(closest - n) or closest is None:\n            closest = i\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    This function takes in a list of words and returns the length of the longest word in the list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    \n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    \n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a list of strings.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings and returns the length of the longest word in the list.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function finds the length of the longest word in a given list of words.\n    \"\"\"\n    longest_word_len = 0\n    for word in list1:\n        if len(word) > longest_word_len:\n            longest_word_len = len(word)\n    return longest_word_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a string is present as a substring in a given list of string values.\n\n    :param str1: list of string values\n    :param sub_str: the substring to look for\n    :return: True if the substring is found in any of the string values, False otherwise\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two parameters: \n    - str1: A string value that needs to be searched.\n    - sub_str: A substring value to search for in str1.\n    \n    It returns True if sub_str is present as a substring in str1, otherwise False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments - str1 and sub_str - where str1 is a list of string values and sub_str is a single string value to search for in the list.\n    It returns True if the string is present in the list as a substring, otherwise it returns False.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a positive integer n as an argument and returns True if it is undulating and False otherwise.\n    An integer is said to be undulating if it is either a power of a prime number or if it is a prime number itself.\n    '''\n\n    def is_power_of_prime(num):\n        '''\n        This function takes a positive integer num as an argument and returns True if it is a power of a prime number and False otherwise.\n        '''\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        if num in primes:\n            return True\n        for prime in primes:\n            if num % prime == 0:\n                return True\n        return False\n\n    def is_prime(num):\n        '''\n        This function takes a positive integer num as an argument and returns True if it is a prime number and False otherwise.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_power_of_prime(n) or is_prime(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # check if the number is odd\n    if n % 2 == 0:\n        return False\n    \n    # check if the number is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return True\n    \n    # check if the number is divisible by any other number\n    for i in range(7, n):\n        if n % i == 0:\n            return True\n    \n    # if none of the above conditions are true, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    It returns True if the number is undulating and False otherwise.\n\n    Example:\n    >>> is_undulating(3)\n    False\n    >>> is_undulating(4)\n    True\n    \"\"\"\n\n    # If the number is less than 2, it cannot be undulating\n    if n < 2:\n        return False\n\n    # Initialize the previous number to be the first digit of the number\n    prev_num = n % 10\n\n    # Iterate through the digits of the number starting from the second digit\n    for i in range(1, n//10):\n        # Check if the current digit is equal to the previous digit\n        if n % 10 == prev_num:\n            return True\n\n        # Update the previous number to be the current digit\n        prev_num = n % 10\n\n        # Remove the last digit from the number\n        n = n // 10\n\n    # If the loop completes without returning True, the number is not undulating\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number as input and returns True if the number is undulating, else returns False.\n    '''\n    count = 0\n    # Loop through the digits of the number\n    for i in str(n):\n        # If the digit is repeated consecutively, increment the count\n        if int(i) == int(str(n)[int(str(n).index(i))+1]):\n            count += 1\n        else:\n            # If the count is greater than 1, the number is undulating\n            if count > 1:\n                return True\n            # Reset the count for the next digit\n            count = 0\n    # If the count is greater than 1, the number is undulating\n    if count > 1:\n        return True\n    # If no consecutive digits were found, the number is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer as input and returns True if it is undulating, False otherwise.\n    An integer is said to be undulating if the absolute difference between consecutive digits is always either 1 or 9.\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if abs(int(s[i+1])-int(s[i]))!= 1 and abs(int(s[i+1])-int(s[i]))!= 9:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        s = str(n)\n        if s[0] == s[len(s)-1]:\n            return is_undulating(int(s[1:-1]))\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n\n    :param n: the number to be checked\n    :return: True if the number is undulating, False otherwise\n    \"\"\"\n\n    # Initialize variables\n    is_undulating = False\n    prev_digit = n % 10\n    curr_digit = 0\n\n    # Remove the last digit from the number\n    n = n // 10\n\n    # Loop through the remaining digits of the number\n    while n > 0:\n        curr_digit = n % 10\n\n        # Check if the current digit is equal to the previous digit\n        if curr_digit == prev_digit:\n            is_undulating = True\n            break\n        prev_digit = curr_digit\n\n        # Remove the last digit from the number\n        n = n // 10\n\n    return is_undulating"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string so we can iterate over its digits\n    num_str = str(n)\n\n    # Check whether the digits are increasing or decreasing\n    for i in range(len(num_str)-1):\n        if int(num_str[i]) > int(num_str[i+1]):\n            return False\n        elif int(num_str[i]) < int(num_str[i+1]):\n            pass\n        else:\n            return False\n\n    # If the function hasn't returned yet, the number is undulating\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    :param a: The number to be raised to the power of 'b'\n    :type a: int, float\n    :param b: The exponent of 'a'\n    :type b: int, float\n    :return: The result of 'a' raised to the power of 'b'\n    :rtype: float\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    This function takes two parameters a and b.\n    It returns the value of a to the power b.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters, 'a' and 'b', and returns the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2, 3)) # Output: 8"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_second = min(test_list, key=itemgetter(1))[1]\n    return [x[0] for x in test_list if x[1] == min_second][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])   # initialize min_length to the length of the first list\n    for lst in lst:   # iterate over each list in the list of lists\n        if len(lst) < min_length:   # if the length of the current list is less than min_length\n            min_length = len(lst)   # update min_length to the current list's length\n    return min_length   # return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length: # if the length of current list is smaller than current minimum\n            min_length = len(lst[i]) # update the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize the minimum length to a very large value\n    for sub_list in lst:\n        if len(sub_list) < min_length:  # update the minimum length if a smaller list is found\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten(lst):\n    \"\"\"\n    Returns a flattened version of the input list.\n    \"\"\"\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    Returns a dictionary containing the frequency of each element in a flattened list of lists.\n    \"\"\"\n    flat_list = flatten(lst)\n    freq = {}\n    for item in flat_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if type(elem) == list:\n            for subelem in elem:\n                if subelem not in freq_dict:\n                    freq_dict[subelem] = 1\n                else:\n                    freq_dict[subelem] += 1\n        else:\n            if elem not in freq_dict:\n                freq_dict[elem] = 1\n            else:\n                freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten(lst):\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(lst):\n    flat_list = flatten(lst)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    \n    # flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # iterate over the elements of the flattened list and count their frequency\n    for element in flat_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n            \n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string.\n    \"\"\"\n    binary = bin(n)[2:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # convert decimal to binary and remove leading zeros\n    binary = bin(n)[2:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip(\"0\") or \"0\""
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string for easy manipulation\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the number and convert it back to an integer\n        return int(str(num+1))\n    \n    # Find the rightmost digit that can be incremented without changing the leftmost half of the palindrome\n    i = len(num_str) - 1\n    while i >= 0 and num_str[i] == '9':\n        i -= 1\n    if i < 0:\n        # All digits are 9, so we need to add a digit to the left of the leftmost digit\n        return int('1' + '0'*(len(num_str)+1))\n    else:\n        # Increment the rightmost digit that can be incremented without changing the leftmost half of the palindrome\n        rightmost_digit = int(num_str[i])\n        new_rightmost_digit = str((rightmost_digit+1)%10)\n        new_num_str = num_str[:i] + new_rightmost_digit + num_str[i+1:]\n        return int(new_num_str)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the largest odd factor of the number\n    factor = 1\n    while num // factor >= 10:\n        factor *= 10\n    \n    # Check if the number is odd or even\n    if factor == 1:\n        # If the number is odd, we can just add 1 to it to get the next smallest palindrome\n        return int(num_str + '1')\n    else:\n        # If the number is even, we need to check if the next smallest even palindrome is available\n        even_palindrome = int(num_str + str(factor))\n        if even_palindrome % 2 == 0:\n            return even_palindrome\n        \n        # If the next smallest even palindrome is not available, we can just add 1 to the largest odd factor\n        return int(num_str + str(factor // 10)) * factor // 10"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the last digit\n        num_str = num_str[:-1] + str(int(num_str[-1]) + 1)\n        # Add a trailing zero if the length is odd\n        if len(num_str) % 2!= 0:\n            num_str += '0'\n        # Find the next smallest palindrome by incrementing the largest even palindrome\n        while not is_palindrome(num_str):\n            num_str = num_str[:-2] + str(int(num_str[-2:]) + 1)\n        return int(num_str)\n    else:\n        # Increment the number and convert back to an integer\n        return int(str(num + 1))\n\ndef is_palindrome(num_str):\n    '''\n    Helper function to check if a string is a palindrome.\n    '''\n    return num_str == num_str[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # First, we check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n\n    # If not, we find the next smallest palindrome by checking odd and even length palindromes\n    palindromes = [num + i for i in range(2)]\n    palindromes += [num + i + 1 for i in range(2)]\n\n    # We then return the smallest palindrome greater than the specified number\n    for palindrome in palindromes:\n        if palindrome > num and str(palindrome) == str(palindrome)[::-1]:\n            return palindrome\n\n    # If no palindrome greater than the specified number is found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string to check for palindrome\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the number by 1 and check for palindrome again\n        return num + 1\n    \n    # Check if the number is already a palindrome of odd length\n    elif num_str == num_str[::-1][:-1]:\n        # Increment the number by 2 and check for palindrome again\n        return num + 2\n    \n    # Check if the number is a palindrome of even length\n    else:\n        # Increment the number by 2 and check for palindrome again\n        return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string to make it easier to reverse and compare\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, add 1 to the number and return the next smallest palindrome\n        return int(str(num+1) + str(num+1)[::-1])\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome by adding 1 to the largest odd factor of the number\n        # and reversing the result to get the palindrome.\n        largest_odd_factor = None\n        for i in range(2, num+1):\n            if num % i == 0 and i % 2!= 0:\n                largest_odd_factor = i\n        if largest_odd_factor is None:\n            # If the number has no odd factors, it is a prime number and has no palindrome.\n            return None\n        else:\n            return int(str(largest_odd_factor+1) + str(largest_odd_factor+1)[::-1])"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # check if the number has an even number of digits\n    if len(str(num)) % 2 == 0:\n        # remove the last digit and check if it is a palindrome\n        sub_palindrome = int(str(num)[:-1])\n        if sub_palindrome < 10:\n            return num + 1\n        else:\n            return sub_palindrome + 10**(len(str(num))-2)\n    else:\n        # remove the last two digits and check if it is a palindrome\n        sub_palindrome = int(str(num)[:-2])\n        if sub_palindrome < 100:\n            return num + 1\n        else:\n            return sub_palindrome + 10**(len(str(num))-3)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the number by 1 and check if it's a palindrome\n        next_palindrome = int(str(num + 1) + str(num + 1)[::-1])\n    else:\n        # Find the next largest palindrome that can be obtained by adding a single digit to the end\n        num_length = len(num_str)\n        end_index = num_length // 2\n        if num_length % 2 == 0:\n            end_index += 1\n        largest_palindrome = num_str[:end_index][::-1]\n        next_largest_palindrome = int(largest_palindrome[:-1] + str(int(largest_palindrome[-1]) + 1))\n        # Add the next largest palindrome to the end of the original number to form the next smallest palindrome\n        next_palindrome = int(num_str + str(next_largest_palindrome) + num_str[-2::-1])\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Returns True if n is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of num as an integer.\n    \"\"\"\n    while not is_palindrome(num):\n        num += 1\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num = str(num)\n    # Check if the input number is already a palindrome\n    if num == num[::-1]:\n        # If yes, increment the number by one and return it as an integer\n        return int(num) + 1\n    # Find the next smallest palindrome by checking odd-length palindromes and incrementing the largest odd-length palindrome found so far\n    # Initialize the largest odd-length palindrome found so far to the input number\n    largest_odd_palindrome = num\n    # Increment the number by 1 and check if it's a palindrome\n    next_num = int(num) + 1\n    while next_num!= int(str(next_num)[::-1]):\n        # If not a palindrome, find the next odd-length palindrome and compare it to the current largest odd-length palindrome\n        next_num += 2\n        if next_num == int(str(next_num)[::-1]):\n            largest_odd_palindrome = str(next_num)\n    # Convert the largest odd-length palindrome to an integer and return it as the output\n    return int(largest_odd_palindrome)"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Finds the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # convert k to 0-based indexing\n    k -= 1\n    # make sure k is within bounds\n    if k < 0 or k >= len(arr):\n        return None\n    # use binary search to find the kth element\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # we should never reach this point\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n\n    return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    :param arr: list of elements to search\n    :param k: the kth element to find (1-based indexing)\n    :return: the kth element of the array\n    \"\"\"\n\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    return sorted(arr)[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    return ''.join(word.split('_')).capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.title() for word in word.split('_')])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('_', '').title()"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize variables\n    s = \"\"\n    s_inv = \"\"\n    s_1 = \"\"\n    s_inv_1 = \"\"\n    # Create s and s_inv\n    for i in range(n):\n        s += str(i+1)\n        s_inv += str(i+m)\n    # Create s_1 and s_inv_1\n    for i in range(m):\n        s_1 += str(i+1)\n        s_inv_1 += str(i+n)\n    # Find a(n, m)\n    a = int(s) * int(s_inv_1)\n    # Return the result\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    if n < 2 or m < 2:\n        return None\n    if n == 2:\n        if m == 2:\n            return 0\n        else:\n            return 1\n    else:\n        if m == 2:\n            return 1\n        else:\n            return (m - 2) * eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    result = 0\n    if n >= 2*m:\n        result = n\n    else:\n        result = (n - 1) * m + 1\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function finds the Eulerian number a(n, m).\n    '''\n    if n > m:\n        n, m = m, n\n    eulerian_num = n + m\n    for i in range(n, m+1):\n        eulerian_num += i*i\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return m / n"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Finds the Eulerian number a(n, m).\n\n    Args:\n    n: int, the number of sides on the polygon\n    m: int, the maximum number of polygons that can be formed\n\n    Returns:\n    int, the Eulerian number a(n, m)\n    \"\"\"\n\n    # Base case: if n is even and m is 1, the Eulerian number is n^2\n    if n % 2 == 0 and m == 1:\n        return n**2\n\n    # Recursive case: the Eulerian number is the sum of the Eulerian numbers of all pairs of polygons\n    # of sizes (n-2, m) and (n-1, m-1), divided by 2\n    return (eulerian_num(n-2, m) + eulerian_num(n-1, m-1)) / 2"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * (n-1) + m * (m-1)) // 2"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            result += i*j\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\neulerian = eulerian_num(n, m)\nprint(\"The Eulerian number a({}, {}) is {}\".format(n, m, eulerian))"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return (n + m) - eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return n\n    \n    if m == 1:\n        return m\n    \n    result = 1\n    for i in range(1, m+1):\n        result *= n + i - 1\n        result //= i\n        \n    return result"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist of strings.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of True boolean values in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes two parameters - a list and a tuple.\n    It appends the list to the tuple and returns the modified tuple.\n    \"\"\"\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n\ntest_list = [1, 2, 3]\ntest_tup = (4, 5, 6)\n\nprint(add_lists(test_list, test_tup))"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1.pop(0))\n    heapq.heappush(heap, num2.pop(0))\n    heapq.heappush(heap, num3.pop(0))\n    \n    while heap:\n        yield heapq.heappop(heap)\n        \n    for num in num1:\n        yield num\n    for num in num2:\n        yield num\n    for num in num3:\n        yield num"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            heapq.heappop(num3)\n\n    while num1:\n        heapq.heappush(merged_list, num1[0])\n        heapq.heappop(num1)\n\n    while num2:\n        heapq.heappush(merged_list, num2[0])\n        heapq.heappop(num2)\n\n    while num3:\n        heapq.heappush(merged_list, num3[0])\n        heapq.heappop(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a min heap\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n\n    # merge the three lists into a single sorted list\n    merged_list = []\n    while heap:\n        # extract the minimum element from the heap\n        merged_list.append(heapq.heappop(heap))\n\n        # add the next element from the original list to the heap if it exists\n        if merged_list[-1] < num1[-1]:\n            heapq.heappush(heap, num1.pop(0))\n        elif merged_list[-1] < num2[-1]:\n            heapq.heappush(heap, num2.pop(0))\n        elif merged_list[-1] < num3[-1]:\n            heapq.heappush(heap, num3.pop(0))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Create a min heap to store the values from num1 and num2\n    heap = []\n    for num in num1 + num2:\n        heapq.heappush(heap, num)\n\n    # Create an empty list to store the merged sorted list\n    merged_list = []\n\n    # Keep merging the smallest value from the heap until all values have been added\n    while heap:\n        # Pop the smallest value from the heap and add it to the merged list\n        smallest = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n        # If there are still values in num3 that are smaller than the smallest value in the heap,\n        # add them to the heap\n        for num in num3:\n            if num < smallest:\n                heapq.heappush(heap, num)\n                break\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, (num1[0], num1, 0))\n    heapq.heappush(heap, (num2[0], num2, 0))\n    heapq.heappush(heap, (num3[0], num3, 0))\n\n    result = []\n    while heap:\n        _, current_list, current_index = heapq.heappop(heap)\n        result.append(current_list[current_index])\n        if current_index + 1 < len(current_list):\n            heapq.heappush(heap, (current_list[current_index + 1], current_list, current_index + 1))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n            \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = heapq.merge(num1, num2, num3)\n    return list(merged_list)"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the list n times\n    s = s[n:] + s[:n]\n    \n    # Count the number of odd numbers\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=list(s)\n    for i in range(n): \n        s=s[-1:]+s[:-1] #Rotating the binary string n times\n        count=0\n        for j in range(len(s)): \n            if int(s[j])%2!=0: \n                count+=1 #Counting the number of odd digits in the rotated string\n        print(count)"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the binary string into a list of integers\n    s = [int(i) for i in s]\n    # initialize the count variable to zero\n    count = 0\n    # loop through each rotation of the binary string\n    for i in range(n):\n        # initialize the temp variable to 0\n        temp = 0\n        # loop through each bit in the binary string\n        for j in range(len(s)):\n            # add the value of the jth bit to the temp variable\n            temp += s[j]\n            # check if the temp variable is odd\n            if temp % 2 == 1:\n                # increment the count variable\n                count += 1\n        # rotate the binary string by shifting all the bits one position to the left\n        s = [s[-1]] + s[:-1]\n    # return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary = [int(x) for x in s]\n\n    # Rotate the list n times\n    for i in range(n):\n        binary = binary[-1:] + binary[:-1]\n\n    # Count the number of odd values in the rotated list\n    count = 0\n    for digit in binary:\n        if digit % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and a number of rotations as input and returns the number of numbers with an odd value\n    when rotating the binary string the given number of times.\n    \"\"\"\n    count = 0\n    s = s.ljust(n, '0')  # Pad the binary string with zeros to make it equal to the given length n\n    for i in range(n):\n        if int(s[i:i+1]) % 2!= 0:  # Check if the current digit is odd\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a number n as inputs. \n    It returns the number of numbers with an odd value when rotating the binary string s the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Initialize a counter for the number of odd numbers\n    count = 0\n    # Loop through the rotations of the binary string\n    for i in range(n):\n        # Count the number of odd numbers in each rotation\n        count += sum(1 for j in s if j % 2!= 0)\n        # Rotate the binary string to the right by one position\n        s = [s[-1]] + s[:-1]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: A binary string.\n    :param n: An integer representing the number of times to rotate the binary string.\n    :return: An integer representing the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n\n    # Rotate the list of integers n times\n    for i in range(n):\n        s_list.insert(0, s_list[-1])\n        s_list.pop(-1)\n\n    # Count the number of numbers with an odd value\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    s = [int(digit) for digit in s]\n    \n    # Rotate the list n times\n    rotated = s[-n:] + s[:-n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for digit in rotated:\n        if digit % 2 == 1:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes a binary string s and the number of times to rotate the string n and returns the number of numbers with an odd value.\n    '''\n    # Convert the binary string into a list of integers\n    s = [int(x) for x in s]\n    # Rotate the list n times\n    s = s[-n:] + s[:-n]\n    # Count the number of odd values in the rotated list\n    count = 0\n    for x in s:\n        if x % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        for j in s:\n            if int(j)%2!=0:\n                count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as an argument and returns a list of common elements in the nested list.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_list.append(list(set(nestedlist[i]) & set(nestedlist[j])))\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_list.append(set(nestedlist[i]) & set(nestedlist[j]))\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for lst in nestedlist:\n        for i in range(len(lst)):\n            if lst[i] not in common_elements and all(lst[i] in sublist for sublist in nestedlist):\n                common_elements.append(lst[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in a nested list.\n    \"\"\"\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_list:\n                continue\n            else:\n                common_list.append(nestedlist[i][j])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common = common.intersection(set(nestedlist[i]))\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and checks if it represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and checks if it represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and returns True if the string represents an integer, else returns False.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dict_list(dict_list):\n    '''\n    This function takes a list of dictionaries and returns True if all the dictionaries are empty.\n    '''\n    for dictionary in dict_list:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function takes a list as an argument and returns True if all dictionaries in the list are empty, otherwise, it returns False.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = True\n    for d in list1:\n        if d:\n            result = False\n            break\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total *= 10\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] * 10**(len(nums)-1) + tuple_to_int(nums[1:])"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums or not all(isinstance(n, int) and n > 0 for n in nums):\n        raise ValueError('Input must be a tuple of positive integers')\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for sub_list in test_list:\n        for i in range(len(sub_list)):\n            try:\n                sub_list[i] = float(sub_list[i])\n            except ValueError:\n                pass\n        result_list.append(sub_list)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and converts all possible convertible elements in the list to float.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n\n    Args:\n    test_list (list): The list of lists to be converted.\n\n    Returns:\n    list: The converted list.\n    \"\"\"\n    result = []\n    for i in test_list:\n        new_list = []\n        for j in i:\n            try:\n                new_list.append(float(j))\n            except ValueError:\n                pass\n        result.append(new_list)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], int) or isinstance(test_list[i][j], float):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '').isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    This function converts all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string and returns a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    This function converts a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n\n    Parameters:\n    arr (list): A sorted array with integers\n\n    Returns:\n    int: The element that appears only once in the array\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    i = 0\n    j = n-1\n    result = 0\n\n    # Iterate through the array until i is less than j\n    while i < j:\n        # Check if the sum of arr[i] and arr[j] is equal to the sum of all the elements in the array\n        if arr[i] + arr[j] == n*(n+1)//2:\n            result = arr[i]\n            break\n        # If the sum is less than the sum of all the elements in the array, increment i\n        elif arr[i] + arr[j] < n*(n+1)//2:\n            i += 1\n        # If the sum is greater than the sum of all the elements in the array, decrement j\n        else:\n            j -= 1\n\n    # Check if result is still 0, which means there is no element that appears only once in the array\n    if result == 0:\n        return -1\n    else:\n        return result"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0] if arr[0]!= arr[1] else arr[1]\n    else:\n        count = 0\n        prev = None\n        for i in range(n):\n            if i == 0:\n                prev = arr[i]\n            else:\n                if arr[i] == prev:\n                    count += 1\n                else:\n                    count -= 1\n                prev = arr[i]\n        for i in range(n):\n            if arr.count(arr[i]) == 1:\n                return arr[i]\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # Find the element that appears only once\n    for elem in arr:\n        if freq[elem] == 1:\n            return elem\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as input and returns the element that appears only once in the array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the count of each element in the array.\n    count_dict = {}\n\n    # Iterate over the array and update the count of each element in the dictionary.\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Iterate over the dictionary and find the element that appears only once.\n    for element in arr:\n        if count_dict[element] == 1:\n            return element\n\n    # If no element appears only once, return None.\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an input array of integers and returns the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0 or n == 1:\n        return -1\n    \n    # If all elements are the same, return -1.\n    if arr[0] == arr[1] == arr[2] == arr[3]:\n        return -1\n    \n    # If all elements are the same, return the first element.\n    if arr[0] == arr[1] == arr[2]:\n        return arr[0]\n    \n    # If the array contains all zeros or all ones, return the element that is not present in the array.\n    if arr[0] == 0 and arr[1] == 1 and arr[2] == 2 and arr[3] == 3:\n        return 4 if arr[4]!= 0 and arr[4]!= 1 and arr[4]!= 2 and arr[4]!= 3 else 5\n    \n    # If the array contains all negative numbers, return the element that is not present in the array.\n    if arr[0] < 0 and arr[1] < 0 and arr[2] < 0 and arr[3] < 0:\n        return 4 if arr[4] >= 0 else 5\n    \n    # If the array contains all positive numbers, return the element that is not present in the array.\n    if arr[0] > 0 and arr[1] > 0 and arr[2] > 0 and arr[3] > 0:\n        return 4 if arr[4] <= 0 else 5\n    \n    # If the array contains a mix of negative and positive numbers, return the element that appears only once.\n    if arr[0] < 0 and arr[1] > 0 and arr[2] < 0 and arr[3] > 0:\n        if arr[0] == arr[2] or arr[1] == arr[3]:\n            if arr[4] == arr[0] or arr[4] == arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        else:\n            if arr[4] == arr[0] or arr[4] == arr[2]:\n                return arr[0]\n            else:\n                return arr[2]\n    \n    # If the array contains a mix of negative and positive numbers, return the element that appears only once.\n    if arr[0] > 0 and arr[1] < 0 and arr[2] > 0 and arr[3] < 0:\n        if arr[0] == arr[2] or arr[1] == arr[3]:\n            if arr[4] == arr[0] or arr[4] == arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        else:\n            if arr[4] == arr[0] or arr[4] == arr[2]:\n                return arr[0]\n            else:\n                return arr[2]\n\n    # If the array contains a mix of negative and positive numbers, return the element that appears only once.\n    if arr[0] > 0 and arr[1] < 0 and arr[2] < 0 and arr[3] > 0:\n        if arr[0] == arr[2] or arr[1] == arr[3]:\n            if arr[4] == arr[0] or arr[4] == arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        else:\n            if arr[4] == arr[0] or arr[4] == arr[2]:\n                return arr[0]\n            else:\n                return arr[2]\n\n    # If the array contains a mix of negative and positive numbers, return the element that appears only once.\n    if arr[0] < 0 and arr[1] > 0 and arr[2] > 0 and arr[3] < 0:\n        if arr[0] == arr[2] or arr[1] == arr[3]:\n            if arr[4] == arr[0] or arr[4] == arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        else:\n            if arr[4] == arr[0] or arr[4] == arr[2]:\n                return arr[0]\n            else:\n                return arr[2]\n\n    # If the array contains a mix of negative and positive numbers, return the element that appears only once.\n    if arr[0] < 0 and arr[1] >"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    else:\n        # Initialize variables for the first, second, and third elements in the array\n        first = arr[0]\n        second = arr[1]\n        third = arr[2]\n        # Check if the first element appears only once or not\n        if arr.count(first) == 1:\n            return first\n        # Check if the second element appears only once or not\n        elif arr.count(second) == 1:\n            return second\n        # Check if the third element appears only once or not\n        elif arr.count(third) == 1:\n            return third\n        # If none of the elements appear only once, check for the element that appears only once in the array\n        else:\n            # Initialize variables for the indices of the first, second, and third occurrences of the element\n            first_idx = -1\n            second_idx = -1\n            third_idx = -1\n            # Loop through the array to find the indices of the first, second, and third occurrences of the element\n            for i in range(n):\n                if arr[i] == first:\n                    first_idx = i\n                elif arr[i] == second:\n                    second_idx = i\n                elif arr[i] == third:\n                    third_idx = i\n            # Check if there are any duplicates in the array\n            if first_idx!= second_idx and second_idx!= third_idx and third_idx!= first_idx:\n                return \"There are no duplicates in the array.\"\n            # If there are duplicates, return the element that appears only once\n            elif first_idx == -1 and second_idx == -1 and third_idx!= -1:\n                return arr[third_idx]\n            elif first_idx!= -1 and second_idx == -1 and third_idx == -1:\n                return arr[first_idx]\n            elif first_idx == -1 and second_idx!= -1 and third_idx == -1:\n                return arr[second_idx]\n            elif first_idx!= -1 and second_idx!= -1 and third_idx == -1:\n                return arr[first_idx]\n            elif first_idx == -1 and second_idx!= -1 and third_idx!= -1:\n                return arr[second_idx]\n            elif first_idx!= -1 and second_idx == -1 and third_idx!= -1:\n                return arr[first_idx]\n            else:\n                return \"There is an error in the function.\""
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    # Loop through the array and count the frequency of each element\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # Loop through the array again and find the element that appears only once\n    for i in arr:\n        if freq[i] == 1:\n            return i\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            continue\n\n        if arr[i] == arr[i+1]:\n            continue\n\n        return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    count = 0\n    \n    # Traverse through the array and count the frequency of each element\n    for i in range(n):\n        count += 1 if arr[i] == arr[i+1] else -1\n        \n    # Traverse through the array again and return the element that appears only once\n    for i in range(n):\n        if count == 1 and arr[i]!= arr[i-1]:\n            return arr[i]\n        elif count == 0 and arr[i] == arr[i-1]:\n            return arr[i]\n            \n"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n\n    Args:\n    arr (list): A sorted list of integers\n\n    Returns:\n    int: The element that appears only once\n\n    Raises:\n    ValueError: If all elements are the same or if the array is empty\n\n    \"\"\"\n\n    if len(set(arr)) == 1:\n        raise ValueError(\"All elements are the same or the array is empty\")\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            \n            # Calculate the product of the absolute values of the numbers in each tuple\n            product = abs(list1[i][0]) * abs(list1[i][1]) * abs(list1[j][0]) * abs(list1[j][1])\n            \n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            \n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisors(n):\n    '''\n    Return a set of all divisors of n (excluding n itself).\n    '''\n    divs = set()\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divs.add(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for n in range(1, limit):\n        if n == divisors(n).intersection(divisors(sum(divisors(n)))):\n            amicable_sum += n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    \"\"\"\n    Helper function to check if a number is amicable or not.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisor_sum += i\n    if divisor_sum == num:\n        return False\n    if num == sum_divisors(divisor_sum):\n        return True\n    return False\n\ndef sum_divisors(num):\n    \"\"\"\n    Helper function to sum all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    sum_divisors = sum(get_divisors(num))\n    if num == sum_divisors and num!= 1:\n        return True\n    elif num!= sum_divisors and is_amicable(sum_divisors):\n        return True\n    else:\n        return False\n\ndef get_divisors(num):\n    '''\n    Get the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store the sum of divisors of each number\n    sum_divisors = [0] * (limit + 1)\n    \n    # Iterate through all numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # Calculate the sum of divisors of i\n        div_sum = sum(x for x in range(1, int(i**0.5) + 1) if i % x == 0) + 1\n        \n        # Calculate the sum of divisors of div_sum\n        div_sum_sum = sum(x for x in range(1, int(div_sum**0.5) + 1) if div_sum % x == 0) + 1\n        \n        # Add the sum of divisors of i to the sum of divisors of div_sum\n        if i == div_sum_sum and i!= div_sum:\n            sum_divisors[i] = div_sum + i\n    \n    # Sum all the numbers whose sum of divisors is less than or equal to the limit\n    return sum(i for i in range(1, limit + 1) if sum_divisors[i] <= limit)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for i in range(1, limit):\n        j = sum(list(filter(lambda x: x < i, range(1, i))))\n        k = sum(list(filter(lambda x: x < j, range(1, j))))\n        if i == k and i!= j and j!= k:\n            total_sum += i + j\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    sum_div = sum(divisors(num))\n    return sum_div!= num and sum_div == sum(divisors(sum_div))\n\ndef divisors(num):\n    \"\"\"\n    Returns a list of all divisors of a number.\n    \"\"\"\n    div = []\n    for i in range(1, num):\n        if num % i == 0:\n            div.append(i)\n    return div\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_amicable(n):\n    divisors = set()\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            divisors.add(i)\n    return sum(divisors) == n and n!= 1\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for n in range(1, limit + 1):\n        if is_amicable(n):\n            total += n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        divisors = []\n        for j in range(1, i//2+1):\n            if i % j == 0:\n                divisors.append(j)\n        if sum(divisors) == i and sum(range(1, i))!= i:\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisors(num):\n    divs = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divs.append(i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for num in range(1, limit+1):\n        divs = divisors(num)\n        sum_of_divs = sum(divs)\n        if num == sum_of_divs and num!= sum(divs[:divs.index(num)]):\n            total += num\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if sum(list(range(1, i))) == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Convert the complex number to polar coordinates\n    r, theta = cmath.polar(complex(a,b))\n    \n    # Convert the angle from radians to degrees\n    angle = cmath.degrees(theta)\n    \n    # Return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the phase angle of the complex number\n    phase = cmath.phase(complex(a, b))\n\n    # Convert the phase angle to degrees\n    angle = phase * 180 / cmath.pi\n\n    # Return the angle in degrees\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    This function takes a complex number as input and returns its angle in degrees.\n    '''\n    angle = cmath.phase(a)\n    return round(angle*180/cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    This function takes a complex number as input and returns its angle in degrees.\n    '''\n    angle = cmath.phase(a)*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    max_len = 0\n    \n    # iterate over all substrings of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # extract substring and count number of 0s and 1s\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            \n            # calculate the difference between the number of 0s and 1s in the substring\n            diff = abs(count_0 - count_1)\n            \n            # update the maximum difference found so far\n            if diff > max_len:\n                max_len = diff\n    \n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0s = sub_string.count('0')\n            count_1s = sub_string.count('1')\n            diff = abs(count_0s - count_1s)\n            if diff > max_length:\n                max_length = diff\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    max_length = 0\n    curr_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    res = 0\n    max_len = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if string[j] == \"0\":\n                count += 1\n            else:\n                count -= 1\n            res = max(res, abs(count))\n            max_len = max(max_len, j - i + 1)\n    return max_len, res"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    \n    for i in range(n):\n        ones = string.count('1', i, n)\n        zeros = string.count('0', i, n)\n        length = abs(ones - zeros)\n        max_length = max(max_length, length)\n        \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    \n    # Check for all possible sub-strings of the given string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Extract the sub-string\n            sub_string = string[i:j]\n            \n            # Find the difference in the number of 0s and 1s in the sub-string\n            count_0s = sub_string.count('0')\n            count_1s = sub_string.count('1')\n            diff = abs(count_0s - count_1s)\n            \n            # Update the maximum difference\n            max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            length = abs(zeros - ones)\n            max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    \n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a,b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    # Finding the factors of both numbers\n    factors_a = set()\n    for i in range(1,a+1):\n        if a%i == 0:\n            factors_a.add(i)\n    factors_b = set()\n    for i in range(1,b+1):\n        if b%i == 0:\n            factors_b.add(i)\n\n    # Finding the common factors between the two sets\n    common_factors = factors_a.intersection(factors_b)\n\n    # Finding the sum of the common factors\n    sum_of_factors = sum(common_factors)\n\n    return sum_of_factors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the common divisors of a and b\n    divisors = set(range(1, min(a, b) + 1)) & set(range(1, max(a, b) + 1))\n    for num in divisors:\n        if a % num == 0 and b % num == 0:\n            # Add the common divisor to a running total\n            total += num\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Compute the greatest common divisor of a and b using Euclid's algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        \"\"\"\n        Compute the least common multiple of a and b.\n        \"\"\"\n        return a * b // gcd(a, b)\n    \n    def sum_divisors(n):\n        \"\"\"\n        Compute the sum of all divisors of n, including 1 and n itself.\n        \"\"\"\n        result = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                result += i\n                if n // i!= i:\n                    result += n // i\n        if n**0.5 == int(n**0.5):\n            result += n\n        return result\n    \n    def common_divisors(a, b):\n        \"\"\"\n        Compute the common divisors of a and b.\n        \"\"\"\n        result = set()\n        for i in range(1, int(lcm(a, b)) + 1):\n            if gcd(i, lcm(a, b)) == 1 and gcd(i, a) == 1 and gcd(i, b) == 1:\n                result.add(i)\n        return result\n    \n    return sum(common_divisors(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the common divisors of the two numbers\n    divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # Return the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of those numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function returns the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n\n    # Finding the common divisors\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the set of common divisors\n    common_divisors = set(divisor for divisor in range(1, min(num1, num2)+1) if num1 % divisor == 0 and num2 % divisor == 0)\n\n    # Add the common divisors and return the sum\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get the prime factors of both numbers\n    factors_a = set(prime_factors(a))\n    factors_b = set(prime_factors(b))\n\n    # Find the intersection of the prime factors\n    common_factors = factors_a.intersection(factors_b)\n\n    # Calculate the sum of the common factors\n    return sum(common_factors)\n\n\ndef prime_factors(n):\n    \"\"\"\n    Get the prime factors of a number.\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum number\n    if a > b:\n        max_num = a\n    else:\n        max_num = b\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through all numbers from 1 to max_num\n    for i in range(1, max_num+1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum\n            sum += i\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers and return the result.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n    \"\"\"\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Split the string into words using whitespace as the delimiter\n    words = str.split()\n\n    # Create an empty list to store long words\n    long_words = []\n\n    # Loop through each word in the list and check if it is longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments, n and str.\n    n is the number of characters which determines the length of the words.\n    str is the list of words which are to be checked.\n    \n    The function returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function finds words that are longer than n characters from a given list of words.\n\n    :param n: An integer that specifies the maximum length of a word.\n    :param str: A list of strings that represent the list of words.\n    :return: A list of strings that represent the list of words that are longer than n characters.\n    \"\"\"\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the sum of the first row, second column, and diagonal is equal to the sum of the third row, second column, and diagonal\n    if sum(my_matrix[0])!= sum([my_matrix[i][i] for i in range(len(my_matrix))]) or sum([my_matrix[i][i] for i in range(len(my_matrix))])!= sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))]):\n        return False\n    \n    # Check if the sum of each row and column is the same\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= sum([my_matrix[j][i] for j in range(len(my_matrix))]):\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes in a 2D matrix as input and returns True if it is a magic square,\n    else it returns False.\n    \"\"\"\n\n    # Calculate the sum of each row and each column of the matrix\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Calculate the sum of the diagonal and the anti-diagonal of the matrix\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n\n    # Check if all the sums are equal and return True if they are, else return False\n    return row_sums == col_sums == [len(my_matrix) ** 2] * len(my_matrix) and diagonal_sum == anti_diagonal_sum == (len(my_matrix) ** 2) // 2 + 1\n"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a matrix as input and returns True if the matrix is a magic square, and False otherwise.\n    A magic square is a square grid of numbers where each row, column, and major diagonal add up to the same sum.\n    '''\n    \n    # Calculate the size of the matrix\n    n = len(my_matrix)\n    \n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Check if the sum of each row is equal to the sum of the first row\n    for i in range(1, n):\n        if sum(my_matrix[i])!= row_sum:\n            return False\n    \n    # Check if the sum of each column is equal to the sum of the first row\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum!= row_sum:\n            return False\n    \n    # Check if the sum of the major diagonal is equal to the sum of the first row\n    diag_sum = 0\n    for i in range(n):\n        diag_sum += my_matrix[i][i]\n    if diag_sum!= row_sum:\n        return False\n    \n    # Check if the sum of the minor diagonal is equal to the sum of the first row\n    diag_sum = 0\n    for i in range(n):\n        diag_sum += my_matrix[i][n-i-1]\n    if diag_sum!= row_sum:\n        return False\n    \n    # If all the checks pass, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n\n    # Check if the sum of the diagonals is the same\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag_sum1!= diag_sum2:\n        return False\n\n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix))]\n    \n    # Calculate the sum of the diags\n    diag1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if all three sums are equal\n    if all(x == row_sums[0] for x in row_sums) and \\\n       all(x == col_sums[0] for x in col_sums) and \\\n       diag1 == diag2 == row_sums[0]:\n        print(\"The matrix is a magic square.\")\n    else:\n        print(\"The matrix is not a magic square.\")"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = (n * (n**2 + 1)) // 2\n\n    # calculate the sum of each row and each column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    # check if the sum of each row and column is equal to the magic sum\n    if row_sums == [magic_sum] * n and col_sums == [magic_sum] * n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a 2D matrix as input and returns True if it is a magic square, False otherwise.\n    A magic square is a square grid filled with distinct positive integers such that each row, column, and diagonal sums up to the same value.\n    '''\n    \n    # Check if matrix is a square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    \n    # Calculate the sum of the first diagonal\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the second diagonal\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # Check if the sum of each row, column, and diagonal is the same\n    return row_sums == col_sums == [n*(n*n+1)//2] * n and diag_sum1 == diag_sum2 == n*(n*n+1)//2"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if matrix is a square matrix\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    if num_rows!= num_cols:\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and column is equal to the magic number 15\n    magic_num = num_rows * (num_rows*num_rows + 1) // 2\n    if row_sums!= [magic_num] * num_rows or col_sums!= [magic_num] * num_rows:\n        return False\n\n    # Check if the matrix is a diagonal matrix\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if i!= j and i+j!= num_rows-1:\n                return False\n\n    # If all conditions are met, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Check if the sum of the first row is equal to the sum of the magic square\n    if row_sum == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n        \n        # Calculate the sum of the second row\n        col_sum = sum(my_matrix[0][1:3]) + my_matrix[1][0] + my_matrix[1][2]\n        \n        # Check if the sum of the second row is equal to the sum of the magic square\n        if col_sum == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n            \n            # Calculate the sum of the diagonal\n            diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n            \n            # Check if the sum of the diagonal is equal to the sum of the magic square\n            if diag_sum == my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n                \n                # Calculate the sum of the second diagonal\n                sec_diag_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n                \n                # Check if the sum of the second diagonal is equal to the sum of the magic square\n                if sec_diag_sum == my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n                    \n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    # Calculate the sum of the diagonals\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # Check if the sum of each row and column is equal to the sum of the diagonals\n    if row_sums == col_sums and diag1_sum == diag2_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int) # default value is 0\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    for num, count in counts.items():\n        if count == max_count:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # create a dictionary to store frequencies\n    for num in nums:\n        freq[num] += 1  # increment the frequency count for each number in the list\n    max_freq = 0  # initialize max frequency to zero\n    max_num = None  # initialize max number to None\n    for num in freq:\n        if freq[num] > max_freq:  # if frequency of current number is greater than max frequency seen so far\n            max_freq = freq[num]  # update max frequency\n            max_num = num  # update max number\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    max_freq = max(freq.values())\n    max_items = [item for item, count in freq.items() if count == max_freq]\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary with default value as 0\n    freq = defaultdict(int)\n    # iterate through the list and increment the frequency of each item in the dictionary\n    for num in nums:\n        freq[num] += 1\n    # find the maximum frequency\n    max_freq = max(freq.values())\n    # find the item with maximum frequency and return it\n    for item, count in freq.items():\n        if count == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    for i in vowel_indices:\n        if i == 0 or i == len(str1)-1:\n            continue\n        if str1[i-1] not in vowels and str1[i+1] not in vowels:\n            str1 = str1[:i] + str1[i] + str1[i+1] + str1[i-1] + str1[i+2:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_to_reverse = \"\"\n    for char in str1:\n        if char in vowels:\n            vowels_to_reverse += char\n    reversed_vowels = vowels_to_reverse[::-1]\n    final_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            final_str += reversed_vowels[0]\n            reversed_vowels = reversed_vowels[1:]\n        else:\n            final_str += str1[i]\n    return final_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_indices = []\n    \n    # Find the indices of all the vowels in the string\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_indices.append(i)\n    \n    # Reverse the string for all the vowels except for 'y'\n    for i in range(len(vowels_indices)):\n        if str1[vowels_indices[i]] == 'y':\n            continue\n        else:\n            str1 = str1[:vowels_indices[i]] + str1[vowels_indices[i]:][::-1] + str1[vowels_indices[i]+1:]\n    \n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_in_str = ''\n    for char in str1:\n        if char in vowels:\n            vowels_in_str += char\n    reversed_vowels = vowels_in_str[::-1]\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += reversed_vowels[0]\n            reversed_vowels = reversed_vowels[1:]\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    vowels_index = []\n\n    # Finding the index of vowels\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n            vowels_index.append(i)\n\n    # Reversing the vowels\n    for i in range(len(vowels_list)):\n        str1 = str1[:vowels_index[i]] + str1[vowels_index[i]+1:vowels_index[i]+2] + str1[vowels_index[i]] + str1[vowels_index[i]+2:]\n\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    str1 = list(str1)\n    for i, j in zip(vowel_indices[::-1], vowel_indices):\n        str1[i], str1[j] = str1[j], str1[i]\n    return \"\".join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] in vowels:\n            j -= 1\n        elif str1[j] in vowels:\n            i += 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # find all vowels in the string\n    vowel_indices = [i for i, c in enumerate(str1) if c in vowels]\n    # reverse the vowels in the string\n    for i in vowel_indices:\n        str1 = str1[:i] + str1[i:][::-1]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reverse_str = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels and str1[i]!= 'y':\n            reverse_str += str1[i]\n    return str1.translate(str.maketrans('', '', reverse_str)) + reverse_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels and char!= 'y']\n    str1 = list(str1)\n    for i in vowel_indices[::-1]:\n        str1[i] = str1[i].lower() if str1[i] == 'Y' else str1[i].upper()\n    return \"\".join(str1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    This function converts a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) +''\n    return str1.strip()"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n\n    :param tup1: the tuple to convert\n    :return: a string representation of the tuple\n    \"\"\"\n    result = \"\"\n    for item in tup1:\n        result += str(item) + \",\"\n    return result[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for i in range(len(tup1)):\n        result += str(tup1[i]) + \" \"\n    return result.strip()"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for i in tup1:\n        result += str(i) + ','\n    return result[:-1]"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of the negative numbers in the list.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of the negative numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the negative numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of the negative numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the negative numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of the negative numbers in the list.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of negative numbers from a list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The sum of negative numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate over the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the number to the sum\n            total += num\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        hexagonal = i * (2*i - 1)\n        count += 1\n        if count == n:\n            return hexagonal\n        i += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        count += 1\n        num += 6*count - 3\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1  # start with 1\n    num = 1   # start with 1\n    while count < n:\n        num += 6  # each hexagonal number is 6 more than the previous one\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 3*n*n - 3*n + 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 0\n    count = 1\n    while count <= n:\n        hexagonal += count\n        count += 1\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n\n    if count_zeroes == 0:\n        return 0\n    else:\n        return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zero = 0\n    count_nonzero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    return count_zero / count_nonzero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    ratio = count_zeroes / count_non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n\n    ratio = count_zeroes / count_non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes if count_non_zeroes!= 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n            \n    ratio = zeroes / non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = nums.count(0)\n    count_non_zeroes = len(nums) - count_zeroes\n    ratio = count_zeroes / count_non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes if non_zeroes!= 0 else 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Find the largest power of 2 that divides n\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n\n    # Check if n can be represented as a sum of powers of 2\n    while power > 0:\n        if n - power >= 0:\n            n -= power\n        power //= 2\n\n    # If n is 0, then it can be represented as a sum of powers of 2\n    if n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        power = 0\n        while 2**power <= n:\n            if n == 2**power:\n                return True\n            elif n < 2**power:\n                return False\n            else:\n                n -= 2**power\n                power += 1"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return False\n    \n    # Check if n is a power of 2\n    power = 0\n    while n > 0:\n        if n % 2!= 0:\n            return False\n        n //= 2\n        power += 1\n    \n    # Check if n can be represented as sum of powers of 2\n    for i in range(power):\n        if 2 ** i > n:\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(31, -1, -1):\n            power = 2 ** i\n            if power <= n:\n                if n - power == 0:\n                    return True\n                else:\n                    n -= power\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function checks whether a given number can be represented as the sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a boolean variable to store the result\n    result = False\n    \n    # Loop through all the numbers from 0 to n\n    for i in range(n+1):\n        # Initialize a variable to store the sum of powers of 2\n        power_sum = 0\n        \n        # Loop through all the powers of 2\n        for j in range(10):\n            # If i is a power of 2, add 1 to power_sum\n            if i & (1 << j):\n                power_sum += 1\n        \n        # If power_sum equals i, then n can be represented as the sum of non-zero powers of 2\n        if power_sum == i:\n            result = True\n            break\n        \n    return result"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    power = 1\n    while n > 0:\n        if n & 1:\n            if count == 0:\n                return False\n            else:\n                count -= 1\n        n >>= 1\n        power <<= 1\n    return count == 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        i = 1\n        while i <= n/2:\n            if n % i == 0:\n                if is_Power_Of_Two(i) and is_Power_Of_Two(n//i):\n                    return True\n            i += 1\n    return False\n\ndef is_Power_Of_Two(n):\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_Power_Of_Two(n//2)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function takes an integer 'n' as input and returns True if n can be represented as a sum of non-zero powers of 2, otherwise it returns False.\n    '''\n    # Initialize a list to store the powers of 2\n    powers_of_two = []\n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Loop through all the powers of 2 until n is less than or equal to 0\n    while n > 0:\n        # If the remainder of n divided by 2 is 1, then n can be represented as a sum of non-zero powers of 2\n        if n % 2 == 1:\n            # Check if the sum of powers of 2 is less than or equal to n\n            if sum_of_powers <= n:\n                # Add the current power of 2 to the list\n                powers_of_two.append(2**(len(powers_of_two)+1))\n                # Add the power of 2 to the sum of powers of 2\n                sum_of_powers += powers_of_two[-1]\n                # If the sum of powers of 2 is equal to n, then return True\n                if sum_of_powers == n:\n                    return True\n            else:\n                # If the sum of powers of 2 is greater than n, then n cannot be represented as a sum of non-zero powers of 2\n                return False\n        # Divide n by 2 to check for the next power of 2\n        n //= 2\n        \n    # If the loop completes without returning, then n can be represented as a sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return False\n\n    # Loop through all the numbers from 1 to the given number and check if the number can be represented as sum of powers of 2 or not\n    for i in range(1, n+1):\n        # Check if the current number is a power of 2 or not\n        if not (i & (i-1)):\n            # If it is a power of 2, subtract the power of 2 from the given number and check if the new number can be represented as sum of powers of 2 or not\n            new_n = n - (1 << i.bit_length() - 1)\n            if new_n == 0:\n                return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Base Case\n    if n == 0:\n        return True\n    \n    # Check if n is even or odd\n    if n & 1:\n        return False\n    \n    # Find the rightmost power of 2\n    power_of_2 = 1\n    while (power_of_2 << 1) <= n:\n        power_of_2 <<= 1\n    \n    # Check if n is divisible by 2^(power_of_2)\n    if n % (power_of_2 << 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns its circumference.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n    \"\"\"\n    singly_list = []\n    for sublist in test_list:\n        for element in sublist:\n            singly_list.append(element)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if type(i) == list:\n            flat_list.extend(i)\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if type(sublist) == list:\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            singly_list.extend(sublist)\n        else:\n            singly_list.append(sublist)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        if type(item) == list:\n            for sub_item in item:\n                singly_list.append(sub_item)\n        else:\n            singly_list.append(item)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists and returns a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for number in sublist:\n            flat_list.append(number)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the last element and move the largest element to the end.\n    for i in range(n-1, -1, -1):\n        # Find the index of the largest element in the unsorted part of the list.\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # If the largest element is not at the end of the list, move it to the end.\n        if max_index!= i:\n            nums = reverse(nums, i, max_index)\n            nums = reverse(nums, 0, i)\n    return nums\n\ndef reverse(nums, start, end):\n    \"\"\"\n    Reverses a slice of a list.\n    \"\"\"\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the largest value and work our way down to 1\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:i]))\n        # If the maximum element is not at the end of the list, flip the entire list up to the maximum index\n        if max_index!= i-1:\n            # Reverse the entire list up to the maximum index\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            # Reverse the portion of the list from the maximum index to the end of the list\n            nums[max_index+1:i] = nums[max_index+1:i][::-1]\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Loop through all indices of the list\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # If the maximum element is not at the end of the list, move it to the end\n        if max_index!= n-i-1:\n            # Move the maximum element to the end of the list\n            nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n            \n            # Reverse the list from the index of the maximum element to the end of the list\n            nums[i:n-i-1] = nums[i:n-i-1][::-1]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    This function implements the Pancake Sort algorithm to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find index of maximum element in unsorted part of array\n        max_index = nums.index(max(nums[i:n]))\n        # Move maximum element to end of unsorted part of array\n        nums[i:n], nums[max_index:n+1] = nums[max_index:n+1], nums[i:n]\n        # Reverse the array\n        nums[i:n] = nums[i:n][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    Pancake sort is a sorting algorithm that starts by reversing the order\n    of the entire list. It then breaks the list down into smaller sub-lists,\n    sorts each sub-list using any sorting algorithm, and then reverses\n    the sub-list back into its original position. This process is repeated\n    until the entire list is sorted.\n\n    :param nums: A list of elements to be sorted.\n    :return: The sorted list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i + nums[i:].index(max(nums[i:]))\n\n        # If the maximum element is not at the beginning of the list, flip it to the beginning\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n\n            # Reverse the sub-list from the beginning to the maximum element\n            nums[i+1:max_index+1] = nums[i+1:max_index+1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    \n    # Start from the maximum value and move the maximum element to the end\n    for i in range(n-1, 0, -1):\n        max_index = i\n        \n        # Find the maximum element in the unsorted part of the list\n        for j in range(0, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # If the maximum element is not at the end of the list, move it to the end\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n            # Reverse the first i elements to sort the maximum element to its correct position\n            nums[:i+1] = nums[:i+1][::-1]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Find the maximum element in the list\n    max_num = max(nums)\n\n    # Iterate through the list from the length of the list to 1\n    for i in range(len(nums), 0, -1):\n        # Find the index of the maximum element\n        max_index = nums.index(max_num)\n\n        # Flip the list from the beginning to the maximum index\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n\n        # Flip the list from the maximum index to the end\n        nums = nums[:len(nums) - i + 1][::-1] + nums[len(nums) - i + 1:]\n\n        # Update the maximum element\n        max_num = max(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \n    Args:\n        nums: A list of integers to be sorted.\n    \n    Returns:\n        A new list containing the sorted elements.\n    \"\"\"\n    # Find the length of the input list\n    n = len(nums)\n    \n    # Initialize a list to store the maximum value seen so far\n    max_seen = [0] * n\n    \n    # Initialize a list to store the index of the maximum value seen so far\n    max_index = [i for i in range(n)]\n    \n    # Iterate over the input list from the beginning up to the end\n    for i in range(n):\n        # Find the index of the maximum value seen so far\n        max_idx = max_index[i]\n        \n        # Check if the current value is greater than the maximum seen so far\n        if nums[i] > nums[max_idx]:\n            # Update the maximum value seen so far and its index\n            max_seen[i] = nums[i]\n            max_index[i] = i\n        else:\n            # Update the maximum value seen so far and its index\n            max_seen[i] = nums[max_idx]\n            max_index[i] = max_idx\n        \n        # Reverse the sublist from the index of the maximum value seen so far to the end\n        left = 0\n        right = i\n        \n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        # Reverse the sublist from the beginning to the index of the maximum value seen so far\n        left = 0\n        right = max_idx\n        \n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        # Reverse the entire list\n        left = 0\n        right = n - 1\n        \n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Repeatedly reverse elements from 0 to n-1\n    for i in range(n):\n        # Find the index of the largest element in nums[0:i+1]\n        max_idx = nums.index(max(nums[0:i+1]))\n        # Reverse the sublist from 0 to max_idx\n        nums[0:max_idx+1] = nums[0:max_idx+1][::-1]\n        # Reverse the entire list\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the Pancake Sorting Algorithm.\n    '''\n    n = len(nums)\n    curr_size = n\n    \n    while curr_size > 1:\n        # find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:curr_size]))\n        \n        # flip the maximum element to the end of the list\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        \n        # reverse the entire list\n        nums = nums[::-1]\n        \n        # reduce the current size of the sorted sublist\n        curr_size -= 1\n        \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    This function finds the number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    # initialize variables for minimum and maximum absolute difference\n    min_diff = abs(arr[0] - arr[1])\n    max_diff = abs(arr[-1] - arr[-2])\n    # iterate over the sorted array to find the maximum absolute difference\n    for i in range(1, len(arr) - 1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[j] - arr[i]) > max_diff:\n                max_diff = abs(arr[j] - arr[i])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff: \n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n    arr: a list of integers\n\n    Returns:\n    max_diff: the maximum difference between any two elements in the array\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Find the maximum difference between any two elements in the sorted array\n    max_diff = arr[-1] - arr[0]\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sorting the array\n    n = len(arr)\n    max_diff = 0\n    \n    # Iterating through the array\n    for i in range(n):\n        # Finding the absolute difference between adjacent elements\n        diff = abs(arr[i] - arr[i+1])\n        \n        # Updating the maximum difference if required\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Find the absolute difference between the first and last elements in the sorted array\n    max_diff = abs(arr[-1] - arr[0])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n\n    # Find the maximum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n + 1):\n        if i*a + b*n // b == n:\n            return (i, n // i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n + 1):\n        if a * x % n == b:\n            return (x, n // a)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(n//a+1):\n        for j in range(n//b+1):\n            if (i*a + j*b) == n:\n                return i, j\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return (n//a, 0)\n    elif a == 0:\n        return (0, n//b)\n    else:\n        d = n // (a*b)\n        if d == 0:\n            return (0, 0)\n        else:\n            return (d*a, d*b)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a * i + b * j == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if gcd(a,b) is 1\n    if a % b!= 0:\n        return None\n    else:\n        # calculate x and y\n        x = n // a\n        y = n // b\n        return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Using list comprehension to remove all elements from list1 which are present in list2\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list containing all the elements of the first list\n    that are not present in the second list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list that are present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from the first list that are present in the second list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    # Use the set() function to convert list2 to a set\n    set2 = set(list2)\n    # Use a list comprehension to iterate over list1 and only keep elements that are not in set2\n    result = [x for x in list1 if x not in set2]\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of series (n-2i) from i=0 to n/2\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    return (n*(n+1))//2 - ((n//2)*(n//2+1))//2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2 + 1):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series (n - 2*i) from i=0 to n // 2, where n is an odd integer.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Invalid input. n must be an odd integer.\"\n    else:\n        sum = 0\n        for i in range(n // 2):\n            sum += n - 2*i\n        return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series (n - 2*i) from i=0 to n//2\n    \"\"\"\n    # Calculate the sum of the series\n    total = (n*(n+1))//2 - ((n//2)*(n//2+1))//2\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # initialize the sum to 0\n    total_sum = 0\n    # iterate from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # add the value (n - 2*i) to the total sum\n        total_sum += n - 2*i\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n\nprint(sum_series(10)) # Output: 55"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * s * tan(pi / s)) * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s ** 2) / tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the polygon\n    apothem = l / (2 * tan(pi/s))\n    # Calculate the area of the polygon using the formula A = (s(s-3)/2) * apothem^2\n    area = (s*(s-3)/2) * apothem**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / tan(pi / s)\n    return a * l"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l**2) / tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / 2 / tan(pi / s)\n    return a"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem\n    a = l / (2 * tan(pi / s))\n    # Calculate the area using the formula A = (s(a^2))/4 * tan(pi/s)\n    area = (s * (a**2)) / 4 * tan(pi/s)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    div2 = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1.append(i)\n            if i!= n//i:\n                div2.append(n//i)\n    div1.sort()\n    div2.sort()\n    sum1 = sum(div1)\n    sum2 = sum(div2)\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get all divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    # Check if the sum of the divisors are the same\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                return True\n    \n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum1 = 0\n    div_sum2 = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum1 += i\n            if n//i!= i:\n                div_sum2 += n//i\n    if div_sum1 == div_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # initialize a list of divisors for each integer\n    divs1 = []\n    divs2 = []\n    \n    # find all divisors of the first integer\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs1.append(i)\n    \n    # find all divisors of the second integer\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs2.append(i)\n    \n    # compare the lists of divisors and return True if they are equal, False otherwise\n    if divs1 == divs2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                div_sum += i\n            else:\n                div_sum += i + n // i\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i)\n            if n//i!= i: \n                divisors.append(n//i)\n    divisors = list(set(divisors))\n    divisors.sort()\n    if sum(divisors) == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get the divisors of n \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n//i)\n    \n    # Get the sum of the divisors \n    divisor_sum = sum(divisors)\n    \n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find all divisors of n \n    divs = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divs.append(i) \n            if n//i!= i: \n                divs.append(n//i) \n    divs.sort() \n\n    # Check if the sum of divisors is same for all pairs of integers \n    for i in range(len(divs)): \n        for j in range(i+1, len(divs)): \n            if divs[i] + divs[j] == n: \n                return True \n\n    return False "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # initialize a list to store the count of characters at each position\n    char_count = [0]*26\n    \n    # convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is a letter, increment the count at its position in the alphabet\n        if char.isalpha():\n            char_count[ord(char)-ord('a')]+=1\n    \n    # return the count of characters at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create an empty list to store the count of each character in the alphabet\n    count_list = [0] * 26\n    # loop through the string and increment the count for each character in the alphabet\n    for char in str1:\n        if char.isalpha():\n            index = ord(char) - ord('a')\n            count_list[index] += 1\n    # loop through the count list and count the number of characters that occur at the same position as in the English alphabet\n    same_position_count = 0\n    for i in range(26):\n        if count_list[i] > 0:\n            same_position_count += 1\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * len(alphabet)\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a list of all English letters\n    alphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    \n    # convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the character count at each position\n    char_count = {}\n    \n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # if the character is an English letter, add it to the dictionary with a count of 1\n        if char in alphabet:\n            if i not in char_count:\n                char_count[i] = 1\n            else:\n                char_count[i] += 1\n    \n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Define a dictionary to store the count of each character at each position in the English alphabet\n    char_counts = {}\n    for i in range(26):\n        char_counts[chr(i+97)] = 0\n    \n    # Convert the string to lowercase and iterate through each character and its position in the string\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        # If the character is a letter, add its count to the dictionary of character counts for the corresponding position in the alphabet\n        if char.isalpha():\n            char_counts[char] += 1\n            \n    # Iterate through the dictionary and count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for i in range(26):\n        if char_counts[chr(i+97)] > 0:\n            count += 1\n            \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Initialize a list to store the count of each character in the string\n    count_list = [0] * 26\n    \n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    \n    # Loop through each character in the string and count it\n    for char in str1:\n        if char.isalpha():\n            # Convert the character to its corresponding position in the alphabet\n            index = ord(char) - ord('a')\n            count_list[index] += 1\n    \n    # Loop through the count list and count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(26):\n        if count_list[i] > 0:\n            count += 1\n    \n    # Return the count of characters that occur at the same position as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count for each character at each position\n    char_count = {}\n    \n    # Loop through each character in the string\n    for i, c in enumerate(str1):\n        # Convert the character to lowercase to make it case-insensitive\n        c = c.lower()\n        \n        # If the character is a letter, add it to the dictionary with its position as the key\n        if c.isalpha():\n            if c in char_count:\n                char_count[c][i] += 1\n            else:\n                char_count[c] = [0] * len(str1)\n                char_count[c][i] = 1\n    \n    # Count the number of characters that occur at the same position as in the alphabet\n    count = 0\n    for i in range(len(str1)):\n        c = str1[i].lower()\n        if c.isalpha():\n            if char_count[c][i] > 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function takes in a string and counts the number of characters that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Create a dictionary to store the count of each character at each position\n    char_count = {}\n    \n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Convert the character to lowercase for case insensitivity\n        char = str1[i].lower()\n        \n        # Check if the character is a letter\n        if char.isalpha():\n            # If the character is a letter, check if it's in the dictionary\n            if char in char_count:\n                # If the character is already in the dictionary, increment its count\n                char_count[char] += 1\n            else:\n                # If the character is not in the dictionary, add it with a count of 1\n                char_count[char] = 1\n    \n    # Loop through the dictionary and count the number of characters that occur at the same position as in the English alphabet (case insensitive)\n    count = 0\n    for key in char_count:\n        if ord(key) - 96 == char_count[key]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert the string to lowercase and remove all non-alphabetic characters\n    str1 = ''.join(e for e in str1.lower() if e.isalpha())\n    # Create a list of the English alphabet letters\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    # Create an empty list to store the count of characters at each position\n    count_list = [0] * 26\n    # Loop through the string and count the number of characters at each position\n    for char in str1:\n        count_list[alphabet.index(char)] += 1\n    # Return the list of character counts\n    return count_list"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    \n    # Iterate over all pairs of integers in the list\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 1 << len(bin(n)[2:])"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Otherwise, find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize result to 1\n    result = 1\n    # Check if n is a power of 2 or not\n    if (n & (n-1)) == 0: \n        # If n is a power of 2, return n\n        return n\n    # If n is not a power of 2, keep checking until n becomes a power of 2\n    while result < n: \n        result <<= 1\n    # Return the smallest power of 2 greater than or equal to n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 \n    greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    # Find the maximum power of 2 that is less than or equal to n\n    max_power = 1\n    while max_power <= n:\n        max_power <<= 1\n    \n    return max_power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    This function returns the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a number n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n))-2)"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments:\n    a: list - the list in which we want to count the occurrences of x\n    x: int - the number whose occurrences we want to count\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments:\n    - a: A list of integers\n    - x: An integer to search in the list\n    \n    This function returns the number of occurrences of x in a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as inputs and returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = sum(list1[m-1:n])\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a pentagon and returns the perimeter of the pentagon.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    if'std' in s:\n        count += 1\n    if'std' in s.lower():\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s)-2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if'std' in s:\n        count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all the elements in tuple have the same data type or not.\n    \"\"\"\n    if not test_tuple:\n        return False\n    first_type = type(test_tuple[0])\n    for item in test_tuple[1:]:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # get the data type of the first element of the tuple\n    \n    for item in test_tuple:\n        if type(item)!= data_type: # if the data type of the current item is different than the first element's data type\n            return False # return False because the elements have different data types\n    \n    return True # return True because all the elements have the same data type"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= data_type:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    This function checks if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the data type of the current element is the same as the first element\n        if type(element)!= type(first_element):\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the tuple have the same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    \n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    # Traverse the array and count the frequency of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # Check if x is the majority element\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            return False\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n    elif n % 2 == 0:\n        mid = n // 2\n        if arr[mid-1] == x:\n            return True\n        elif arr[mid] == x:\n            return True\n        else:\n            return False\n    else:\n        mid = n // 2\n        if arr[mid] == x:\n            return True\n        else:\n            return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if x is not present in arr, it cannot be a majority element\n    if x not in arr:\n        return False\n    # if x is present in arr, count the number of occurrences of x\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # if count is greater than n/2, then x is a majority element\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the count of set bits in the binary representation of n.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1 \n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in the number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:  # check if the last bit is 1\n            count += 1\n        n >>= 1  # shift the bits to the right to check the next bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function takes an integer as input and returns the count of set bits in its binary representation.\n\n    Args:\n    n (int): An integer whose binary representation is to be counted.\n\n    Returns:\n    int: The count of set bits in the binary representation of the input integer.\n    \"\"\"\n\n    # Convert the integer to binary and count the number of '1's\n    binary = bin(n)[2:] # Remove the '0b' prefix\n    count = binary.count('1')\n    \n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with the characters at odd indices removed.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n    str -- the input string\n\n    Returns:\n    the modified string\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns the string with the characters that have odd index values removed.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an argument and removes the characters which have odd index values.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum value of the three.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum value among them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers and returns the result.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three arguments and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum value among them.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c: \n        return a \n    elif b<a and b<c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (2**r - 1) - (2**(r-l) - 1)\n    return (n & mask) == mask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # find the mask for the given range\n    mask = ((1 << r) - 1) ^ ((1 << l) - 1)\n\n    # check if all bits in the given range are set or not\n    if (n & mask) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if bin(i).count('1')!= n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    if (r < l):\n        return False\n    if (r == n):\n        r -= 1\n    if (r == -1):\n        return True\n    if (n & (1 << r)):\n        return False\n    return all_Bits_Set_In_The_Given_Range(n,l,r-1)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Create a mask to extract the bits in the given range\n    mask = (2**r) - (2**(r+1)) - 1\n    \n    # Clear the bits in the given range\n    n &= ~mask\n    \n    # Check if there are any bits set in the remaining bits\n    return n == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a bitmask to set all bits in the range\n    bitmask = ((1 << (r+1)) - (1 << l)) - 1\n\n    # AND the bitmask with the number to check if all bits are set\n    return (n & bitmask) == bitmask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes a number n, a lower bound l, and an upper bound r as inputs.\n    It checks if all the bits in the range [l,r] are set or not.\n    '''\n    \n    # Convert the range [l,r] to binary format\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    \n    # Pad the binary strings with leading zeros if necessary\n    if len(binary_l) < len(binary_r):\n        binary_l = '0'*(len(binary_r)-len(binary_l)) + binary_l\n    if len(binary_r) < len(binary_l):\n        binary_r = '0'*(len(binary_l)-len(binary_r)) + binary_r\n        \n    # Check if all the bits in the range are set or not\n    result = True\n    for i in range(len(binary_l)):\n        if binary_l[i] == '0' or binary_r[i] == '0':\n            result = False\n            break\n    \n    return result"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n\n    :param n: An integer representing the number whose bits we need to check.\n    :param l: An integer representing the left end of the range.\n    :param r: An integer representing the right end of the range.\n    :return: True if all the bits are set in the given range, else False.\n    \"\"\"\n\n    mask = (2 ** r - 1) - (2 ** (l - 1) - 1)  # calculate the mask\n\n    if (n & mask) == n:  # check if all the bits in the given range are set\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments, n, l and r.\n    n is the integer to be checked for the unset bits.\n    l is the leftmost bit position in the range.\n    r is the rightmost bit position in the range.\n    It returns True if all the bits in the range [l, r] are set to 1 in n, else it returns False.\n    '''\n    mask = 0\n    for i in range(l, r+1):\n        mask |= (1 << i)  # Set the bit at position i\n    return (n & mask) == mask  # Check if all bits in the range are set in n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    # Function to check whether all the bits are set in the given range or not\n    if n == 0: \n        return False\n    else:\n        # Check whether all the bits are set in the given range or not\n        if (n & (1 << r)) == 0 and (n & (1 << l-1)): \n            return True\n        else:\n            return False"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Find the indices of the negative and positive elements\n    neg_idx = [i for i in range(n) if arr[i] < 0]\n    pos_idx = [i for i in range(n) if arr[i] >= 0]\n\n    # Re-arrange the elements according to the order specified in the problem statement\n    res = [0] * n\n    res[::2] = neg_idx\n    res[1::2] = pos_idx\n\n    # Copy the rearranged elements back to the original array\n    for i in range(n):\n        arr[i] = arr[res[i]]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers to keep track of the first negative and positive elements\n    neg = 0\n    pos = 0\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is negative, swap it with the first negative element and move the pointer for negative elements to the right\n        if arr[i] < 0 and i > neg:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n        # If the current element is positive, move the pointer for positive elements to the right\n        elif arr[i] >= 0 and i > pos:\n            pos += 1\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # find the indices of the first n negative and positive elements\n    neg_indices = []\n    pos_indices = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n    \n    # swap the negative elements so that they appear before positive ones\n    for i in range(len(neg_indices)):\n        for j in range(i+1, len(pos_indices)):\n            # swap arr[neg_indices[i]] and arr[pos_indices[j]]\n            arr[neg_indices[i]], arr[pos_indices[j]] = arr[pos_indices[j]], arr[neg_indices[i]]\n    \n    # return the rearranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes an array and an integer n as input. It rearranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = [i for i in arr[:n] if i < 0]\n    positives = [i for i in arr[:n] if i >= 0]\n    arr[:n] = negatives + positives\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the indices of the negative and positive elements in the first n elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n    \n    # Re-arrange the array by swapping negative and positive elements\n    for i in range(n):\n        if i < len(neg_indices):\n            arr[i], arr[neg_indices[i]] = arr[neg_indices[i]], arr[i]\n        elif i >= len(neg_indices) and i < n-len(pos_indices):\n            arr[i] = 0\n        else:\n            arr[i], arr[pos_indices[i-n+len(pos_indices)]] = arr[pos_indices[i-n+len(pos_indices)]], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    negatives.sort(reverse=True)\n    positives.sort()\n    arr[:n] = negatives + positives\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left, right = 0, n-1\n\n    # Traverse the array from both ends and swap elements to preserve relative order\n    while left < right:\n        if arr[left] < 0 and arr[right] >= 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] >= 0:\n            left += 1\n        else:\n            right -= 1\n    \n    # Return the rearranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    neg_indices = [i for i, x in enumerate(arr[:n]) if x < 0]\n    pos_indices = [i for i, x in enumerate(arr[:n]) if x >= 0]\n    neg_arr = sorted(arr[:n], key=lambda x: (x < 0, abs(x)))\n    pos_arr = sorted(arr[:n], key=lambda x: (x >= 0, abs(x)))\n    for i in range(n):\n        if i < len(neg_indices):\n            arr[i] = neg_arr[i]\n        elif i < n:\n            arr[i] = pos_arr[i-len(neg_indices)]\n        else:\n            break\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    sorted_arr = negatives + positives\n    for i in range(n):\n        arr[i] = sorted_arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the array in non-increasing order of absolute value\n    arr.sort(key=lambda x: abs(x), reverse=True)\n\n    # Create two pointers to the beginning and end of the array\n    i, j = 0, n - 1\n\n    # Iterate over the array and swap negative and positive elements\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        else:\n            j -= 1\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a given string with a given character.\n\n    Args:\n    str1 (str): The string that needs to be modified.\n    char (str): The character that will replace the blank spaces.\n\n    Returns:\n    str: The modified string.\n\n    \"\"\"\n    # Splitting the string into a list of words.\n    words = str1.split()\n\n    # Replacing the blank spaces in each word with the given character.\n    for i in range(len(words)):\n        words[i] = words[i].replace(\" \", char)\n\n    # Joining the modified words back into a string.\n    modified_str = \" \".join(words)\n\n    return modified_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n\n    :param str1: A string to replace blank spaces.\n    :param char: A character to replace blank spaces with.\n    :return: A string with replaced blank spaces.\n    \"\"\"\n\n    # Convert string to a list of characters\n    str_list = list(str1)\n\n    # Replace blank spaces with the specified character\n    for i in range(len(str_list)):\n        if str_list[i] =='':\n            str_list[i] = char\n\n    # Convert the list back to a string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with a specified character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the given string with the given character and returns the modified string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a specified character.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces all blank spaces in the given string with the given character and returns the modified string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in the string with the character.\n\n    Args:\n    str1 (str): The input string.\n    char (str): The character to replace blank spaces.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the character.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list of the n largest items in lst.\n    \"\"\"\n    return [heapq.heappop(lst) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in list1[n:]:\n        if i > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Takes a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius of a cylinder and its height as input and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurfacearea = 2 * 3.14 * r * h\n    return lateralsurfacearea"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function finds the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    Computes the lateral surface area of a cylinder.\n\n    Parameters:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder given the radius and height of the cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface_area\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\n\nprint(f\"The lateral surface area of the cylinder is {lateralsuface_cylinder(r,h):.2f}\")"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3  # volume of a cube = side length cubed\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # calculate the volume using the formula V = l^3\n    return volume  # return the calculated volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # volume of cube is the cube of its side length\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    mask = 0b1010101010101010 # binary mask to set even bits to 1\n    return n ^ mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function sets all even bits of a given number.\n    '''\n    # Loop through all even bits\n    for i in range(0, 32, 2):\n        # Check if the current bit is set\n        if n & (1 << i):\n            # Set the current bit\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary = bin(n)[2:]\n    # Initialize the result variable\n    result = 0\n    # Loop through the binary string\n    for bit in binary:\n        # Check if the bit is even\n        if int(bit) % 2 == 0:\n            # If it is even, set the corresponding bit in the result variable\n            result |= (1 << int(binary[::-1].index(bit)))\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    while n > 0:\n        if n & 1 == 0:\n            n &= ~(1 << 1)\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \n    Parameters:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The input number with all even bits set.\n    \"\"\"\n    # Define a mask that has all even bits set to 1 and all odd bits set to 0.\n    mask = 0xAAAAAAAA\n    # Apply the mask to the input number to set all even bits.\n    return n & mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number to 1.\n    '''\n    mask = 0xAAAAAAAA  # Binary number with 10101010 in every even bit position\n    return n | mask  # OR operation between n and mask sets even bits of n to 1"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Set all even bits of a given number.\n    '''\n    # check if n is even or odd\n    if n % 2 == 0:\n        # set all even bits to 1\n        n |= 0x5555555555555555\n    else:\n        # set all even bits to 0\n        n &= 0xAAAAAAAAAAAAAAAA\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to keep track of the set bits\n    set_bits = 0\n    # loop through all even bits (i.e., bits 0, 2, 4, and 6)\n    for i in range(0, 32, 2):\n        # check if the bit is set\n        if n & (1 << i):\n            # set the bit in the set_bits variable\n            set_bits |= (1 << i)\n    # return the result\n    return set_bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    # Using bitwise AND operator to check if the bit is even or odd\n    mask = 0b10101010101010101010101010101010\n    # Applying the bitwise AND operator with the mask to get the even bits\n    even_bits = n & mask\n    # Using bitwise OR operator to set the even bits to 1\n    result = even_bits | 0b11111111111111111111111111111111\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter method to count the occurrences of each tuple\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n            \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            substring = str[i:j]\n            if len(substring) > 0: \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if len(str[i:j]) > 0: \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if len(string[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings of that string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    This function takes in two positive integers m and n, and returns the total number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return m*(m+1)//2\n    else:\n        total = 0\n        for i in range(1,m//2+1):\n            total += get_total_number_of_sequences(m-2*i,n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2 or n < 1:\n        return 0\n    \n    if n == 1:\n        return m\n    \n    count = 0\n    for i in range(1, m//2+1):\n        count += get_total_number_of_sequences(m-i, n-1)\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m//2 + 1\n    \n    total_sequences = 0\n    for i in range(2,m//2+1):\n        total_sequences += get_total_number_of_sequences(i,n-1)\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list of the first n elements\n    seq = [1] * n\n    \n    # Initialize a list to store the total number of sequences\n    count = [1] * (m + 1)\n    \n    # Calculate the total number of sequences for each element\n    for i in range(1, m):\n        count[i + 1] = sum(count[i] for i in range(max(seq[j], 2 * seq[j - 1]), m + 1))\n    \n    # Calculate the total number of sequences for the given length n\n    total = sum(count[seq[j]] for j in range(n))\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    if n==1: \n        return m\n    else: \n        total = 0 \n        for i in range(2,m): \n            total += get_total_number_of_sequences(i,n-1) \n        return total "
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        prev_seq_count = get_total_number_of_sequences(m, n-1)\n        current_seq_count = m - 2**(n-2) + 1\n        return prev_seq_count + current_seq_count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        prev = 1\n        count = 0\n        for i in range(2, m+1):\n            if i >= prev*2:\n                count += m - i + 1\n                prev = i\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m // 2 + 1\n    else:\n        total_count = 0\n        for i in range(1, m // 2 + 1):\n            total_count += get_total_number_of_sequences(i, n - 1)\n        return total_count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n\n    total = 0\n    prev_num = 1\n    for i in range(2, n+1):\n        total += (m - prev_num + 1) * get_total_number_of_sequences(prev_num*2, n-i)\n        prev_num *= 2\n\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        prev = get_total_number_of_sequences(m, n-1)\n        return prev * (m - 2 * prev + 2)"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError('list1 must be at least as long as list2')\n    \n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_chars(s):\n    \"\"\"\n    Counts the total number of characters in a string.\n    :param s: a string\n    :return: an integer\n    \"\"\"\n    return len(s)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N) == int(math.sqrt(N)):  # if N is already a perfect square\n        return N + 1  # return the next perfect square\n    else:\n        return int(math.ceil(math.sqrt(N)))**2  # return the square of the next integer square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return (int(math.sqrt(N)) + 1)**2\n    else:\n        return int((math.sqrt(N) + 1)**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return int(N)\n    else:\n        return int(math.ceil(math.sqrt(N))**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    # If the square root is an integer, then it is a perfect square\n    if root.is_integer():\n        return int(root + 1)**2\n    else:\n        return int((root + 1)**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N and returns the next perfect square greater than N.\n    \"\"\"\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Round up the square root to the nearest integer\n    root = math.ceil(root)\n    # Calculate the next perfect square\n    next_square = root ** 2\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int(math.sqrt(N) + 1) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    return int(math.ceil(math.sqrt(N))**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int(root+1)**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root*root == N:\n        return N+1\n    else:\n        return root*root + (root+1)*(root+1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N) + 1\n    return int(x ** 2)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Create a table to store the maximum sum of a bitonic subsequence ending at each index\n    dp = [0] * n\n    \n    # Initialize the table for the first element\n    dp[0] = arr[0]\n    \n    # Fill the table for the remaining elements\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n    \n    # Find the maximum sum of a bitonic subsequence in the table\n    max_sum = dp[0]\n    for i in range(1, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Create a list to store the maximum sum of bitonic subsequences ending at each index\n    dp = [0] * n\n    # Initialize the first two elements of dp with the first two elements of the array\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # Fill in the rest of the dp list using the recurrence relation\n    for i in range(2, n):\n        # If the current element is greater than the previous element, add it to the maximum sum of the previous subsequence\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i], dp[i-1] + arr[i])\n        # Otherwise, find the maximum sum of the subsequence that ends at the previous element\n        else:\n            for j in range(i-1, -1, -1):\n                if arr[j] < arr[i]:\n                    dp[i] = max(dp[i], dp[j] + arr[i])\n                    break\n\n    # The maximum sum of bitonic subsequence is the maximum element in the dp list\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the first row of the dp table\n    for i in range(n):\n        dp[i][i] = arr[i]\n        \n    # Fill the rest of the dp table\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[j]\n            \n    # Return the maximum value in the last row of the dp table\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # build increasing and decreasing sequences separately\n    inc_seq = [arr[0]]\n    dec_seq = [arr[0]]\n    for i in range(1, n):\n        if arr[i] > inc_seq[-1]:\n            inc_seq.append(arr[i])\n        else:\n            dec_seq.append(arr[i])\n    \n    # calculate max sum of increasing and decreasing sequences separately\n    inc_sum = sum(inc_seq)\n    dec_sum = sum(dec_seq)\n    if inc_sum > dec_sum:\n        return inc_sum\n    else:\n        return dec_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], arr[i] + dp[i-2])\n    return dp[n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for i in range(n)]\n    max_sum = arr[0]\n    for i in range(1, n):\n        dp[i][i] = arr[i]\n        if dp[i][i-1] > 0:\n            dp[i][i] += dp[i-1][i-1]\n        if max_sum < dp[i][i]:\n            max_sum = dp[i][i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Create a list to store the maximum sum of the increasing subsequence ending at each index\n    inc = [0] * n\n\n    # Initialize the maximum sum of the increasing subsequence ending at the first index\n    inc[0] = arr[0]\n\n    # Fill in the rest of the list using dynamic programming\n    for i in range(1, n):\n        # Include the current element in the increasing subsequence\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n\n    # Create a list to store the maximum sum of the decreasing subsequence ending at each index\n    dec = [0] * n\n\n    # Initialize the maximum sum of the decreasing subsequence ending at the last index\n    dec[n-1] = arr[n-1]\n\n    # Fill in the rest of the list using dynamic programming\n    for i in range(n-2, -1, -1):\n        # Include the current element in the decreasing subsequence\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n\n    # Find the maximum sum of any bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        # Check if the current element is part of a bitonic subsequence\n        if i == 0 or (i > 0 and arr[i-1] < arr[i] < arr[i+1]):\n            # Add the maximum sum of the increasing subsequence ending at the current index to the maximum sum of the decreasing subsequence ending at the current index\n            max_sum = max(max_sum, inc[i] + dec[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    \n    # Initialize the first element of the dp array\n    if arr[0] > arr[1]:\n        dp[0] = arr[0]\n    else:\n        dp[0] = arr[1]\n    \n    # Fill the dp array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = dp[0]\n    for i in range(1, n):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the babylonian method.\n    '''\n    approx = number / 2  # initialize the approximation to the middle of the range\n    while True:\n        new_approx = (approx + number / approx) / 2  # compute the new approximation\n        if abs(new_approx - approx) < 0.0001:  # check if the approximation has converged\n            return new_approx  # return the final approximation\n        approx = new_approx  # update the approximation for the next iteration"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2 # Initial guess\n    while abs(guess**2 - number) >= 0.00001: # Continuously refine the guess until the difference between the guess squared and the number is less than 0.00001\n        guess = (guess + number / guess) / 2 # Babylonian method\n    return guess # Return the computed square root"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the initial guess to the input number\n    guess = number\n    \n    # Iterate until the difference between the guess squared and the input number is less than 0.000001\n    while abs(guess**2 - number) > 0.000001:\n        # Calculate the new guess as the average of the input number and the guess squared\n        guess = (guess + number/guess) / 2\n        \n    # Return the final guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    x = number\n    while True:\n        y = (x + number / x) / 2\n        if abs(x - y) < 0.000001:\n            break\n        x = y\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2.0 # initial guess\n    while abs(guess**2 - number) > 0.000001: # loop until convergence\n        guess = (guess + number / guess) / 2.0 # improve guess\n    return guess # return the result"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2 # Start with a guess of half the number\n    while abs(guess**2 - number) >= 0.001: # Keep iterating until the difference between the guess squared and the number is less than 0.001\n        guess = (guess + number / guess) / 2 # Use the babylonian method to improve the guess\n    return guess # Return the final guess as the square root"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute square root of a number using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        guess = number/2\n        while abs(guess**2 - number) > 0.00001:\n            guess = (guess + number/guess)/2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.00001:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    epsilon = 0.00001  # set the desired level of precision\n    guess = number / 2  # start with an initial guess of half the number\n\n    while abs(guess*guess - number) >= epsilon:\n        # use the Babylonian method to improve the guess\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n\n    # Return length of LPS\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n\n    # Return the maximum value in dp[][]\n    return max(max(row) for row in dp)"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store lengths of palindrome subsequences\n    dp = [[0 for i in range(n)] for j in range(n)]\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)] \n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2: # checking for single character substrings \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    # The length of LPS is the bottom-right element of the dp array\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store lengths of palindromic subsequences\n    dp = [[0]*n for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store lengths of palindromic subsequences\n    # dp[i][j] will store the length of LPS in str[i...j]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the lengths of the palindromic subsequences\n    # each row i represents the length of the LPS up to index i of the string\n    # each element in the row represents the length of the LPS up to that index\n    # we'll initialize the table with 1s since a single character is a palindrome of length 1\n    table = [[1] * n for _ in range(n)]\n    # iterate over the table and fill in the rest of the values\n    # for each element in the table, we'll check if the LPS up to that index is valid\n    # for example, if the LPS up to index i is valid and the character at index i is the same as the character at index j,\n    # then the LPS up to index j must be valid as well, so we can use the value from the diagonal element\n    # to update the value for the current element\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 2:\n                # if the LPS is of length 2 and the characters at i and j are the same, then the LPS is of length 3\n                table[i][j] = 3\n            elif str[i] == str[j]:\n                # if the LPS is of length greater than 2 and the characters at i and j are the same,\n                # then the LPS up to index j is the same as the LPS up to index j-1, so we can use the value from the element above and left\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                # if the characters at i and j are different, then the LPS up to index j is the same as the LPS up to index i+1\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    # return the LPS length for the entire string\n    return table[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    h_sum = 0\n    for i in range(1, n+1):\n        h_sum += 1/i\n    return h_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1 / i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n+1))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the common elements present in both the arrays.\n    '''\n    # using set intersection method to find the common elements\n    return set(array_nums1).intersection(set(array_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a dictionary to store the frequency of each number in array_nums1\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n\n    # Iterate through array_nums2 and check if each number is present in freq_dict1\n    result = []\n    for num in array_nums2:\n        if num in freq_dict1 and freq_dict1[num] > 0:\n            result.append(num)\n            freq_dict1[num] -= 1\n\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Create an empty set to store the intersection of two arrays\n    intersection = set()\n    # Loop through the first array and check if each element is present in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.add(num)\n    # Return the intersection set\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function will find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    # Create an empty list to store the intersection of the two arrays\n    intersection = []\n    # Iterate through the first array\n    for num in array_nums1:\n        # Check if the current number is present in the second array\n        if num in array_nums2:\n            # Add the number to the intersection list\n            intersection.append(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Count the number of occurrences of an element in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and returns a new list with the element inserted before each element in the list.\n    \"\"\"\n    new_list = []\n    for i in lst:\n        new_list.append(elem)\n        new_list.append(i)\n    return new_list[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as inputs and returns a new list with each element of the original list prepended by the input element.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(element + item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element of a list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result[1:]"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        print(f\"Polar form of {num} is {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Converts complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    results = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        results.append((polar[0], polar[1]))\n    return results"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords\n"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coordinates.append(polar)\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar_coord = cmath.polar(num)\n        polar_coords.append(polar_coord)\n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as an argument and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of integer elements in it.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if type(elem) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return list(comb)"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(i) for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num ** 0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function to count the number of prime numbers less than a given number n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # initialize a counter for the number of prime numbers\n    count = 0\n    \n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # assume the current number is prime\n        is_prime = True\n        \n        # loop through all numbers from 2 to the square root of i\n        for j in range(2, int(i**0.5) + 1):\n            # if i is divisible by j, it is not prime\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # if i is prime, increment the counter\n        if is_prime:\n            count += 1\n    \n    # return the count of prime numbers\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Create a boolean list of size n+1 and initialize all elements as True.\n    primes = [True] * (n+1)\n\n    # 0 and 1 are not prime numbers.\n    primes[0] = primes[1] = False\n\n    # Traverse the list from 2 to the square root of n.\n    for i in range(2, int(n**0.5)+1):\n        # If primes[i] is still True, then it is a prime number.\n        if primes[i]:\n            # Mark all multiples of i as False, because they cannot be prime numbers.\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Count the number of prime numbers.\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes two numbers as input and returns a tuple with the second number followed by the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in (test_tup1, test_tup2):\n        max_tup = max(max_tup, tup)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) >= len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    for i in range(len(max_tup)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n            break\n        elif test_tup2[i] > test_tup1[i]:\n            max_tup = test_tup2\n            break\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Convert tuples to lists to allow for element-wise comparison\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Compare each element of the two lists and return the maximum tuple\n    result_tup = ()\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            result_tup = test_tup1\n        elif list1[i] < list2[i]:\n            result_tup = test_tup2\n        else:\n            result_tup = test_tup1 # Tie-breaking\n        return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(test_tup1), max(test_tup2))"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        if sum(tup) > sum(max_tup):\n            max_tup = tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the maximum element in both tuples\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n\n    # Return the larger of the two maximum elements\n    if max_tup1 > max_tup2:\n        return max_tup1\n    else:\n        return max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize variables for tuples\n    tup1_sum = sum(test_tup1)\n    tup2_sum = sum(test_tup2)\n\n    # Check which tuple has a greater sum\n    if tup1_sum > tup2_sum:\n        return test_tup1\n    elif tup2_sum > tup1_sum:\n        return test_tup2\n    else:\n        return None # Return None if both tuples are equal"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            sum_tup = test_tup1[i] + test_tup2[j]\n            if sum_tup > max_sum:\n                max_tup = (test_tup1[i], test_tup2[j])\n                max_sum = sum_tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0,)*len(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup[i] = test_tup1[i]\n        else:\n            max_tup[i] = test_tup2[i]\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if sum(test_tup1) > sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        prime_list = [2, 3]\n        i = 3\n        while len(prime_list) < n:\n            is_prime = True\n            for j in prime_list:\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_list.append(i)\n            i += 2\n        return prime_list[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # Initialize the sequence of primes\n        primes = [2, 3]\n        # Keep track of the number of primes found so far\n        count = 2\n        # Keep track of the previous prime found\n        prev_prime = 3\n        # Keep track of the current candidate prime\n        candidate = 5\n        \n        # Loop until we find the nth prime\n        while count < n:\n            # Check if the candidate is prime\n            is_prime = True\n            for prime in primes:\n                if candidate % prime == 0:\n                    is_prime = False\n                    break\n            # If the candidate is prime, add it to the list and increment count\n            if is_prime:\n                primes.append(candidate)\n                count += 1\n            # Generate the next candidate prime by adding 2 to the previous one\n            candidate = prev_prime + 2\n            # Update the previous prime\n            prev_prime = primes[-1]\n        \n        # Return the nth prime found\n        return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n == 1:\n        return 1000000\n    elif n == 2:\n        return 1000009\n    else:\n        prev_prime = newman_prime(n - 1)\n        prev_prev_prime = newman_prime(n - 2)\n        if prev_prime == prev_prev_prime:\n            return prev_prime + 2\n        else:\n            return prev_prime + prev_prev_prime - 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    else:\n        prev1 = 3\n        prev2 = 5\n        prev3 = 7\n        for i in range(4, n+1):\n            curr = (prev1 * prev2 * prev3) - (prev2**2) - (prev3**2)\n            if curr > 1 and is_prime(curr):\n                return curr\n            else:\n                prev1 = prev2\n                prev2 = prev3\n                prev3 = curr\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 3\n    count = 1\n    while count < n:\n        p += 2\n        sqrt_p = int(p ** 0.5)\n        for i in range(3, sqrt_p + 1, 2):\n            if p % i == 0:\n                break\n        else:\n            count += 1\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i) and is_prime(5*i-1) and is_prime(5*i+1):\n            count += 1\n        i += 1\n    return 5*i-1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        i += 2\n        if is_prime(i) and is_prime(4*i**2 + 2*i - 1):\n            count += 1\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        prev_prime = 2\n        curr_prime = 3\n        count = 4\n        while count <= n:\n            next_prime = prev_prime + curr_prime - 1\n            if all(next_prime % i!= 0 for i in range(2, int(next_prime**0.5) + 1)):\n                prev_prime = curr_prime\n                curr_prime = next_prime\n                count += 1\n            else:\n                curr_prime += 2\n        return curr_prime"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 3\n        while True:\n            if is_prime(i) and is_prime(i+2) and is_prime(i+6):\n                if n == 3:\n                    return i\n                else:\n                    n -= 1\n            i += 1"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i / j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    \n    # Iterate over both tuples and perform division operation element-wise\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"L is greater than the length of the list\"\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"List length is less than L\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Returning the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert human years to dog years\n    dog_years = h_age * 7\n    \n    # round the result to the nearest integer\n    return round(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dogs_years = h_age * 7\n    return age_in_dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 7"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to seconds\n    h_age_sec = h_age * 365 * 24 * 60 * 60\n    \n    # Convert seconds to dog's age in dog's years\n    dog_age_dogy = h_age_sec / 7\n    \n    return dog_age_dogy"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round(h_age * 7)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 7\n    dog_years = round(years)\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list S and an integer step and splits the list S into smaller lists for every stepth element,\n    returning a list of the resulting sublists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list into sublists of length `step`.\n    \"\"\"\n    sublists = []\n    for i in range(0, len(S), step):\n        sublists.append(S[i:i+step])\n    return sublists"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list S into sublists of length step.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    result = [[] for i in range(n)]\n    for i in range(n):\n        result[i] = S[i*step:(i+1)*step]\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Splits a list S into sublists of length step, starting from the beginning of the list.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the length of a cube as an argument and returns the lateral surface area of the cube.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its lateral surface area.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its lateral surface area.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface_area = 6 * l ** 2\n    return lateralsurface_area"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a cube side length as an input and returns the lateral surface area of the cube.\n    '''\n    return 6*(l**2)"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n*2, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count <= n:\n        print(num, end=' ')\n        num += 1\n        count += 1\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    count = 1\n    star_num = 0\n    while count <= n:\n        star_num += 1\n        for i in range(1, star_num):\n            print(\"*\", end=\" \")\n        print()\n        count += 1\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    \n    while count <= n:\n        print(star_num, end=\" \")\n        star_num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    count = 1\n    while count < n:\n        num += 1\n        count = count_stars(num)\n    return num\n\ndef count_stars(num):\n    '''\n    Helper function to count the number of stars in a given number.\n    '''\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        num //= 2\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    while True:\n        if count*2 == n:\n            return count\n        elif count*2 < n:\n            count += 1\n        else:\n            count -= 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    This function finds then'th star number. \n    '''\n    if n < 1: \n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1: \n        return \"1\"\n    else: \n        return find_star_num(n-1) + \"*\" + str(n)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    \n    while count <= n:\n        print(num, end=\" \")\n        num += 1\n        count += 1\n        \n    print()"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n\n    :param n: the index of the star number to find (1-based)\n    :return: then'th star number\n    \"\"\"\n    result = 1\n    for i in range(2, n+1):\n        result += 2 * i - 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as an argument and returns then'th star number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        count += 1\n        num += 2\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    star_num = 1\n    while i <= n:\n        print(star_num)\n        i += 1\n        star_num += (2*i - 1)\n    return star_num"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a single character as input and returns the ascii value of the character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a single character as input and returns the ASCII value of the character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ascii value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Returns the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions of the list.\n\n    :param arr: list of integers\n    :return: sum of even numbers at even positions of the list\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2): \n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    i = 2\n    while i <= 2*n:\n        even_sum += i**5\n        i += 2\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    \n    for i in range(1, n+1, 2):\n        even_sum += i**5\n        \n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i**5\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum\n\nprint(even_Power_Sum(10)) # Output: 14400"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n            count += 1\n        else:\n            count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        num = count * 2 + 2\n        total += num ** 5\n        count += 1\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    num = 2\n    for i in range(n):\n        result += num**5\n        num += 2\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tpl in test_list:\n        rear_list.append(tpl[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    s = 0\n    for i in range(0, n+1, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients for a positive integer n.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(1, n+1, 2):\n        coeff = math.comb(n, k)\n        sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math  \n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for k in range(1, n+1, 2):\n        coeff = math.comb(n, k)\n        even_sum += coeff\n    return even_sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The sum of even index binomial coefficients up to {n} is {even_binomial_Coeff_Sum(n)}\")"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_sum = 0\n    for i in range(0, n+1, 2):\n        binomial = math.comb(n, i)\n        even_sum += binomial\n    return even_sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Returns the sum of even index binomial coefficients for n\n    '''\n    return sum([math.comb(n, 2*i) for i in range(n//2 + 1)])"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(0, n+1, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder and returns its volume.\n    \"\"\"\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r ** 2 * h\n\nprint(volume_cylinder(3, 4))"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filters the given dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n    return count - 1"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[len(test_tup)-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[len(test_tup)-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            return count\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = n * (3 * n - 1) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number is a decagonal number else False.\n    A decagonal number is a number that can be formed by concatenating the numbers from 0 to 9 in a special pattern.\n    \"\"\"\n    decagonal = [1, 56, 455, 3649, 29444, 239505, 1975245, 16589035, 142857145, 1268062305]\n    if n in decagonal:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 1\n    while count <= n:\n        decagonal += count\n        count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # calculate the nth decagonal number using the formula\n    decagonal = 10 * n * n + 1\n    # return the result as a string\n    return str(decagonal)"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 56\n    elif n == 3:\n        return 156\n    else:\n        return is_num_decagonal(n-1) + (n-1)*10"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    \n    while count < n:\n        num += 1\n        decagonal = num * (10**n)\n        if is_digit_sum_divisible_by_9(decagonal):\n            count += 1\n    \n    return decagonal\n    \ndef is_digit_sum_divisible_by_9(num):\n    '''\n    Helper function to check if the sum of the digits of a number is divisible by 9.\n    '''\n    return sum(int(digit) for digit in str(num)) % 9 == 0"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = int(n * (3 * n - 1) / 2)\n    return num\n\nn = int(input(\"Enter a number: \"))\ndec_num = is_num_decagonal(n)\nprint(f\"The {n}th decagonal number is {dec_num}.\")"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if the nth decagonal number exists, and False otherwise.\n    '''\n    # Initialize a variable to store the nth decagonal number\n    decagonal_num = 0\n    \n    # Loop through the numbers 1 to n, adding each decagonal number to the decagonal_num variable\n    for i in range(1, n+1):\n        decagonal_num += i*(10**(i-1))\n    \n    # Check if the nth decagonal number exists by comparing it to the actual value\n    if decagonal_num == 10**n-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 10\n        count += 1\n        if is_digit_sum_divisible_by_3(num):\n            count -= 1\n            continue\n        if is_digit_sum_divisible_by_5(num):\n            count -= 1\n            continue\n    return num\n\ndef is_digit_sum_divisible_by_3(num):\n    digit_sum = sum(int(digit) for digit in str(num))\n    return digit_sum % 3 == 0\n\ndef is_digit_sum_divisible_by_5(num):\n    digit_sum = sum(int(digit) for digit in str(num))\n    return digit_sum % 5 == 0"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 10 * n * (n + 1)\n    return decagonal"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if all elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function returns True if all the elements in the given list are unique,\n    otherwise it returns False.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a given list are unique or not.\n    \"\"\"\n    # Create an empty set to store the unique elements of the list\n    unique_set = set()\n\n    # Iterate over the elements of the list\n    for elem in test_list:\n        # If the element is already in the set, return False (not unique)\n        if elem in unique_set:\n            return False\n        # If the element is not in the set, add it to the set\n        else:\n            unique_set.add(elem)\n\n    # If all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    :param test_list: The input list for which we need to check for unique elements.\n    :return: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Using a set to store unique elements\n    unique_set = set(test_list)\n    # Checking if the length of the set is equal to the length of the input list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    It returns True if all elements are unique, otherwise, it returns False.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    # Checking if the lengths of the two lists are same or not\n    if len(nums1)!= len(nums2):\n        return \"The lists are of different lengths.\"\n    else:\n        # Subtracting the corresponding elements of the two lists and storing the result in a new list\n        sub_list = []\n        for i in range(len(nums1)):\n            sub_list.append(nums1[i] - nums2[i])\n        return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise subtraction of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    while n > 0:\n        digit = n % 10\n        if freq[digit] > digit:\n            return False\n        freq[digit] += 1\n        n //= 10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    # Convert the integer to a string to count its digits\n    n_str = str(n)\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = {}\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # Check if the digit is already in the dictionary\n        if digit in digit_freq:\n            # If it is, increment its frequency count\n            digit_freq[digit] += 1\n        else:\n            # If it isn't, add it to the dictionary with a frequency of 1\n            digit_freq[digit] = 1\n    # Iterate through each digit in the string again\n    for digit in n_str:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if digit_freq[digit] > int(digit):\n            # If it isn't, return False (not valid)\n            return False\n    # If all digits have a frequency less than or equal to the digit itself, return True (valid)\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to string to access individual digits\n    digits = str(n)\n    # Initialize a list to store the frequency of each digit\n    frequency = [0] * 10\n    # Iterate through each digit in the integer and update the frequency list\n    for digit in digits:\n        frequency[int(digit)] += 1\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if digit > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each digit in the string\n    for digit in num_str:\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency\n        else:\n            freq[digit] += 1\n\n    # Loop through each digit in the string again\n    for digit in num_str:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > int(digit):\n            return False\n\n    # If all the digits pass the test, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digit > sum(digits):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string to count the frequency of each digit\n    num_str = str(n)\n    digit_freq = [0] * 10\n\n    for digit in num_str:\n        digit_freq[int(digit)] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert integer to string\n    num = str(n)\n    \n    # Initialize dictionary to store frequency of each digit\n    freq = {}\n    \n    # Iterate through each digit in the string and update frequency in dictionary\n    for digit in num:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Iterate through each key-value pair in the dictionary and check if the frequency is less than or equal to the digit itself\n    for key, value in freq.items():\n        if value > int(key):\n            return False\n    \n    # If all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_count = [0] * 10  # create a list of 10 zeros to store the count of each digit\n\n    while n > 0:\n        digit = n % 10  # get the last digit of the number\n        digit_count[digit] += 1  # increment the count of that digit by 1\n        n //= 10  # remove the last digit from the number\n\n    for digit in digit_count:\n        if digit > digit:  # if the count of the digit is greater than the digit itself\n            return False  # return False since the frequency of each digit is greater than the digit itself\n\n    return True  # return True if all digits have frequency less than or equal to the digit itself\n"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    while n > 0:\n        digit = n % 10\n        if digit == 0:\n            return False\n        if digit > n // 10:\n            return False\n        n //= 10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    n_str = str(n)\n    # Get the frequency of each digit in the integer\n    digit_freq = [n_str.count(str(i)) for i in range(10)]\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for freq in digit_freq:\n        if freq > int(n_str[-1]):\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element as arguments and checks whether all the elements in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1 and list[0] == element:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == item for item in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    :param list: A list of elements\n    :param element: The element to be checked against\n    :return: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element and returns True if all items in the list are equal to the given element, else False.\n    \"\"\"\n    return all(i == elem for i in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function checks whether all elements in a list are equal to a given element.\n    \"\"\"\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(i == elem for i in lst)"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b{2,3})$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return \"Invalid input\"\n\n    # initialize variables\n    max_sum = a[0]\n    current_sum = a[0]\n    max_sum_repeated = max_sum\n\n    # iterate over the array\n    for i in range(1, n):\n        # add the current element to the current sum\n        current_sum += a[i]\n\n        # if the current sum is greater than the previous max sum, update the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum is greater than the max sum repeated, update the max sum repeated\n        if current_sum > max_sum_repeated:\n            max_sum_repeated = current_sum\n\n        # if the current sum exceeds the current array, reset the current sum to zero\n        if i >= k-1:\n            current_sum = current_sum - a[i-(k-1)]\n\n    # return the max sum repeated\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -float('inf')\n    for i in range(k):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += a[j]\n            max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    max_sum = -1\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = sum(a[i:j+1])\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum * k"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array with length = k * n\n    new_a = [0] * (k * n)\n    \n    # Copy the given array k times\n    for i in range(k):\n        new_a[i*n:(i+1)*n] = a\n    \n    # Find the maximum subarray sum\n    max_sum = max_subarray_sum(new_a, k * n)\n    \n    return max_sum\n\ndef max_subarray_sum(a, n):\n    '''\n    Find the maximum subarray sum in an array of size n\n    '''\n    \n    # Initialize variables for the maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Loop through the array and update the current sum and maximum sum\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the given array k times\n    a = a * k\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Traverse through the modified array\n    for i in range(n*k):\n        # Add the i-th element of the modified array to the current sum\n        current_sum += a[i]\n\n        # Update the max sum if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = -float('inf')\n    for i in range(k):\n        sub_array_sum = sum(a)\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n        a = a + a\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Create a new array of length n*k\n    new_array = []\n    for i in range(k):\n        new_array.extend(a)\n    \n    # Find the maximum sum subarray in the new array\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n*k):\n        curr_sum += new_array[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n): \n        temp_sum = a[i] \n        for j in range(1, k): \n            temp_sum += a[i+(j*n)] \n        if temp_sum > max_sum: \n            max_sum = temp_sum \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = 0\n    # Repeat the given array k times and find the maximum sum of subarray\n    for i in range(k):\n        for j in range(n):\n            max_sum += a[j]\n        # reset the sum for the next iteration\n        max_sum = max(max_sum, 0)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n\n    for i in range(k):\n        current_sum = 0\n\n        for j in range(n):\n            current_sum += a[j]\n\n            if i > 0 and current_sum > max_sum:\n                max_sum = current_sum\n            \n            if current_sum < 0:\n                current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(0, n*2, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    # Return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, (n*2)+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n*2+2, 2):\n        # Add the square of each even natural number to the sum of squares\n        sum_of_squares += i**2\n    \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+2, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= 2*n:\n        sum += i**2\n        i += 2\n    return sum\n\nprint(square_Sum(5)) # Output: 55 (2^2 + 4^2 + 6^2 + 8^2 + 10^2)"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length_list = [i]\n            max_length = len(i)\n        elif len(i) == max_length:\n            max_length_list.append(i)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(lst):\n    '''\n    Returns the list with the maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst_i in lst:\n        if len(lst_i) > max_len:\n            max_len = len(lst_i)\n            max_lst = lst_i\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = []\n\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_length_list = [sublist]\n        elif len(sublist) == max_length:\n            max_length_list.append(sublist)\n            \n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    This function finds the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(max(list1, key=len))\n    result = [lst for lst in list1 if len(lst) == max_len]\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # If k is 1, then there is only one way to paint the fence\n    if k == 1:\n        return n\n    \n    # If n is 1, then there is only one way to paint the fence\n    if n == 1:\n        return 1\n    \n    # Initialize a 2D list to store the number of ways of painting the fence\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    \n    # Fill the first row\n    for j in range(k+1):\n        dp[1][j] = 1\n    \n    # Fill the first column\n    for i in range(n+1):\n        dp[i][1] = 1\n    \n    # Fill the remaining cells\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        ans = 0\n        for i in range(1, k+1):\n            ans += count_no_of_ways(n-1, k) * i\n        return ans"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    if n == 0 or k == 0: \n        return 0\n    \n    if n == 1 or k == 1: \n        return 1\n    \n    dp = [[0 for i in range(k)] for j in range(n)] \n\n    for i in range(k): \n        dp[0][i] = 1\n\n    for i in range(1, n): \n        for j in range(1, k): \n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + dp[i-1][j-1]\n\n    return dp[n-1][k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    count = 0\n    for i in range(1, k+1):\n        if n-i >= 0:\n            count += count_no_of_ways(n-i, k)\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    if n < 0 or k < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        res = 0\n        for i in range(k):\n            res += count_no_of_ways(n-1, k) * (k-1)\n        return res"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Create a 2D list to store the number of ways to paint the fence\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Base case when there is only one post\n    for i in range(k+1):\n        dp[1][i] = 1\n    \n    # Fill the rest of the table using dynamic programming\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] # If we choose the first color\n            \n            # If we choose the second color, we need to make sure it is different from the first color\n            if j > 1:\n                dp[i][j] += dp[i-2][j-2]\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    if n == 1: \n        return k \n    if n == 2: \n        return k*k \n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n  \n    for i in range(n+1): \n        for j in range(k+1): \n            if i == 0: \n                dp[i][j] = 0\n            elif i == 1: \n                dp[i][j] = j \n            elif i == 2: \n                dp[i][j] = k*k \n            else: \n                dp[i][j] = dp[i-1][j] \n  \n                for m in range(1, j+1): \n                    if m == 1 or m == j: \n                        dp[i][j] += dp[i-2][j-1] \n                    else: \n                        dp[i][j] += dp[i-2][j-1] - dp[i-2][j-m-1] \n  \n    return dp[n][k] "
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, which represent the number of posts on the fence and the number of colors available.\n    It returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    \"\"\"\n    # Initialize a 2D array to store the number of ways of painting each post\n    dp = [[0] * k for _ in range(n)]\n\n    # Initialize the first and last posts to be painted with the first color\n    dp[0][0] = 1\n    dp[n-1][0] = 1\n\n    # Fill the rest of the array using the following recurrence relation:\n    # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j+1]\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if j < k-1:\n                dp[i][j] += dp[i-1][j+1]\n\n    # Return the sum of all possible ways of painting the fence\n    return sum(dp[i][0] for i in range(n))"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # initialize an array to store the count of ways for each color\n    count = [0] * k\n\n    # base case: if n is 0, there is only one way to paint the fence (with no colors)\n    count[0] = 1\n\n    # base case: if n is 1, there is only one way to paint the fence (with one color)\n    count[1] = 1\n\n    # iterate through the colors (from 2 to k) and calculate the count of ways for each color\n    for i in range(2, k):\n        count[i] = count[i - 1] + (count[i - 2] * (k - 1))\n\n    # return the count of ways for the given fence with n posts and k colors\n    return count[k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    if k == 2:\n        return n*n\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = (k-1)*(dp[i-1]+dp[i-2]) + dp[i-3]\n    return dp[n]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two arguments, n and m, and returns the quotient of n divided by m, rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns the quotient of them rounded down to the nearest integer.\n    '''\n    quotient = n // m  # find the quotient using integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Find the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 'Error: Division by zero.'\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n / m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero.\"\n    else:\n        return n // m"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the value of the missing side\n    third_side = math.sqrt(w**2 + h**2)\n    # return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w**2 + h**2\n    c = math.sqrt(a)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 <= (w+h)**2:\n        return \"The given values cannot form a right angled triangle\"\n    else:\n        a = w**2 + h**2 - (w+h)**2\n        c = math.sqrt(a)\n        return round(c, 2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 > 0:\n        c = math.sqrt(w**2 + h**2)\n        return c\n    else:\n        return \"The given values are not possible to form a right angled triangle.\""
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 < h**2 + w**2:\n        c = math.sqrt(w**2 + h**2)\n        return c\n    else:\n        c = math.sqrt(h**2 + w**2)\n        return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side using the Pythagorean theorem\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as an input and returns the maximum value in the list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function calculates the sum of all divisors of a given number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    This function returns the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    # initialize sum to 0\n    total_sum = 0\n    \n    # iterate through all numbers from 1 to the given number\n    for i in range(1, number+1):\n        # check if the number is a divisor of the given number\n        if number % i == 0:\n            # if it is, add it to the sum\n            total_sum += i\n    \n    # return the total sum of all divisors of the given number\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count += len(arr) - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_Inv_Count(arr):\n    '''\n    This function returns the number of inversions in the given array.\n    '''\n    merge_sort(arr)\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    temp = [0] * n\n    merge_sort(arr, temp, 0, n-1, count)\n    return count\n\ndef merge_sort(arr, temp, start, end, count):\n    if start < end:\n        mid = (start + end) // 2\n        merge_sort(arr, temp, start, mid, count)\n        merge_sort(arr, temp, mid+1, end, count)\n        merge(arr, temp, start, mid, end, count)\n\ndef merge(arr, temp, start, mid, end, count):\n    i = start\n    j = mid+1\n    k = start\n    while i <= mid and j <= end:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            count += mid - i + 1 # Count the number of inversions in this subarray\n            j += 1\n        k += 1\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= end:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(start, end+1):\n        arr[i] = temp[i]"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    temp = [0] * n\n\n    for i in range(n):\n        temp[i] = arr[i]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if temp[i] > temp[j]:\n                inv_count += 1\n                temp[i], temp[j] = temp[j], temp[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\ndef get_Inv_Count(arr): \n    sorted_arr = merge_sort(arr)\n    inversion_count = 0\n    \n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inversion_count += 1\n    \n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function returns the number of inversions in the given array.\n    '''\n    n = len(arr)\n\n    # Divide the array into two halves\n    mid = n // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively count inversions in the left and right halves\n    left_inv = get_Inv_Count(left_half)\n    right_inv = get_Inv_Count(right_half)\n\n    # Count the inversions in the merged array\n    inv_count = 0\n    i = 0\n    j = 0\n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] <= right_half[j]:\n            i += 1\n        else:\n            j += 1\n            inv_count += len(left_half[i:])\n\n    # Add the remaining elements of left_half in the merged array\n    inv_count += sum(left_half[i:])\n\n    # Add the remaining elements of right_half in the merged array\n    inv_count += sum(right_half[j:])\n\n    # Return the total number of inversions\n    return left_inv + right_inv + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Counts the number of inversions in a given array.\n    '''\n\n    n = len(arr)\n\n    # Base case\n    if n <= 1: \n        return arr, 0\n\n    # Recursive case\n    else: \n        mid = n // 2\n        left_arr, left_inv_count = get_Inv_Count(arr[:mid])\n        right_arr, right_inv_count = get_Inv_Count(arr[mid:])\n\n        # Merge the two sorted arrays\n        merged_arr = []\n        inv_count = 0\n        i = 0\n        j = 0\n        while i < len(left_arr) and j < len(right_arr): \n            if left_arr[i] <= right_arr[j]: \n                merged_arr.append(left_arr[i])\n                i += 1\n            else: \n                merged_arr.append(right_arr[j])\n                inv_count += len(left_arr[i:])\n                j += 1\n\n        merged_arr += left_arr[i:]\n        merged_arr += right_arr[j:]\n\n        return merged_arr, inv_count + left_inv_count + right_inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list += flatten_list(sublist)\n        else:\n            flattened_list.append(sublist)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list and returns a flattened list.\n    '''\n    flattened_list = []\n    \n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n            \n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list\n    \"\"\"\n    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Given a nested list, returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list as input and flattens it into a single list.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for elem in list1:\n        if isinstance(elem, list):\n            result.extend(flatten_list(elem))\n        else:\n            result.append(elem)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # create a dictionary to store the frequency of each stock\n    stock_freq = defaultdict(int)\n    # iterate through each stock and its share count\n    for stock, share in stdata:\n        stock_freq[stock] += share\n    # calculate the total number of shares\n    total_shares = sum(stock_freq.values())\n    # iterate through each stock and its frequency\n    max_agg = 0\n    for stock, freq in stock_freq.items():\n        # calculate the aggregate for each stock\n        agg = freq * (total_shares - freq)\n        # update the maximum aggregate if necessary\n        if agg > max_agg:\n            max_agg = agg\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for date, sales, cost in stdata:\n        data[date].append((sales-cost, cost))\n    max_sales = 0\n    for date, sales_cost_list in data.items():\n        temp_max = sum([max(sales_cost_list)[0] for sales_cost_list in sales_cost_list])\n        max_sales = max(max_sales, temp_max)\n    return max_sales"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the frequency of each letter\n    freq = defaultdict(int)\n    \n    # Calculate the frequency of each letter in the string\n    for s, t in stdata:\n        freq[s] += t\n        freq[t] += s\n    \n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n    \n    # Iterate over the dictionary to calculate the maximum aggregate\n    for c, f in freq.items():\n        max_agg = max(max_agg, (f * (f-1)) // 2)\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for elem, val in stdata:\n        freq[elem] += val\n\n    # create a dictionary to store the prefix sums of each sublist\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 0\n    for elem, val in stdata:\n        prefix_sum[elem] += val\n\n    # initialize the maximum aggregate to be zero\n    max_agg = 0\n\n    # iterate over all possible sublists of the given list\n    for i in range(len(stdata)):\n        for j in range(i, len(stdata)):\n\n            # calculate the aggregate for the current sublist\n            curr_agg = prefix_sum[j+1] - prefix_sum[i]\n\n            # update the maximum aggregate if necessary\n            if curr_agg > max_agg:\n                max_agg = curr_agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the count of each student's score in a separate key\n    score_count = defaultdict(int)\n    for student, score in stdata:\n        score_count[student] += score\n    \n    # Initialize a dictionary to store the sum of the scores and the count of students who scored that sum in a separate key\n    score_sum = defaultdict(int)\n    for student, score in stdata:\n        score_sum[score_count[student]] += student\n    \n    # Initialize variables for the maximum aggregate and the count of students who scored that aggregate\n    max_agg = 0\n    max_count = 0\n    \n    # Iterate through the dictionary of sums of scores and counts of students with that score\n    for score, count in score_sum.items():\n        # If the count of students who scored this score is greater than the count of the current maximum aggregate,\n        # update the maximum aggregate and the count of students who scored it\n        if count > max_count:\n            max_agg = score\n            max_count = count\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    n = len(stdata)\n    d = defaultdict(int)\n    for a, b in stdata:\n        d[a] += b\n        d[b] += a\n    for i in range(n):\n        d[i] //= 2\n    max_agg = max(d.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    for elem in stdata:\n        freq[elem] += 1\n\n    # create a dictionary to store the frequency of the pair of elements\n    pair_freq = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            pair_freq[stdata[i], stdata[j]] += 1\n\n    # calculate the maximum aggregate\n    max_agg = -float('inf')\n    for key, val in pair_freq.items():\n        if freq[key[0]] == 1 and freq[key[1]] == 1:\n            max_agg = max(max_agg, val)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for elem, weight in stdata:\n        freq[elem] += weight\n    \n    # calculate the maximum aggregate\n    max_agg = 0\n    for elem in freq:\n        max_agg += freq[elem] * (freq[elem] - 1) // 2\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Group the data by the first element of each tuple\n    data_by_st = defaultdict(list)\n    for x in stdata:\n        data_by_st[x[0]].append(x[1])\n    \n    # Calculate the maximum aggregate for each station\n    max_aggs = {}\n    for st, data in data_by_st.items():\n        max_agg = max(sum(data[i:i+3]) for i in range(len(data)-2))\n        max_aggs[st] = max_agg\n        \n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the count of each student and their total score\n    count_dict = defaultdict(int)\n    total_dict = defaultdict(int)\n    for (student, score) in stdata:\n        count_dict[student] += 1\n        total_dict[student] += score\n\n    # calculate the maximum aggregate\n    max_agg = 0\n    for student in count_dict:\n        max_agg = max(max_agg, total_dict[student] / count_dict[student])\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # generate all binary sequences of length 2n\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)  # convert to binary and pad with leading zeros\n        \n        # check if the first n bits are equal to the last n bits\n        if int(seq[:n], 2) == int(seq[-n:], 2):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    # Initialize a 2D list to store all binary sequences of length 2n\n    seq_list = [[0] * (2 * n) for _ in range(2 ** n)]\n    \n    # Initialize the first n elements of each row to 1, and the last n elements to 0\n    for i in range(2 ** n):\n        seq_list[i][:n] = [1] * n\n        seq_list[i][-n:] = [0] * n\n    \n    # Calculate the sum of the first n and last n bits of each sequence\n    for i in range(2 ** n):\n        first_sum = sum(seq_list[i][:n])\n        last_sum = sum(seq_list[i][-n:])\n        \n        # If the sums are equal, set all bits to 1 (except for the first and last n bits)\n        if first_sum == last_sum:\n            seq_list[i][n:-n] = [1] * (2 * n - 2 * n)\n    \n    # Count the number of sequences that have all bits set to 1\n    count = 0\n    for seq in seq_list:\n        if seq == [1] * len(seq):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        # Convert the binary number to its corresponding decimal number\n        binary = bin(i)[2:].zfill(n)\n        # Convert the decimal number to binary and reverse it\n        reversed_binary = bin(int(binary, 2))[2:].zfill(n)\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if int(binary, 2) + int(reversed_binary, 2) == 2**(2*n) - 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Loop through all binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the integer to binary and split it into two parts of length n\n        bin_seq = bin(i)[2:].zfill(n)\n        \n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum(int(bin_seq[:n])) == sum(int(bin_seq[n:])):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # converting the integer to binary string\n        binary_str = bin(i)[2:]\n        # checking if the first n bits and last n bits are equal\n        if binary_str[:n] == binary_str[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    # check for all possible binary numbers of length 2n\n    for i in range(2**n):\n        # convert the binary number to a string and split it into two parts\n        bin_num = bin(i)[2:].zfill(n)\n        last_n_bits = bin_num[-n:]\n        first_n_bits = bin_num[:-n]\n        # check if the sum of first n bits is same as sum of last n bits\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    \n    # iterate over all binary sequences of length 2n\n    for i in range(2**n):\n        # convert the integer to a binary string with leading zeros\n        bin_str = bin(i)[2:].zfill(n)\n        \n        # compute the sum of first n bits\n        first_sum = sum(int(bit) for bit in bin_str[:n])\n        \n        # compute the sum of last n bits\n        last_sum = sum(int(bit) for bit in bin_str[n:])\n        \n        # if the sums are equal, increment the count\n        if first_sum == last_sum:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:] # convert integer to binary string\n        if len(bin_str) < n:\n            continue # skip if string is less than n bits\n        if bin_str[:n] == bin_str[-n:]: # check if first n bits are same as last n bits\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(2*n)\n        left_sum = sum([int(binary_seq[j]) for j in range(n)])\n        right_sum = sum([int(binary_seq[j]) for j in range(2*n-n, 2*n)])\n        if left_sum == right_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        # Convert decimal to binary string\n        binary_str = bin(i)[2:]\n        # Pad with zeros to make length of binary string 2n\n        binary_str = binary_str.zfill(2*n)\n        # Split binary string into two parts of length n\n        first_half = binary_str[:n]\n        second_half = binary_str[n:]\n        # Check if sum of first n bits is same as sum of last n bits\n        if sum([int(digit) for digit in first_half]) == sum([int(digit) for digit in second_half]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    This function takes a dictionary as input and returns the depth of the dictionary.\n    '''\n    max_depth = 1\n    if isinstance(d, dict):\n        for value in d.values():\n            if isinstance(value, dict):\n                depth += 1\n                max_depth = max(max_depth, dict_depth(value, depth))\n            else:\n                depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or len(d) == 0:\n        return 1\n    else:\n        depth = 1\n        for v in d.values():\n            depth = max(depth, dict_depth(v))\n        return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        depth += 1\n        return max(dict_depth(value, depth) for key, value in d.items())\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n\n    depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Args:\n        d (dict): A dictionary.\n\n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Calculate the index of the element after rotation\n    new_index = (index - ranges[0]) % len(arr)\n    \n    # Rotate the array\n    arr_rotated = arr[new_index:]+arr[:new_index]\n    \n    # Calculate the index of the element after rotations\n    final_index = (rotations + index - ranges[0]) % len(arr)\n    \n    # Return the element at the final index\n    return arr_rotated[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n    \"\"\"\n    # Find the number of elements to skip in the array\n    skip = index - ranges[rotations]\n\n    # If skip is positive, we need to move the elements of the array to the left\n    if skip > 0:\n        # Slice the array to rotate the elements to the left\n        arr = arr[skip:] + arr[:skip]\n\n    # If skip is negative, we need to move the elements of the array to the right\n    elif skip < 0:\n        # Slice the array to rotate the elements to the right\n        arr = arr[-skip:] + arr[:-skip]\n\n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # calculate the actual index after rotations\n    actual_index = index + rotations\n    \n    # check if the index is within the range of the array\n    if actual_index < 0 or actual_index >= len(arr):\n        return -1\n    \n    # calculate the new index based on the range\n    new_index = actual_index - ranges\n    \n    # check if the new index is within the range of the array\n    if new_index < 0 or new_index >= len(arr):\n        return -1\n    \n    # return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Getting the length of the array and the number of rotations to perform\n    n = len(arr)\n    rotations = rotations % n\n\n    # Getting the start and end indices of the array to search\n    start_index = 0\n    end_index = n - 1\n\n    # Performing the required rotations\n    for i in range(rotations):\n        temp = arr[start_index]\n        for j in range(start_index, end_index):\n            arr[j] = arr[j+1]\n        arr[end_index] = temp\n\n    # Performing binary search to find the element at the given index\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == index:\n            return mid\n        elif arr[mid] < index:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # If element is not found, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the number of elements in each range\n    range_sizes = [end - start + 1 for start, end in ranges]\n\n    # Calculate the total number of elements in the array\n    num_elements = sum(range_sizes)\n\n    # Calculate the cumulative sum of the range sizes\n    range_sizes_cumulative = [0] + list(np.cumsum(range_sizes))\n\n    # Calculate the start and end indices of the range containing the given index\n    for start, end in ranges:\n        if start <= index <= end:\n            range_index = index - start\n\n    # Calculate the index of the element at the given index after rotations\n    rotated_index = range_sizes_cumulative[range_index] - rotations * range_sizes[range_index]\n\n    # Calculate the index of the element in the original array\n    original_index = range_sizes_cumulative[range_index] + rotated_index\n\n    # Return the element at the calculated index\n    return arr[original_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the range size and number of rotations\n    range_size = ranges // rotations\n    num_rotations = index // range_size\n    # Calculate the actual index within the range\n    actual_index = index % range_size\n    # Rotate the array to the desired rotation\n    rotated_arr = arr[num_rotations:] + arr[:num_rotations]\n    # Return the element at the actual index within the rotated array\n    return rotated_arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations and index as input. \n    It returns the element at the given index after number of rotations.\n\n    arr: The input array.\n    ranges: The range of the array.\n    rotations: The number of rotations.\n    index: The index of the element to be searched.\n\n    Example:\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ranges = 9\n    rotations = 3\n    index = 4\n\n    The element at index 4 after 3 rotations is 5.\n    Therefore, find_Element(arr, ranges, rotations, index) will return 5.\n    '''\n\n    # Initialize the start and end index of the array\n    start_index = 0\n    end_index = ranges - 1\n\n    # Calculate the index to be searched after rotations\n    index_after_rotations = (index - 1 + rotations * ranges) % ranges\n\n    # Search the element in the array\n    for i in range(start_index, end_index + 1):\n        if i == index_after_rotations:\n            return arr[i]\n\n    # If element not found in the array\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(arr)\n    result=0\n    for i in range(rotations):\n        for j in range(ranges[i][0],ranges[i][1]):\n            temp=arr[j]\n            k=j\n            while(k>=ranges[i][0]):\n                arr[k+1]=arr[k]\n                k-=1\n            arr[ranges[i][0]]=temp\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # if no rotations required, return the element at index\n    if rotations == 0:\n        return arr[index]\n    \n    # get the range of the index after rotations\n    range_ = ranges[rotations]\n    # calculate the size of each rotation block\n    size = len(arr) // range_\n    \n    # calculate the index of the first element in the block\n    first_index = (index // size) * size\n    \n    # calculate the index of the element in the block after rotations\n    rotated_index = first_index + size - (index % size) - 1\n    \n    # return the element at the rotated index\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # get the length of the array\n    n = len(arr)\n    \n    # find the maximum value in the array\n    max_val = max(arr)\n    \n    # find the minimum value in the array\n    min_val = min(arr)\n    \n    # find the range of the array\n    array_range = max_val - min_val\n    \n    # find the number of elements to rotate\n    rotate_count = n // ranges\n    \n    # find the new index after rotations\n    new_index = (index + rotations * rotate_count) % n\n    \n    # find the value at the new index\n    element = arr[new_index]\n    \n    # print the value at the new index\n    print(\"Element at index \" + str(index) + \" after \" + str(rotations) + \" rotations: \" + str(element))"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list that start with the letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'p\\w*\\b')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match('^p', word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w\\w')\n    words_starting_with_p = []\n    for word in words:\n        if pattern.match(word.lower()):\n            words_starting_with_p.append(word)\n    if len(words_starting_with_p) >= 2:\n        return words_starting_with_p[:2]\n    else:\n        return \"Not enough words starting with 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w+\\b')\n    matches = [word for word in words if pattern.match(word)]\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    # Use regular expression to find two words starting with 'p'\n    pattern = re.compile(r'\\bp\\w+\\b.*?\\b\\w+p\\b', re.IGNORECASE)\n    match = pattern.search(words)\n\n    # Check if there is a match\n    if match:\n        # Split the string into words using regular expression and return the two words\n        return match.group().split()[:2]\n    else:\n        # If no match, return None\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+\\s\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word.split()[0], word.split()[1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match('^[p]', word)]\n    if len(p_words) < 2:\n        return 'Not enough words starting with \"p\"!'\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p'\n    result = [word for word in words if re.match(pattern, word)]\n    if len(result) < 2:\n        return \"Not enough words starting with 'p' found.\"\n    else:\n        return result[0], result[1]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p'\"\n    else:\n        return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if n == 0:\n        return 0\n    if index == 0:\n        if k == 1:\n            return a[0]\n        else:\n            return 0\n    \n    include_curr = 0\n    if k > index:\n        include_curr = a[index] + max_sum_increasing_subseq(a, n-1, index-1, k)\n    exclude_curr = max_sum_increasing_subseq(a, n-1, index-1, k)\n    \n    return max(include_curr, exclude_curr)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables to store the maximum sum and the current sum of increasing subsequence\n    max_sum = 0\n    cur_sum = 0\n    \n    # Initialize a list to store the indices of the elements in the increasing subsequence\n    indices = []\n    \n    for i in range(index):\n        # If the ith element is greater than the previous element and is greater than or equal to k, add it to the current sum\n        if a[i] < a[index] and a[i] >= a[k-1]:\n            cur_sum += a[i]\n            indices.append(i)\n    \n    # If the current sum is greater than the maximum sum, update the maximum sum and append the index of the current element to the list\n    if cur_sum > max_sum:\n        max_sum = cur_sum\n        indices.append(index)\n    \n    # If the current element is greater than the previous element, add it to the current sum\n    if a[index] > a[index-1]:\n        cur_sum += a[index]\n        indices.append(index)\n    \n    # Return the maximum sum and the list of indices\n    return max_sum, indices"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    \n    # if kth element is included in subsequence, then we can include it\n    if k > index:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1))\n    # if kth element is not included in subsequence, then we cannot include it\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and the list of elements that contribute to it\n    max_sum = 0\n    elements = []\n\n    # Initialize a prefix sum list\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    # Initialize a list to keep track of the indices of the elements in the subsequence\n    indices = [0] * (n + 1)\n\n    # Iterate over all possible values of i\n    for i in range(1, n + 1):\n        # Check if a[i] is the kth element after index i\n        if i < index and prefix_sum[i] - prefix_sum[index] == prefix_sum[k] - prefix_sum[i]:\n            # If so, we need to add a[i] to the subsequence\n            elements.append(a[i-1])\n            indices.append(i)\n\n            # Update the maximum sum if necessary\n            if sum(elements) > max_sum:\n                max_sum = sum(elements)\n        elif i > index and prefix_sum[i] - prefix_sum[index] < prefix_sum[k] - prefix_sum[i]:\n            # If not, we need to backtrack and remove the element that contributes the least to the sum of the subsequence\n            for j in range(len(elements)-1, -1, -1):\n                if indices[j] < index and prefix_sum[indices[j]] - prefix_sum[index] >= prefix_sum[k] - prefix_sum[i]:\n                    elements.pop(j)\n                    indices.pop(j)\n                    break\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    max_sum = float('-inf')\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            dp[i] = max(dp[j] + a[i] for j in range(i))\n            if k > i:\n                dp[i] = max(dp[i], max_sum_increasing_subseq(a, n, i, k))\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n\n    # Traverse through the array from index to n-1\n    for i in range(index, n):\n        # Add the current element to prefix sum\n        prefix_sum += a[i]\n\n        # If kth element is after i and kth element is greater than prefix sum, update the max_sum\n        if k > i and a[k] > prefix_sum:\n            max_sum = max(max_sum, prefix_sum + a[k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and the prefix sum array\n    max_sum = -1000000000000000000000000000000000000000000000000000\n    prefix_sum = [0] * n\n\n    # Calculate the prefix sum of all elements\n    for i in range(n):\n        if i == 0:\n            prefix_sum[i] = a[i]\n        else:\n            prefix_sum[i] = prefix_sum[i-1] + a[i]\n\n    # Find the maximum sum of increasing subsequence including the kth element after index i\n    for j in range(index+1, n):\n        if j == index+1:\n            if prefix_sum[j] > max_sum:\n                max_sum = prefix_sum[j]\n        else:\n            if prefix_sum[j] - prefix_sum[index] > max_sum:\n                max_sum = prefix_sum[j] - prefix_sum[index]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > n:\n        return 0\n    \n    max_sum = float('-inf')\n    for i in range(index):\n        if a[i] < a[index] and (k == i + 1 or a[k] < a[i]):\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n            \n    return max_sum if max_sum!= float('-inf') else a[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j]+a[i] > dp[i]:\n                dp[i] = dp[j]+a[i]\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a dictionary to store the prefix sum and the maximum sum of increasing subsequence\n    prefix_sum = {0:0}\n    max_sum = 0\n    \n    # Traverse through the array from left to right\n    for i in range(1, n+1):\n        # Calculate the prefix sum\n        prefix_sum[i] = prefix_sum.get(i-1, 0) + a[i-1]\n        \n        # Check if the prefix sum of the ith index and the prefix sum of the (i-1)th index plus the ith element is greater than the prefix sum of the ith index\n        if prefix_sum[i] > prefix_sum.get(i-index-1, 0) + a[i-1]:\n            # Check if the prefix sum of the kth index and the prefix sum of the (i-1)th index plus the kth element is greater than the prefix sum of the kth index\n            if prefix_sum[k] > prefix_sum.get(i-index-1, 0) + a[k]:\n                # If both conditions are satisfied, update the maximum sum of increasing subsequence\n                max_sum = max(max_sum, prefix_sum[k]-prefix_sum.get(i-index-1, 0))\n    \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return \"Invalid input.\"\n    else:\n        return tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of the tuple `tuplex` with `m` starting from index `n`.\n    \"\"\"\n    if n >= len(tuplex) or m < 0 or n + m > len(tuplex):\n        return ()\n    else:\n        return deepcopy(tuplex[n:n+m])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex[m-1:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex[m-1:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or m > len(tuplex) or n < 0 or n > len(tuplex):\n        return None\n\n    colon = deepcopy(tuplex[m:n+1])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    newtuplex = deepcopy(tuplex)\n    newtuplex = newtuplex[m:n]\n    return newtuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        return tuplex[m:]\n    else:\n        return deepcopy(tuplex[:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colontuplex = deepcopy(tuplex)\n    colontuplex = colontuplex[m-1:n]\n    return colontuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Return a colon of a tuple.\n\n    :param tuplex: The tuple to get the colon of.\n    :param m: The starting index of the colon (inclusive).\n    :param n: The ending index of the colon (exclusive).\n    :return: A new tuple containing the elements of the colon.\n    \"\"\"\n    # Create a copy of the input tuple\n    tuplex = deepcopy(tuplex)\n\n    # Truncate the tuple at the end if n is out of bounds\n    if n > len(tuplex):\n        n = len(tuplex)\n\n    # Truncate the tuple at the beginning if m is out of bounds\n    if m < 0:\n        m = 0\n\n    # Slice the tuple and return the result\n    return tuplex[m:n]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_factors = [set() for i in range(N)]\n    nums2_factors = [set() for i in range(N)]\n    \n    for i in range(len(nums1)):\n        for j in range(N):\n            nums1_factors[j].add(nums1[i] // nums2[j])\n            \n    for i in range(len(nums2)):\n        for j in range(N):\n            nums2_factors[j].add(nums2[i] // nums1[j])\n            \n    results = []\n    \n    for i in range(N):\n        for j in range(len(nums1)):\n            for k in range(len(nums2)):\n                results.append(nums1[j] * nums2[k] // nums1_factors[i].intersection(nums2_factors[i]).pop())\n                \n    return sorted(results, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        result.append(product)\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort both lists in descending order\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n\n    # Initialize variables to keep track of the largest products\n    max_product1 = -float('inf')\n    max_product2 = -float('inf')\n\n    # Iterate over the lists and multiply the first N factors of each list\n    for i in range(N):\n        max_product1 *= nums1_sorted[i]\n        max_product2 *= nums2_sorted[i]\n\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # initialize variables\n    result = []\n    largest = 0\n    \n    # iterate over all possible combinations of factors from the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # compute the product of the current factors\n            product = nums1[i] * nums2[j]\n            # check if it's larger than the current largest product\n            if product > largest:\n                # if so, add it to the result and update the largest product\n                result.append(product)\n                largest = product\n    \n    # return the specified number of largest products\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max_products = []\n    i = 0\n    j = 0\n    \n    # iterate over the lists until we have N products\n    while len(max_products) < N:\n        # compute the product of the current factors\n        product = nums1[i] * nums2[j]\n        \n        # check if the product is larger than the largest products we've seen so far\n        if not max_products or product > max_products[-1]:\n            # if it is, add it to the list of max products\n            max_products.append(product)\n        \n        # move to the next factor in nums1\n        i += 1\n        \n        # if we've reached the end of nums1, move to the next factor in nums2\n        if i == len(nums1):\n            i = 0\n            j += 1\n    \n    # return the list of max products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Create a list to store the largest products\n    largest_products = []\n    \n    # Loop over the first list\n    for num1 in nums1:\n        # Loop over the second list\n        for num2 in nums2:\n            # Check if the product is larger than the current largest product\n            if num1 * num2 > largest_products[-1]:\n                # If it is, remove the smallest largest product and add the new one to the list\n                if len(largest_products) == N:\n                    largest_products.remove(min(largest_products))\n                largest_products.append(num1 * num2)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes two lists of integers, nums1 and nums2, and an integer N,\n    and returns a list of the N largest products obtained by multiplying one factor from nums1 with one factor from nums2.\n    \"\"\"\n\n    # First, we sort both lists in descending order.\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # We initialize an empty list to hold the results.\n    results = []\n\n    # We loop through the first N factors from nums1 and the first N factors from nums2.\n    for i in range(N):\n        for j in range(N):\n            # We multiply the ith factor from nums1 with the jth factor from nums2, and append the result to the results list.\n            results.append(nums1[i] * nums2[j])\n\n    # We return the N largest products.\n    return sorted(results, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    # create a list to store the products\n    products = []\n    # iterate over the first list\n    for i in range(N):\n        # iterate over the second list\n        for j in range(N):\n            # calculate the product of the i-th element of nums1 and the j-th element of nums2\n            product = nums1[i] * nums2[j]\n            # append the product to the list of products\n            products.append(product)\n    # sort the list of products in descending order\n    products.sort(reverse=True)\n    # return the first N products\n    return products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function finds the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(3, 5))"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    # Count the number of set bits in the binary representation of n\n    count = 0\n    while (n):\n        if (n & 1):\n            count += 1\n        n = n >> 1\n        \n    # Set the left most unset bit by adding (32 - count) to n\n    return n + (32 - count)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer n as input and returns the integer n with the left most unset bit set.\n    '''\n    # Using the bitwise AND operator to find the rightmost set bit\n    rightmost_set_bit = n & -n\n    \n    # Shifting the rightmost set bit to the left by one position to get the leftmost unset bit\n    leftmost_unset_bit = rightmost_set_bit << 1\n    \n    # Using the bitwise OR operator to set the leftmost unset bit\n    result = n | leftmost_unset_bit\n    \n    return result"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function will set the left most unset bit in a number.\n    '''\n    return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a binary number.\n\n    Parameters:\n    n (int): A binary number (0-255).\n\n    Returns:\n    int: A binary number with the left most unset bit set.\n\n    Raises:\n    ValueError: If n is not a binary number (0-255).\n    \"\"\"\n    if n < 0 or n > 255:\n        raise ValueError(\"n must be a binary number (0-255).\")\n\n    # Get the left most set bit using a bitwise AND operation\n    left_bit = n & -n\n\n    # Shift the left bit to the right to set the left most unset bit\n    result = n | (left_bit >> 1)\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    # find the rightmost set bit by XORing n with (n-1) and then right shifting by 1\n    rightmost_set_bit = (n ^ (n-1)) >> 1\n\n    # set the leftmost unset bit by adding 1 to the rightmost set bit\n    leftmost_unset_bit = rightmost_set_bit + 1\n\n    # set the leftmost unset bit in the original integer by ORing it with the leftmost unset bit\n    result = n | leftmost_unset_bit\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer as input and returns the integer with the leftmost unset bit set.\n    '''\n    # We can use the bitwise AND operator to check if the leftmost bit is set\n    if n & (n-1) == 0:\n        # If the leftmost bit is set, we need to unset it and set the next bit on the left\n        return n - 1\n    else:\n        # If the leftmost bit is unset, we can simply return the input integer\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a number.\n    '''\n    # initialize the mask variable\n    mask = 1\n    \n    # iterate until we find an unset bit\n    while (n & mask)!= 0:\n        mask <<= 1\n    \n    # set the left most unset bit\n    n |= mask\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Sets the left most unset bit of a given number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        # Get the right most set bit\n        right_most_set_bit = n & -n\n        \n        # Set the left most unset bit\n        left_most_unset_bit = right_most_set_bit - 1\n        \n        # Clear the right most set bit\n        n &= ~right_most_set_bit\n        \n        # Set the left most unset bit\n        n |= left_most_unset_bit\n        \n        return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function returns the left most unset bit in a given number.\n    '''\n    unset_bit = 1\n    while (n & unset_bit)!= 0:\n        unset_bit <<= 1\n    return unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a given integer.\n    \"\"\"\n    # Find the rightmost 1-bit in the binary representation of n\n    rightmost_1 = 0\n    while n & 1 == 0:\n        rightmost_1 += 1\n        n >>= 1\n    # Set the rightmost 0-bit to 1\n    return n | (1 << rightmost_1)"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return (1/3)*math.pi*r**2*h\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(f\"The volume of the cone is {volume_cone(radius, height):.2f}\")"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Returns the volume of a cone with base radius r and height h.\n    '''\n    return math.pi * r**2 * h / 3\n"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n\n    Parameters:\n    r (float): the radius of the base of the cone\n    h (float): the height of the cone\n\n    Returns:\n    float: the volume of the cone\n    '''\n\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone given its radius and height.\n\n    Args:\n        r (float): radius of the cone\n        h (float): height of the cone\n\n    Returns:\n        float: volume of the cone\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with radius r and height h.\n    \n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: volume of the cone\n    \"\"\"\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with radius r and height h.\n    \"\"\"\n    V = (1.0 / 3.0) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Returns the volume of a cone with base radius r and height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**(i-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    else: \n        p = 1\n        while (p <= n): \n            p = p*2 \n        return p//2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power*2) <= n:\n        power *= 2\n    return power//2\n\nprint(highest_Power_of_2(16)) # Output: 4\nprint(highest_Power_of_2(10)) # Output: 8\nprint(highest_Power_of_2(1))  # Output: 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to 'n'.\n    \"\"\"\n    # Initialize a variable to store the highest power of 2\n    highest_power = 1\n    \n    # Iterate through each power of 2 up to the square root of 'n'\n    for i in range(1, int(n**0.5)+1):\n        \n        # If the current power of 2 is less than 'n', update the variable to store the highest power of 2\n        if i**2 <= n:\n            highest_power = i\n            \n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 <= n:\n        if power_of_2 == n:\n            return power_of_2\n        power_of_2 *= 2\n    return power_of_2 // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        n = n - power_of_2\n        power_of_2 = power_of_2 * 2\n    return power_of_2 // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while (2**power) <= n:\n        power += 1\n    return 2**(power - 1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(6)) # Output: 13"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        l1 = 2\n        l2 = 1\n        for i in range(2, n):\n            l = l1 + l2\n            l1 = l2\n            l2 = l\n        return l"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n <= 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(lst, fmt_str):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n    \n    Args:\n    - lst: A list of values to which the format string will be applied.\n    - fmt_str: A format string that will be applied to each element in the list.\n    \n    Returns:\n    - A new list with the formatted strings applied to each element.\n    \"\"\"\n    return [fmt_str.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(lst, string):\n    '''\n    Applies a given format string to all elements in a list.\n    '''\n    return [string.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function converts three lists to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {'sub_key1': l2[i],'sub_key2': l3[i]}\n        result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        key1 = l1[i]\n        if key1 not in result_dict:\n            result_dict[key1] = {}\n        for j in range(len(l2)):\n            key2 = l2[j]\n            if key2 not in result_dict[key1]:\n                result_dict[key1][key2] = []\n            result_dict[key1][key2].append(l3[i][j])\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {l2[i]: l3[i]}\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Loop over the three input lists\n    for i in range(len(l1)):\n        # Create a new dictionary for this row\n        row_dict = {}\n        \n        # Add the three columns to the dictionary\n        row_dict['column1'] = l1[i]\n        row_dict['column2'] = l2[i]\n        row_dict['column3'] = l3[i]\n        \n        # Add the row dictionary to the result dictionary\n        result_dict[i] = row_dict\n        \n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        data = {}\n        data['name'] = l1[i]\n        data['age'] = l2[i]\n        data['city'] = l3[i]\n        result.append(data)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        result.append({'name': l1[i], 'age': l2[i],'salary': l3[i]})\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert three lists to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\n            \"name\": l2[i],\n            \"age\": l3[i]\n        }\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        d = {}\n        d['key1'] = l1[i]\n        d['key2'] = l2[i]\n        d['key3'] = l3[i]\n        result.append(d)\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    This function finds the maximum sum possible by using the given equation\n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            temp_sum = 0\n            for j in range(1, int(i/2)+1):\n                if i % j == 0:\n                    temp_sum += get_max_sum(j)\n            max_sum += temp_sum\n    \n    return max_sum + n\n    "
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n\n    # Calculate the maximum sum for n/2, n/3, n/4 and n/5\n    sum_n_by_2 = get_max_sum(n//2)\n    sum_n_by_3 = get_max_sum(n//3)\n    sum_n_by_4 = get_max_sum(n//4)\n    sum_n_by_5 = get_max_sum(n//5)\n\n    # Calculate the maximum sum for n\n    max_sum = max(sum_n_by_2 + sum_n_by_3 + sum_n_by_4 + sum_n_by_5, n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n\n    max_sum = max(n, (n//2) + get_max_sum(n//2))\n    max_sum = max(max_sum, (n//3) + get_max_sum(n//3))\n    max_sum = max(max_sum, (n//4) + get_max_sum(n//4))\n    max_sum = max(max_sum, (n//5) + get_max_sum(n//5))\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n < 1:\n        return 0\n    \n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    # Recursive case\n    max_sum = max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n < 2:\n        return n\n    else:\n        return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    # calculate the maximum sum using f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    max_sum_using_div = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    \n    # return the maximum of the two values\n    return max(max_sum_using_div, n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    # find maximum sum possible using equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_sum = 0\n    for i in range(1, n+1):\n        sum = i + max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        if sum > max_sum:\n            max_sum = sum\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = 0\n    \n    # find the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    \n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length from a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_list = input_list[0]\n    for i in input_list:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use set() function to remove duplicates and compare length of original tuple and set()\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if it contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function returns the first non-repeating character in a given string.\n    \"\"\"\n    # Convert the string into a dictionary to keep track of the count of each character.\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Find the first character that has count 1.\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no such character exists, return None.\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is not in the dictionary yet, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # loop through each character in the string again\n    for char in str1:\n        # if the character has a count of 1, return it as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating characters were found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string and count its frequency\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again and return the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string again\n    for char in str1:\n        # If the count of the character is 1 (i.e. it's the first non-repeated character), return it\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character.\n    If all the characters in the string are repeating, it returns None.\n    '''\n    freq = {}  # empty dictionary to store the frequency of each character in the string\n\n    # iterate over each character in the string and increment its frequency count in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate over each character in the string again and return the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Initialize an empty dictionary to keep track of the count of each character in the string.\n    char_count = {}\n\n    # Iterate through the string and update the count of each character in the dictionary.\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string again to find the first non-repeating character.\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If all characters in the string have repeating characters, return None.\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to count the occurrences of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character that occurs only once\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the character frequency count.\n    freq_dict = {}\n    \n    # Iterate through each character in the string.\n    for char in str1:\n        # If the character is already in the dictionary, increment its count.\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1.\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate through each character in the string again.\n    for char in str1:\n        # If the count of the character is 1, return the character.\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None.\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The string starts and ends with the same character\")\nelse:\n    print(\"The string does not start and end with the same character\")"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if len(string) < 2:\n        return False\n    else:\n        match = re.search(regex, string)\n        return bool(match)"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function takes a string as input and checks whether it starts and ends with the same character or not.\n    '''\n    # Define regex pattern to match strings that start and end with the same character\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    \n    # Check if the string matches the regex pattern\n    if re.match(pattern, string):\n        print(\"The string starts and ends with the same character.\")\n    else:\n        print(\"The string does not start and end with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if not re.match(regex, string):\n        return False\n    return True"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Regular expression to match strings starting and ending with the same character\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    \n    # Matching the regular expression with the given string\n    match = re.match(regex, string)\n    \n    # Returning True if the string matches the regex, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # sorting the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # finding the median value\n    if len(set(sorted_nums)) == 3:\n        median = (sorted_nums[1] + sorted_nums[2]) / 2.0\n    else:\n        median = sorted_nums[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    # check if the number of elements is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # if even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        # if odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median of the three numbers\n    if len(set(sorted_numbers)) == 1:\n        median = sorted_numbers[0]\n    elif len(set(sorted_numbers)) == 2:\n        median = sorted_numbers[1]\n    else:\n        median = (sorted_numbers[0] + sorted_numbers[2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = [a, b, c]\n    arr.sort()\n    mid = len(arr) // 2\n    if len(arr) % 2 == 0:\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(set(sorted_numbers)) == 1:\n        # All numbers are the same\n        median = sorted_numbers[0]\n    elif len(sorted_numbers) % 2 == 0:\n        # Even number of numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # Odd number of numbers\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a,b,c])\n    # Find the median\n    if len(set(sorted_nums)) == 1:\n        # All three numbers are the same\n        return sorted_nums[0]\n    elif len(set(sorted_nums)) == 2:\n        # There are two different numbers\n        return sorted_nums[1]\n    else:\n        # There are three different numbers\n        return sorted_nums[1]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_list = sorted([a, b, c])\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1]) / 2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        # even number of elements, take the average of the middle two\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        # odd number of elements, take the middle one\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # convert the number to a string and extract its digits\n        digits = [int(d) for d in str(num)]\n        # compute the sum of the digits\n        digit_sum = sum(digits)\n        # append the sum to the result list\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_digits.append(digit_sum)\n    return sum_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num = num // 10\n        sum_of_digits.append(sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of integers as input and returns a list of integers containing\n    the sum of digits of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # initialize the sum of digits to zero\n        digit_sum = 0\n        # convert the number to a string and iterate over each character\n        for char in str(num):\n            # add the integer value of the character to the sum of digits\n            digit_sum += int(char)\n        # append the sum of digits to the result list\n        result.append(digit_sum)\n    # return the result list\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and performs the bitwise XOR operation on each element of the tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_count = set()\n    for tup in test_list:\n        freq_count.add(tup)\n    return len(freq_count)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function extracts the number of unique tuples in the given list.\n    \"\"\"\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(item))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for tup in test_list:\n        freq.add(tup)\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return len(freq.keys())"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 0\n        freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    freq = set()\n    for elem in test_list:\n        freq.add(tuple(elem))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result_tup = []\n        for j in range(len(test_tup1[i])):\n            result_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(result_tup))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise addition of tuple elements in the given two nested tuples.\n\n    :param test_tup1: A nested tuple of integers\n    :param test_tup2: A nested tuple of integers\n    :return: A new nested tuple with added values\n    \"\"\"\n\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n\n    # Loop through each element in the first tuple\n    for tup1_element in test_tup1:\n        # Initialize an empty tuple for the current element in the result\n        result_tup_element = ()\n        # Loop through each element in the second tuple\n        for tup2_element in test_tup2:\n            # Add the two elements and append the result to the current element in the result tuple\n            result_tup_element += (tup1_element + tup2_element,)\n        # Append the current element in the result tuple to the result tuple\n        result_tup += (result_tup_element,)\n\n    # Return the final result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        new_tup = []\n        for j in range(len(test_tup1[i])):\n            new_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result_tup.append(tuple(new_tup))\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        nested_tup = ()\n        for j in range(len(test_tup1[i])):\n            nested_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (nested_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        nested_list = []\n        for j in range(len(test_tup1[i])):\n            nested_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(nested_list))\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(3, 7))"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n  \"\"\"\n  Write a python function to find the minimum of two numbers.\n  \"\"\"\n  if a < b:\n    return a\n  else:\n    return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers as arguments and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    This function returns the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two tuples as input and checks whether the first tuple contains the second tuple or not.\n    '''\n    for i in range(len(tuple1)):\n        if tuple1[i] in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two parameters:\n    tuplex: The tuple in which we have to check for an element.\n    tuple1: The tuple from which the element is to be searched.\n    '''\n    for i in range(len(tuple1)):\n        if tuple1[i] in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        for i in range(len(tuple1)):\n            if tuplex == tuple1[i]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function checks if an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    # Count the number of 1's in the binary representation of x\n    ones_count = 0\n    while x > 0:\n        if x & 1 == 1:\n            ones_count += 1\n        x >>= 1\n\n    # If the number of 1's is odd, return True, else return False\n    if ones_count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if the number is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert n to a string\n    n_str = str(n)\n    \n    # get the maximum number that can be created by rearranging the digits of n\n    max_num = int(n_str[::-1])\n    \n    # check if max_num is greater than n\n    if max_num > n:\n        return max_num\n    else:\n        return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the given number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the list of digits back to a number\n    next_bigger = int(''.join(digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Reverse the string\n    n_str_rev = n_str[::-1]\n\n    # Find the next largest number by rearranging the digits\n    for i in range(len(n_str_rev)):\n        # Check if the digit is greater than the next digit\n        if int(n_str_rev[i]) > int(n_str_rev[i+1]):\n            # Swap the digits and reverse the resulting string to get the next largest number\n            n_str_next = n_str_rev[:i] + n_str_rev[i+1] + n_str_rev[i] + n_str_rev[i+2:]\n            n_str_next_rev = n_str_next[::-1]\n            return int(n_str_next_rev)\n\n    # If no larger number is possible, return -1\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost non-increasing digit\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If all digits are non-increasing, return -1 (no bigger number possible)\n    if i < 0:\n        return -1\n    \n    # Find the smallest digit on the right of the found non-increasing digit\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    \n    # Swap the two digits and sort the rest of the digits\n    digits[i], digits[j-1] = digits[j-1], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    if i < 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert n to a string to easily manipulate its digits\n    n_str = str(n)\n    # Create a list of the digits of n\n    digits = [int(d) for d in n_str]\n    # Find the first digit that needs to be swapped with its neighbor\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            # Swap the digits\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            # Convert the list of digits back to an integer and return it as the next bigger number\n            return int(''.join(str(d) for d in digits))\n    # If no swapping was necessary, return None\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    n_str = str(n)\n    n_len = len(n_str)\n    if n_len == 1:\n        return -1\n    \n    for i in range(n_len - 1):\n        for j in range(i + 1, n_len):\n            if n_str[i] < n_str[j]:\n                n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n                return int(n_str)\n                \n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Find the rightmost digit that can be incremented\n    i = len(digits) - 1\n    while i > 0 and digits[i] == 9:\n        i -= 1\n    if i == 0:\n        # No digit can be incremented, return None\n        return None\n\n    # Increment the rightmost digit and return the result\n    digits[i] += 1\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    if i < 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    left, right = digits[:i+1], digits[i+1:]\n    right.sort(reverse=True)\n    return int(''.join(map(str, left + right)))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number into a list of digits\n    digits = list(str(n))\n    \n    # Find the index of the last digit that is smaller than its adjacent digits\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    \n    # If no such index is found, then n is the largest possible number with this number of digits\n    if i == -1:\n        return -1\n    \n    # Swap the digits at the index found and the adjacent digit\n    digits[i], digits[i+1] = digits[i+1], digits[i]\n    \n    # Sort the digits from the index found to the end of the list\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back into an integer\n    result = int(''.join(digits))\n    \n    # If the resulting number is greater than n, then n is not the next bigger number\n    if result > n:\n        return -1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n\n    for i in range(k):\n        if not heap:\n            break\n        total, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1 + num2, num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                heapq.heappushpop(pairs, pair)\n\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1 + num2, num1, num2))\n    \n    for i in range(k):\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    pairs = []\n    while heap:\n        _, i, j = heapq.heappop(heap)\n        pairs.append((nums1[i], nums2[j]))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for i in nums1:\n        for j in nums2:\n            pairs.append((i,j))\n    heapq.heapify(pairs)\n    return [heapq.heappop(pairs) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i], nums2[j])\n            heapq.heappush(heap, pair)\n\n    for i in range(k):\n        pairs.append(heapq.heappop(heap))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: List of integers representing the elements in the first array.\n    nums2: List of integers representing the elements in the second array.\n    k: Integer representing the number of smallest pairs to find.\n\n    Returns:\n    List of k tuples representing the k smallest pairs.\n\n    \"\"\"\n    pairs = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, num1, num2))\n            else:\n                if num1 + num2 < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num1 + num2, num1, num2))\n    while heap:\n        pairs.append(heapq.heappop(heap)[1:])\n    return pairs[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    \n    for _ in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append((nums1[pair[1]], nums2[pair[2]]))\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, find the minimum product of the pairs of tuples.\n    \"\"\"\n    min_product = float('inf')  # initialize min_product to a very large number\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function finds the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] < list1[i][1]*list1[j][0]:\n                result = min(result, list1[i][0]*list1[j][1])\n    \n    return result"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as an argument and returns the minimum product from the pairs of tuples.\n    '''\n    product = float('inf') # Initialize product to infinity\n    for tup in list1:\n        if len(tup) == 2: # Check if the tuple has only two elements\n            if tup[0] * tup[1] < product: # Check if the current product is smaller than the previous product\n                product = tup[0] * tup[1] # Update the product to the current product if it's smaller\n    return product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[i][1] < list1[j][0]*list1[j][1]:\n                min_product = min(min_product, list1[i][0]*list1[i][1])\n            else:\n                min_product = min(min_product, list1[j][0]*list1[j][1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')  # initialize the minimum product to infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product  # update the minimum product if a smaller one is found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[i][1] < list1[j][0] * list1[j][1]:\n                if list1[i][0] * list1[i][1] < min_product:\n                    min_product = list1[i][0] * list1[i][1]\n            else:\n                if list1[j][0] * list1[j][1] < min_product:\n                    min_product = list1[j][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]  # initialize minimum to the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:  # if the current element is smaller than minimum\n            minimum = listval[i]  # update minimum\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the minimum value in the list.\n    \"\"\"\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for val in listval:\n        if val < minimum:\n            minimum = val\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n            \n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list as input and returns the minimum value present in the list.\n\n    :param listval: A heterogeneous list containing integers, floats and strings.\n    :return: The minimum value present in the list.\n    \"\"\"\n\n    # Initialize the minimum value to be the first element of the list.\n    min_val = listval[0]\n\n    # Loop through the list starting from the second element.\n    for i in range(1, len(listval)):\n        # If the current element is less than the minimum value, update the minimum value.\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return the minimum value.\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    This function finds the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function returns the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for item in listval:\n        if isinstance(item, str):\n            # Check if the item is a string and convert it to a float for comparison\n            item = float(item)\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i < min_val:\n                min_val = i\n        elif type(i) == float:\n            if i < min_val:\n                min_val = i\n        elif type(i) == str:\n            if len(i) < len(min_val):\n                min_val = i\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the snake case word into words\n    words = word.split(\"_\")\n    \n    # Convert the first word to lower case\n    words[0] = words[0].lower()\n    \n    # Join the words to get camel case string\n    return \"\".join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string and returns its camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in re.split('(_+)', word))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[a-zA-Z]+', word)\n    return words[0] + ''.join([w.capitalize() for w in words[1:]])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns a camel case string.\n    '''\n    # Split the string using underscores as separator\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    words = [words[0].lower()] + [w.capitalize() for w in words[1:]]\n    # Join the words using an empty string as separator\n    camel_case = ''.join(words)\n    # Remove any whitespace from the beginning or end of the string\n    camel_case = camel_case.strip()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using the regex pattern \"_\"\n    words = re.split(\"_\", word)\n    # Capitalize the first letter of each word except the first one\n    words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the words together into a single string\n    return \"\".join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by '_'\n    words = re.split('_', word)\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words with the first letter of each word capitalized\n    return ''.join(map(str.capitalize, words))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an argument and returns a new list with only even numbers from the original list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove all odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Remove all odd numbers from a list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Remove all odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][n]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from the list of tuples.\n    '''\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a list of tuples.\n    '''\n    return [tup[n] for tup in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes in a list of tuples and extracts the nth element from each tuple.\n    \"\"\"\n    result = []\n    for tpl in list1:\n        result.append(tpl[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a list of tuples.\n    :param lst: list of tuples\n    :param n: index of the element to extract (starting from 1)\n    :return: nth element of the list of tuples\n    '''\n    for i, item in enumerate(lst):\n        if i+1 == n:\n            return item[0]\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the nth element of each tuple\n    nth_element_list = []\n    # Loop through the list of tuples\n    for tup in list1:\n        # Extract the nth element of the tuple and append it to the list\n        nth_element_list.append(tup[n-1])\n    # Return the list of nth elements\n    return nth_element_list"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in list1 is also in list2.\n\n    Parameters:\n    list1 (list): First sequence of values.\n    list2 (list): Second sequence of values.\n\n    Returns:\n    bool: True if there are any overlapping values, False otherwise.\n    '''\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    set2 = set(list2)\n    for value in list1:\n        if value in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(elem in list2 for elem in list1)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(elem in list2 for elem in list1)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as arguments and returns True if any value in list1 exists in list2, otherwise it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 exists in list2 or not.\n    \"\"\"\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n    \"\"\"\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in the first sequence exists in the second sequence or not.\n    \"\"\"\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair, max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Initialize max and second max elements of the array\n    max1 = arr[0]\n    max2 = arr[1]\n    if max1 < max2:\n        max1, max2 = max2, max1\n    # Loop through the array and update max and second max elements\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    # Calculate the product of the max and second max elements\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a pair of integers with the highest product.\n    '''\n    n = len(arr)\n    max_pair = (arr[0], arr[1])\n    if arr[0] > arr[1]:\n        min_pair = (arr[1], arr[0])\n    else:\n        min_pair = (arr[0], arr[1])\n\n    for i in range(2, n):\n        if arr[i] > max_pair[0]:\n            max_pair = (arr[i], max_pair[1])\n            if max_pair[0] > min_pair[0]:\n                min_pair = (min_pair[1], max_pair[0])\n            else:\n                min_pair = (min_pair[0], max_pair[0])\n        elif arr[i] > max_pair[1]:\n            max_pair = (max_pair[0], arr[i])\n            if max_pair[1] > min_pair[0]:\n                min_pair = (min_pair[1], max_pair[1])\n            else:\n                min_pair = (min_pair[0], max_pair[1])\n\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    n = len(arr)\n    max_num = arr[0]\n    max_prod = arr[1]\n    min_num = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_prod = max(max_prod, arr[i] * min_num, arr[i] * max_num)\n        elif arr[i] < min_num:\n            min_num = arr[i]\n            max_prod = max(max_prod, arr[i] * min_num, arr[i] * max_num)\n    return max_prod"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    \n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n            \n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = ()\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]:\n            max_product = max(max_product, arr[i] * arr[i-1] * arr[i-2])\n        if arr[i] < arr[i-1] and arr[i] < arr[i-2]:\n            min_product = min(min_product, arr[i] * arr[i-1] * arr[i-2])\n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    This function takes in an array of integers and returns a tuple containing the pair with the highest product.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_product = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > max_num:\n            max_product = max(max_product, arr[i]*max_num)\n            max_num = arr[i]\n        else:\n            max_product = max(max_product, arr[i]*arr[i-1])\n    return max_product\n\narr = [2, 3, -2, 4]\nprint(max_Product(arr)) # Output: 6"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set()\n    for i in Input:\n        if isinstance(i, tuple):\n            result.add(i[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element!= tup[0]:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    else:\n        common_element = Input[0][0]\n        for i in range(1, len(Input)):\n            if Input[i][0]!= common_element:\n                return None\n        return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_element = Input[i][0]\n                break\n        if common_element is not None:\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element_set = set(tuple_input[0] for tuple_input in Input)\n    if len(first_element_set) == 1:\n        return list(first_element_set)[0]\n    else:\n        return None"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        elif common_first_element!= tup[0]:\n            return None\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the groups\n    groups = {}\n\n    # iterate over the list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n\n        # check if the first element is already in the groups dictionary\n        if first in groups:\n            # if yes, append the tuple to the list of tuples for that first element\n            groups[first].append(tup)\n        else:\n            # if not, create a new key in the dictionary with the first element as key and a list containing the tuple as the value\n            groups[first] = [tup]\n\n    # return the groups dictionary\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_dict = {}\n    for i in Input:\n        if i[0] in group_dict:\n            group_dict[i[0]].append(i[1])\n        else:\n            group_dict[i[0]] = [i[1]]\n    return group_dict"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set()\n    for tup in Input:\n        first_elements.add(tup[0])\n    return first_elements"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    \n    # Find the common first element in the list of tuples\n    for tuple_element in Input:\n        if common_first_element is None:\n            common_first_element = tuple_element[0]\n        elif common_first_element!= tuple_element[0]:\n            return None\n    \n    # If all the tuples have common first element, return it\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = ''\n    \n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for item in lst: \n        if len(item) > max_len: \n            max_len = len(item)\n            max_item = item\n    return max_item"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = len(max(lst, key=len))\n    max_lst = [x for x in lst if len(x) == max_length]\n    return max_lst[0]"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for num in list1:\n        rounded_list.append(round(num))\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Iterate from 0 to n-1 (inclusive)\n    for i in range(n):\n        # Check if i is even\n        if i % 2 == 0:\n            # Add the cube of i to the sum variable\n            sum += i**3\n    \n    # Return the sum variable\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n*2, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes in a tuple and a delimiter, and returns a new tuple with all elements concatenated by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    This function concatenates each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup)-1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of the tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    This function takes in a tuple and returns a new tuple with each element concatenated by a delimiter.\n    '''\n    delimiter = \",\"\n    return tuple(str(x) + delimiter for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n\n    Parameters:\n        test_tup (tuple): A tuple of strings to concatenate.\n        delimiter (str): The delimiter to use for concatenating the strings.\n\n    Returns:\n        str: A string with all elements of the tuple concatenated by the delimiter.\n    \"\"\"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple of strings as an input and concatenates each element of the tuple by the delimiter.\n    By default, the delimiter is a space.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1] # remove the last delimiter from the result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i]) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #initialize sum and count variables\n    sum = 0\n    count = 0\n\n    #loop through first n natural numbers\n    for i in range(1, n+1):\n        #calculate cube of the number and add it to the sum variable\n        sum += i**3\n        #increment the count variable\n        count += 1\n\n    #calculate the average of cubes of first n natural numbers and return it\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_average_of_cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average = sum_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    This function extracts only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indexes = []\n    for string in test_tuple:\n        rear_indexes.append(string[-1])\n    return tuple(rear_indexes)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[string.rfind(\" \")+1:])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = tuple([string[-1] for string in test_tuple])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings and returns a new tuple containing only the rear index element of each string.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[::-1][0],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        for j in range(len(sublist)):\n            if sublist[j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(lst, element):\n    \"\"\"\n    This function takes a list and an element as input and returns the number of sublists in the list\n    that contain the given element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sub_lst in lst:\n        if x in sub_lst:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the original list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filters out odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function filters out all the odd numbers from a given list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function will filter all the odd numbers from the given list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function filters out all the odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})\")\n    match = pattern.search(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = re.findall('\\d+', dt)\n    return f\"{dd}-{mm}-{yyyy}\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format. Please enter yyyy-mm-dd.\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    matches = re.search(pattern, dt)\n    if matches:\n        year, month, day = matches.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy, mm, dd = map(int, re.findall(r'\\d+', dt))\n    return f\"{dd:02d}-{mm:02d}-{yyyy}\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = map(int, match.groups())\n        return f\"{day:02d}-{month:02d}-{year}\"\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date of yyyy-mm-dd format as input and returns it in dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        year, month, day = map(int, dt.split('-'))\n        new_dt = '{}-{:02d}-{:02d}'.format(day, month, year)\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        return '{0:02d}-{1:02d}-{2}'.format(int(match.group(3)), int(match.group(2)), int(match.group(1)))\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        \n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            \n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # shift earlier gap-sorted elements up until the correct position for a[i] is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # put temp (the original a[i]) in its correct position\n            my_list[j] = temp\n        \n        # Reduce the gap for the next pass\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # set the gap between elements\n    gap = len(my_list) // 2\n\n    # perform insertion sort for each gap until the gap is 1\n    while gap > 0:\n        # iterate over the array using the current gap\n        for i in range(gap, len(my_list)):\n            # set the current element as the pivot\n            pivot = my_list[i]\n\n            # set the index of the current element\n            j = i\n\n            # iterate over the array to the left of the current element\n            # until the pivot is smaller than the element to the left\n            while j >= gap and my_list[j - gap] > pivot:\n                # swap the elements\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # set the pivot at the correct position\n            my_list[j] = pivot\n\n        # decrease the gap for the next iteration\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # gap elements apart.\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next element\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n\n            # shift earlier gap-sorted elements up until the correct\n            # location for a[i] is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # put temp (the original a[i]) in its correct location\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while  j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # Add a[i] to the elements that have been gap sorted\n            # up to the point of i.\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n        # Reduce the gap for the next iteration\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Start with a big gap, then reduce the gap\n    n = len(my_list)\n    gap = n // 2\n\n    # Do a gapped insertion sort for this gap size\n    while gap > 0:\n\n        # For each sublist of size gap, insertion sort that sublist\n        for i in range(gap, n):\n\n            # Insert my_list[i] among my_list[i - gap], my_list[i - gap - 1],...,\n            # my_list[i - gap * 2]\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n\n        # Reduce the gap for the next iteration\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple with elementwise and values.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] and test_tup2[i]),)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function extracts the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"Coefficient of x^2 cannot be zero.\")\n    else:\n        return -b/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant > 0:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        return x\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print(\"Cannot find the directrix of a linear equation.\")\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            print(\"No real solution exists.\")\n        elif d == 0:\n            x = -b/(2*a)\n            print(\"The directrix is at x =\", x)\n        else:\n            x1 = (-b + d**0.5)/(2*a)\n            x2 = (-b - d**0.5)/(2*a)\n            print(\"The directrix passes through the points (\", x1,\",\", 0, \") and (\", x2,\",\", 0, \").\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix is x = {x1:.2f} or x = {x2:.2f}\"\n    else:\n        return \"There are no real roots for the equation.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two solutions\n        x1 = (-b - discriminant ** 0.5) / (2 * a)\n        x2 = (-b + discriminant ** 0.5) / (2 * a)\n\n        # Return both solutions\n        return x1, x2\n    elif discriminant == 0:\n        # Calculate and return the unique solution\n        x = -b / (2 * a)\n        return x\n    else:\n        # The parabola has no real directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    :param a: The coefficient of the quadratic term.\n    :param b: The coefficient of the linear term.\n    :param c: The constant term.\n    :return: The value of the directrix.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two solutions\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Return the larger solution\n        return max(x1, x2)\n    else:\n        return \"The parabola has no directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    d = b**2 - 4*a*c\n    if d == 0:\n        x = -b / (2*a)\n        return x\n    elif d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return x1, x2\n    else:\n        return \"The equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5)/(2*a)\n        return x\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return \"There are no real solutions.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \n    Given the coefficients of the parabola equation, \n    a*x^2 + b*x + c = 0, this function computes the point where \n    the parabola intersects the x-axis (the directrix).\n\n    Parameters:\n    a (float): The coefficient of the quadratic term.\n    b (float): The coefficient of the linear term.\n    c (float): The constant term.\n\n    Returns:\n    float: The x-coordinate of the directrix.\n    \"\"\"\n    # Compute the discriminant D\n    D = b**2 - 4*a*c\n\n    # Check if the discriminant is non-zero\n    if D >= 0:\n        # Compute the x-coordinate of the directrix\n        x = (-b + D**0.5)/(2*a)\n        return x\n    else:\n        print(\"The discriminant D is negative, the parabola has complex roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0: \n        x_d = (-b + discriminant**0.5)/(2*a)\n        return x_d\n    elif discriminant == 0: \n        x_d = -b/(2*a)\n        return x_d\n    else: \n        return \"No real solutions\""
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < 1 or len(list2) < 1:\n        return False\n    \n    for element in list1:\n        if element in list2:\n            return True\n            \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Checks if two lists have at least one common element.\n\n    :param list1: the first list to compare\n    :param list2: the second list to compare\n    :return: True if the two lists have at least one common element, False otherwise\n    \"\"\"\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using the formula A = (1/2)(b1 + b2)h\n    area = (base1 + base2) / 2 * height\n    # Calculate the median length using the formula median = A/h\n    median = area / height\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) * height / 2\n    median_length = 2 * area / height\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median_length = 2 * area / (base1 + base2)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Returns the median length of a trapezium given its bases and height.\n    '''\n    # Calculate the median length using the formula:\n    # median = (base1 + base2) / 2\n    median = (base1 + base2) / 2\n    # Add the height to the median to get the full trapezium height:\n    full_height = height + median\n    # Calculate the area of the trapezium using the formula:\n    # area = (1/2) * base1 * height\n    area = (1/2) * base1 * full_height\n    # Calculate the median length using the formula:\n    # median = 2 * area / (base1 + base2)\n    median = 2 * area / (base1 + base2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes the base1, base2, and height of a trapezium as inputs and returns the median length of the trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    return median * height\n"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\wb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b+\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]+$\"  # pattern for matching \"a\" followed by one or more \"b\"s at the end of the string\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Return the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = n * -1\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    # Finding the last digit of the number\n    last = n % 10\n    return last"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    # Return the last digit of the number\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes in a number and returns the last digit of that number.\n    \"\"\"\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list with only the negative numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a new list containing only the negative numbers from the given list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers in a given list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns a list of negative numbers from a given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is even, add it to the result string\n        if char % 2 == 0:\n            result += char\n            \n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes all the odd characters in a string.\n\n    Args:\n    str1 (str): The input string from which odd characters need to be removed.\n\n    Returns:\n    str: The modified string with odd characters removed.\n    \"\"\"\n    # Convert the string to a list of characters\n    str1 = list(str1)\n    # Create an empty string to store the modified string\n    new_str = \"\"\n    # Iterate over each character in the list\n    for char in str1:\n        # If the character is even, append it to the new string\n        if ord(char) % 2 == 0:\n            new_str += char\n    # Convert the modified string back to a string and return it\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            continue\n        result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes all the odd characters from it.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i][1] == test_list[j][0]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list as an argument and returns the count of bidirectional tuple pairs in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]) or (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of bidirectional tuples in the list.\n    A bidirectional tuple is a tuple where the first element is equal to the second element of the other tuple in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]) or (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][1] and test_list[i][1] > test_list[j][0]) or (test_list[i][0] > test_list[j][1] and test_list[i][1] < test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of multiple integers and returns a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = int(''.join(str(i) for i in L))\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers and returns a single integer obtained by multiplying all the integers in the list.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers as input and returns a single integer\n    by joining the elements of the list using the sum() function.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of multiple integers and returns a single integer\n    by joining all the integers in the list into a single integer.\n    \"\"\"\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group() +'found at position'+ str(match.start())\n    else:\n        return 'No adverb found in the given sentence.'"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns the position of the first adverb in the string.\n    If no adverb is found, it returns None.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(really|very|extremely|seriously|amazingly|incredibly|exceptionally|unusually|really|truly|entirely)\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        print(f\"Adverb: {match.group(0)}, Position: {match.start()}\")\n\ntext = \"The movie was really amazing! I really enjoyed it.\"\nfind_adverb_position(text)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(really|very|quite|extremely|insanely|amazingly|unbelievably|terribly|incredibly|amazingly|really|very)\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(1), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\nPosition: {match.start()}\"\n    else:\n        return \"No adverb found in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|really|extremely|quite|rather|hardly|generally|absolutely|finally|literally)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # find all matches for adverbs in the text\n    matches = re.findall(r'\\b(very|quite|extremely|really)\\b', text, re.IGNORECASE)\n    \n    if matches:\n        # find the index of the first adverb and return it along with the adverb\n        return (text.index(matches[0]), matches[0])\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    \n    # Use regular expression to find all adverbs in the sentence\n    pattern = re.compile(r'\\b(?:an?|[aeiou])\\b\\s+[a-z]+ly')\n    matches = pattern.finditer(text)\n    \n    # Initialize variables\n    first_adverb = ''\n    first_position = 0\n    \n    # Loop through all matches and find the first adverb\n    for match in matches:\n        if not first_adverb:\n            first_adverb = match.group()\n            first_position = match.start()\n    \n    # Return the first adverb and its position if found, otherwise return None\n    if first_adverb:\n        return (first_adverb, first_position)\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find the first adverb and its position in the sentence\n    pattern = r'\\b(very|quite|extremely|rather|really|really quite|absolutely|really|truly|indeed|undoubtedly|certainly|clearly|entirely|perfectly|thoroughly|completely|fully|perfectly|totally|utterly)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    \n    if match:\n        # If an adverb was found, return its position and the adverb itself\n        return match.start(), match.group()\n    else:\n        # If no adverb was found, return None\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(?:\\w+ly)\\b', re.IGNORECASE)\n    adverb_match = adverb_pattern.search(text)\n\n    if adverb_match:\n        return adverb_match.group(), adverb_match.start()\n    else:\n        return None, None"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as input and returns its surface area.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a single argument, l, which represents the length of the cube.\n    It returns the surface area of the cube.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a cube length as input and returns its surface area.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_pos = 0\n    count_neg = 0\n    \n    for num in nums:\n        if num > 0:\n            count_pos += 1\n        elif num < 0:\n            count_neg += 1\n        else:\n            continue\n    \n    return count_pos / len(nums) if len(nums) > 0 else 0"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    ratio = positive_nums / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive/len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number from the given list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and abs(num) > abs(largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number in the given list. If there are no negative numbers,\n    returns None.\n    \"\"\"\n    largest_negative = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')  # initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num  # update max_neg if a smaller negative number is found\n    return max_neg  # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]  # assume first element is largest negative number\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -float('inf')\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K, len(tup)))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for val in tup:\n            if isinstance(val, int) or isinstance(val, float):\n                trimmed_tup += (val - K, val + K,)\n            else:\n                trimmed_tup += (val,)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and trims each tuple by K.\n    \"\"\"\n    new_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            if i < K or i >= len(tup) - K:\n                new_tup += (tup[i],)\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        trimmed_tpl = tpl[K:]\n        result.append(trimmed_tpl)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[:K])\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i >= K)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K+1:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        trimmed_tpl = tuple(tpl[i] for i in range(K))\n        result.append(trimmed_tpl)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_list = []\n    for i in tup:\n        count_list.append(count_dict[i])\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and returns a dictionary containing the count of occurrence of all elements of the list in the tuple.\n    '''\n    count_dict = {}\n    tup_count = Counter(tup)\n    for item in lst:\n        if item in tup_count:\n            count_dict[item] = tup_count[item]\n        else:\n            count_dict[item] = 0\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    count_list = []\n    for i in tup:\n        count_list.append(c[i])\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    for i in tup: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return tuple(count_dict[elem] for elem in tup)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments: a tuple and a list.\n    The function counts the occurrence of all elements of the list in the tuple and returns a dictionary with the counts.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n\n    # iterate through each element of the tuple\n    for elem in tup:\n        # count the occurrence of the element in the list\n        count = lst.count(elem)\n        # add the count to the dictionary\n        count_dict[elem] = count\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments - a tuple and a list. It returns a dictionary where the keys are the elements of the tuple and the values are the number of times each element of the list occurs in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for element in tup: \n        if element in count_dict: \n            result.append(count_dict[element])\n        else: \n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments - a tuple and a list.\n    It returns a dictionary with keys as elements of the list and values as their respective counts in the tuple.\n    '''\n\n    # Creating a Counter object with the tuple elements\n    count_obj = Counter(tup)\n\n    # Creating an empty dictionary\n    result_dict = {}\n\n    # Iterating over the list and updating the result dictionary with the counts of the list elements in the tuple\n    for element in lst:\n        if element in count_obj:\n            result_dict[element] = count_obj[element]\n        else:\n            result_dict[element] = 0\n\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function counts the number of occurrences of all elements of the list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    for item in tup: \n        if item in count_dict: \n            print(f\"{item}: {count_dict[item]}\")"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as an argument and returns a list of the cubes of each number in the original list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the cubes of individual elements in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list of numbers containing cubes of the input numbers.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function finds the cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n    \"\"\"\n    p = [0, 1, 1]\n    for i in range(3, n+1):\n        p.append(p[i-1] + p[i-3])\n    return p[n]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        if i == 1:\n            total = i\n        elif i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of perrin numbers.\n    \"\"\"\n    p = [1, 1]\n    for i in range(2, n+1):\n        p.append(p[i-1] + p[i-2])\n    return sum(p)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n perrin numbers.\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += 3**i\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n) - 1 + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i**2, n + 1, i):\n                p[j] = False\n    return sum(i for i in range(2, n + 1) if p[i])"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    i = 1\n    while i <= n:\n        s += i*(i+1)/2\n        i += 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1, 1]\n    for i in range(2, n+1):\n        p.append(p[i-1]+p[i-2])\n    return p[n]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    perrin_nums = [1, 1, 2, 4, 7, 13, 24, 44, 81, 149]\n    sum_of_perrin_nums = sum(perrin_nums[:n])\n    return sum_of_perrin_nums"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(' '.join(l[i:i+str]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings as input and a size as a parameter and returns a new list containing\n    specified size of strings from the input list.\n    '''\n    result_list = []\n    for i in range(0, len(str_list), size):\n        result_list.append(str_list[i:i+size])\n    return result_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings as input and extracts specified size of strings from it.\n    :param str_list: A list of strings.\n    :param size: An integer representing the size of the strings to be extracted.\n    :return: A list of strings of specified size.\n    \"\"\"\n    result_list = []\n    for i in range(0, len(str_list), size):\n        result_list.append(\"\".join(str_list[i:i+size]))\n    return result_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)//l):\n        result.append(str[i*l:(i+1)*l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and extracts specified size of strings from the list.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str (str): The string to be extracted\n    l (list): The list of strings from which to extract the string\n\n    Returns:\n    list: A list containing all the extracted strings\n    \"\"\"\n    extracted_strings = []\n    for string in l:\n        if len(string) == len(str):\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(str_list[i:i+size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == str:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), size):\n        result.append(' '.join(lst[i:i+size]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = sale_amount - actual_cost\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount if the sale amount is greater than the actual cost.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters:\n    actual_cost: The actual cost of the product before selling\n    sale_amount: The amount received after selling\n    \n    It returns the loss amount if sale_amount is less than actual_cost, else it returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two arguments - actual_cost and sale_amount.\n    It calculates the loss amount on a sale if the sale_amount is greater than actual_cost else it returns 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0 and i % 2 == 0:\n                sum += i\n        if n % int(math.sqrt(n)) == 0 and int(math.sqrt(n)) % 2 == 0:\n            sum += int(math.sqrt(n))\n        return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of that number.\n    \"\"\"\n    sum = 0  # Initialize the sum to 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i  # Add the factor to the sum if it is even\n    return sum  # Return the sum of even factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of all even factors of n.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n // i:\n                factors.append(n // i)\n    even_factors = [f for f in factors if f % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i!= n // i:\n                sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as an input and returns the sum of all even factors of that number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            factors.append(i)\n\n    even_factors = [i for i in factors if i%2 == 0]\n\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            if (n // i) % 2 == 0 and i!= n // i : \n                sum += n // i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return n + sumofFactors(n // 2)\n    else:\n        return sumofFactors(n - 1)\n\nprint(sumofFactors(10))"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its even factors.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expression to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a list of all words in the string that contain the letter 'z'.\n    '''\n    # Regular expression pattern to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Find all matches of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the given text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matched_words = re.findall(pattern, text)\n    return matched_words"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes an integer as input and returns True if the month number contains 31 days, otherwise False.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        print(\"The month has 30 days.\")\n    elif monthnum2 == 2:\n        print(\"February has either 28 or 29 days.\")\n    else:\n        print(\"The month has 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether a given month number has 31 days or not.\n\n    :param monthnum: the month number (1-12)\n    :return: True if the month has 31 days, False otherwise\n    \"\"\"\n    # create a list of month lengths\n    month_lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    # check whether the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return False\n    # return True if the month has 31 days, False otherwise\n    return month_lengths[monthnum - 1] == 31"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        return \"Invalid month number\"\n\nprint(check_monthnumb_number(2))  # True\nprint(check_monthnumb_number(4))  # False\nprint(check_monthnumb_number(1))  # True\nprint(check_monthnumb_number(12)) # True\nprint(check_monthnumb_number(13)) # Invalid month number"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and (2021 % 4 == 0 or 2021 % 100!= 0 or 2021 % 400 == 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [4, 6, 9, 11] or (monthnum2 == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        print(\"The month\", month, \"has 30 days.\")\n    else:\n        print(\"The month\", month, \"has 31 days.\")\n\nmonth = int(input(\"Enter a month number: \"))\nyear = int(input(\"Enter a year: \"))\n\ncheck_monthnumb_number(month)"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11] or (monthnum2 == 2 and year % 4 == 0):\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    A function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for string in stringlist:\n        reversed_string_list.append(string[::-1])\n    return reversed_string_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    This function takes a list of string values as input and reverses each string in the list.\n    \"\"\"\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    This function takes a list of strings and reverses each string in the list.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = [sublist]\n        elif len(sublist) == min_len:\n            min_lst.append(sublist)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = [lst[i]]\n        elif len(lst[i]) == min_len:\n            min_lst.append(lst[i])\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of lists as input and returns the sublist with minimum length.\n    If there are multiple sublists with the same minimum length, it returns the first occurrence.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function will take a list as input and return the sublist\n    with the minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    result = []\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n            result = [sub_lst]\n        elif len(sub_lst) == min_length:\n            result.append(sub_lst)\n    return result"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input parameters, and returns its area.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns its area.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(length, width):\n    '''\n    Calculate the area of a rectangle.\n    \n    Args:\n    - length: the length of the rectangle (float or int)\n    - width: the width of the rectangle (float or int)\n    \n    Returns:\n    - area: the area of the rectangle (float)\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as input and returns the area of the rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[^a-z]' # pattern to match all non-lowercase characters\n    result = re.sub(pattern, '', str1) # substitute non-lowercase characters with empty string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings using a regular expression\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    # Remove all uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Use the re.sub() function to replace all occurrences of uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expressions to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Removing all uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function removes all uppercase substrings from the given string.\n    \"\"\"\n    # Find all uppercase substrings using regex\n    matches = re.findall(r'[A-Z]+', string)\n    # Remove all matches from the string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list that contains only the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elems = []\n    for sublist in lst:\n        first_elems.append(sublist[0])\n    return first_elems"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    return [sub[0] for sub in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of lists as input and returns a new list containing\n    the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as an input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    \n    # iterate through each character in the string\n    for char in str:\n        # check if the character is an upper case letter\n        if char.isupper():\n            count += 1\n    \n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Counts the number of uppercase letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of uppercase letters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in itertools.combinations(list1, i):\n            result.append(j)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function will take a list as input and return a list of all possible combinations of the elements of that list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst)+1):\n        result += list(combinations(lst, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list containing all possible combinations of the elements of the list.\n    \"\"\"\n    # Get the length of the input list\n    n = len(lst)\n    # Initialize an empty list to store the combinations\n    result = []\n    # Loop through all possible combinations of length n and add them to the result list\n    for i in range(2 ** n):\n        combo = []\n        for j in range(n):\n            # Check if the jth bit of i is 1\n            if (i >> j) & 1:\n                combo.append(lst[j])\n        result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    if len(lst) == 1:\n        return [[lst[0]]]\n    else:\n        combs = []\n        for i in range(len(lst)):\n            rest = lst[:i] + lst[i+1:]\n            for c in combinations_list(rest):\n                combs.append([lst[i]] + c)\n        return combs"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combos = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (2**j):\n                combo.append(list1[j])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in itertools.combinations(list1, i):\n            result.append(j)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of elements in the given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i] + lst[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    combos = []\n    for i in range(2**n):\n        combo = []\n        for j in range(n):\n            if (i & (1 << j)):\n                combo.append(lst[j])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of the input list.\n    \"\"\"\n    combos = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            combos.append(tuple(sorted([lst[i], lst[j]])))\n    return combos"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        min_ending_here *= arr[i]\n        if max_ending_here < min_ending_here:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables for the maximum subarray and the maximum product\n    max_subarray = [arr[0], arr[0]]\n    max_product = arr[0]\n    \n    # Iterate through the array and update the maximum subarray and maximum product\n    for i in range(1, n):\n        if arr[i] > max_subarray[1]:\n            max_subarray[1] = arr[i]\n        elif arr[i] > max_subarray[0]:\n            max_subarray[0] = arr[i]\n            \n        if arr[i-1] * arr[i] > max_product:\n            max_product = arr[i-1] * arr[i]\n            \n    # Check if the maximum product is a single number or a subarray\n    if max_product > max_subarray[0] * max_subarray[1]:\n        return max_product\n    else:\n        return max_subarray[0] * max_subarray[1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n            start_index = i\n\n        if current_product < 0:\n            current_product = 1\n\n    current_product = 1\n    for i in range(len(arr)-1, -1, -1):\n        current_product *= arr[i]\n\n        if current_product > max_product:\n            end_index = i\n\n    return max_product, arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            start = i\n            end = i\n        elif current_product == 0:\n            current_product = 1\n            start = i+1\n            end = i+1\n        else:\n            end = i\n    return arr[start:end+1], max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    \n    for num in arr:\n        max_ending_here *= num\n        \n        if max_ending_here < 0:\n            max_ending_here = 1\n        \n        if max_ending_here > max_product:\n            max_product = max_ending_here\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        curr_product *= num\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n        if curr_product < 0:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n        if curr_product < 0:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    curr_product = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], arr[i] * curr_product, arr[i] * max_product)\n        max_product = max(curr_product, max_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n\n        max_ending_here *= arr[i]\n        min_ending_here *= arr[i]\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values are the same in a dictionary.\n\n    Parameters:\n        dict (dict): A dictionary of values.\n        n (int): The number of keys in the dictionary.\n\n    Returns:\n        bool: True if all values are the same, False otherwise.\n    '''\n\n    # Check if dictionary is empty\n    if n == 0:\n        return True\n\n    # Get first value in dictionary\n    first_value = next(iter(dict.values()))\n\n    # Check if all values are the same\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n    '''\n    values = list(dict.values())\n    return all(values[0] == val for val in values[1:])"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[i] for i in dict]\n    return len(set(values)) <= 1"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function checks if all the values in a dictionary are same or not.\n    If they are same, it returns True else False.\n    '''\n    values = list(dictionary.values())\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    This function checks if all values in a dictionary are same.\n\n    :param dictionary: A dictionary to be checked.\n    :param n: A value to check if it is present in the dictionary or not.\n    :return: True if all values are same in the dictionary, False otherwise.\n    \"\"\"\n\n    # Checking if the dictionary is empty or not\n    if not dictionary:\n        return False\n\n    # Getting the first value of the dictionary\n    first_value = next(iter(dictionary.values()))\n\n    # Checking if all values in the dictionary are same or not\n    for value in dictionary.values():\n        if value!= first_value:\n            return False\n\n    # Checking if the value to be checked is present in the dictionary or not\n    if n in dictionary.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if list(dict.values()).count(list(dict.values())[0])!= n:\n            return False\n        dict.popitem()\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n\n    Args:\n        dict (dict): A dictionary of values to check.\n        n (int): The number of values to compare.\n\n    Returns:\n        bool: True if all values are the same, False otherwise.\n    '''\n    values = list(dict.values())[:n]\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for i in range(1, n):\n        if list(dict.values())[i]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return len(set(values)) <= 1"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary and an integer 'n' as input and returns True if all the values in the dictionary are equal to 'n'. Otherwise, it returns False.\n    '''\n    for value in dictionary.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Remove empty values from a dictionary.\n\n    Parameters:\n    dict1 (dict): A dictionary to be cleaned.\n\n    Returns:\n    dict: A new dictionary without empty values.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    This function drops empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    :param dict1: A dictionary to drop empty items from.\n    :type dict1: dict\n    :return: A new dictionary with empty items removed.\n    :rtype: dict\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1] * arr[i], arr[i])\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n    # Initialize variables\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        # Update variables for max product\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        # Update max_product\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        max_prod = 1\n        for i in range(n):\n            max_prod *= arr[i]\n            if max_prod < 0:\n                max_prod = 1\n        return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        if num > max_ending_here:\n            max_ending_here = num\n            min_ending_here = num\n        elif num < max_ending_here:\n            min_ending_here = num\n        \n        max_so_far = max(max_so_far, max_ending_here, max_ending_here * min_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # find the maximum and second maximum numbers in the array\n        max1 = max2 = arr[0]\n        if arr[1] > max1:\n            max2 = max1\n            max1 = arr[1]\n        elif arr[1] > max2:\n            max2 = arr[1]\n        for i in range(2, n):\n            if arr[i] > max1:\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max2 = arr[i]\n        # find the maximum product between the maximum and second maximum numbers\n        if max1 <= 0:\n            return max1 * max2\n        else:\n            return max(arr[n-1] * max1, arr[n-1] * max2)"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0]*arr[1], arr[0], arr[1])\n    else:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > current_product:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n            \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize max and min values\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # Initialize the result\n    max_product = float('-inf')\n    \n    # Traverse through the array and update max and min values\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        \n        # Update the result if the current subsequence's product is greater\n        max_product = max(max_product, max_val * min_val)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            temp = max(arr[i], max_ending_here * arr[i], max_so_far * arr[i])\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            max_so_far = max(temp, max_so_far)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Returns the maximum product of an increasing subsequence of arr.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None # no increasing subsequence of length 1 or 0\n    \n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, n):\n        # calculate the maximum product ending at index i\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        # calculate the maximum product so far\n        max_so_far = max(max_so_far, max_ending_here)\n        # calculate the minimum product ending at index i\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        # calculate the minimum product so far\n        min_so_far = min(min_so_far, min_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i] + test_tup[i+1]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the sum of the neighboring elements.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(1, n):\n        result.append(test_tup[i-1] + test_tup[i])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i]+test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1], test_tup[1] + test_tup[-2], test_tup[-2] + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes two arguments, an array 'arr' and a number 'n'\n    It returns the product of the array multiplication modulo n\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_product_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n    \"\"\"\n    prod = 1\n    for num in arr:\n        prod *= num\n        prod %= n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate through the array and multiply each element with the product\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n        # If the product exceeds n, return the remainder of the product divided by n\n        if product > n:\n            return product % n\n        \n    # If the product is less than or equal to n, return n\n    return n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr: \n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i]\n        product = product % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n\n    :param arr: list of integers, the array to be multiplied\n    :param n: integer, the modulo value\n    :return: integer, the product of the array multiplication modulo n\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else it returns False.\n    '''\n    n = len(l)\n    for i in range(n):\n        if i+2 <= n-1 and l[i] == l[i+1] - 1 == l[i+2] - 2:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    \n    for i in range(len(l)):\n        if i == len(l)-1:\n            return False\n        if l[i] == l[i+1]-1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if abs(l[i+1]-l[i]) == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise False.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    If the input list contains consecutive numbers, then it will return True, otherwise, it will return False.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples as input and returns a new list of tuples containing the intersection of tuples in both lists.\n    '''\n    set1 = set(tuple(x) for x in test_list1)\n    set2 = set(tuple(x) for x in test_list2)\n    intersection_set = set1 & set2\n    return [list(x) for x in intersection_set]"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples\n    intersection_list = [(elem1, elem2) for elem1 in test_list1 for elem2 in test_list2 if elem1 == elem2]\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if sorted(test_list1[i]) == sorted(test_list2[j]):\n                intersection.append(test_list1[i])\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set([tuple(sorted(i)) for i in test_list1])\n    set2 = set([tuple(sorted(i)) for i in test_list2])\n    return list(set1 & set2)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create two sets of tuples from the input lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets of tuples\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(map(tuple, intersection))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists as input and returns the intersection of their tuples irrespective of their order.\n\n    Args:\n        test_list1: A list of tuples.\n        test_list2: A list of tuples.\n\n    Returns:\n        A list of tuples that are present in both input lists.\n    \"\"\"\n\n    # Create a set of tuples from the first list.\n    set1 = set(test_list1)\n\n    # Create a set of tuples from the second list.\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets.\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples.\n    intersection_list = list(intersection_set)\n\n    # Return the intersection list.\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create two dictionaries to store the count of each element in the two lists\n    dict1 = {}\n    dict2 = {}\n    for item in test_list1:\n        dict1[item] = dict1.get(item, 0) + 1\n    for item in test_list2:\n        dict2[item] = dict2.get(item, 0) + 1\n\n    # Find the intersection of elements\n    intersection = set(dict1.keys()) & set(dict2.keys())\n\n    # Create a new list of tuples containing the intersection of elements\n    result = []\n    for item in intersection:\n        count = min(dict1[item], dict2[item])\n        for i in range(count):\n            result.append(item)\n\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create an empty set to store the unique tuples\n    intersection_set = set()\n\n    # Iterate through each tuple in the first list\n    for tup1 in test_list1:\n        # Check if the tuple is present in the second list\n        if tup1 in test_list2:\n            # If yes, add it to the intersection set\n            intersection_set.add(tup1)\n\n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old one.\n\n    Returns:\n    str: The updated string with the replaced characters.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    # Convert the string to a list of characters\n    str1_list = list(str1)\n\n    # Iterate over the list of characters and replace the characters\n    for i in range(len(str1_list)):\n        if str1_list[i] == ch:\n            str1_list[i] = newch\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(str1_list)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of the character 'ch' in the string'str1' with 'newch' and returns the modified string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of character 'ch' in string'str1' with 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a specified character in a string with a new character.\n    :param str1: A string to replace characters in\n    :param ch: The character to replace\n    :param newch: The new character to replace the old character with\n    :return: A new string with the replaced characters\n    '''\n\n    # Convert the string to a list of characters\n    str1_list = list(str1)\n\n    # Iterate over the list and replace the character if found\n    for i in range(len(str1_list)):\n        if str1_list[i] == ch:\n            str1_list[i] = newch\n\n    # Convert the list back to a string and return it\n    return ''.join(str1_list)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    # create a new string with the new character\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Args:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old one.\n\n    Returns:\n    str: The updated string.\n    \"\"\"\n    updated_str = str1.replace(ch, newch)\n    return updated_str"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value in descending order.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest number in the array.\n    '''\n    # Finding the largest number in the array\n    largest = max(nums)\n    \n    # Finding the smallest number in the array\n    smallest = min(nums)\n    \n    # Returning the sum of the largest and smallest number\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest number in the array.\n    \"\"\"\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the smallest and largest values in the array\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are in lower case, otherwise, it returns False.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case, else it returns False.\n    '''\n    return string.islower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1, flags=re.IGNORECASE)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # Finding all lowercase substrings using regex\n    lowercase_substrings = re.findall(r'\\b\\w*[a-z]\\w*\\b', str1)\n    # Removing all lowercase substrings from the original string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Returning the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all substrings that contain only lowercase letters\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    substrings = pattern.findall(str1)\n    \n    # Remove the substrings that contain only lowercase letters from the original string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Use regular expression to find all lowercase substrings in the string\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b', re.IGNORECASE)\n    lowercase_substrings = pattern.findall(str1)\n\n    # Replace all lowercase substrings with an empty string and return the modified string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function removes lowercase substrings from the given string.\n    \"\"\"\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    # use regex to find all lowercase substrings in the string\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    matches = pattern.findall(str1)\n    # replace each lowercase substring with empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all substrings containing lowercase characters.\n    '''\n    # Using regular expression to match all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Using a list comprehension to remove all lowercase substrings from the string\n    filtered_string = ''.join(sub for sub in str1.split() if sub not in lowercase_substrings)\n    \n    # Returning the filtered string\n    return filtered_string"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a number as an integer.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the given number.\n    '''\n    if n < 0:\n        n *= -1\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an input and returns the first digit of the number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function will find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Check if the number is negative\n    if n < 0:\n        # If the number is negative, return the absolute value of the first digit of the number\n        return abs(n) // 10**(len(str(abs(n)))-1)\n    else:\n        # If the number is positive, return the first digit of the number\n        return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function returns the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers in the list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    '''\n    odds = []\n    for num in lst:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd(nums):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list containing only the odd ones from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_odd_numbers(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_numbers = []\n    for num in numbers:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for i in lst:\n        if i%2!= 0:\n            odd_lst.append(i)\n    return odd_lst"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    \n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # find the difference between the two\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    # initialize sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_numbers = 0\n\n    # calculate sum of cubes and sum of natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n\n    # return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    # sum of first n natural numbers\n    sum1 = n * (n+1) * (2*n+1) // 6\n    \n    # sum of cubes of first n natural numbers\n    sum2 = n**3\n    \n    # difference between the sums\n    return sum2 - sum1"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    # Finding the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Finding the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Finding the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])  # sum of cubes of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))  # sum of the first n natural numbers\n    \n    return sum_of_cubes - sum_of_n  # difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    return (n*(n+1)*(2*n+1))/6 - (n*(n+1))/2"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n        \n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])%2!=0):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] ^ A[j] & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i] ^ A[j]) & 1):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize the count\n    count = 0\n\n    # iterate over all pairs of elements in A\n    for i in range(N):\n        for j in range(i + 1, N):\n            # calculate the xor value of the pair\n            xor_value = A[i] ^ A[j]\n\n            # if the xor value is odd, increment the count\n            if xor_value & 1 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1 == 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings and extract their digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    \n    # calculate the sum of the per-digit differences\n    sum_diff = sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and split them into individual digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the sum of the per-digit difference\n    distance_sum = sum([abs(d1-d2) for d1, d2 in zip(digits1, digits2)])\n    \n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes in two integers as arguments and returns the sum of the per-digit difference between them.\n    '''\n    # convert the integers into strings so we can iterate over their digits\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # initialize a variable to store the sum of the differences\n    diff_sum = 0\n    \n    # iterate over the digits of each string and add their difference to the sum\n    for i in range(len(s1)):\n        diff_sum += abs(int(s1[i]) - int(s2[i]))\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    n1_list.sort()\n    n2_list.sort()\n    result = 0\n    for i in range(len(n1_list)):\n        result += abs(int(n1_list[i]) - int(n2_list[i]))\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum to zero\n    sum_diff = 0\n    \n    # Loop over the digits in the strings\n    for i in range(len(n1_str)):\n        # Add the absolute difference between the corresponding digits to the sum\n        sum_diff += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    for i in range(len(n1_digits)):\n        sum_diff += abs(n1_digits[i] - n2_digits[i])\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for digit in str(n1):\n        digit_sum += abs(int(digit) - int(n2))\n    for digit in str(n2):\n        digit_sum += abs(int(digit) - int(n1))\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    for i in range(len(n1_digits)):\n        digit_sum += abs(n1_digits[i] - n2_digits[i])\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    if len(n1_str)!= len(n2_str):\n        return \"Error: Integers are not of the same length.\"\n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers, n1 and n2, and returns the sum of the per-digit\n    difference between the two integers.\n    '''\n    # Convert n1 and n2 to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Calculate the length of the strings\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # Initialize the sum of per-digit differences to 0\n    digit_diff_sum = 0\n    \n    # Loop through each digit in n1 and n2\n    for i in range(max(n1_len, n2_len)):\n        # If the digit is not present in n2, use the digit from n1\n        if i >= n2_len:\n            digit = int(n1_str[i])\n        # If the digit is not present in n1, use the digit from n2\n        elif i >= n1_len:\n            digit = int(n2_str[i])\n        # If the digit is present in both n1 and n2, use the digit from n1\n        else:\n            digit = int(n1_str[i])\n        \n        # Calculate the absolute difference between the digits\n        digit_diff = abs(digit - int(n2_str[i]))\n        \n        # Add the absolute difference to the sum of per-digit differences\n        digit_diff_sum += digit_diff\n    \n    # Return the sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    for i in range(1, size):\n        curr_sum += a[i]\n        if curr_sum < a[i]:\n            curr_sum = a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]  # initialize max_sum as the first element of the array\n    current_sum = a[0]  # initialize current_sum as the first element of the array\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])  # update current_sum\n        max_sum = max(max_sum, current_sum)  # update max_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list `a` and its size as input and returns the sum of the largest contiguous sublist in the list.\n    '''\n    max_so_far = a[0]  # Initialize the maximum sum found so far as the first element of the list\n    max_ending_here = a[0]  # Initialize the maximum sum ending at the current position as the first element of the list\n\n    for i in range(1, size):\n        # Update the maximum sum ending at the current position\n        max_ending_here = max(a[i], max_ending_here + a[i])\n\n        # Update the maximum sum found so far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function finds the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]  # Initialize max_so_far with the first element of the list\n    max_ending_here = a[0]  # Initialize max_ending_here with the first element of the list\n\n    # Traverse through the array and update max_so_far and max_ending_here\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples and store it in a set\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_union_list = sorted(list(union_set))\n\n    # Print the sorted list of union elements\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty set to store the union of the two tuples\n    union_set = set()\n\n    # Add all elements of the first tuple to the set\n    for elem in test_tup1:\n        union_set.add(elem)\n\n    # Add all elements of the second tuple to the set\n    for elem in test_tup2:\n        union_set.add(elem)\n\n    # Convert the set to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(set(test_tup2))\n    return sorted(list(union))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    \n    # Sort the union of the two tuples in ascending order\n    union = sorted(union)\n    \n    # Return the sorted union of the two tuples\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set() method\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Combine the two tuples into a new tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates by converting the tuple to a set and back to a tuple\n    unique_tup = tuple(set(combined_tup))\n    \n    # Sort the unique tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    \n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Find the union of the two tuples\n    union = tuple(set(test_tup1).union(set(test_tup2)))\n\n    # Sort the union in ascending order\n    union_sorted = sorted(union)\n\n    # Print the result\n    print(union_sorted)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of elements from each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the two sets\n    union_set = set1.union(set2)\n    # convert the set to a sorted list\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1) | set(test_tup2)\n    return sorted(list(union))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Converting tuples to sets to find the union of elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Finding the union of sets\n    union_set = set1.union(set2)\n\n    # Converting set back to tuple and sorting\n    final_tuple = tuple(sorted(union_set))\n\n    return final_tuple"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max_length(lst):\n    max_length = 0\n    temp_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == 1:\n            temp_length += 1\n        else:\n            if temp_length > max_length:\n                max_length = temp_length\n            temp_length = 0\n            \n    if temp_length > max_length:\n        max_length = temp_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > longest_length:\n                longest_length = len(sublist)\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        current_length = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] == lst[i]:\n                current_length += 1\n            else:\n                break\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    current_len = 0\n\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n            current_len = 0\n\n    if current_len > max_len:\n        max_len = current_len\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([\\w\\s]+)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into its characters.\n\n    :param word: a string to split into characters\n    :return: a list of characters\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer 'n' and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    else:\n        # Initialize a variable to store the sum\n        sum_of_digits = 0\n\n        # Iterate through each digit of the number and add it to the sum\n        while n > 0:\n            sum_of_digits += n % 10\n            n = n // 10\n\n        # Return the sum of digits\n        return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        sum = 0\n        while n!= 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None\n    else:\n        sum = 0\n        while n!= 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input, please enter a non-negative integer.\"\n    else:\n        digits_sum = 0\n        while n!= 0:\n            digits_sum += n % 10\n            n //= 10\n        return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through each digit in the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum += digit\n        \n        # Remove the last digit from the number\n        n = n // 10\n        \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    \n    digit = n % 10\n    return digit + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input: n should be non-negative\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n = n // 10\n        return sum"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    else it returns False.\n    \"\"\"\n    if lst == sorted(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(lst):\n    '''\n    Returns True if the list is sorted, False otherwise.\n    '''\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n\n    # Traverse through all array elements\n    for i in range(n):\n\n        # Last i elements are already sorted\n        for j in range(0, n-i-1):\n\n            # Swap if the element found is greater than the next element\n            if list1[j] > list1[j+1] :\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n\n    # If no swapping is done, then array is sorted\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a specified list is sorted or not.\n    \n    Parameters:\n    lst (list): The list to be checked.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    This function creates a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as an input, and removes the duplicate elements from the inner lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        unique_num_list = []\n        for num in num_list:\n            if num not in unique_num_list:\n                unique_num_list.append(num)\n        unique_nums.append(unique_num_list)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = list(set(nums[0]))\n    \n    for i in range(1, len(nums)):\n        unique_nums = list(set(unique_nums) & set(nums[i]))\n        \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function will return two unique numbers from a list of numbers.\n    \"\"\"\n    unique_nums = set(nums)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return sorted(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set of unique numbers from the first list\n    unique_nums = set(nums[0])\n    \n    # Loop over the remaining lists and add their unique numbers to the set\n    for lst in nums[1:]:\n        unique_nums.update(set(lst))\n    \n    # If the set has less than 2 unique numbers, return None\n    if len(unique_nums) < 2:\n        return None\n    \n    # Otherwise, return a tuple with the two unique numbers\n    return tuple(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set of unique numbers from all lists\n    unique_nums = set(sum(nums, []))\n\n    # find two unique numbers from the set\n    if len(unique_nums) < 2:\n        return []\n    else:\n        unique_nums = list(unique_nums)\n        return [unique_nums[0], unique_nums[1]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns two unique numbers from the list.\n    If there are no unique numbers in the list, it returns None.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return unique_nums[0], unique_nums[1]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list of lists where each sublist has only two unique numbers.\n    '''\n    result = []\n    for sublist in nums:\n        unique_nums = set(sublist)\n        if len(unique_nums) == 2:\n            result.append(list(unique_nums))\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) < 2:\n        return []\n    return [unique_nums[0], unique_nums[1]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(lst):\n    \"\"\"\n    Returns the product of the unique numbers in the given list.\n    \"\"\"\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes in a list of integers and returns the product of the unique numbers in the list.\n    '''\n\n    # Create an empty set to store the unique numbers in the list\n    unique_nums = set()\n\n    # Loop through the list and add each unique number to the set\n    for num in list_data:\n        unique_nums.add(num)\n\n    # Calculate the product of the unique numbers in the set\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    # Return the product of the unique numbers in the list\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set()\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.add(number)\n    \n    product = 1\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and the height of the cylinder as inputs and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n\nprint(surfacearea_cylinder(5,10)) # Output: 314.1592653589793"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius of the cylinder and its height as input,\n    and returns the surface area of the cylinder.\n    '''\n    area = 2 * 3.14 * r * (r + h)\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    set_B = set(B)\n    for i in range(len(A)-len(B)+1):\n        if set(A[i:i+len(B)]) == set_B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as arguments and returns True if the first list is a sublist of the second list,\n    otherwise False.\n\n    Args:\n    A (list): A list of integers.\n    B (list): A list of integers.\n\n    Returns:\n    bool: True if A is a sublist of B, otherwise False.\n    \"\"\"\n    if A == []:\n        return True\n    if len(A) > len(B):\n        return False\n\n    i = 0\n    while i < len(B) - len(A) + 1:\n        j = 0\n        while j < len(A):\n            if B[i+j]!= A[j]:\n                break\n            j += 1\n        if j == len(A):\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if A is a sublist of B, otherwise False.\n    \"\"\"\n    if not A:  # check if A is empty\n        return True\n    if not B:  # check if B is empty\n        return False\n    if A[0] == B[0]:  # check if the first element of A matches the first element of B\n        return is_sub_array(A[1:], B[1:])\n    else:\n        return is_sub_array(A, B[1:])  # check if A is a sublist of the remaining elements of B\n"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function checks whether a list is sublist of another or not.\n    It takes two arguments, A and B. A is the main list and B is the sublist.\n    It returns True if A is a sublist of B, else False.\n    '''\n    if len(B) > len(A):\n        return False\n    if A == B[:len(A)]:\n        return True\n    else:\n        return is_Sub_Array(A,B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    Check whether A is a sublist of B or not.\n\n    :param A: The list to be checked\n    :param B: The list that contains A\n    :return: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    if A == []:\n        return True\n    if A[0] not in B:\n        return False\n    return is_sub_array(A[1:], B[B.index(A[0]):])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as inputs and returns True if B is a sublist of A, else False.\n    \"\"\"\n    if not B:  # check if B is empty list\n        return True\n    if len(A) < len(B):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as arguments and returns True if the first list is a sublist of the second list, otherwise it returns False.\n    '''\n    # If the length of the second list is less than the length of the first list, return False\n    if len(B) < len(A):\n        return False\n\n    # If the length of the second list is equal to the length of the first list, then check if all elements of the first list are present in the second list\n    if len(B) == len(A):\n        for i in A:\n            if i not in B:\n                return False\n        return True\n\n    # If the length of the second list is greater than the length of the first list, then check for all possible sublists of the second list\n    for i in range(len(B) - len(A) + 1):\n        for j in range(len(A)):\n            if B[i+j]!= A[j]:\n                break\n        else:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether list A is a sublist of list B or not.\n    \"\"\"\n    if A == []:\n        return True\n    if len(A) > len(B):\n        return False\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    return is_Sub_Array(A, B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check if list B is a sublist of list A.\n    \"\"\"\n    if not B:  # if B is empty, then it is always a sublist of A\n        return True\n    if not A:  # if A is empty, then it cannot be a sublist of B\n        return False\n    \n    # iterate over the elements of A, one by one, trying to find B as a sublist\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list is a sublist of the second list,\n    otherwise it returns False.\n    \"\"\"\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    # check if n is negative or zero\n    if n <= 0:\n        return None\n    \n    # compute the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # compute the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return int(str(factorial)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n!\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        while n > 0:\n            fact = fact * n\n            n = n - 1\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number n as input and returns the last digit of the factorial of n.\n    '''\n    # If n is less than or equal to 1, then the factorial is 1 and the last digit is also 1\n    if n <= 1:\n        return 1\n    \n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    # Initialize a variable to store the factorial of n\n    fact = 1\n    \n    # Calculate the factorial of n\n    for i in range(1, n+1):\n        fact = fact * i\n        \n    # Get the last digit of the factorial\n    last_digit = fact % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check that all lists are of equal length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must be of equal length.\")\n    \n    # Use list comprehension to interleave the three lists\n    flat_list = [x for pair in zip(list1, list2, list3) for x in pair]\n    \n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"The three input lists must be of equal length\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Error: all lists must be of the same length.\"\n    else:\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"The input lists must have the same length\")\n\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import itertools\n\ndef interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n\n    return list(itertools.chain(*zip(list1, list2, list3)))"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"Lists must have the same length.\")\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for pair in zip(list1,list2,list3) for x in pair]"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n    \n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n            \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty set to store the dissimilar elements\n    dissimilar = set()\n    \n    # Loop through each element in the first tuple\n    for elem in test_tup1:\n        # If the element is not in the second tuple, add it to the dissimilar set\n        if elem not in test_tup2:\n            dissimilar.add(elem)\n    \n    # Loop through each element in the second tuple\n    for elem in test_tup2:\n        # If the element is not in the first tuple, add it to the dissimilar set\n        if elem not in test_tup1:\n            dissimilar.add(elem)\n    \n    # Return the dissimilar set\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the elements that are present in both tuples but have different values.\n    \"\"\"\n    dissimilar_tup = ()\n    for i in test_tup1:\n        if i in test_tup2 and test_tup1[i]!= test_tup2[i]:\n            dissimilar_tup += (i,)\n    return dissimilar_tup"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a list of the elements that are not the same in both tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function finds the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, int):\n            if even_fnc(i):\n                new_tuple.append(i)\n        else:\n            new_tuple.append(even_ele(i, even_fnc))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, int):\n            if even_fnc(i):\n                result.append(i)\n        elif isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(i)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, (int, float)):\n            if even_fnc(element):\n                result.append(element)\n        elif isinstance(element, tuple):\n            nested_result = even_ele(element, even_fnc)\n            if nested_result:\n                result.append(tuple(nested_result))\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function removes the uneven elements from the nested mixed tuple and returns a new tuple with only even elements.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, int) and even_fnc(i):\n            new_tuple.append(i)\n        elif isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    This function returns True if the given number is even, and False otherwise.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            nested_result = even_ele(ele, even_fnc)\n            if len(nested_result) > 0:\n                result.append(nested_result)\n        elif even_fnc(ele):\n            result.append(ele)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    test_tuple (tuple): A tuple that may contain nested tuples.\n    even_fnc (function): A function that takes a number and returns True if it is even, False otherwise.\n\n    Returns:\n    A new tuple with uneven elements removed.\n    '''\n    def helper(t):\n        if isinstance(t, tuple):\n            return tuple(filter(even_fnc, t))\n        else:\n            return t\n\n    return tuple(map(helper, test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple = []\n            for j in i:\n                if even_fnc(j):\n                    new_tuple.append(j)\n            new_list.append(tuple(new_tuple))\n        else:\n            if even_fnc(i):\n                new_list.append(i)\n    return tuple(new_list)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    This function takes a nested tuple as input and returns a new tuple containing only the even elements.\n    The even_fnc parameter should be a function that takes a single argument and returns True if the argument is even, False otherwise.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculate the area of the square base\n    area_base = (b**2)\n    \n    #calculate the area of the square face\n    area_face = (b*s)\n    \n    #calculate the area of the pyramid\n    area_pyramid = (2*area_base) + (2*area_face)\n    \n    #calculate the total surface area\n    total_surface_area = area_base + (2*area_face)\n    \n    #return the total surface area\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the area of the base\n    area_base = 4 * b ** 2\n    # Find the area of the square on the top of the pyramid\n    area_square = s ** 2\n    # Find the area of the triangle on the top of the pyramid\n    area_triangle = (b * s) / 2\n    # Find the total surface area of the pyramid\n    total_area = area_base + area_square + area_triangle\n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    area = (4 * b * s) + (b * b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes the base edge and height of the square pyramid as input and returns the surface area of the pyramid.\n    '''\n    return 4*b*s + 2*(b*b + s*s)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of one base\n    base_area = b ** 2\n\n    # Calculate the area of the square face\n    square_area = 4 * base_area\n\n    # Calculate the area of the triangle faces\n    triangle_area = (b * s) / 2\n\n    # Calculate the total surface area\n    total_area = 2 * base_area + square_area + 3 * triangle_area\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    slant_height = height * (2 ** 0.5) # height of the slant\n    surface_area = (4 * base_edge) + (4 * base_edge * slant_height) # total surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (6 * s) + (4 * b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculate the surface area of a square pyramid.\n\n    :param b: the length of the base edge of the pyramid (in meters)\n    :param s: the height of the pyramid (in meters)\n    :return: the surface area of the pyramid (in square meters)\n    '''\n\n    # Calculate the area of each face of the pyramid\n    face_area = 4 * b * s\n\n    # Calculate the area of the top square of the pyramid\n    top_area = b ** 2\n\n    # Calculate the total surface area of the pyramid\n    total_area = 2 * face_area + 2 * top_area\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Returns the surface area of a square pyramid with base edge b and height s.\n    '''\n    # Calculate the area of each face of the square pyramid\n    area1 = b * s / 2\n    area2 = b ** 2 / 2\n    area3 = b * s / 2\n    area4 = b ** 2 / 2\n    area5 = b ** 2 / 2\n    \n    # Calculate the total surface area\n    surface_area = 2 * area1 + 2 * area2 + 2 * area3 + 2 * area4 + 2 * area5\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (6*b*s) + (4*b**2)\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    return bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_sum = 0\n        for i in range(num):\n            catalan_sum += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan_sum"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes an integer as an argument and returns the nth catalan number.\n\n    Args:\n    num (int): A positive integer\n\n    Returns:\n    int: The nth catalan number\n\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan_numbers = [catalan_number(i) for i in range(num)]\n        return sum([catalan_numbers[i]*catalan_numbers[num-i-1] for i in range(num//2)])"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, num+1):\n            result = result * i * (2*num - i + 1) // (i + 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[1] = 1\n        \n        for i in range(2, num + 1):\n            catalan[i] = catalan[i - 1] * (2 * i - 1) // i\n            \n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    if num == 0:\n        return 1\n    catalan_sum = 0\n    for i in range(num):\n        catalan_sum += catalan_number(i) * catalan_number(num - i - 1)\n    return catalan_sum"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        c = 1\n        for i in range(2, num+1):\n            c = (2 * i - 1) * c // i\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    This function returns nth catalan number.\n    '''\n\n    # Initialize the catalan array with 1's\n    catalan = [1] * (num + 1)\n\n    # Calculate the catalan numbers iteratively\n    for i in range(2, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [0] * (num + 1)\n    c[0] = 1\n    c[1] = 1\n    \n    for i in range(2, num + 1):\n        c[i] = 0\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n            \n    return c[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nadverb, position = find_adverbs(text)\nprint(adverb, position)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"The first adverb ending with 'ly' is '{adverb}' starting at index {start} and ending at index {end}.\")\n    else:\n        print(\"No adverb ending with 'ly' found in the text.\")\n\ntext = \"I went to school, played tennis, and slept well.\"\nfind_adverbs(text)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        return adverb, match.span()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # find all occurrences of adverbs ending with 'ly'\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # return the first adverb and its positions if there is at least one\n    if adverbs:\n        first_adverb = adverbs[0]\n        positions = [m.start() for m in re.finditer(first_adverb, text)]\n        return first_adverb, positions\n    else:\n        return None, []"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w+ly)\\b'\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.group(1), match.start(), match.end()))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r\"\\b\\w+ly\\b\")\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb ending with ly found at position {match.start()} - {match.end()}\")"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a list of tuples with (item, price)\n    item_prices = [(item, price) for item, price in items]\n    \n    # Use heapq.nlargest to find the n most expensive items\n    most_expensive_items = heapq.nlargest(n, item_prices, key=lambda x: x[1])\n    \n    return most_expensive_items"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a max-heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    # return the n most expensive items in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of tuples representing items with their prices and\n    returns a list of the n most expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n\nitems = [('apple', 1.5), ('banana', 0.5), ('orange', 2.0), ('pear', 1.2), ('grape', 3.0)]\nn = 3\nresult = expensive_items(items, n)\nprint(result)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item.price, item))\n\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    \n    result = []\n    for i in range(n):\n        price, name = heapq.heappop(heap)\n        result.append({'name': name, 'price': price})\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\nitems = [\n    {'name': 'item1', 'price': 10},\n    {'name': 'item2', 'price': 20},\n    {'name': 'item3', 'price': 15},\n    {'name': 'item4', 'price': 30},\n    {'name': 'item5', 'price': 25}\n]\n\nprint(expensive_items(items, 3))"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    # Split the list at the nth element and get the first part\n    first_part = l[:n]\n    # Get the second part of the list after the nth element\n    second_part = l[n:]\n    # Add the first part to the end of the list\n    result = second_part + first_part\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Index out of range\"\n    else:\n        first_part = l[:n]\n        last_part = l[n:]\n        l.clear()\n        l.extend(last_part)\n        l.extend(first_part)\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    This function splits a list at the nth element and adds the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function converts a list to a tuple.\n\n    Parameters:\n    lst (list): The list to be converted.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    :param lst: A list to be converted to a tuple.\n    :return: A tuple with the same elements as the list.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the tuple of the same list.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as an argument and returns a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function takes a list as input and returns a tuple containing the same elements.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(nums)\n    max_val = max(nums)\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function finds the difference between the largest and smallest values in a given list of numbers.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function finds the difference between the largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n    \"\"\"\n    # Compute the square root of b\n    b_sqrt = int(b**0.5) + 1\n    \n    # Iterate over the numbers from a to b_sqrt\n    for i in range(a, b_sqrt):\n        # Check if i is a perfect square\n        if i**2 == b:\n            print(i)\n            break\n    \n    # Iterate over the numbers from b_sqrt to b\n    for i in range(b_sqrt, b+1):\n        # Check if i is a perfect square\n        if i**2 == b:\n            print(i)\n            break"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers as input and returns a list of all perfect squares between them.\n    '''\n    # Create an empty list to store the perfect squares\n    squares = []\n    # Loop through all numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function will find the perfect squares between a and b (inclusive)\n    \"\"\"\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i == 0:\n            perfect_squares.append(0)\n        elif i == 1:\n            perfect_squares.append(1)\n        else:\n            is_perfect = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_perfect = False\n                    break\n            if is_perfect:\n                perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through all integers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            # If it is, add it to the list of perfect squares\n            perfect_squares.append(num)\n\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all the perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store the perfect squares\n    squares = []\n    \n    # loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # check if the number is a perfect square\n        root = int(i ** 0.5)\n        if root * root == i:\n            # if the number is a perfect square, append it to the squares list\n            squares.append(i)\n    \n    # return the squares list\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return \"Both inputs must be positive integers.\"\n    elif a == 0 and b == 0:\n        return []\n    elif a > b:\n        return \"First input must be smaller than second input.\"\n    else:\n        result = []\n        for i in range(a, b+1):\n            if i == 0:\n                result.append(0)\n            elif i == 1:\n                result.append(1)\n            else:\n                is_square = False\n                for j in range(2, int(i**0.5)+1):\n                    if i % j == 0:\n                        is_square = True\n                        break\n                if not is_square:\n                    result.append(i)\n        return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == 0:\n            continue\n        elif i == 1:\n            result.append(i)\n        else:\n            for j in range(1, i):\n                if i % j == 0:\n                    result.append(j)\n                    break\n    return result\n\nprint(perfect_squares(1, 20))"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num > 0:\n            root = num ** 0.5\n            if root == int(root):\n                squares.append(num)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = abs(complex(x, y))\n    theta = cmath.phase(complex(x, y))\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    Parameters:\n    - rho (float): distance from origin\n    - theta (float): angle in radians\n    Returns:\n    - (float, float): tuple of x and y coordinates\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function takes in the polar coordinates (r, theta) and returns the corresponding rectangular coordinates (x,y)\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Converts polar coordinates (r,theta) to rectangular coordinates (x,y).\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n        rho (float): The distance from the origin.\n        theta (float): The angle from the positive x-axis.\n\n    Returns:\n        tuple: A tuple containing the x and y coordinates.\n    '''\n\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(rho, phi):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(phi)\n    y = rho * cmath.sin(phi)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The distance from the origin.\n    theta (float): The angle from the positive x-axis in radians.\n\n    Returns:\n    (float, float): The rectangular coordinates (x, y).\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))[0]\n    theta = cmath.polar(complex(x,y))[1]\n    return r*cmath.cos(theta), r*cmath.sin(theta)\n\nprint(polar_rect(3,4)) # Output: (3.0, 4.0)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Swapped list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as an input and returns the list with the first and last elements interchanged.\n    \"\"\"\n    if len(newList) < 2:  # if the list has less than two elements, return the original list\n        return newList\n    else:\n        first_element = newList[0]  # get the first element of the list\n        last_element = newList[-1]  # get the last element of the list\n        newList[-1] = first_element  # replace the last element with the first element\n        newList[0] = last_element  # replace the first element with the last element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and swaps the first and last element of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as input and swaps the first and last element of the list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Store the first and last elements in variables\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    \n    # Interchange the first and last elements in the list\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and interchanges the first and last elements in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and swaps the first and last elements of the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an input and swaps the first and last elements of the list.\n    '''\n    if len(newList) >= 2:  # Check if the list has at least two elements\n        newList[0], newList[-1] = newList[-1], newList[0]  # Swap elements\n        print(newList)  # Print the modified list\n    else:\n        print(\"Error: The list should have at least two elements.\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        product = 1\n        for j in range(i+1):\n            product *= (n-j) // (j+1)\n        sum += product\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        sum += binomial(n, i)\n    return sum\n\ndef binomial(n, k):\n    \"\"\"\n    This function takes two integers n and k as input and returns the value of the binomial co-efficient.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    elif k == 1 or k == n - 1:\n        return n\n    else:\n        return binomial(n-1, k-1) * (n // (n-k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    if k > n - k:\n        k = n - k\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients up to n choose k.\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return int(binomial_Coeff(n-1, k-1) + (n-k+1)*binomial_Coeff(n-1, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function takes two arguments, n and k. It calculates the sum of the product of consecutive binomial co-efficients up to n choose k.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result*(n-i)/(i+1)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize sum to 0\n    result = 0\n    \n    # loop through each number from k to n\n    for i in range(k, n+1):\n        # calculate the binomial co-efficient for the given values of n and i\n        coefficient = math.comb(n, i)\n        \n        # multiply the coefficient with the previous sum\n        result *= coefficient\n        \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1\n    result = 0\n    \n    for i in range(k):\n        result += coeff\n        coeff *= (n - i) // (i + 1)\n        coeff //= i + 1\n    \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n: int, the value of n in n choose k\n        k: int, the value of k in n choose k\n\n    Returns:\n        int, the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n\n    # initialize the sum of product of consecutive binomial co-efficients to zero\n    sum_of_products = 0\n\n    # loop through the values of i from 1 to k\n    for i in range(1, k + 1):\n        # calculate the binomial co-efficient (n choose i)\n        binomial_coeff = int(math.comb(n, i))\n\n        # multiply the binomial co-efficient with i and add to the sum of products\n        sum_of_products += binomial_coeff * i\n\n    return sum_of_products"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'(?<!\\d)0+(\\d+)')\n    return pattern.sub(r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i].startswith('0'):\n                ip_list[i] = ip_list[i].lstrip('0')\n            if ip_list[i] == '':\n                ip_list[i] = '0'\n        return '.'.join(ip_list)\n    else:\n        return \"Invalid IP address format\""
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0' and i!= 0 and i!= 3:\n            ip_list.remove(ip_list[i])\n    ip_str = '.'.join(ip_list)\n    return ip_str"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'(?<!\\d)\\.(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # remove leading zeros from each octet of the ip address\n    ip = re.sub(r'^0+', '', ip)\n    # remove leading zeros from the whole ip address if it's all zeros\n    if ip == '0':\n        ip = '0.0.0.0'\n    # return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip_parts = ip.split('.')\n    for i in range(len(ip_parts)):\n        if ip_parts[i].startswith('0') and len(ip_parts[i]) > 1:\n            ip_parts[i] = ip_parts[i][1:]\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip_list = ip.split('.')\n    new_ip_list = []\n    for i in ip_list:\n        new_ip_list.append(str(int(i)))\n    new_ip = '.'.join(new_ip_list)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(\\d+\\.){3}\\d+', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)\n\nprint(removezero_ip('192.168.0.1')) # Output: 192.168.0.1\nprint(removezero_ip('0192.168.0.1')) # Output: 192.168.0.1\nprint(removezero_ip('255.255.255.0')) # Output: 255.255.255.0"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    elif list1[0] % 2 == 0:\n        return abs(list1[0] - list1[1])\n    else:\n        return abs(list1[0] - list1[1])"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Find the first even and first odd number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # Calculate the difference of the two numbers\n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    \n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    # Loop through the list to find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    # Loop through the list again to find the second even and second odd number\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    \n    # Return the difference of the two numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    even = odd = float('inf')  # set initial values to infinity\n    \n    for num in lst:\n        if num % 2 == 0 and num < even:  # check if number is even and smaller than previous even number\n            even = num\n        elif num % 2!= 0 and num < odd:  # check if number is odd and smaller than previous odd number\n            odd = num\n    \n    return even - odd  # return difference between even and odd numbers"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even = 0\n    odd = 0\n\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = list1[i]\n        else:\n            odd = list1[i]\n            break\n\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                diff = even - num\n                return diff\n        elif num % 2!= 0:\n            if odd is None:\n                odd = num\n            else:\n                diff = odd - num\n                return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    if even is not None and odd is not None:\n        return even - odd\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    if even_num and odd_num:\n        return abs(even_num - odd_num)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings and returns the minimum number of swaps required to convert one binary number to another.\n\n    Args:\n    str1 (string): First binary string to be compared.\n    str2 (string): Second binary string to be compared.\n\n    Returns:\n    int: Minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n\n    # If both strings are of equal length, then no swapping is required.\n    if len(str1) == len(str2):\n        return 0\n\n    # Convert both binary strings to lists of integers.\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n\n    # Initialize two variables to keep track of the number of swaps required.\n    swaps_required = 0\n    total_swaps = 0\n\n    # Loop through the lists until all digits in both lists are same.\n    while arr1!= arr2:\n\n        # Initialize two variables to keep track of the number of swaps for the current iteration.\n        current_swaps = 0\n\n        # Loop through the list and find the index of the first digit that is different in both lists.\n        for i in range(len(arr1)):\n            if arr1[i]!= arr2[i]:\n                index1 = i\n                break\n\n        # Loop through the list again and find the index of the next digit that is different in both lists.\n        for i in range(len(arr1)):\n            if i!= index1 and arr1[i]!= arr2[i]:\n                index2 = i\n                break\n\n        # Swap the digits at index1 and index2.\n        arr1[index1], arr1[index2] = arr1[index2], arr1[index1]\n        arr2[index1], arr2[index2] = arr2[index2], arr2[index1]\n\n        # Increment the number of swaps for the current iteration.\n        current_swaps += 1\n\n        # Increment the total number of swaps.\n        total_swaps += 1\n\n        # Increment the number of swaps required.\n        swaps_required += 1\n\n        # If the current number of swaps is greater than the number of digits in both lists, then return -1.\n        if current_swaps > len(arr1):\n            return -1\n\n    # Return the total number of swaps required to convert one binary number to another.\n    return swaps_required"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Find the lengths of both the strings\n    n = len(str1)\n    m = len(str2)\n    \n    # Initialize a list to store the count of swaps required\n    swap_count = [0] * (n+1)\n    \n    # Initialize a dictionary to store the indices of each character in str1\n    index_dict = {}\n    \n    # Store the indices of each character in str1 in the dictionary\n    for i in range(n):\n        index_dict[str1[i]] = i\n        \n    # Traverse the second string and count the swaps required for each character\n    for i in range(m):\n        char = str2[i]\n        if char in index_dict:\n            # Calculate the number of positions between the current index and the index of the character in str1\n            diff = abs(index_dict[char] - i)\n            \n            # Update the swap count based on the difference between indices\n            swap_count[diff] += 1\n            \n    # Count the total number of swaps required\n    total_swaps = sum(swap_count)\n    \n    return total_swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Create two dictionaries to store the frequency of each character in str1 and str2\n    freq_str1 = {}\n    freq_str2 = {}\n    for char in str1:\n        if char in freq_str1:\n            freq_str1[char] += 1\n        else:\n            freq_str1[char] = 1\n    for char in str2:\n        if char in freq_str2:\n            freq_str2[char] += 1\n        else:\n            freq_str2[char] = 1\n    \n    # Initialize two variables to keep track of the current and minimum number of swaps required\n    curr_swaps = 0\n    min_swaps = 0\n    \n    # Loop through each character in str2 and check if its frequency is less than or equal to the corresponding character in str1\n    for char in str2:\n        if char in freq_str1 and freq_str2[char] <= freq_str1[char]:\n            curr_swaps += freq_str1[char] - freq_str2[char]\n        elif char not in freq_str1:\n            curr_swaps += freq_str2[char]\n        else:\n            # If the frequency of the current character in str2 is greater than the corresponding character in str1,\n            # swap the character with the least frequent character in str1 to obtain the minimum number of swaps\n            for k, v in freq_str1.items():\n                if v < freq_str2[char]:\n                    freq_str1[k], freq_str1[char] = freq_str1[char], freq_str1[k]\n                    curr_swaps += freq_str2[char] - freq_str1[k]\n                    break\n        \n        # Update the minimum number of swaps if necessary\n        if curr_swaps < min_swaps or min_swaps == 0:\n            min_swaps = curr_swaps\n    \n    # Return the minimum number of swaps required to convert str1 to str2\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[j]!= str2[i] and j < n:\n                j += 1\n            if j == n:\n                return -1\n            str1[i], str1[j] = str1[j], str1[i]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary representations\n    bin1 = bin(int(str1, 2))[2:].zfill(len(str1))\n    bin2 = bin(int(str2, 2))[2:].zfill(len(str2))\n    \n    # Initialize variables for tracking swaps\n    swaps = 0\n    len1 = len(bin1)\n    len2 = len(bin2)\n    i = 0\n    \n    # Loop through the binary strings while swapping pairs of bits if needed\n    while i < len1:\n        if bin1[i]!= bin2[i]:\n            j = i + 1\n            while j < len1 and bin1[j] == bin2[j]:\n                j += 1\n            if j < len1:\n                bin1 = bin1[:i] + bin2[i:j][::-1] + bin1[j:]\n                swaps += 1\n        i += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    # convert both the string into list of binary digits\n    str1_list = [int(i) for i in str1]\n    str2_list = [int(i) for i in str2]\n    # iterate through both the strings\n    for i in range(n):\n        # if both strings have same digit at the same index\n        if str1_list[i] == str2_list[i]:\n            continue\n        # if the digit in str1 is different from the digit in str2\n        else:\n            # if the digit in str2 is 0\n            if str2_list[i] == 0:\n                # swap the digit in both strings\n                str1_list[i], str1_list[str2_list.index(1)] = str1_list[str2_list.index(1)], str1_list[i]\n                str2_list[i], str2_list[str1_list.index(1)] = str2_list[str1_list.index(1)], str2_list[i]\n                count += 1\n            else:\n                # swap the digit in str1 to 1\n                str1_list[i] = 1\n                # swap the digit in str2 to 0\n                str2_list[i] = 0\n                count += 2\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings into lists of integers\n    str1 = [int(i) for i in str1]\n    str2 = [int(i) for i in str2]\n    \n    # Initialize variables for swap count and pointers\n    count = 0\n    i = 0\n    j = 0\n    \n    # Iterate through both lists simultaneously\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            # If the values are the same, move both pointers\n            i += 1\n            j += 1\n        else:\n            # If the values are different, swap the values at the pointers\n            if str1[i] == 0 and str2[j] == 1:\n                str1[i], str2[j] = 1, 0\n                count += 1\n            elif str1[i] == 1 and str2[j] == 0:\n                str1[i], str2[j] = 0, 1\n                count += 1\n            else:\n                # If the values are not 0 or 1, they cannot be swapped\n                i += 1\n                j += 1\n    \n    # Add any remaining 1s to the swap count\n    count += str1[i:].count(1)\n    count += str2[j:].count(1)\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return -1\n    \n    # Convert the strings into lists of digits\n    num1 = [int(d) for d in str1]\n    num2 = [int(d) for d in str2]\n    \n    # Count the number of digits that need to be swapped\n    swaps = 0\n    for i in range(len(num1)):\n        if num1[i]!= num2[i]:\n            j = i\n            while j < len(num2) and num2[j]!= num1[i]:\n                j += 1\n            if j == len(num2):\n                return -1\n            swaps += 1\n            num2[i], num2[j] = num2[j], num2[i]\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    count = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    # Convert the strings to lists\n    str1_list = [int(i) for i in str1]\n    str2_list = [int(i) for i in str2]\n    # Iterate through both lists simultaneously and compare the elements\n    for i in range(n1):\n        for j in range(n2):\n            if str1_list[i] == str2_list[j]:\n                if i!= j:\n                    # Swap the elements\n                    temp = str1_list[i]\n                    str1_list[i] = str1_list[j]\n                    str1_list[j] = temp\n                    count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while j < n and str2[j] == str1[j]:\n                j += 1\n            if j == n:\n                return -1\n            str1[i], str1[j] = str1[j], str1[i]\n            count += 1\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of each tuple.\n    '''\n    size_list = []\n    for tuple in tuple_list:\n        size = sys.getsizeof(tuple)\n        size_list.append(size)\n    return size_list"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(f\"The size of the tuple is: {size} bytes\")"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(f\"The size of the tuple is {size} bytes.\")"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Returns the size of the given tuple in bytes.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    m, n = len(arr1), len(arr2)\n    if k > m + n:\n        return None\n    if k <= m:\n        return find_kth_helper(arr1, arr2[:n], k)\n    else:\n        return find_kth_helper(arr1[:m], arr2, k-m)\n\ndef find_kth_helper(arr1, arr2, k):\n    \"\"\"\n    Helper function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = min(k//2, len(arr1))\n    mid2 = min(k-mid1, len(arr2))\n    if arr1[mid1-1] <= arr2[mid2-1]:\n        return find_kth_helper(arr1[mid1:], arr2, k-mid1)\n    else:\n        return find_kth_helper(arr1, arr2[mid2:], k-mid2)\n"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    \n    if n > m:\n        arr1, arr2, n, m = arr2, arr1, m, n\n        \n    left = 0\n    right = n\n    \n    while left <= right:\n        mid1 = (left + right) // 2\n        mid2 = k - mid1\n        \n        if mid2 < 0 or mid2 > m:\n            left = mid1 + 1\n        elif mid1 == 0:\n            return arr2[mid2 - 1]\n        elif arr1[mid1 - 1] <= arr2[mid2 - 1]:\n            left = mid1 + 1\n        else:\n            right = mid1 - 1\n    \n    return arr1[left - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1  # swap the two arrays if arr1 is larger\n\n    # merge the two arrays\n    merged_arr = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # add the remaining elements from the two arrays\n    merged_arr += arr1[i:]\n    merged_arr += arr2[j:]\n\n    return merged_arr[k - 1]  # return the kth element"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    if count == k:\n        return arr1[i-1]\n    elif count < k:\n        return find_kth(arr2, arr1, k-count)\n    else:\n        return find_kth(arr1, arr2[k-count+1:], k)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return None\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1:], arr2, k-mid1-1)\n    elif arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2[mid2:], k-mid2-1)\n    else:\n        return arr1[mid1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays as input and finds the kth smallest element.\n    '''\n    # Initialize variables\n    i, j, count = 0, 0, 0\n    \n    # Traverse both arrays\n    while i < len(arr1) and j < len(arr2):\n        # Compare the first elements of both arrays\n        if arr1[i] < arr2[j]:\n            count += len(arr1) - i\n            i += 1\n        else:\n            count += len(arr2) - j\n            j += 1\n    \n    # If one of the arrays is exhausted, we simply add the remaining elements of the other array\n    count += len(arr1[i:]) + len(arr2[j:])\n    \n    # If k is greater than the total number of elements, return None\n    if k > count:\n        return None\n    \n    # If k is less than or equal to the total number of elements, search for the kth smallest element\n    i, j, count = 0, 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            count += len(arr1) - i\n            i += 1\n        else:\n            count += len(arr2) - j\n            j += 1\n    \n    if k <= len(arr1):\n        return arr1[i+k-1]\n    else:\n        return arr2[j+k-len(arr1)-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize variables\n    i = 0\n    j = 0\n    \n    # loop until kth element is found\n    while k > 0:\n        # if first array is exhausted, add all elements from second array to answer\n        if i == len(arr1):\n            return arr2[j+k-1]\n        \n        # if second array is exhausted, add all elements from first array to answer\n        if j == len(arr2):\n            return arr1[i+k-1]\n        \n        # if the current element of first array is less than the current element of second array,\n        # increment i and decrement k\n        if arr1[i] < arr2[j]:\n            i += 1\n            k -= 1\n        \n        # if the current element of second array is less than the current element of first array,\n        # increment j and decrement k\n        elif arr2[j] < arr1[i]:\n            j += 1\n            k -= 1\n        \n        # if both current elements are equal, increment both i and j and decrement k\n        else:\n            i += 1\n            j += 1\n            k -= 1"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Get the length of each array\n    m, n = len(arr1), len(arr2)\n\n    # Initialize the pointers for both arrays\n    i, j = 0, 0\n\n    # Loop through both arrays until one of them is exhausted\n    while i < m and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If the kth element is in the first array, we need to search the second array\n    if i + j - 1 < k:\n        return find_kth(arr2, arr1, k - i - j)\n\n    # If the kth element is in the second array, we need to search it\n    elif j == n:\n        return arr1[i - 1]\n\n    # Otherwise, the kth element is in the first array\n    else:\n        return arr1[i + k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if not arr1 or not arr2:\n        return None\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    if k <= i:\n        return find_kth(arr1[:i], arr2, k)\n    elif k <= i + j:\n        return arr1[i-1]\n    else:\n        return find_kth(arr1, arr2[:j], k-i-j)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value k, and returns the kth smallest element from the merged array.\n    \"\"\"\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    return merged_arr[k-1]"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether a number is an Armstrong number or not.\n    An Armstrong number is an n-digit number which is equal to the sum of the nth power of each digit.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Calculate the length of the number\n    n = len(number_str)\n    \n    # Calculate the sum of the nth power of each digit\n    sum = 0\n    for digit in number_str:\n        sum += int(digit) ** n\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    original_num = number\n    armstrong_sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        armstrong_sum += digit ** len(str(number))\n        temp //= 10\n    if armstrong_sum == original_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n        \n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the number to string\n    num = str(number)\n    # getting the length of the number\n    length = len(num)\n    # initializing the sum variable to 0\n    sum = 0\n    # iterating through the digits of the number\n    for digit in num:\n        # converting each digit to integer\n        digit = int(digit)\n        # adding the cube of each digit to the sum variable\n        sum += digit ** length\n    # checking if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Calculate the length of the number\n    n = len(str(number))\n    \n    # Calculate the sum of the nth power of each digit\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    \n    # Check if the given number is equal to the calculated sum\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def isArmstrong(num):\n    # Convert the number to string and then split it into individual digits\n    num_str = str(num)\n    digits = [int(d) for d in num_str]\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum([d**3 for d in digits])\n    # Check if the sum is equal to the original number\n    return sum_of_cubes == num"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n\n    # Convert the given number into a string\n    num_str = str(number)\n\n    # Calculate the number of digits in the given number\n    num_of_digits = len(num_str)\n\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = 0\n    for digit in num_str:\n        sum_of_cubes += int(digit) ** num_of_digits\n\n    # Check if the given number is equal to the sum of the cube of each digit\n    if sum_of_cubes == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Calculate the length of the string\n    n = len(num_str)\n    \n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through each digit in the string and add its cube to the sum\n    for i in range(n):\n        sum += int(num_str[i]) ** n\n        \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    digits = [int(digit) for digit in str(number)]\n    n = len(digits)\n    total = sum([digit ** n for digit in digits])\n    return total == number"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    total = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    \n    # calculate the average and return the result as a tuple\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return f\"The sum of first {n} natural numbers is {total} and the average is {average}.\""
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Find the sum and average of the first n natural numbers.\n\n    :param n: the number of natural numbers to sum and average.\n    :return: a tuple with the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n\n    avg_n = sum_n / n\n\n    return sum_n, avg_n"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes an integer as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables to zero\n    sum = 0\n    count = 0\n\n    # iterate over the numbers from 1 to n\n    for i in range(1, number + 1):\n        # add the current number to the sum\n        sum += i\n        # increment the count of numbers\n        count += 1\n\n    # calculate the average by dividing the sum by the count of numbers\n    average = sum / count\n\n    # return a tuple of sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    average = total_sum / n\n    return total_sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Args:\n    n (int): A number to check.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, else False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and checks whether it is even or odd.\n    If it is even, it returns True, otherwise it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated character found in the string\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found.\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as an argument and returns the first repeated character in the string.\n    If there are no repeated characters, it returns None.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string and returns the first repeated character.\n    If there are no repeated characters, it returns None.\n    \"\"\"\n    # create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, return it\n        if char in char_count:\n            return char\n        # otherwise, add the character to the dictionary and set its count to 1\n        else:\n            char_count[char] = 1\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = \"\"\n    for char in str1:\n        if char in str1[:str1.index(char)]:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    This function takes an integer 'n' as input and returns a list of all lucid numbers smaller than or equal to 'n'.\n    '''\n    ludics = []\n    i = 1\n    while i <= n:\n        flag = 0\n        for j in range(1, i):\n            if i % j == 0:\n                flag = 1\n                break\n        if flag == 0:\n            ludics.append(i)\n        i += 1\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    i = 1\n    while i <= n:\n        is_ludic = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n        i += 1\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        # Check if i is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(2, n+1):\n        # Check if the number is lucid\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words using whitespace as the delimiter\n    words = [word[::-1] for word in words] # reverse each word using slicing\n    return''.join(words) # join the reversed words back into a string separated by whitespace"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as input and returns the string with words reversed.\n    '''\n    # Splitting the string into words\n    words = s.split()\n    \n    # Reversing the words in the list\n    words = words[::-1]\n    \n    # Joining the words back into a string\n    s =''.join(words)\n    \n    return s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as input and returns the string with words in reverse order.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words in the list back into a string\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as input and returns the string with the words\n    separated by spaces reversed.\n\n    Example:\n    Input: \"hello world\"\n    Output: \"world hello\"\n    '''\n    # Splitting the string into words\n    words = s.split()\n\n    # Reversing each word and joining them back into a string\n    reversed_words = \" \".join([word[::-1] for word in words])\n\n    # Returning the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n\n    # join the reversed words back into a string\n    reversed_s =''.join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    # If the number is not divisible by any number from 2 to num-1, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, otherwise False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if is_prime(num):\n        print(f\"{num} is a prime number.\")\n    else:\n        print(f\"{num} is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, else False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n\ndegree = float(input(\"Enter the degree value: \"))\nresult = radian_degree(degree)\nprint(f\"{degree} degrees is equal to {result:.2f} radians\")"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef degrees_to_radians(degree):\n    \"\"\"\n    This function takes a value in degrees and converts it to radians.\n    \"\"\"\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a value in degrees and returns the equivalent value in radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(match, text.index(match), text.index(match) + len(match)) for match in matches]\n    else:\n        return []"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(0), match.end(0)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        result = []\n        for match in matches:\n            start = text.index(match)\n            end = start + len(match) - 1\n            result.append((match, start, end))\n        return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        for i in range(1, n + 1):\n            bell[i] = sum(bell[:i])\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_nums = [1]\n        for i in range(1, n+1):\n            bell_nums.append(sum(bell_nums))\n        return bell_nums[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = [1] # initialize the list with 1 for 0th bell number\n    \n    if n == 0: \n        return bell_num[n]\n    \n    for i in range(1, n+1): \n        bell_num.append(sum(bell_num[-i:])) # calculate the sum of previous bell numbers\n    \n    return bell_num[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    bell_num = 0\n    for i in range(n):\n        bell_num += math.comb(i, 2)\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 0\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = bell[i-1] + bell[i-2]\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    bell = [1]\n    for i in range(1, n):\n        bell.append(sum(bell))\n    return bell[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_Number(i) for i in range(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1,n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += bell_Number(i)\n        return sum"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and the index of the element to be removed and returns a new list with the kth element removed.\n    \"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1) or L < 1:\n        return \"Invalid input!\"\n    else:\n        k = L - 1\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Returns a new list with the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a value of k as inputs and returns a list with the same elements as the input list,\n    but the k'th element removed.\n    \"\"\"\n    # Create an empty list to store the elements of the input list except for the k'th element\n    result_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            result_list.append(list1[i])\n    return result_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and removes the k'th element from it.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column_max = []\n    for i in range(len(test_list)):\n        column_max.append(max(test_list[i][N-1]))\n    return max(column_max)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, return the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = []\n    for row in test_list:\n        col.append(row[N-1])\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Get the length of the first row to determine the number of columns in the matrix\n    num_cols = len(test_list[0])\n    # Initialize the max value to be the first value in then'th column\n    max_val = test_list[0][N-1]\n    # Loop through the matrix starting at the second row\n    for row in test_list[1:]:\n        # If the current value in then'th column is greater than the current max value, update the max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    \n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n        \n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    # Initialize two empty lists to hold the first and second elements of the sublists\n    first_list = []\n    second_list = []\n\n    # Iterate over each sublist in the input list and append the first and second elements to their respective lists\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    # Combine the two lists into a single list of two lists\n    merged_list = [first_list, second_list]\n\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    first = [sublist[0] for sublist in lst]\n    second = [sublist[1] for sublist in lst]\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize an empty list to store the first element of each sublist\n    first_list = []\n    # Initialize an empty list to store the second element of each sublist\n    second_list = []\n    \n    # Iterate through each sublist and append the first and second elements to their respective lists\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n        \n    # Return a list of two lists, where the first list has the first element of each sublist and the second one has the second\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples and returns the cumulative sum of all the values in the tuples.\n    '''\n    # initialize the cumulative sum as zero\n    cum_sum = 0\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        # add the sum of each tuple to the cumulative sum\n        cum_sum += sum(tup)\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i[1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples as an argument and returns the cumulative sum of all the values that are present in the tuples.\n    '''\n    total_sum = 0\n    for tup in test_list:\n        for val in tup:\n            total_sum += val\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i][1])\n        else:\n            result.append(test_list[i][1] + result[i-1])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(sum(test_list[i:]))\n    return sum_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        average = total/len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = sum(t)\n        avg = total / len(t)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        for n in num:\n            total += n\n        averages.append(total / len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        for num in tup:\n            sum += num\n        avg = sum / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the average values\n    avg_list = []\n\n    # Iterate through each tuple in the tuple of tuples\n    for num in nums:\n        # Calculate the average of the current tuple and append it to the avg_list\n        avg_list.append(sum(num)/len(num))\n\n    # Return the avg_list containing the average values for each tuple in the input\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg_list.append(sum(num)/len(num))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n        print(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple lengths are not equal\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return None\n    \n    # Perform element wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples are not of the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if d < 0: \n        return float('inf')\n    n = len(steps)\n    dp = [float('inf')]*n\n    dp[0] = 0\n    for i in range(1, n): \n        if i <= d: \n            dp[i] = 1\n        else: \n            for j in range(1, min(d, i-1)+1): \n                if dp[i] > dp[j-1] + dp[i-j]: \n                    dp[i] = dp[j-1] + dp[i-j] \n    return dp[n-1] "
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # Calculate the maximum reachable distance\n    max_distance = d * steps\n    \n    # Initialize a list to store the number of jumps required\n    jumps = [0] * (max_distance + 1)\n    \n    # Initialize the first step as 1\n    jumps[0] = 1\n    \n    # Iterate through all the reachable distances\n    for i in range(max_distance + 1):\n        \n        # If the current step is reachable and there are still steps left\n        if jumps[i]!= 0 and i + d < max_distance + 1:\n            \n            # Calculate the minimum number of jumps required for the remaining steps\n            min_jumps = float('inf')\n            for j in range(1, steps + 1):\n                if i + j * d < max_distance + 1:\n                    min_jumps = min(min_jumps, jumps[i + j * d])\n                    \n            # Update the number of jumps required for the current step\n            jumps[i + d] = jumps[i] + min_jumps\n            \n    # Return the number of jumps required to reach the destination\n    return jumps[max_distance]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 1:\n        return 1\n    else:\n        jumps = steps\n        for i in range(steps):\n            if i + d >= steps:\n                return jumps\n            jumps += 1\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # initialize the number of jumps\n    jumps = 0\n    \n    # initialize the current position\n    current = 0\n    \n    # initialize the visited positions\n    visited = [False] * d\n    \n    # loop through the steps\n    for step in range(steps):\n        \n        # if we have reached the end point\n        if current == d - 1:\n            break\n        \n        # if we have already visited this position\n        if visited[current]:\n            return -1\n        \n        # mark the current position as visited\n        visited[current] = True\n        \n        # calculate the maximum jump\n        max_jump = current + steps\n        \n        # loop through the possible jumps\n        for i in range(1, max_jump + 1):\n            \n            # if we have reached the end point\n            if current + i >= d:\n                return -1\n            \n            # if we have already visited this position\n            if visited[current + i]:\n                continue\n            \n            # update the current position\n            current += i\n            \n            # increment the number of jumps\n            jumps += 1\n            \n            # break out of the loop\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Calculates the minimum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    \n    Args:\n    - steps: a list of tuples representing the steps taken by the knight on a chessboard\n    - d: the length of the side of the square chessboard\n    \n    Returns:\n    - the minimum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane\n    \n    Example:\n    >>> min_Jumps([(2, 3), (4, 2), (3, 1), (2, 3)], 5)\n    2\n    \n    Note:\n    - The given list of tuples represents the steps taken by the knight on a chessboard in the order of movement.\n    - The knight can move in any direction that does not lead to a square that has already been visited.\n    - The square (d, 0) is the destination point.\n    - The knight starts from the origin (0, 0) and cannot move diagonally.\n    - If there is no path to the destination point, the function returns -1.\n    \"\"\"\n    \n    # Initialize a dictionary to keep track of visited squares\n    visited = {(0, 0): True}\n    \n    # Initialize a queue to store the squares to be visited\n    queue = [(0, 0)]\n    \n    # Initialize a counter to keep track of the number of jumps\n    jumps = 0\n    \n    # Traverse the squares in the queue\n    while queue:\n        # Get the current square\n        x, y = queue.pop(0)\n        \n        # Check if the current square is the destination point\n        if x == d and y == 0:\n            return jumps\n        \n        # Check if the current square can be reached from the previous square\n        if (x+2, y+1) in steps and (x+2, y+1) not in visited:\n            queue.append((x+2, y+1))\n            visited[(x+2, y+1)] = True\n        if (x+2, y-1) in steps and (x+2, y-1) not in visited:\n            queue.append((x+2, y-1))\n            visited[(x+2, y-1)] = True\n        if (x-2, y+1) in steps and (x-2, y+1) not in visited:\n            queue.append((x-2, y+1))\n            visited[(x-2, y+1)] = True\n        if (x-2, y-1) in steps and (x-2, y-1) not in visited:\n            queue.append((x-2, y-1))\n            visited[(x-2, y-1)] = True\n        if (x+1, y+2) in steps and (x+1, y+2) not in visited:\n            queue.append((x+1, y+2))\n            visited[(x+1, y+2)] = True\n        if (x+1, y-2) in steps and (x+1, y-2) not in visited:\n            queue.append((x+1, y-2))\n            visited[(x+1, y-2)] = True\n        if (x-1, y+2) in steps and (x-1, y+2) not in visited:\n            queue.append((x-1, y+2))\n            visited[(x-1, y+2)] = True\n        if (x-1, y-2) in steps and (x-1, y-2) not in visited:\n            queue.append((x-1, y-2))\n            visited[(x-1, y-2)] = True\n        \n        # Increment the number of jumps\n        jumps += 1\n    \n    # If no path is found, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0:  # Base case: already at the target position\n        return 0\n    elif d < 0:  # Cannot reach the target position\n        return -1\n    \n    # Calculate the number of jumps required to reach each intermediate position\n    jumps = [float('inf')] * d\n    jumps[0] = 1\n    for i in range(1, d):\n        for j in range(i):\n            if jumps[j]!= float('inf') and i <= j + steps[j]:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    \n    # Return the minimum number of jumps required to reach the target position\n    return jumps[d-1] if jumps[d-1]!= float('inf') else -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    dp = [[0]*steps for i in range(d+1)]\n    for i in range(steps):\n        dp[0][i] = i\n    for i in range(1, d+1):\n        for j in range(steps):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + 1\n            elif j >= i:\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j-i] + 1)\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[d][steps-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf') for j in range(d+1)] for i in range(steps+1)]\n    dp[0][0] = 0\n\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-i] + 1)\n\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the count to zero\n    count = 0\n    \n    # Initialize the list to store the visited points\n    visited = [[False for i in range(steps+1)] for j in range(steps+1)]\n    \n    # Initialize the queue to store the points to be visited\n    queue = [(0, 0)]\n    \n    # Mark the starting point as visited\n    visited[0][0] = True\n    \n    while queue:\n        # Pop the first point from the queue\n        x, y = queue.pop(0)\n        \n        # Check if the current point is the destination point\n        if (x, y) == (d, 0):\n            return count\n        \n        # Check all the adjacent points and add them to the queue if they haven't been visited yet\n        if x+1 < steps+1 and not visited[x+1][y]:\n            queue.append((x+1, y))\n            visited[x+1][y] = True\n        if x-1 >= 0 and not visited[x-1][y]:\n            queue.append((x-1, y))\n            visited[x-1][y] = True\n        if y+1 < steps+1 and not visited[x][y+1]:\n            queue.append((x, y+1))\n            visited[x][y+1] = True\n        if y-1 >= 0 and not visited[x][y-1]:\n            queue.append((x, y-1))\n            visited[x][y-1] = True\n            \n        count += 1\n        \n    # If destination is not reachable from starting point\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 1:\n        return steps\n    \n    dp = [float('inf')] * steps\n    dp[0] = 0\n    \n    for i in range(1, steps):\n        for j in range(i):\n            if j + dp[j] >= i:\n                dp[i] = min(dp[i], dp[j] + 1)\n                \n        if dp[i] == float('inf'):\n            return -1\n    \n    return dp[d] if dp[d]!= float('inf') else -1"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise and returns a list of the result.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list of the division of the corresponding elements of the two input lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length.\")\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists of numbers and returns a new list of the same length\n    where each element is the division of the corresponding elements in the input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and divides them element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through the two input lists\n    for i in range(len(nums1)):\n        # check if both elements in the lists are zero\n        if nums1[i] == 0 and nums2[i] == 0:\n            # if yes, append 0 to the result list\n            result.append(0)\n        else:\n            # if no, append the division of the two elements to the result list\n            result.append(nums1[i]/nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns the element-wise division of the two lists.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    non_num_list = [char for char in test_str if not char.isdigit()]\n    return ''.join(non_num_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    for char in test_str:\n        if not char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    other_chars = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            other_chars += char\n    return other_chars + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Use regex to find all numbers in the string\n    nums = re.findall(r'\\d+', test_str)\n    \n    # Remove the numbers from the string\n    test_str = re.sub(r'\\d+', '', test_str)\n    \n    # Join the string with the numbers and return the result\n    return ''.join(nums + [test_str])"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    This function moves all the numbers from the given string to the end of the string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Create a list of all the numbers in the string\n    num_list = []\n    for word in words:\n        if word.isdigit():\n            num_list.append(word)\n    \n    # Remove all the numbers from the original list of words\n    for num in num_list:\n        words.remove(num)\n    \n    # Append all the numbers at the end of the list of words\n    words.extend(num_list)\n    \n    # Join the list of words back to a string\n    result_str =''.join(words)\n    \n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_str = \"\"\n    alpha_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    return alpha_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # create a list to store the words with numbers at the end\n    result = []\n    \n    # iterate over the words and append the ones with numbers to the result list\n    for word in words:\n        if word.isdigit():\n            result.append(word)\n        else:\n            result.append(word)\n    \n    # join the words in the result list with a space separator\n    return''.join(result)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    non_num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    alpha_str = \"\"\n    \n    # Separate numbers and non-numbers into two strings\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    \n    # Reconstruct the string with the numbers at the end\n    return alpha_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a new list with all the numbers removed\n    new_words = []\n    for word in words:\n        if not word.isdigit():\n            new_words.append(word)\n\n    # Concatenate the words with the numbers in the original order\n    new_str = \"\"\n    for i in range(len(words)):\n        if words[i].isdigit():\n            new_str += words[i] + \" \"\n        else:\n            new_str += new_words[i] + \" \"\n\n    # Remove the trailing space and return the new string\n    return new_str.rstrip()"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i+1][j] or dp[i][j-1]\n            else:\n                dp[i][j] = False\n    for i in range(n):\n        if dp[0][i]:\n            return i+1\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list in ascending order\n    n = len(a)\n    dp = [1]*n # initialize dp array with 1's\n    \n    # iterate through all pairs of indices\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0: # if the pair is divisible\n                dp[j] = max(dp[j], dp[i]+1) # update dp value if larger\n    \n    return max(dp) # return the size of the largest subset"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the list so that every pair is divisible.\n    \"\"\"\n    a.sort() # sort the list in ascending order\n    \n    max_subset_size = 1 # initialize the maximum subset size to 1\n    current_subset_size = 1 # initialize the current subset size to 1\n    \n    for i in range(len(a)):\n        if i > 0 and a[i] % a[i-1] == 0: # if the current number is divisible by the previous number\n            current_subset_size += 1 # increment the current subset size\n        else: # if the current number is not divisible by the previous number\n            current_subset_size = 1 # reset the current subset size to 1\n            \n        if current_subset_size > max_subset_size: # if the current subset size is greater than the maximum subset size\n            max_subset_size = current_subset_size # update the maximum subset size\n    \n    return max_subset_size # return the maximum subset size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = dp[i][j-1]\n    return max(dp[i][n-1] for i in range(n))"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill in the DP table\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] % a[j] == 0) or (a[j] % a[i] == 0):\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = dp[i-1][j-1]\n    \n    # Find the maximum size of the subset\n    max_size = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_size = max(max_size, dp[i][j])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [False] * n  # dp[i] means if a[i] is a valid subset\n    dp[0] = True\n    max_size = 1\n    \n    for i in range(1, n):\n        if a[i] % a[0] == 0:\n            dp[i] = True\n            max_size = max(max_size, i + 1)\n        elif dp[i-1]:\n            dp[i] = True\n            max_size = max(max_size, i + 1)\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0]*n for i in range(n)]\n    \n    # Initialize diagonal to 1 as every pair is divisible\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the dp table\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [False] * n\n    for i in range(n):\n        dp[i] = True\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j])\n    res = 0\n    for i in range(n):\n        res = max(res, dp[i])\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n  # dp[i] stores the size of the largest subset ending at index i\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    if n % 2 == 0:\n        mid = n // 2\n        return (max(arr1[mid - 1], arr2[mid - 1]) + min(arr1[mid], arr2[mid])) / 2\n    else:\n        mid = n // 2\n        return max(arr1[mid - 1], arr2[mid - 1])"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of size n and returns their median.\n    \"\"\"\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    \n    # Find the median\n    median = (merged_list[(n-1)//2] + merged_list[n//2]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 1:\n        # If n is odd, take the middle element\n        return sorted([arr1[n // 2], arr2[n // 2]])[0]\n    else:\n        # If n is even, take the average of the middle two elements\n        mid1 = arr1[n // 2]\n        mid2 = arr2[n // 2 - 1]\n        return (mid1 + mid2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size and returns their median.\n    \"\"\"\n    if n % 2 == 0:\n        # if n is even, then median will be the average of the middle two elements\n        mid = n // 2\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        # if n is odd, then median will be the middle element\n        mid = n // 2\n        return (arr1[mid - 1] + arr1[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle index of the arrays\n    mid = n // 2\n    \n    # if the array length is odd, return the middle element\n    if n % 2!= 0:\n        return max(arr1[mid], arr2[mid])\n    \n    # if the array length is even, return the average of the middle two elements\n    else:\n        return (max(arr1[mid-1], arr2[mid-1]) + min(arr1[mid], arr2[mid])) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize two variables to store the median\n    median1 = 0\n    median2 = 0\n    \n    # Check if the number of elements in both lists are even or odd\n    if n % 2 == 0:\n        # If the number of elements in both lists are even, then the median will be the average of the middle two elements of both lists\n        median1 = (arr1[n//2] + arr1[(n//2)-1])/2\n        median2 = (arr2[n//2] + arr2[(n//2)-1])/2\n    else:\n        # If the number of elements in both lists are odd, then the median will be the middle element of both lists\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n        \n    return (median1, median2)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Initialize variables to store the median value\n    median1 = 0\n    median2 = 0\n    \n    # Check if the size of the two lists is even or odd\n    if n % 2 == 0:\n        # If the size is even, calculate the median for both lists\n        median1 = (arr1[n//2] + arr1[n//2 - 1]) / 2\n        median2 = (arr2[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        # If the size is odd, calculate the median for both lists\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n        \n    # Return the median values\n    return (median1, median2)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if the length of the merged array is even, take the average of the middle two elements\n        return (merge(arr1, arr2, n)[n//2-1] + merge(arr1, arr2, n)[n//2]) / 2\n    else:\n        # if the length of the merged array is odd, return the middle element\n        return merge(arr1, arr2, n)[n//2]\n\ndef merge(arr1, arr2, n):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    '''\n    i = 0 # index for arr1\n    j = 0 # index for arr2\n    merged_arr = [0] * n # initialize the merged array with zeros\n    \n    for k in range(n):\n        if i == n:\n            # if all elements from arr1 have been copied, append the remaining elements from arr2\n            while j < n:\n                merged_arr[k] = arr2[j]\n                j += 1\n            break\n        elif j == n:\n            # if all elements from arr2 have been copied, append the remaining elements from arr1\n            while i < n:\n                merged_arr[k] = arr1[i]\n                i += 1\n            break\n        elif arr1[i] <= arr2[j]:\n            # if element from arr1 is smaller or equal to element from arr2, append it to the merged array\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            # if element from arr2 is smaller, append it to the merged array\n            merged_arr[k] = arr2[j]\n            j += 1\n    \n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:  # if n is even\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        return (max(arr1[mid1-1], arr2[mid2-1]) + min(arr1[mid1], arr2[mid2])) / 2\n    else:  # if n is odd\n        mid = n // 2\n        return max(arr1[mid-1], arr2[mid-1])"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and computes the n-th power of each number.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and returns a list of their n-th power.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and an integer n, and returns a new list\n    where each number in the original list is raised to the power of n.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and computes their n-th power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"After swapping:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    This function will take a list as input and swap the first and last element in the list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # Swapping the first and last elements using tuple unpacking\n    first_element, *middle_list, last_element = newList\n    newList = [*middle_list, first_element, last_element]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last element of the list.\n    '''\n    if len(newList) < 2:  # Check if the list has at least two elements\n        print(\"The list should have at least two elements.\")\n    else:\n        first_element = newList[0]  # Store the first element\n        last_element = newList[-1]  # Store the last element\n        newList[0] = last_element  # Replace the first element with the last element\n        newList[-1] = first_element  # Replace the last element with the first element\n        print(\"The list after swapping the first and last element is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"New List after swapping: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The list after swapping first and last element is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # If the list has less than 2 elements, return the original list\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # check if the list has at least 2 elements\n        print(\"The list must have at least 2 elements\")\n    else:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        print(\"Swapped list is:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): the radius of the semicircle\n\n    Returns:\n    float: the area of the largest triangle inscribed in the semicircle\n    \"\"\"\n    # Calculate the length of the diagonal of the square that fits inside the semicircle\n    s = r * math.sqrt(2)\n\n    # Calculate the angle of the triangle opposite the diagonal\n    angle = math.asin(1/math.sqrt(2))\n\n    # Calculate the length of the sides of the triangle using Heron's formula\n    a = s * math.cos(angle) / 2\n    b = s * math.sin(angle) / 2\n\n    # Calculate the area of the triangle using the formula A = 1/2ab\n    area = 0.5 * a * b\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The diameter of the circle is equal to the radius times 2\n    d = r * 2\n    \n    # The hypotenuse of the triangle is equal to the radius of the circle\n    h = r\n    \n    # The angle at the apex of the triangle is equal to the inscribed angle of the triangle in a semicircle\n    angle = math.asin(h/d)\n    \n    # The area of the triangle is equal to the product of its base and height, which is equal to half the product of the radius and the sin of the inscribed angle\n    area = 0.5 * r * r * math.sin(angle)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the radius of the inscribed circle\n    a = r / math.sqrt(2)\n\n    # Calculate the height of the triangle\n    h = math.sqrt(r**2 - a**2)\n\n    # Calculate the area of the triangle\n    area = 0.5 * a * h\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle\n    that can be inscribed in a semicircle with that radius.\n    '''\n    # calculate the area of the circle\n    area_circle = math.pi * r**2\n    \n    # calculate the length of the side of the square\n    side_square = r / math.sqrt(2)\n    \n    # calculate the area of the square\n    area_square = side_square**2\n    \n    # calculate the area of the triangle\n    area_triangle = side_square * math.sqrt(2) / 2\n    \n    # return the area of the largest triangle that can be inscribed in the circle\n    return area_square + area_triangle - area_circle"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the adjacent side of the triangle\n    a = r * math.sin(math.pi/3)\n    # Calculate the area of the triangle\n    area = 0.5 * r**2 * math.tan(math.pi/3)\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area, a"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes in a radius r and calculates the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    \"\"\"\n    # Find the length of the diagonal of the largest triangle that can be inscribed in the semicircle.\n    d = 2 * math.sqrt(r**2 - (r/2)**2)\n    # Calculate the area of the largest triangle.\n    area = (math.sqrt(3)/2) * d**2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of the semicircle as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n    '''\n    # Find the angle of the largest triangle inscribed in the semicircle\n    angle = math.asin(r/2)\n    \n    # Calculate the area of the largest triangle using the area of a triangle and the semiperimeter\n    area = 0.5 * r**2 * angle\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n        r (float): radius of the semicircle\n\n    Returns:\n        float: area of the largest triangle\n    \"\"\"\n\n    # calculate the radius of the circle that will inscribe the triangle\n    a = math.sqrt(r ** 2 / 2)\n\n    # calculate the area of the triangle\n    area = math.sqrt(3) / 2 * a ** 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The radius of the semicircle is half the given radius\n    r_semicircle = r / 2\n    \n    # The length of the hypotenuse of the triangle is equal to twice the length of the radius of the semicircle\n    h = 2 * r_semicircle\n    \n    # The area of the largest triangle that can be inscribed in the semicircle is equal to half the area of the triangle\n    # with legs of length h and angle pi/3.\n    area = 0.5 * h * h / math.tan(math.pi / 3)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n\n    # Find the length of the diameter of the semicircle\n    diameter = r * 2\n\n    # Find the length of the radius of the inscribed circle\n    radius = diameter / 2\n\n    # Find the length of the base of the triangle\n    base = radius * math.tan(math.pi/6)\n\n    # Calculate the area of the triangle\n    area = (0.5 * base) * (r ** 2)\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # If array is empty or all elements are present, return the next number.\n    if not array or array[start] == start + 1:\n        return start + 1\n\n    # If first element is not missing, return it.\n    if array[start]!= start + 1:\n        return array[start]\n\n    # Find the middle index of the array.\n    mid = (start + end) // 2\n\n    # Recursively call the function on the left and right halves of the array.\n    left_missing = find_First_Missing(array, start, mid)\n    right_missing = find_First_Missing(array, mid + 1, end)\n\n    # Return the missing number.\n    return left_missing if right_missing - 1 < left_missing - 1 else right_missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return start + 1\n\n    mid = (start + end) // 2\n\n    if array[mid] - array[start] == mid - start:\n        return find_First_Missing(array, mid + 1, end)\n\n    return find_First_Missing(array, start, mid - 1)"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n            \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    n = end - start + 1\n    \n    # if the list has no missing number return n+1\n    if n == len(array):\n        return n+1\n    \n    # initialize variables for the first and second missing number\n    first_missing = start\n    second_missing = n + 1\n    \n    for i in range(start,end+1):\n        # if the current element is missing, update first_missing and second_missing accordingly\n        if array[i] == i+start:\n            if i == first_missing:\n                first_missing += 1\n            elif i == second_missing - 1:\n                second_missing -= 1\n    \n    # if there's no missing number between start and end return first_missing\n    if first_missing == second_missing:\n        return first_missing\n    \n    # otherwise, loop through the array again and find the missing number\n    for i in range(start,end+1):\n        if array[i] == i+start:\n            continue\n        elif array[i] == first_missing:\n            first_missing += 1\n        elif array[i] == second_missing:\n            second_missing += 1\n        else:\n            return first_missing\n    \n    # if we haven't returned yet, there's no missing number between start and end\n    return second_missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return end + 1\n\n    mid = (start + end) // 2\n    if mid == array[mid]:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)\n\n\ndef main():\n    array = [1, 2, 4, 6, 7, 9]\n    print(find_First_Missing(array))  # Output: 3\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int, optional): Starting index of the array. Defaults to 0.\n    end (int, optional): Ending index of the array. Defaults to None.\n\n    Returns:\n    int: Smallest missing number in the array.\n    \"\"\"\n\n    # if end is not provided, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # initialize the missing number as the first index of the array\n    missing = start\n\n    # loop through the array and check if each index is missing\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            # if the current index is not equal to its value, set the missing number as the current index\n            missing = i\n            break\n\n    # loop through the array again and find the smallest missing number\n    for i in range(missing + 1, end + 1):\n        if array[i] == i:\n            # if the current index is equal to its value, set the missing number as the current index\n            missing = i\n            break\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Count the number of occurrences of each number in the range\n    counts = [0] * (end + 1)\n    for i in range(start, end + 1):\n        counts[array[i]] += 1\n    \n    # Find the first missing number by iterating over the counts array\n    for i in range(start, end + 1):\n        if counts[i] == 0:\n            return i\n    \n    # If we reach here, all numbers are present in the range\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    # find the minimum value in the array\n    min_val = array[start]\n    for i in range(start + 1, end + 1):\n        if array[i] < min_val:\n            min_val = array[i]\n    \n    # initialize the result variable to the minimum value\n    result = min_val\n    \n    # iterate over the array and check for missing values\n    for i in range(start, end + 1):\n        # check if the current value is equal to the result variable\n        if array[i] == result:\n            # increment the result variable if there's a missing value before\n            if i > start and array[i - 1] == result - 1:\n                result -= 1\n            # otherwise, we found the first missing value\n            else:\n                return result\n        # if the current value is smaller than the result variable, update it\n        elif array[i] < result:\n            result = array[i]\n    \n    # if we reach this point, there's a missing value after the last element\n    return result + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    missing = start\n    for i in range(start, end+1):\n        if array[i] == missing:\n            missing += 1\n    return missing\n\narray = [1, 2, 3, 4, 6, 7, 8, 10]\nprint(\"The smallest missing number is:\", find_First_Missing(array))"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    :param array: a sorted list of natural numbers\n    :param start: the starting index of the search range (default is 0)\n    :param end: the ending index of the search range (default is the length of the array)\n    :return: the smallest missing number\n    \"\"\"\n\n    # If end is None, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Initialize the smallest missing number as 1\n    smallest_missing_num = 1\n\n    # Iterate through the search range\n    for i in range(start, end):\n\n        # If the current element is the next missing number, increment the missing number\n        if array[i] == smallest_missing_num:\n            smallest_missing_num += 1\n\n        # If the current element is greater than the next missing number, return the missing number\n        elif array[i] > smallest_missing_num:\n            return smallest_missing_num\n\n    # If the function reaches here, all numbers in the search range are present, so return the next missing number\n    return smallest_missing_num"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as an argument and returns a new list containing only the even numbers from the original list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_even(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = split_even(numbers)\nprint(even_numbers)"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes in a list of numbers and returns a new list containing only even numbers from the original list.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(coord):\n    \"\"\"\n    Returns a list of adjacent coordinates to the given coordinate tuple.\n    \"\"\"\n    adjacent = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            adjacent.append((coord[0] + dx, coord[1] + dy))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = coord\n    adjacent = [(x, y+1), (x, y-1), (x+1, y), (x-1, y)]\n    if sub:\n        return [c for c in adjacent if c not in sub]\n    else:\n        return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes in a coordinate tuple and returns a list of adjacent coordinates.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 20:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 20:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple and returns a list of all the adjacent coordinates.\n    '''\n    adj = []\n    x, y = ele\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 3:\n        adj.append((x, y+1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 3:\n        adj.append((x+1, y))\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a tuple (x,y) representing a coordinate and returns all the adjacent coordinates to the given coordinate.\n    The function can also take a list of coordinates as input, and it will return a dictionary of all the coordinates and their adjacent coordinates.\n    \"\"\"\n    adj = {}\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i,j)!= (0,0):\n                coord = (ele[0]+i, ele[1]+j)\n                if sub:\n                    if coord in sub:\n                        adj[coord] = sub[coord]\n                else:\n                    adj[coord] = ''\n    if not sub:\n        return list(adj.keys())\n    else:\n        return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j)!= (0, 0):\n                adj.append((ele[0] + i, ele[1] + j))\n    if sub:\n        return [x for x in adj if x in sub]\n    else:\n        return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Extract all adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    - ele (tuple): The coordinate tuple (x, y) to extract adjacent coordinates from.\n    - sub (list, optional): A list of previously visited coordinates to avoid infinite recursion.\n\n    Returns:\n    - list: A list of coordinate tuples adjacent to the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj = []\n\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 10:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 10:\n        adj.append((x, y+1))\n\n    # Remove already visited coordinates\n    adj = [c for c in adj if c not in sub]\n\n    # Recursively call the function on each adjacent coordinate\n    for c in adj:\n        if c not in sub:\n            sub.append(c)\n            adj += adjac(c, sub)\n\n    # Remove duplicate coordinates\n    adj = list(set(adj))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # define the adjacent coordinates\n    adj = [(ele[0]+i, ele[1]+j) for i in [-1,0,1] for j in [-1,0,1] if i!= 0 or j!= 0]\n    \n    # remove the coordinates that are outside the board\n    adj = [(x,y) for x,y in adj if 0 <= x < 8 and 0 <= y < 8]\n    \n    # remove the coordinates that are already included in the sublist\n    adj = [a for a in adj if a not in sub]\n    \n    # add the current element to the sublist\n    sub.append(ele)\n    \n    # recursively call the function for each of the adjacent coordinates\n    for a in adj:\n        sub = adjac(a, sub)\n    \n    # return the final sublist\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    res = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            else:\n                res.append((ele[0] + i, ele[1] + j))\n    return res"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the adjacent coordinates of the given element\n    adj = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    # Remove the element itself from the adjacent coordinates\n    adj.remove(ele)\n    # If there are sub-elements, remove them from the adjacent coordinates as well\n    if sub:\n        for s in sub:\n            adj.remove(s)\n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        new_text = text.replace(' ', '_')\n        print(new_text)\n    elif '_' in text:\n        new_text = text.replace('_','')\n        print(new_text)\n    else:\n        print('No spaces or underscores found in the text.')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if there are any whitespaces in the string\n    if \" \" in text:\n        # Replace whitespaces with underscores\n        text = text.replace(\" \", \"_\")\n    else:\n        # Replace underscores with whitespaces\n        text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if the text is a string\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n        \n    # Replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n    \n    # Replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n    \n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Find the index of first non-zero element in the list\n    first_nonzero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            first_nonzero_index = i\n            break\n    \n    # Move all non-zero elements to the left of the first non-zero element\n    left_index = first_nonzero_index\n    right_index = len(num_list) - 1\n    while left_index < right_index:\n        if num_list[left_index]!= 0:\n            left_index += 1\n        else:\n            # Swap non-zero elements\n            num_list[left_index], num_list[right_index] = num_list[right_index], num_list[left_index]\n            right_index -= 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes in the given list to the end of the list.\n    \"\"\"\n    # Count the number of zeroes in the list\n    zero_count = num_list.count(0)\n    \n    # Create a new list to store the non-zero values\n    non_zeroes = [x for x in num_list if x!= 0]\n    \n    # Add zeroes to the end of the list\n    non_zeroes += [0] * zero_count\n    \n    return non_zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    zeroes = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeroes.append(num_list[i])\n            num_list[i] = None\n    for j in range(len(zeroes)):\n        num_list.append(zeroes[j])\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            num_list.remove(num)\n    num_list.extend(zeroes)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list as an input and moves all zeroes to the end of the list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    \n    # Replacing the original list with the non-zeroes and zeroes list\n    num_list.clear()\n    num_list.extend(non_zeroes + zeroes)\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return zeroes + non_zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            continue\n    return zeroes + [num for num in num_list if num!= 0]"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as an input and moves all the zeroes to the end of the list.\n\n    Args:\n    num_list (list): List of integers\n\n    Returns:\n    A list with all the zeroes moved to the end of the original list.\n    \"\"\"\n    # Create two lists, one with all zeroes and other with non-zero elements.\n    zeroes = []\n    non_zeroes = []\n\n    # Traverse through the given list and add the elements to the zeroes and non_zeroes lists.\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    # Concatenate the zeroes and non_zeroes lists to get the final list with all zeroes at the end.\n    final_list = zeroes + non_zeroes\n\n    return final_list"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum to zero\n    xor_sum = 0\n    \n    # Loop through all possible pairs of numbers in the list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += arr[i] ^ arr[j]\n            \n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Traverse through all possible pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            \n            # Calculate the xor of the two numbers and add it to the sum variable\n            sum += arr[i] ^ arr[j]\n    \n    # Return the final sum value\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the xor of the two numbers\n            xor = arr[i] ^ arr[j]\n            # add the xor to the sum\n            sum += xor\n    \n    # return the sum of xor of all pairs of numbers in the list\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list and a number as input and returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given iterable using heap sort algorithm.\n    \"\"\"\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable[:]  # Create a copy of the iterable to avoid modifying it\n    hq.heapify(heap)  # Convert the list into a heap\n\n    n = len(heap)\n    for i in range(n-1, 0, -1):\n        # Swap the root with the last element\n        heap[0], heap[i] = heap[i], heap[0]\n        # Remove the last element from the heap\n        hq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable.copy()\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes in an iterable and sorts it using heap sort algorithm.\n    '''\n    heap = iterable.copy()  # creating a copy of the iterable to avoid modifying the original list\n    hq.heapify(heap)  # creating a heap from the iterable\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))  # popping the maximum element from the heap and appending it to the sorted list\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = iterable[:]  # make a copy of the iterable to avoid modifying it\n    hq.heapify(heap)\n    sorted_iterable = []\n    while heap:\n        sorted_iterable.append(hq.heappop(heap))\n    return sorted_iterable"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable and returns a sorted list using heap sort algorithm.\n    '''\n    # Convert the iterable into a heap\n    heap = iterable[:]\n    hq.heapify(heap)\n\n    # Sort the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    n = len(heap)\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heappush(heap, heap[i])\n    for i in range(n - 1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heappop(heap)\n    return heap"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check if the given sale amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount the item was sold for.\n    :return: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It checks whether the given sale amount has no profit and no loss.\n    '''\n    if sale_amount > actual_cost:\n        print('There is no profit. The sale amount is greater than the actual cost.')\n    elif sale_amount < actual_cost:\n        print('There is no loss. The sale amount is less than the actual cost.')\n    else:\n        print('There is no profit or loss. The sale amount is equal to the actual cost.')"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It checks whether the sale_amount has no profit and no loss.\n    If the sale_amount is greater than or equal to the actual_cost, it returns True, else it returns False.\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale amount has no profit and no loss.\n\n    Args:\n    actual_cost (float): actual cost of the item\n    sale_amount (float): amount of the item sold\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes actual cost and sale amount as input and returns True if there is no profit and no loss, otherwise False.\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments - actual_cost and sale_amount. \n    It returns True if sale_amount is equal to actual_cost, False if sale_amount is less than actual_cost, \n    and True if sale_amount is greater than actual_cost.\n    '''\n    if sale_amount == actual_cost:\n        return True\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given sale amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount of the item sold.\n    :return: True if there is no profit and no loss, otherwise False.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        print(\"No profit no loss\")\n    else:\n        print(\"Profit or loss exists\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill using the formula (35.74 + 0.6215t - 35.75v^0.16 + 0.4275t^0.16)\n    wind_chill = (35.74 + 0.6215 * t - 35.75 * v**0.16 + 0.4275 * t**0.16)\n    # Round the wind chill index to the next integer\n    wind_chill_rounded = round(wind_chill)\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    Returns the wind chill index rounded to the next integer.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n\n    # Convert temperature from celsius to kelvin\n    t_k = t + 273.15\n\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t_k - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t_k * math.pow(v_ms, 0.16)\n\n    # Round the wind chill index to the next integer and return it\n    return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        # wind chill starts to become significant at 3 km/h\n        return \"Wind chill not significant.\"\n    else:\n        gamma = (0.16 * (t + 273.15)) / (5.08 - v)\n        delta = math.log(0.1 * v)\n        chi = 35.74 + (0.6215 * t) - (35.75 * gamma) + (0.4275 * t * gamma) - (0.14 * delta * delta)\n        return round(chi)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 1000 / 3600 # Convert wind speed from km/h to m/s\n    temperature = t + 273.15 # Convert temperature from celsius to kelvin\n    \n    # Calculate the wind chill index\n    chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16)\n    \n    # Round the wind chill index to the next integer\n    return round(chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the Wind Chill Index given the wind velocity in km/h and a temperature in Celsius.\n    '''\n    # Convert velocity and temperature to SI units\n    v_ms = v * 1000 / 3600  # m/s\n    t_k = t + 273.15  # K\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t_k - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t_k * math.pow(v_ms, 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = (t - 32) * 5/9 # convert temperature from fahrenheit to celsius\n    \n    ws = v * 1000 / 3600 # convert wind speed from km/h to m/s\n    \n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(ws, 0.16) + 0.3965 * t * math.pow(ws, 0.16)\n    \n    return round(wc) # round the wind chill index to the next integer"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert km/h to m/s\n    v = v / 3.6\n    \n    # Calculate the wind chill index using the formula WCI = 13.12 + 0.6215*T - 11.37*v^0.16 + 0.3965*T*v^0.16\n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    \n    # Round the wind chill index to the next integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert the temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wci = 13.12 + (0.6215 * t_f) - (11.37 * math.pow(v, 0.16)) + (0.3965 * t_f * math.pow(v, 0.16))\n    \n    # Round the wind chill index to the next integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Convert temperature from celsius to fahrenheit\n    t = (t * 1.8) + 32\n    \n    # Calculate wind chill index\n    wind_chill = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16))\n    \n    # Round wind chill index to the next integer\n    wind_chill = round(wind_chill)\n    \n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_f = (t * 1.8) + 32\n    wind_chill_index = 13.12 + (0.6215 * t_f) - (11.37 * math.pow(v, 0.16)) + (0.3965 * t_f * math.pow(v, 0.16))\n    return round(wind_chill_index)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function removes the names that start with a lowercase letter and returns the sum of the length of the remaining names.\n    \"\"\"\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower() == False:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    # Create an empty list to store the names that start with a lowercase letter\n    lowercase_names = []\n    # Iterate through the sample names and add the names that start with a lowercase letter to the list\n    for name in sample_names:\n        if name[0].islower():\n            lowercase_names.append(name)\n    # Sum the lengths of the names in the sample_names list\n    total_length = sum(len(name) for name in sample_names if name not in lowercase_names)\n    # Return the total length of the names in the sample_names list after removing the lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as an argument and removes all the parenthesis and text between them.\n    '''\n    # Regular expression to match all text between parenthesis\n    pattern = re.compile(r'\\([^()]*\\)')\n    \n    # Find all matches of the pattern in the given string\n    matches = pattern.findall(items)\n    \n    # Loop through all matches and remove them from the string\n    for match in matches:\n        items = items.replace(match, '')\n    \n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)' # matches any sequence of characters between parentheses\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function takes a string as an input and removes the parenthesis and what is inbetween them.\n    \"\"\"\n    regex = r'\\([^()]*\\)'\n    return re.sub(regex, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^)]*\\)')\n    items = regex.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a string.\n\n    :param items: A string containing parenthesis and what is inside them.\n    :return: A string with the parenthesis and what is inside them removed.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'  # pattern to match any sequence of characters inside parenthesis\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum = 0\n    count = 1\n    i = 1\n    \n    while count <= n:\n        sum += i\n        i += 1\n        count += 1\n    \n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (n * n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n*(3*n-1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 1\n    # Loop through each integer from 2 to n\n    for i in range(2, n+1):\n        # Calculate the next term in the sequence\n        c = a + b\n        # Update values for the next iteration\n        a = b\n        b = c\n    return c"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    result = 0\n    while count < n:\n        result += num\n        count += 1\n        num += 1\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 1\n    while count < n:\n        num += count\n        count += 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * (n + 2)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables for the first two nonagonals\n    prev_num = 1\n    current_num = 1\n    \n    # Loop through the sequence until we reach the desired nonagonal\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number\n        next_num = prev_num + current_num\n        \n        # Update the variables for the previous and current nonagonals\n        prev_num = current_num\n        current_num = next_num\n    \n    # Return the nth nonagonal number\n    return prev_num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n: \n        print(num)\n        num += 1\n        count += 1\n    return num - 1"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\Bz(?=[^aeiouAEIOU\\s]*\\w[^aeiouAEIOU\\s]*\\w)(?=[^aeiouAEIOU\\s]*z[^aeiouAEIOU\\s]*\\w)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!\\w*z\\w*\\b)[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*z)(?=.*z)\\w+[^\\w\\s]*\\w+\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz[^a-z]*z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-zA-Z]{1}\\b)(?=.*[a-zA-Z]{1}z[a-zA-Z]{1})\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\b)z(?!.*\\b)\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?<!^)(?<!\\w)z(?!\\w)(?!\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?!.*\\b)z(?!.*\\b)\\b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array and a position k (0 <= k <= len(input)-1) as inputs and returns the array after reversing the elements from position 0 to k.\n    \"\"\"\n    return input[:k+1][::-1] + input[k+1:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes two arguments:\n    - input: A list of integers\n    - k: An integer representing the position where the array needs to be reversed\n\n    This function reverses the given array upto the given position k and returns the reversed array.\n    '''\n\n    # Create a new list to store the reversed array\n    reversed_array = []\n\n    # Loop through the input list\n    for i in range(k):\n        reversed_array.append(input[i])\n\n    # Loop through the input list again, starting from the position k\n    for i in range(k, len(input)):\n        reversed_array.append(input[i])\n\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as inputs. It reverses the array up to the position k.\n    '''\n    # Slice the array from 0 to k-1\n    reversed_array = input[:k]\n    # Reverse the sliced array\n    reversed_array.reverse()\n    # Slice the array from k to end of the array\n    original_array = input[k:]\n    # Combine the reversed array and the original array\n    combined_array = reversed_array + original_array\n    return combined_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array as input and reverses the array up to the kth position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_array = input[:k][::-1]\n    return reversed_array + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array as input and reverses it upto a given position k.\n    \"\"\"\n    # initialize an empty list to store the reversed elements\n    reversed_array = []\n    # loop through the input array from position 0 to k-1\n    for i in range(k):\n        # append the element at position i to the reversed_array\n        reversed_array.append(input[i])\n    # loop through the input array from position k to end\n    for i in range(k, len(input)):\n        # append the element at position i to the reversed_array\n        reversed_array.append(input[i])\n    # return the reversed_array\n    return reversed_array"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result_tup = test_tup + (test_dict,)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    # Initialize dp array to store maximum average of path ending at each cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # Initialize maximum average of path to be the maximum cost in the matrix\n    max_avg = max(max(row) for row in cost)\n    \n    # Initialize diagonal and horizontal paths to have maximum average\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    \n    # Fill remaining cells of dp array\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Find maximum average of path\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] == max_avg:\n                return dp[i][j], i, j"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize a table to store the maximum average seen so far for each cell\n    table = [[0] * n for _ in range(n)]\n    # Initialize the maximum average to zero for the top-left cell\n    table[0][0] = cost[0][0]\n    # Fill the rest of the table using the formula for the maximum average of a path ending in each cell\n    for i in range(1, n):\n        table[i][0] = max(table[i-1][0], cost[i][0] + table[i-1][0])\n    for j in range(1, n):\n        table[0][j] = max(table[0][j-1], cost[0][j] + table[0][j-1])\n    for i in range(1, n):\n        for j in range(1, n):\n            table[i][j] = max(table[i-1][j], table[i][j-1])\n            table[i][j] = max(table[i][j], cost[i][j] + table[i-1][j])\n            table[i][j] = max(table[i][j], cost[i][j] + table[i][j-1])\n    # The maximum average of a path ending in the bottom-right cell is the value in the table\n    max_avg = table[n-1][n-1]\n    # Compute the total cost of all paths that end in the bottom-right cell\n    total_cost = sum(cost[i][n-1] for i in range(n))\n    # Compute the average cost of all paths that end in the bottom-right cell\n    avg_cost = total_cost / (n * (n-1) // 2)\n    # Compute the maximum possible average of a path ending in the bottom-right cell\n    max_possible_avg = (n-1) * (cost[n-1][n-1] + n-1) / (2 * n)\n    return max_avg / max_possible_avg, avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    # Fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # Compute the average for each path\n            path_cost = dp[i][j]\n            path_len = n - 1\n            path_avg = path_cost / path_len\n\n            # Update the max average if needed\n            if path_avg > max_avg:\n                max_avg = path_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)] # initialize the dp array with zeros\n    ans = float('-inf') # initialize the answer with negative infinity\n    \n    # fill the dp array\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0: # base case: the starting cell\n                dp[i][j] = cost[i][j]\n            elif i == 0: # the first row\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0: # the first column\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else: # all other cells\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # compute the maximum average of path\n    for i in range(n):\n        for j in range(n):\n            # compute the number of cells visited in the path from (0, 0) to (i, j)\n            num_cells = (i + 1) + (j + 1) - 1\n            # compute the total cost of the path from (0, 0) to (i, j)\n            total_cost = dp[i][j]\n            # compute the average cost of the path from (0, 0) to (i, j)\n            average_cost = total_cost / num_cells\n            # update the answer with the maximum average\n            ans = max(ans, average_cost)\n    \n    return ans"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    \n    # Initialize a 2D matrix to store the maximum average for each cell\n    max_avg = [[0 for x in range(N)] for y in range(N)]\n    \n    # Initialize the first row and column of the matrix to the cost of the first cell\n    for i in range(N):\n        max_avg[i][0] = cost[i][0]\n        max_avg[0][i] = cost[0][i]\n    \n    # Fill in the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n    \n    # Traverse the matrix to find the maximum average path\n    path = []\n    i, j = N-1, N-1\n    while i > 0 or j > 0:\n        if i == 0:\n            path.insert(0, (i, j-1))\n            j -= 1\n        elif j == 0:\n            path.insert(0, (i-1, j))\n            i -= 1\n        elif max_avg[i][j] == max_avg[i-1][j]:\n            path.insert(0, (i-1, j))\n            i -= 1\n        else:\n            path.insert(0, (i, j-1))\n            j -= 1\n            \n    # Compute the total cost and the number of cells visited in the path\n    total_cost = 0\n    cells_visited = 0\n    for cell in path:\n        total_cost += cost[cell[0]][cell[1]]\n        cells_visited += 1\n        \n    # Compute the average cost of the path\n    avg_cost = total_cost / cells_visited\n    \n    return avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = dp[n-1][n-1] / (2 * n - 1)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    memo = [[0] * n for _ in range(n)]\n\n    def dfs(r, c, path_cost):\n        if r == n-1 and c == n-1:\n            memo[r][c] = path_cost\n            return memo[r][c]\n\n        if memo[r][c]:\n            return memo[r][c]\n\n        if r < n-1:\n            memo[r][c] = max(dfs(r+1, c, path_cost + cost[r+1][c]), memo[r][c])\n        if c < n-1:\n            memo[r][c] = max(dfs(r, c+1, path_cost + cost[r][c+1]), memo[r][c])\n\n        memo[r][c] = path_cost + cost[r][c]\n        return memo[r][c]\n\n    return dfs(0, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            max_avg = max(max_avg, (dp[i][j] + dp[0][0] - dp[i][0] - dp[0][j]) / (2*n))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n\n    # Create a 2D table to store the maximum average of path starting from each cell\n    table = [[0]*n for i in range(n)]\n\n    # Initialize the first row and first column with the cost of that cell\n    for i in range(n):\n        table[i][0] = cost[i][0]\n        table[0][i] = cost[0][i]\n\n    # Fill the table by calculating the maximum average of path starting from each cell\n    for i in range(1, n):\n        for j in range(1, n):\n            table[i][j] = max(table[i-1][j], table[i][j-1]) + cost[i][j]\n\n    # Calculate the maximum average of any path starting from any cell\n    max_avg = table[n-1][n-1]/2\n\n    # Trace back the path with maximum average\n    path = []\n    i = n-1\n    j = n-1\n    while i > 0 and j > 0:\n        path.append((i,j))\n        if i == j:\n            break\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    path.append((0,0))\n    path.reverse()\n\n    return max_avg, path"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[student] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, height_weight in students.items():\n        if height_weight[0] >= h and height_weight[1] >= w:\n            filtered_students[student] = height_weight\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    This function takes in a dictionary of students' heights and weights, along with a minimum height and weight,\n    and returns a filtered dictionary of students who meet the minimum height and weight requirements.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    Counts the number of indices where nums1 and nums2 have the same value.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** power\n        temp //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = sum([int(digit) for digit in str(base) ** power])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base**power):\n        total += int(digit)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = sum(int(digit) for digit in str(base**power))\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base_power = base ** power\n    while base_power!= 0:\n        digit = base_power % 10\n        result += digit\n        base_power //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for i in range(power):\n        base_sum += int(base)\n        base = str(int(base)**2)\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base = str(base)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through each digit of the base and add its power to the sum\n    for digit in base:\n        sum += int(digit)**power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    base_power = base ** power\n    while base_power > 0:\n        sum_of_digits += base_power % 10\n        base_power //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string\n    base_str = str(base)\n    \n    # Calculate the sum of all digits to the specified power\n    total = 0\n    for digit in base_str:\n        total += int(digit) ** power\n        \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, int(power) + 1):\n        total += int(base) ** i\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext = 'Hello, \"World\", how are you doing today?'\nprint(extract_quotation(text)) # Output: ['World']"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all matches of quotation marks in the text\n    matches = re.findall(r'\"[^\"]*\"', text1)\n\n    # Extract values between quotation marks\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result\n\ntext1 = \"The quick brown fox 'jumps' over the lazy dog.\"\nprint(extract_quotation(text1))"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext = 'The quick brown \"fox\" jumped over the \"lazy dog\" and the \"bird\" ran away.'\nprint(extract_quotation(text))"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all quotation marks in the string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers as input and returns a tuple where each element is the product of the corresponding\n    elements of the input tuple.\n    \"\"\"\n    n = len(test_tup)\n    res = ()\n    for i in range(n-1):\n        res += (test_tup[i] * test_tup[i+1],)\n    return res"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    \n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise sum as a new list.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Check if the lengths of the lists are equal\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The length of the two lists must be equal.\")\n    \n    # Create an empty list to store the sums of the corresponding elements from the two lists\n    sums = []\n    \n    # Iterate over the two lists and compute the element-wise sum\n    for i in range(len(lst1)):\n        sums.append(lst1[i] + lst2[i])\n    \n    # Return the list of sums\n    return sums"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list of sums of corresponding elements of the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"Error: Lists should have same length\")\n        return None\n    else:\n        return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must be of same length\")\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists and returns their element-wise sum as a new list.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of equal length and returns a new list containing the sum of the corresponding elements.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes in a list of integers and returns a new list with consecutive duplicates removed.\n    '''\n    # Sort the list to make consecutive duplicates easier to find\n    nums_sorted = sorted(nums)\n    \n    # Use itertools.groupby to group the list by consecutive duplicates\n    groups = [(key, list(group)) for key, group in groupby(nums_sorted)]\n    \n    # Create a new list with the first occurrence of each group and all occurrences after it\n    new_list = [group[0] for group in groups]\n    \n    return new_list"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n        else:\n            result.extend(list(g))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates from a given list.\n    '''\n    # Sort the list in ascending order\n    nums = sorted(nums)\n    # Iterate over the sorted list and group consecutive duplicates\n    result = []\n    for _, group in groupby(nums):\n        # If the length of the group is greater than 1, it has consecutive duplicates\n        if len(list(group)) > 1:\n            # Take the first element of the group, which is the first occurrence of the consecutive duplicates\n            result.append(list(group)[0])\n        else:\n            # Otherwise, append the first and only element of the group to the result list\n            result.append(list(group)[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # groupby function groups consecutive duplicates together\n    groups = groupby(nums)\n    # sort the groups by the count of consecutive duplicates in descending order\n    sorted_groups = sorted(groups, key=lambda x: len(list(x[1])), reverse=True)\n    # extract the unique elements from the sorted groups\n    result = [k for k, g in sorted_groups for _ in range(len(list(g)))]\n    # return the result\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if k == g[0]:\n            result.append(k)\n        else:\n            result.append(k)\n            result.extend(g)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(h**2 + r**2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Function to find the lateral surface area of a cone given radius r and height h\n    '''\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * h + math.pi * r**2\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the lateral surface area of the cone.\n    '''\n    return math.pi * r * math.sqrt((r**2 + h**2)/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the lateral surface area of the cone.\n    '''\n    # calculate the lateral surface area of the cone using the formula: A = 1/2 * pi * r * (r + sqrt(r^2 + h^2))\n    area = 0.5 * math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r * h\n    A = math.pi * r ** 2\n    L = 2 * s / A\n    return L\n\nprint(lateralsurface_cone(5, 10))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes the radius r and height h of a cone as input and returns the lateral surface area of the cone.\n    '''\n    return math.pi*r*h + math.pi*r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+math.sqrt(r**2 + h**2))"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r\"[,\\.]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[., ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Regular expression to match special characters\n    pattern = re.compile(r'[\\s,.]+')\n    # Replace all occurrences of special characters with colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces\n    text = re.sub(r'\\s+', ':', text)\n    \n    # Replace commas\n    text = text.replace(',', ':')\n    \n    # Replace dots\n    text = text.replace('.', ':')\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(replace_specialchar(text)) # Output: The:quick:brown:fox:jumps:over:the:lazy:dog."
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,]', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes an array A and a number x, and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # we have found the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # x is not present in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Returns the index of the first occurrence of x in the sorted array A, or -1 if x is not in A.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # we have found the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1  # x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the variables for the left and right indices\n    left = 0\n    right = len(A) - 1\n    \n    # While the left index is less than the right index\n    while left <= right:\n        # Find the middle index of the array\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to the target number\n        if A[mid] == x:\n            # If the element to the left of the middle is greater than the middle element,\n            # then the target number must be in the left half of the array\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            # Otherwise, the target number must be in the right half of the array\n            else:\n                right = mid - 1\n        # If the middle element is less than the target number,\n        # then the target number must be in the right half of the array\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than the target number,\n        # then the target number must be in the left half of the array\n        else:\n            right = mid - 1\n    \n    # If the target number is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize sum of products of all possible sublists\n    res = 0\n    # Traverse through all possible sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Find the product of current sublist and add it to result\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the sum to zero\n    sum_prod = 0\n    # Loop through all possible sublists of length 1 to n\n    for i in range(n):\n        # Calculate the product of the sublist\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            # Add the product to the sum\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result = (result + (arr[i]*arr[j-1])%mod)%mod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function returns the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            sum += product\n\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_product = [1]*n\n    postfix_product = [1]*n\n    prefix_sum = [arr[i] for i in range(n)]\n    postfix_sum = [arr[i] for i in range(n)]\n    \n    # calculating prefix product and postfix product\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1]*arr[i-1]\n        postfix_product[n-i-1] = postfix_product[n-i]*arr[n-i]\n    \n    # calculating prefix and postfix sums\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n        postfix_sum[n-i-1] = postfix_sum[n-i] + arr[n-i-1]\n    \n    # calculating sum of products of all possible sublists\n    result = 0\n    for i in range(n):\n        result += prefix_product[i]*postfix_product[i]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function will return the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    prefix_product = [0] * n\n    postfix_product = [0] * n\n    \n    prefix_product[0] = 1\n    postfix_product[n-1] = 1\n    \n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n        \n    for i in range(n-2, -1, -1):\n        postfix_product[i] = postfix_product[i+1] * arr[i+1]\n        \n    return sum(prefix_product) * sum(postfix_product)"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    \n    # loop through all possible sublists\n    for i in range(n):\n        for j in range(i, n):\n            # calculate the product of sublist\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum_prod += prod\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    \n    # Finding the product of the first element of the list\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n        \n    total_sum += prod\n    \n    # Finding the product of all other elements of the list\n    for i in range(1, n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n        total_sum += temp\n        \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize sum_of_prod_sublist with 0\n    sum_of_prod_sublist = 0\n    \n    # Initialize prefix_prod_sublist with 1\n    prefix_prod_sublist = [1] * n\n    \n    # Traverse through all sublists and calculate sum of products\n    for i in range(n):\n        # Update prefix_prod_sublist with product of all elements before index i\n        prefix_prod_sublist[i] = arr[i] * prefix_prod_sublist[i-1] if i > 0 else arr[i]\n        \n        # Update sum_of_prod_sublist with sum of products of all sublists\n        sum_of_prod_sublist += prefix_prod_sublist[i]\n    \n    # Return sum_of_prod_sublist\n    return sum_of_prod_sublist"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle the bits, we need to XOR the binary representation of the number with a mask. \n    # The mask will have 0s except the first and last bits. \n    # For example, if the first bit is 0, then the first bit of the mask will be 1 and all the other bits will be 0. \n    # Similarly, if the last bit is 1, then the last bit of the mask will be 0 and all the other bits will be 1. \n\n    # Convert the number to binary\n    binary = bin(n)[2:]\n\n    # Pad the binary representation with zeros to make its length divisible by 4\n    padded_binary = binary.zfill(len(binary) + (4 - len(binary) % 4) % 4)\n\n    # Split the padded binary into groups of 4\n    binary_groups = [padded_binary[i:i+4] for i in range(0, len(padded_binary), 4)]\n\n    # Create a mask to toggle the bits\n    mask = '1' * 4\n\n    # Toggle the bits using the XOR operation\n    toggled_groups = [int(group, 2) ^ int(mask, 2) for group in binary_groups]\n\n    # Convert the toggled binary groups back to binary and concatenate them\n    toggled_binary = ''.join([bin(toggled)[2:].zfill(4) for toggled in toggled_groups])\n\n    # Convert the toggled binary to an integer\n    toggled_n = int(toggled_binary, 2)\n\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of n\n    binary = bin(n)[2:]\n    \n    # create a mask that has 1 at every bit except the first and the last\n    mask = 0\n    mask |= (1 << (len(binary) - 1)) - 1\n    \n    # apply the mask to the binary representation\n    masked_binary = ''.join(['1' if mask & (1 << i) else '0' for i in range(len(binary))])\n    \n    # convert the masked binary back to an integer\n    return int(masked_binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # XOR the number with 0xAAAAAAAA to toggle all bits except the first and last ones.\n    n = n ^ 0xAAAAAAAA\n    # XOR the number with 0x55555555 to toggle all bits except the second and second to last ones.\n    n = n ^ 0x55555555\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Toggle the bits of n except the first and last bit using XOR\n    return n ^ ((n >> 1) ^ (n << 1))"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 0\n    for i in range(31):\n        mask |= 1 << i\n    n &= mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # Convert n to binary string\n    binary = bin(n)[2:]\n\n    # Toggle bits of the middle 32 bits\n    middle_bits = binary[1:-1]\n    toggled_bits = ''\n    for bit in middle_bits:\n        if bit == '1':\n            toggled_bits += '0'\n        else:\n            toggled_bits += '1'\n\n    # Convert the toggled bits back to an integer\n    toggled_binary = '0b' + toggled_bits\n    toggled_n = int(toggled_binary, 2)\n\n    # Convert the toggled integer back to hexadecimal\n    toggled_hex = hex(toggled_n)[2:]\n\n    # Convert the original binary string to an integer\n    original_binary = '0b' + binary\n    original_n = int(original_binary, 2)\n\n    # Combine the toggled bits with the first and last bits of the original binary string\n    result_binary = binary[0] + toggled_hex + binary[-1]\n\n    # Convert the result binary string to an integer\n    result_n = int(result_binary, 2)\n\n    return result_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    # toggle the bits of n except the first and the last bit\n    mask = (1 << (len(bin(n)) - 3)) - 1  # mask with all 1's except for the first and last bits\n    n ^= mask  # toggle the bits of n using the mask\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # toggle all bits except the first and last\n    mid_bits = n & 0b111110 # mask to toggle all bits except first and last\n    mid_bits = (mid_bits ^ 0b111111) # toggle all bits\n    n = n ^ mid_bits # toggle the bits in n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    return n ^ ((1 << n.bit_length() - 1) - 1) ^ ((1 << n.bit_length() - 1) - 1)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of n\n    binary = bin(n)[2:]\n\n    # Pad the binary string with zeros to make its length odd\n    if len(binary) % 2 == 0:\n        binary = \"0\" + binary\n    else:\n        binary = \"0\" + binary + \"0\"\n\n    # Toggle the middle bits\n    new_binary = \"\"\n    for i in range(1, len(binary) - 1, 2):\n        if binary[i] == \"0\":\n            new_binary += \"1\"\n        else:\n            new_binary += \"0\"\n\n    # Convert the new binary string to an integer and return it\n    return int(new_binary, 2)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    left = bisect.bisect_left(a, x)\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left_index = bisect.bisect_left(a, x)\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result: \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    return pattern.match(string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'^[aeiouAEIOU][A-Za-z0-9_]*')\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-0.5**n) / (1-0.5) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**(-1)) + geometric_sum(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"Geometric sum of {n-1} is: {geometric_sum(n)}\")"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1-n**(1/n))*n**(1/n)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - n + 1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)\n\nn = int(input(\"Enter a number: \"))\nresult = geometric_sum(n)\nprint(\"The geometric sum of {} is {}\".format(n-1, result))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    num = 1\n    count = 1\n    while len(str(num)) < n:\n        num += count\n        count += 1\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = int(math.log10(5**n)) + 1\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Finding the number of digits in n\n    num_digits = len(str(n))\n    \n    # Finding the upper limit of the triangular numbers with n digits\n    upper_limit = int(math.pow(10, num_digits))\n    \n    # Finding the index of smallest triangular number with n digits\n    for i in range(1, upper_limit):\n        if str(i * (i + 1) // 2).count('0') == num_digits:\n            return i\n    \n    return -1 # If no triangular number with n digits is found\n"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 1\n    count = 1\n    while True: \n        if len(str(num)) == n: \n            return count\n        else: \n            count += 1\n            num += count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n as an input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    count = 0\n    triangular = 1\n    \n    while True:\n        count += 1\n        triangular += count\n        \n        if len(str(triangular)) == n:\n            return count\n        \nn = int(input(\"Enter the number of digits: \"))\nprint(\"The index of the smallest triangular number with\", n, \"digits is\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the number of digits in the triangular number with n digits\n    k = int(math.ceil(n*math.log(n)))\n    \n    # Calculate the smallest triangular number with n digits\n    triangular_number = (k*(k+1))//2\n    \n    # Calculate the index of the smallest triangular number with n digits\n    index = 1\n    for i in range(1, n+1):\n        index *= i\n    \n    return index // triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    return int(n * (n + 1) / 2)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 0: \n        return 0\n    \n    # Calculate the smallest triangular number with n digits\n    t = int(math.pow(10, n) * (math.sqrt(1 + 8 * (math.pow(10, n-1)))) - 1) / 2\n    \n    # Calculate the index of the smallest triangular number with n digits\n    index = 0\n    while t > 0:\n        t = t // 10\n        index += 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    triangular_number = 1\n    while (len(str(triangular_number)) < n):\n        count += 1\n        triangular_number = int(math.pow(10, n-1) + count)\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the nth triangular number\n    nth_triangular_num = (n * (n + 1)) // 2\n\n    # Find the number of digits in the nth triangular number\n    num_digits = int(math.log10(nth_triangular_num)) + 1\n\n    # Find the index of smallest triangular number with n digits\n    index = num_digits * (n - 1)\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:  # checking if the length of the tuple is odd\n        print(\"Tuple length is odd. Cannot create dictionary.\")\n        return\n    else:\n        dict_tup = dict(zip(test_tup[::2], test_tup[1::2]))  # creating dictionary using zip function\n        return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary with adjacent elements as key-value pairs.\n    '''\n    # initialize an empty dictionary\n    dict_result = {}\n    # iterate over the tuple using a for loop\n    for i in range(len(test_tup)-1):\n        # use the current element and the next element as key-value pairs in the dictionary\n        dict_result[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return dict_result"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    my_dict = {}\n    for i in range(len(test_tup)-1):\n        my_dict[(test_tup[i], test_tup[i+1])] = i\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Iterate through the tuple using a loop\n    for i in range(len(test_tup)):\n        # Use the current element as the key and the next element as the value\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all characters are same, otherwise False.\n    '''\n    return s.count(s[0]) == len(s)"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Check whether all the characters in a given string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same, otherwise it returns False.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are the same, else False.\n    \"\"\"\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same, otherwise False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Check whether all characters in a given string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters are the same or not.\n    '''\n    # initializing a variable to store the first character of the string\n    first_char = s[0]\n    \n    # looping through each character in the string\n    for char in s:\n        # checking if the character is not equal to the first character\n        if char!= first_char:\n            # if the character is not equal to the first character, return False\n            return False\n    \n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes in the length of one of the three sides of a tetrahedron and returns the area of the tetrahedron.\n    '''\n    area = (math.sqrt(6) * (side ** 2)) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 4 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with the given side length.\n    '''\n    return (6 * math.pow(side, 2)) / (4 * math.tan(math.pi / 4))"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron given its side length.\n    '''\n    area = (math.sqrt(6) / 4) * (side ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    # Using Heron's formula to calculate the area of the tetrahedron\n    s = (side ** 2) * (3 ** 0.5) / 4\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron given its side length.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 3) / 2\n    \n    # Calculate the volume of the tetrahedron\n    volume = (1/3) * math.sqrt(6) * pow(s, 3)\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / (2 * math.sqrt(6))\n    area = math.sqrt(6) * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of a tetrahedron's side as input and returns its area.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 3) / 2\n    \n    # Calculate the square of the area of the tetrahedron\n    area_sq = math.sqrt(6 * s * (s - side))\n    \n    # Calculate and return the area of the tetrahedron\n    return area_sq * 4"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of the side of a tetrahedron as input and returns its area.\n    '''\n    area = (math.sqrt(6) * side**2) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(2)) / (4 * math.tan(math.pi / 12)) * side**2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list as input and rotates it by m number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n # To handle the case when m is greater than the length of the list\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates the given list to the right by m positions.\n    '''\n    n = len(lst)\n    m = m % n\n    lst = lst[-m:] + lst[:-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    '''\n    Rotate a given list to the right by m number of positions.\n    '''\n    n = len(lst)\n    m = m % n\n    lst = lst[-m:] + lst[:-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by k items.\n    \"\"\"\n    n = len(lst)\n    k = k % n  # handle the case where k > len(lst)\n    return lst[-k:] + lst[:-k]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list as input and rotates it to the right by m number of positions.\n    \"\"\"\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    lst = lst[n-m:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n\n    :param list: A list of items to be rotated.\n    :param m: The number of items to be rotated to the right direction.\n    :return: A rotated list.\n    \"\"\"\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any None value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple has any None value, else False.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    result = []\n\n    for num in range(startnum, endnum+1):\n        digits = list(map(int, str(num)))\n        if all(digit%num == 0 for digit in digits):\n            result.append(num)\n\n    return result\n\nstartnum = int(input(\"Enter start number: \"))\nendnum = int(input(\"Enter end number: \"))\n\nprint(\"Numbers divisible by digits: \", divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible_by_digits = lambda x: all(int(digit) % x == 0 for digit in str(x))\n\n    # Find all numbers between startnum and endnum that are divisible by every digit they contain\n    result = [x for x in range(startnum, endnum+1) if is_divisible_by_digits(x)]\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    return list(filter(lambda num: all(digit_sum(num) % digit == 0 for digit in range(1, 10)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible = []\n    for num in range(startnum, endnum + 1):\n        digits = list(map(int, str(num)))\n        if all(num % digit == 0 for digit in digits):\n            divisible.append(num)\n    return divisible\n\nprint(divisible_by_digits(100, 999))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n\n    # Using lambda function to check if a number is divisible by every digit it contains\n    is_divisible_by_digits = lambda num: all(num % int(digit) == 0 for digit in str(num))\n\n    # Finding all numbers within the given range\n    numbers = [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n\n    # Returning the numbers list\n    return numbers"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Define a lambda function to check divisibility\n    is_divisible = lambda x: all(int(digit) % x == 0 for digit in str(x))\n\n    # Filter numbers in the given range that are divisible by digits\n    divisible_nums = filter(is_divisible, range(startnum, endnum+1))\n\n    # Return the list of divisible numbers\n    return list(divisible_nums)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit)!= 0 and x % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two integers as input: startnum and endnum.\n    It returns a list of all the numbers within the given range (inclusive of startnum and endnum)\n    where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]  # convert the number to a list of its digits\n        if all(num % d == 0 for d in digits):  # check if every digit of the number divides into the number evenly\n            result.append(num)\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a*(math.sin(a*math.pi/360))"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    This function takes the radius and angle as inputs.\n    It returns the area of the sector if the angle is less than or equal to 360 degrees,\n    otherwise it returns None.\n    \"\"\"\n    if a <= 360:\n        area = (r**2) * (a/360) * math.pi\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * math.pi * r * r) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes two inputs, radius and angle, and returns the area of a sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/(2*math.pi)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find the length of three strings\n    lenX = len(X)\n    lenY = len(Y)\n    lenZ = len(Z)\n\n    # Create a 2D list to store LCS values\n    L = [[0 for i in range(lenY + 1)] for j in range(lenX + 1)]\n\n    # Fill the LCS values in the list\n    for i in range(lenX + 1):\n        for j in range(lenY + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] == Z[i+j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Initialize the LCS string\n    lcs = \"\"\n\n    # Find the LCS string by backtracking from the LCS value\n    i = lenX\n    j = lenY\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] == Z[i+j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D array to store lengths of LCSs\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill the 3D array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # find the LCS using the lengths stored in the 3D array\n    lcs_len = lcs[m][n][o]\n    lcs_str = [\"\"] * lcs_len\n    lcs_str[lcs_len-1] = \"\"\n\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_str[lcs_len-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs_len -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(reversed(lcs_str))\n"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = \"\"\n\n    i = m\n    j = n\n    k = o\n\n    while (i > 0 and j > 0 and k > 0):\n\n        if (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif (L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]):\n            i -= 1\n        elif (L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of subsequences\n    L = [[[0] * (p+1) for x in range(n+1)] for y in range(m+1)]\n\n    # Following steps build L[m+1][n+1][p+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0...i-1] and Y[0...j-1] and Z[0...k-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Following code is used to print LCS\n    index = L[m][n][p]\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Creating a 3D matrix to store length of LCS at each point\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Using bottom-up approach to fill the LCS matrix\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # Finding the LCS\n    lcs_str = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (n+1) for _ in range(o+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    lcs = ''\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] > L[i - 1][j][k] and L[i][j - 1][k] > L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # Find the length of LCS\n    lcs_len = dp[m][n][o]\n\n    # Create a character array to store the LCS string\n    lcs = [\"\"] * lcs_len\n\n    # Start from the end of LCS and store the characters in lcs[]\n    i = m\n    j = n\n    k = o\n    while lcs_len > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[lcs_len-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs_len -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] < dp[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Print the LCS\n    print(\"LCS of \" + X + \", \" + Y + \", \" + Z + \" is:\")\n    print(\"\".join(lcs))"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # join the words with spaces in between\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # replace each capitalized word with its capitalized version with spaces between words\n    for word in capitalized_words:\n        str1 = str1.replace(word, word.title().replace('_',''))\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Joining the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Joining the words with spaces in between\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # replace each capitalized word with its lowercase version with spaces between words\n    result = ''\n    for word in capitalized_words:\n        result += word.lower() +''\n        \n    # remove trailing space\n    result = result[:-1]\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # join the words with spaces between them\n    new_string =''.join(words)\n    return new_string"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[^A-Z])([A-Z][a-z]*)')\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all capital words in the string using regex\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # create a list of words with spaces between capitalized words\n    words_with_spaces = []\n    for word in capital_words:\n        words_with_spaces.append(word.strip())\n    # join the words with spaces\n    result =''.join(words_with_spaces)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Creating an empty list to store modified words\n    modified_words = []\n    \n    # Iterating over each word in the words list\n    for word in words:\n        # Checking if the first letter of the word is capitalized or not\n        if word[0].isupper():\n            # Adding a space before the word\n            modified_word ='' + word\n        else:\n            modified_word = word\n        # Adding the modified word to the modified_words list\n        modified_words.append(modified_word)\n    \n    # Joining the modified words list into a single string\n    modified_str = ''.join(modified_words)\n    \n    # Returning the modified string\n    return modified_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = []\n    for string in nums_str:\n        nums_int.append(int(string))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num in nums_int:\n        sorted_nums_str.append(str(num))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_int = []\n    for num in nums_str:\n        nums_int.append(int(num))\n\n    nums_int.sort()\n    nums_str = [str(num) for num in nums_int]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a list of strings of numbers numerically.\n    '''\n    # Convert the list of strings to a list of tuples, where each tuple contains a string and its integer value\n    nums_tuples = [(s, int(s)) for s in nums_str]\n    # Sort the list of tuples based on the integer value of each tuple\n    nums_tuples.sort(key=lambda x: x[1])\n    # Extract the sorted list of strings from the sorted list of tuples\n    sorted_nums_str = [s for s, _ in nums_tuples]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    return sorted(nums_str, key=lambda x: float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str: List of strings containing numbers.\n\n    Returns:\n    List of strings containing numbers sorted numerically.\n    \"\"\"\n\n    # Convert list of strings to list of integers\n    nums = [int(num_str) for num_str in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums.sort()\n\n    # Convert the list of integers back to list of strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as an argument and sorts it numerically.\n    '''\n    nums_int = [int(num) for num in nums_str]\n    nums_int.sort()\n    sorted_nums_str = [str(num) for num in nums_int]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str: A list of strings containing numbers.\n\n    Returns:\n    The sorted list of strings.\n    \"\"\"\n\n    # Splitting the strings to get numbers\n    nums = [int(num_str) for num_str in nums_str]\n\n    # Sorting the numbers\n    sorted_nums = sorted(nums)\n\n    # Converting the sorted numbers back to strings and returning the list\n    sorted_nums_str = [str(num) for num in sorted_nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x) if x.isdigit() else x)"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list using the append() method.\n    test_list.append(test_tup)\n    # Return the modified list.\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n\n    if left < len(arr) and arr[left] < arr[largest]:\n        largest = left\n\n    if right < len(arr) and arr[right] < arr[largest]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        check_min_heap_helper(arr, largest)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[i // 2]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n\n    # Check if the given index i is a valid index\n    if i < 0 or i >= n:\n        return False\n\n    # Check if the given array is valid\n    if not arr:\n        return True\n\n    # Check if the current node satisfies the min heap property\n    if i <= n // 2 - 1:\n        # Check if the left child of the current node is smaller than the current node\n        if arr[2 * i + 1] < arr[i]:\n            return False\n\n        # Check if the right child of the current node is smaller than the current node\n        if 2 * i + 2 < n and arr[2 * i + 2] < arr[i]:\n            return False\n\n        # Recursively check the left and right subtrees of the current node\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    left = 2*i + 1\n    right = 2*i + 2\n    \n    # If left child is greater than root\n    if left < n and arr[left] < arr[i]:\n        return False\n    \n    # If right child is greater than root\n    if right < n and arr[right] < arr[i]:\n        return False\n    \n    # For every non-leaf node, recursively check heap property\n    if left < n:\n        if not check_min_heap_helper(arr, left):\n            return False\n    \n    if right < n:\n        if not check_min_heap_helper(arr, right):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if 2 * i + 1 < n and arr[2 * i + 1] < arr[i]:\n        return False\n    if 2 * i + 2 < n and arr[2 * i + 2] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If i is less than the length of the array and the value at i is less than or equal to its children\n    if i < len(arr) and ((2*i + 1) < len(arr) and arr[i] <= arr[2*i + 1] or (2*i + 2) < len(arr) and arr[i] <= arr[2*i + 2]):\n        # Check the left and right children recursively\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    # If i is less than the length of the array and the value at i is greater than its parent\n    elif i < len(arr) and (i//2) < len(arr) and arr[i] > arr[(i-1)//2]:\n        # Check the parent recursively\n        return check_min_heap_helper(arr, (i-1)//2)\n    else:\n        # If none of the above conditions are met, the array is a min heap\n        return True\n\ndef check_min_heap(arr):\n    '''\n    A wrapper function to call the check_min_heap_helper function with the root node as the starting index.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not is_min_heap_satisfied(arr, i, n):\n            return False\n    return True\n    \ndef is_min_heap_satisfied(arr, i, n):\n    if i >= n//2:\n        return True\n    \n    l = 2*i + 1\n    r = 2*i + 2\n    \n    if l < n and arr[i] > arr[l]:\n        return False\n    \n    if r < n and arr[i] > arr[r]:\n        return False\n    \n    return is_min_heap_satisfied(arr, l, n) and is_min_heap_satisfied(arr, r, n)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap.\n    '''\n    for i in range(len(arr) // 2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr):\n        left_child = 2*i + 1\n        right_child = 2*i + 2\n        \n        if left_child < len(arr):\n            if arr[i] > arr[left_child]:\n                return False\n        \n        if right_child < len(arr):\n            if arr[i] > arr[right_child]:\n                return False\n        \n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    else:\n        return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    if i < len(arr):\n        # Left child\n        left_child = 2 * i + 1\n        # Right child\n        right_child = 2 * i + 2\n        # Check if left child exists and is greater than root\n        if left_child < len(arr) and arr[left_child] < arr[i]:\n            return False\n        # Check if right child exists and is greater than root\n        if right_child < len(arr) and arr[right_child] < arr[i]:\n            return False\n        # Recursively check for left and right children\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    # If no children left, return True\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Function to check if the given array represents min heap or not.\n    '''\n    # Check if the last element is the root node\n    if arr[-1] <= arr[0]:\n        return True\n    # Recursively check for left and right children\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    This function finds the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function will return the minimum k records from a tuple list.\n    \"\"\"\n    # Sort the list in ascending order based on the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n    # Return the first k elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if K > n:\n        return \"K should be less than or equal to n\"\n    \n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    n = len(test_list)\n    if K > n:\n        return \"Invalid Input\"\n    else:\n        heap = []\n        for i in range(K):\n            heapq.heappush(heap, test_list[i])\n        for i in range(K, n):\n            if test_list[i][0] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, test_list[i])\n        result = []\n        while heap:\n            result.append(heapq.heappop(heap))\n        return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # Sort the list of tuples based on the second element of each tuple (i.e., the record score)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Return the first k records from the sorted list of tuples\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    n = len(test_list)\n    if K > n:\n        return \"Invalid input\"\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, test_list[i][1])\n        if len(heap) > K:\n            heapq.heappop(heap)\n    res = []\n    for i in range(K):\n        res.append(test_list[i][0])\n    return res"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    n = len(test_list)\n    k = min(n, K)\n    min_heap = []\n\n    for i in range(k):\n        heappush(min_heap, test_list[i])\n\n    for i in range(k, n):\n        if test_list[i] < min_heap[0]:\n            heappop(min_heap)\n            heappush(min_heap, test_list[i])\n\n    return [heappop(min_heap) for i in range(k)]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a min heap of size K to store the minimum k records\n    heap = []\n\n    # Iterate through the test_list and add the first k records to the min heap\n    for i in range(K):\n        heap.append(test_list[i])\n        # Heapify the min heap to maintain the heap property\n        heapq.heapify(heap)\n\n    # Iterate through the test_list and add each record to the min heap\n    for i in range(K, len(test_list)):\n        # If the current record is smaller than the smallest record in the heap,\n        # remove the smallest record and add the current record to the heap\n        if test_list[i][0] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n\n    # Return the k minimum records from the heap\n    return heap"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element (i.e., the second element of each tuple will be sorted)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first K records from the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create an empty heap of size K\n    heap = []\n\n    # Iterate through the list of tuples and insert each tuple into the heap\n    for record in test_list:\n        if len(heap) < K:\n            heapq.heappush(heap, record)\n        else:\n            if record[1] < heap[0][1]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, record)\n\n    # Return the minimum k records from the heap\n    return heapq.nsmallest(K, heap)"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function takes three lists as input, finds common elements, and returns a list of common elements.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_index_list.append(i)\n    return common_index_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    # Iterate over the indices of the first list\n    for index in range(len(l1)):\n        # Check if the element at the current index is common in all three lists\n        if l1[index] in l2 and l1[index] in l3:\n            common_elements.append(l1[index])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number in the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the smallest number in the list\n    smallest = min(numbers)\n    # Remove the smallest number from the list\n    numbers.remove(smallest)\n    # Find the new smallest number in the list\n    new_smallest = min(numbers)\n    # Return the new smallest number\n    return new_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # find the smallest number\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    \n    # find the second smallest number\n    second_smallest = None\n    for num in numbers:\n        if num < smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers_sorted = sorted(numbers)\n    if len(numbers_sorted) < 2:\n        return None\n    return numbers_sorted[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = min(numbers)\n    second_smallest = None\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    # Find the second smallest number\n    second_smallest = sorted_list[1]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = 'abbbba'\nprint(text_match_zero_one(text)) # Output: 'abbbba'\n\ntext = 'ac'\nprint(text_match_zero_one(text)) # Output: None\n\ntext = 'abc'\nprint(text_match_zero_one(text)) # Output: None\n\ntext = 'aabbabc'\nprint(text_match_zero_one(text)) # Output: 'aabbabc'"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab*'\n    result = re.match(pattern, text)\n    return bool(result)"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'The quick brown fox jumps over the lazy dog'\nprint(text_match_zero_one(text))"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a+b+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]) or (test_list[j] == test_list[i][::-1]):\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(str1, str2):\n    \"\"\"\n    Check if two strings are reverse of each other.\n    \"\"\"\n    return str1 == str2[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Counts the number of pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s1, s2):\n    \"\"\"\n    Checks if two strings are reverse of each other.\n    \"\"\"\n    return s1 == s2[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the count of pairs of reverse strings in the list.\n    '''\n\n    # Initialize a dictionary to store the count of each string\n    count_dict = {}\n\n    # Iterate over the list of strings and count each string\n    for string in test_list:\n        count_dict[string] = count_dict.get(string, 0) + 1\n\n    # Initialize a dictionary to store the count of each reversed string\n    rev_count_dict = {}\n\n    # Iterate over the list of strings and count each reversed string\n    for string in test_list:\n        rev_string = string[::-1]\n        rev_count_dict[rev_string] = rev_count_dict.get(rev_string, 0) + 1\n\n    # Initialize a counter variable for the count of reverse pairs\n    count = 0\n\n    # Iterate over the list of strings and count the pairs of reverse strings\n    for string in test_list:\n        rev_string = string[::-1]\n        if string < rev_string:\n            count += rev_count_dict[string]\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    # Sort the list of strings lexicographically\n    test_list.sort()\n    \n    # Iterate over the sorted list and count the pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with unique sublists as keys and their count as values.\n    \"\"\"\n    # convert the list to a set to get unique elements\n    unique_lst = set(tuple(lst[i:j]) for i in range(len(lst)) for j in range(i+1, len(lst)+1))\n    # create a dictionary with the unique sublists as keys and their count as values\n    sublist_dict = {}\n    for sublist in unique_lst:\n        sublist_dict[sublist] = lst.count(list(sublist))\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over all sublists of the input list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Convert the sublist to a tuple and check if it already exists in the dictionary\n            sublist = tuple(list1[i:j])\n            if sublist in counts:\n                # If the sublist exists, increment its count\n                counts[sublist] += 1\n            else:\n                # If the sublist doesn't exist, add it to the dictionary with a count of 1\n                counts[sublist] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list, return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = tuple(lst[i:j])\n            count_dict[sub_list] = count_dict.get(sub_list, 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    # Initialize an empty dictionary to store the counts of each sublist\n    counts = {}\n\n    # Loop through each sublist in lst\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            # Convert the sublist to a tuple and check if it's already in the dictionary\n            sublist = tuple(lst[i:j+1])\n            if sublist not in counts:\n                # If the sublist is not in the dictionary, count its occurrences in lst and add it to the dictionary\n                count = lst.count(sublist)\n                counts[sublist] = count\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in count_dict:\n                count_dict[sublist] = 1\n            else:\n                count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in counts:\n                counts[sublist] += 1\n            else:\n                counts[sublist] = 1\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if float(num) == round(float(num), 2):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        try:\n            num = float(num)\n            return abs(num - int(num)) <= 0.01\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal = float(num)\n        if abs(decimal - round(decimal, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if abs(float_num - round(float_num, 2)) <= 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return round(num, 2) == float(num)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if int(num*100) % 100 == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if abs(float(num) - round(float(num), 2)) < 1e-2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        elif str(num)[-2:] == \".0\":\n            return True\n        elif abs(num - round(num, 2)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_element(arr):\n    '''\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        arr: A list of numbers.\n\n    Returns:\n        True if the list contains only one distinct element, False otherwise.\n    '''\n\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, and False otherwise.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function returns True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(arr)) == 1"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element,\n    and False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True  # April, June, September, November\n    elif monthnum3 == 2:\n        return True  # February\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False  # All other months have 31 days\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return \"Invalid month number!\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 30 or 31 days.\n    Months are given as numbers from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum == 2:\n        return \"28 or 29 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"The month has 30 days.\"\n    elif monthnum3 == 2:\n        return \"The month has 28 or 29 days.\"\n    else:\n        return \"The month has 31 days.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None\n\nprint(check_monthnumber_number(1))  # Expected output: True\nprint(check_monthnumber_number(2))  # Expected output: True\nprint(check_monthnumber_number(3))  # Expected output: False\nprint(check_monthnumber_number(4))  # Expected output: True\nprint(check_monthnumber_number(5))  # Expected output: False\nprint(check_monthnumber_number(6))  # Expected output: True\nprint(check_monthnumber_number(7))  # Expected output: False\nprint(check_monthnumber_number(8))  # Expected output: False\nprint(check_monthnumber_number(9))  # Expected output: True\nprint(check_monthnumber_number(10))  # Expected output: False\nprint(check_monthnumber_number(11))  # Expected output: True\nprint(check_monthnumber_number(12))  # Expected output: False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    else:\n        return False\n\nprint(check_monthnumber_number(2))"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True  # April, June, September, November have 30 days\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False  # January, March, May, July, August, October, December have 31 days\n    else:\n        return None  # Invalid month number"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        if arr[i] - arr[i - 1] < min_diff:\n            min_diff = arr[i] - arr[i - 1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Assigning a very large value to min_diff variable\n\n    for i in range(n - 1):  # Iterating over all the elements of the array\n        diff = arr[i+1] - arr[i]  # Calculating the difference between consecutive elements\n        if diff < min_diff:  # Updating min_diff if the current difference is less than min_diff\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function will return the minimum difference between any two elements in a given array.\n    '''\n\n    arr.sort()  # Sort the array in ascending order\n\n    min_diff = arr[1] - arr[0]  # Initialize the minimum difference to the difference between first two elements\n\n    for i in range(1, n - 1):\n        # Find the minimum difference between the i-th element and the i+1-th element\n        diff = arr[i + 1] - arr[i]\n\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): The input array.\n    n (int): The size of the input array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of digits present in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_digits(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(s):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        is_polite = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    i = 1\n    j = 1\n    \n    # Calculate the ith and jth polite numbers\n    while i <= n:\n        j = i + 1\n        while j <= n:\n            if is_prime(j) and is_prime(i) and j < i:\n                i += 1\n                break\n            j += 1\n        \n        if i <= n:\n            i += 1\n            \n    return i-1\n\ndef is_prime(n):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Function to find the nth polite number.\n    \"\"\"\n    count = 1 # initialize count to 1\n    num = 1   # initialize num to 1\n    while True: # loop until the nth polite number is found\n        if is_prime(num) and is_polish(num): # check if num is prime and polish\n            count += 1 # increment count\n            if count == n: # check if count is equal to n\n                return num # return the nth polite number\n        num += 1 # increment num by 1\n\ndef is_prime(num): \n    \"\"\"\n    Function to check if a number is prime.\n    \"\"\"\n    if num < 2: # 0 and 1 are not prime\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1): # check if num is divisible by any number from 2 to sqrt(num)\n        if num % i == 0:\n            return False\n    return True\n\ndef is_polish(num): \n    \"\"\"\n    Function to check if a number is polish.\n    \"\"\"\n    str_num = str(num) # convert num to string\n    for i in range(len(str_num)): # loop through each digit in the string\n        if int(str_num[i]) == 0: # if the digit is 0, continue to the next digit\n            continue\n        elif int(str_num[i]) % 2 == 0: # if the digit is even, return False\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function finds the nth polite number. \n    '''\n    # Initialize variables\n    i = 1\n    j = 1\n    k = 1\n    count = 0\n    \n    # Loop through all numbers until we find the nth polite number\n    while count < n:\n        # Check if number i is polite\n        is_polite = True\n        sqrt_i = int(math.sqrt(i))\n        for j in range(2, sqrt_i + 1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        else:\n            i += 1\n        \n        # Check if number j is polite\n        is_polite = True\n        sqrt_j = int(math.sqrt(j))\n        for k in range(2, sqrt_j + 1):\n            if j % k == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        else:\n            j += 1\n        \n        # Check if number k is polite\n        is_polite = True\n        sqrt_k = int(math.sqrt(k))\n        for l in range(2, sqrt_k + 1):\n            if k % l == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        else:\n            k += 1\n    \n    return i - 1, j - 1, k - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        i = 2\n        j = 2\n        count = 2\n        while count < n:\n            i += 1\n            j = i - 1\n            while j > 1:\n                if i % j == 0:\n                    break\n                j -= 1\n            if j == 1:\n                count += 1\n        return i"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    \n    prev_num = 1\n    current_num = 2\n    count = 2\n    \n    while count < n:\n        next_num = current_num + prev_num\n        \n        if is_prime(next_num) and is_polite(prev_num):\n            count += 1\n            prev_num = current_num\n            current_num = next_num\n    \n    return current_num\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\nprint(is_polite(10)) # Output: 13"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i) and is_prime(i+2):\n            count += 1\n        i += 1\n    return i-2\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Returns nth polite number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n        else:\n            count = 1\n    return num\n\ndef is_prime(num):\n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    # initialize a list to store the polite numbers\n    polite_numbers = [2]\n    # initialize a variable to keep track of the index of the previous polite number\n    prev_polite_index = 0\n    # loop through all numbers from 3 to infinity\n    for i in range(3, math.inf):\n        # check if the current number is divisible by any of the previous polite numbers\n        is_polite = True\n        for j in range(prev_polite_index, len(polite_numbers)):\n            if i % polite_numbers[j] == 0:\n                is_polite = False\n                break\n        # if the current number is polite, append it to the list\n        if is_polite:\n            polite_numbers.append(i)\n            # update the index of the previous polite number\n            prev_polite_index += 1\n        # if the list has reached the desired length, return the nth polite number\n        if len(polite_numbers) == n:\n            return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    i = 1\n    count = 0\n    while count < n:\n        j = 2\n        is_prime = True\n        while j <= math.sqrt(i):\n            if i % j == 0:\n                is_prime = False\n                break\n            j += 1\n        if is_prime:\n            count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, target_sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    \n    # Sorting the array in ascending order to make the problem easier\n    arr.sort()\n    \n    # Checking for the presence of any element in the array that is equal to the given sum\n    for i in range(len(arr)):\n        j = i + 1\n        while j < len(arr) and arr[i] + arr[j] == sum:\n            count += 1\n            j += 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    arr.sort() # sort the array\n    left, right = 0, len(arr) - 1 # initialize left and right pointers\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            pairs_count += 1\n            left += 1 # move left pointer to the right\n            right -= 1 # move right pointer to the left\n        elif current_sum < sum:\n            left += 1 # move left pointer to the right\n        else:\n            right -= 1 # move right pointer to the left\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function returns the difference between two lists.\n    '''\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    # Convert the lists to sets to get the unique elements\n    set1 = set(li1)\n    set2 = set(li2)\n    # Get the difference between the sets and convert back to a list\n    diff = list(set1 - set2)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    diff_list = list(set(li1) - set(li2))\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains only the elements that are present in the first list but not in the second list.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns the difference between them as a new list.\n    \"\"\"\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns the difference between two lists.\n    \"\"\"\n    result = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return result"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n*2, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_power = 0\n    count = 1\n    \n    while count <= n:\n        if count % 2 == 1:\n            sum_of_fourth_power += (count**4)\n            count += 1\n        else:\n            count += 1\n            \n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum\n    sum = 0\n    \n    # loop through first n odd numbers\n    for i in range(1, n*2, 2):\n        # add the fourth power of the current number to the sum\n        sum += i**4\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function will find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return ((4*n-2)**2 + 1)**2 // 4"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    This function returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes a number 'n' as input and returns the sum of fourth power of first 'n' odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of fourth power of first n odd natural numbers\n    odd_sum = 0\n    \n    # initialize a variable to store the first odd natural number\n    odd_num = 1\n    \n    # loop until we find n odd natural numbers\n    while n > 0:\n        # add the fourth power of the current odd number to the sum\n        odd_sum += odd_num ** 4\n        \n        # increment the value of odd_num by 2 to find the next odd number\n        odd_num += 2\n        \n        # decrement the value of n by 1 to keep track of the remaining odd numbers\n        n -= 1\n    \n    # return the sum of fourth power of first n odd natural numbers\n    return odd_sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes a string as input and returns True if the string is balanced and False otherwise.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # split the string into a list of words\n    words = [word for word in words if len(word)!= K]  # filter out the words with k length\n    return \" \".join(words)  # join the words back into a string with a space between them"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function takes in a string 'test_str' and an integer 'K' as input and removes all the words with length K in the string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    \n    # Creating an empty list to store the words with length less than K\n    new_words = []\n    \n    # Iterating through each word in the list and checking its length\n    for word in words:\n        if len(word) < K:\n            new_words.append(word)\n    \n    # Joining the words in the new_words list into a string\n    new_string =''.join(new_words)\n    \n    return new_string"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with length k in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with length K from the given string.\n    '''\n    # Splitting the string into a list of words\n    words = test_str.split()\n    \n    # Removing the words with length K\n    result = [word for word in words if len(word)!= K]\n    \n    # Joining the words back into a string and returning it\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        start = match.start()\n        end = match.end()\n        matches.append((start, end))\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes in a text string and a pattern string as inputs.\n    It returns a list of tuples containing the occurrence and position of the substrings within the text string.\n    '''\n    # Find all the occurrences of the pattern in the text string\n    occurrences = re.findall(pattern, text)\n    \n    # If there are no occurrences, return None\n    if not occurrences:\n        return None\n    \n    # Create a list of tuples containing the occurrence and position of the substrings\n    result = []\n    for occurrence in occurrences:\n        start_pos = text.find(occurrence)\n        end_pos = start_pos + len(occurrence)\n        result.append((occurrence, start_pos, end_pos))\n    \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes in two arguments: the text to search and the pattern to search for.\n    It returns a list of tuples containing the occurrence and position of the substrings within the text.\n    If there is no match, it returns None.\n    \"\"\"\n    if not text or not pattern:\n        return None\n    \n    # Find all occurrences of the pattern in the text using regex\n    matches = re.finditer(pattern, text)\n    \n    # Create a list of tuples containing the occurrence and position of the substrings within the text\n    result = [(match.start(), match.group()) for match in matches]\n    \n    # Return the result if it is not empty, otherwise return None\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_count = text.count(pattern)\n    if pattern_count > 0:\n        pattern_positions = [i.start() for i in re.finditer(pattern, text)]\n        return pattern_count, pattern_positions\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match_obj = re.search(pattern, text)\n    if match_obj:\n        return (match_obj.group(), match_obj.start())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate over the matches and return a list of tuples containing the substring and its position in the text\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n\n    # If there are no matches, return None\n    if len(result) == 0:\n        return None\n    else:\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Return None if there is no match\n    if not matches:\n        return None\n    \n    # Iterate over all the matches and append them to a list\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    \n    # Return the list of matches\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.group()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.start(), match.end()))\n    return matches if matches else None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function checks whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of integers as input and returns True if every odd index contains odd numbers in the list, else False.\n    '''\n    # iterate through the list using a for loop\n    for i in range(len(nums)):\n        # if the index is odd and the number at that index is even, return False\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    # if all odd indices contain odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every odd index contains odd numbers of the list, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(test_str)):\n        \n        # Check if the current character is a vowel\n        if test_str[i].lower() in vowels:\n            \n            # Check if the previous character and the next character are vowels as well\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n                \n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    # Iterate over the string\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # check each character in the string\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            # check if the previous character and next character are vowels\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n\n        # Check if the current character is a vowel\n        if test_str[i].lower() in vowels:\n\n            # Check if the next character is also a vowel\n            if i < len(test_str) - 1 and test_str[i+1].lower() in vowels:\n                count += 1\n\n            # Check if the previous character is also a vowel\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        \n        # Check if the current character is a vowel\n        if test_str[i].lower() in vowels:\n            \n            # Check if the previous and next characters are vowels\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # iterate over each character in the string\n    for i in range(len(test_str)-1):\n        # check if the current character is a vowel\n        if test_str[i].lower() in vowels:\n            # check if the next character is also a vowel\n            if test_str[i+1].lower() in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            non_repeated_sum += num\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements.\n    \"\"\"\n    seen = set()\n    result = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            result += num\n    return result"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_nums = set(arr)\n    sum_of_unique_nums = sum(unique_nums)\n    return sum_of_unique_nums"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to store the non-repeated elements and their counts\n    non_repeated_dict = {}\n    \n    # iterate through the input list\n    for element in arr:\n        # if the element is not already in the dictionary, add it with a count of 1\n        if element not in non_repeated_dict:\n            non_repeated_dict[element] = 1\n        # if the element is already in the dictionary, increment its count\n        else:\n            non_repeated_dict[element] += 1\n    \n    # create an empty list to store the non-repeated elements\n    non_repeated_list = []\n    \n    # iterate through the non_repeated_dict and add each non-repeated element to the list\n    for element in non_repeated_dict:\n        if non_repeated_dict[element] == 1:\n            non_repeated_list.append(element)\n    \n    # calculate the sum of the non-repeated elements and return it\n    return sum(non_repeated_list)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    seen = set()\n    sum_non_repeated = 0\n    for num in arr:\n        if num not in seen:\n            sum_non_repeated += num\n            seen.add(num)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    # iterate through the dictionary to find the sum of non-repeated elements\n    sum_non_repeated = 0\n    for key, value in count_dict.items():\n        if value == 1:\n            sum_non_repeated += key\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = set(arr) # convert the list to a set to remove duplicates\n    sum = 0\n    for num in unique_arr:\n        sum += num\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n    unique_elements = set(arr) # create a set of unique elements from the given list\n    sum_of_unique_elements = sum(unique_elements) # sum all the unique elements\n    return sum_of_unique_elements # return the sum of unique elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(group) for key, group in groupby(lst) if key]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for k, g in groupby(enumerate(lst), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for k, g in groupby(lst):\n        group = list(g)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [[y for y in x] for x in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for key, group in groupby(lst):\n        if key == group[0]:\n            result.append(key)\n        else:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function packs consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and packs consecutive duplicates of the elements in the list into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        group = list(g)\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group_list = list(map(lambda x: x[1], group))\n        yield group_list"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary with unique sublists as keys and their respective counts as values.\n    '''\n    unique_sublist_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in unique_sublist_dict:\n            unique_sublist_dict[sublist_tuple] = 1\n        else:\n            unique_sublist_dict[sublist_tuple] += 1\n    return unique_sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_dict:\n            unique_dict[tuple_sublist] += 1\n        else:\n            unique_dict[tuple_sublist] = 1\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. \n    The function should return a dictionary, where every list is turned to a tuple, \n    and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in result:\n                result[sublist] += 1\n            else:\n                result[sublist] = 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the unique sublists as keys and their count as values.\n    \"\"\"\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the sublists and their counts\n    sublists_dict = {}\n    \n    # Iterate over every possible sublist in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Convert the sublist to a tuple and add it to the dictionary\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists_dict:\n                sublists_dict[sublist] = 1\n            else:\n                sublists_dict[sublist] += 1\n    \n    # Return the dictionary\n    return sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in result:\n                result[sublist] = 1\n            else:\n                result[sublist] += 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    # create a set of tuples from the sublists in lst\n    sublists = set(tuple(sublist) for sublist in lst)\n    \n    # count the occurrences of each sublist\n    counts = {}\n    for sublist in sublists:\n        counts[sublist] = lst.count(sublist)\n    \n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sum_list = [sum(x) for x in test_list]\n    comb_list = []\n    for i in range(1, len(sum_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(x for x in j) == sum_list[i-1]:\n                comb_list.append(j)\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            if sum(c) == 10:\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            sub_list = test_list[i:j]\n            sum_list = [sum(t) for t in sub_list]\n            for comb in combinations(sum_list, 2):\n                for t in sub_list:\n                    if comb[0] in t and comb[1] in t:\n                        result.append((comb[0], comb[1], t))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for r in range(1, len(test_list)+1):\n        for c in combinations(test_list, r):\n            if sum(c) == 10:\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = [sum(combo) for combo in combinations(test_list, 2)]\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 2020:\n                sum_list.append(combo)\n    return sum_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for r in range(1, len(test_list)+1):\n        for combination in combinations(test_list, r):\n            if sum(combination) == 0:\n                print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for tup in test_list:\n        sum_list.append(sum(tup))\n    comb_list = []\n    for i in range(1, len(sum_list)+1):\n        comb = combinations(test_list, i)\n        for c in comb:\n            if sum(sum(t) for t in c) == 100:\n                comb_list.append(c)\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create an empty list to store the combinations of sums with tuples\n    combinations_list = []\n    \n    # Loop through each tuple in the tuple list\n    for tup in test_list:\n        # Loop through each possible sum of the tuple\n        for i in range(1, len(tup)+1):\n            # Find all possible combinations of the sum with the tuple\n            for combo in combinations(tup, i):\n                # Check if the combination is unique and not already in the combinations list\n                if combo not in combinations_list and sum(combo) == sum(tup):\n                    combinations_list.append(combo)\n                    \n    # Return the list of combinations of sums with tuples\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            if n//i == i : \n                count += 1\n            else : \n                count += 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif count_divisors(10) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nprint(count_divisors(10)) # output: 4\nprint(count_divisors(12)) # output: 5"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} has an even number of divisors\")\n    else:\n        print(f\"{n} has an odd number of divisors\")\n\ncount_divisors(12) # Output: 12 has an even number of divisors"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    # Iterate through all possible odd length subarrays\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum_odd += sum(arr[i:j+1])\n    \n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for length in range(1, n+1, 2):\n        for i in range(n-length+1):\n            sum += sum(arr[i:i+length])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            total_sum += sum(arr[j:j+i])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of a given array.\n    \"\"\"\n\n    # Finding the length of the array\n    n = len(arr)\n\n    # Initialize the sum variable to 0\n    sum_of_subarrays = 0\n\n    # Iterate over all odd length subarrays\n    for i in range(1, n+1, 2):\n\n        # Iterate over all possible starting indices for the subarray\n        for j in range(n-i+1):\n\n            # Add the product of the elements in the subarray to the sum variable\n            subarray_product = 1\n            for k in range(i):\n                subarray_product *= arr[j+k]\n            sum_of_subarrays += subarray_product\n\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize the sum variable to zero\n    total_sum = 0\n    # Iterate through all the possible odd length subarrays\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[i:j])\n            # Add the subarray sum to the total sum\n            total_sum += subarray_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2!= 0:\n                sum_odd += sum(arr[i:j+1])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function finds the sum of all odd length subarrays.\n    '''\n    sum = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                # adding the sum of current subarray\n                sum += sum(arr[i:j+1])\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays of a given array.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n\n    hue = int(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else (diff / cmax) * 100\n    value = int(cmax * 100)\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60, 1)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else round(delta / cmax * 100, 1)\n    value = round(cmax * 100, 1)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # convert rgb to range 0-1\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # find maximum and minimum values for rgb\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    # find the difference between cmax and cmin\n    delta = cmax - cmin\n\n    # find the hue\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue *= 60\n\n    # find the saturation\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    # find the value\n    value = cmax\n\n    # return the hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60, 2)\n    if h < 0:\n        h += 360\n\n    s = 0 if cmax == 0 else round((delta / cmax) * 100, 2)\n    v = round(cmax * 100, 2)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to its HSV equivalent.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # convert rgb values to float\n    r = float(r)\n    g = float(g)\n    b = float(b)\n\n    # find minimum and maximum values for rgb colors\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n\n    # calculate the value and saturation\n    value = max_value\n    saturation = (max_value - min_value) / max_value\n\n    # calculate the hue\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        hue = 2 + (b - r) / (max_value - min_value)\n    else:\n        hue = 4 + (r - g) / (max_value - min_value)\n\n    hue = hue * 60\n    if hue < 0:\n        hue = hue + 360\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB to HSV color model.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b)/delta) % 6\n    elif cmax == g:\n        hue = (b - r)/delta + 2\n    else:\n        hue = (r - g)/delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else round(delta/cmax * 100)\n    \n    value = round(cmax * 100)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to its HSV representation.\n\n    :param r: Red component of the color (0-255).\n    :param g: Green component of the color (0-255).\n    :param b: Blue component of the color (0-255).\n    :return: Tuple containing H, S, and V values for the input color.\n    \"\"\"\n\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h *= 60\n    s = 0 if delta == 0 else delta / max_val\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60)\n\n    if h < 0:\n        h += 360\n\n    s = 0 if cmax == 0 else delta / cmax\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    if even_num == 0 or odd_num == 0:\n        return \"There are not enough even or odd numbers in the list.\"\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    if even_num is None:\n        raise ValueError(\"No even number found in the list\")\n    if odd_num is None:\n        raise ValueError(\"No odd number found in the list\")\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    if even_num == 0 or odd_num == 0:\n        return \"No even or odd number found in the list.\"\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count == 1 and odd_count == 1:\n            break\n    return list1[0] * list1[even_count] * list1[odd_count]"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    if len(list1) >= 2:\n        for i in range(len(list1)):\n            if list1[i] % 2 == 0:\n                even_num = list1[i]\n            else:\n                odd_num = list1[i]\n                break\n                \n        if even_num!= 0 and odd_num!= 0:\n            return even_num * odd_num\n        else:\n            return \"Error: List should contain at least two even and two odd numbers\"\n    else:\n        return \"Error: List should contain at least two numbers\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    if len(list1) < 2:\n        return \"List should have atleast two elements\"\n    else:\n        count_even = 0\n        count_odd = 0\n        product_even = 1\n        product_odd = 1\n        for i in range(len(list1)):\n            if list1[i] % 2 == 0:\n                count_even += 1\n                product_even *= list1[i]\n            else:\n                count_odd += 1\n                product_odd *= list1[i]\n            if count_even == 1 and count_odd == 1:\n                return product_even * product_odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in lst[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    if even_num is None:\n        return None\n    elif odd_num is None:\n        return even_num\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even = None\n    odd = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in lst:\n        if num % 2 == 1:\n            odd = num\n            break\n    \n    if even is None or odd is None:\n        return \"No even or odd number found in the list\"\n    \n    return even * odd"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str[1:-1].split(','))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string using comma as delimiter\n    tuple_str = test_str.split(',')\n    \n    # Convert each string element to integer and store it in a list\n    int_list = []\n    for elem in tuple_str:\n        int_list.append(int(elem))\n        \n    # Convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to a tuple of integers.\n\n    Args:\n    - test_str: A string representing a tuple of integers separated by commas.\n\n    Returns:\n    - A tuple of integers.\n\n    Example:\n    >>> tuple_str_int(\"1, 2, 3, 4, 5\")\n    (1, 2, 3, 4, 5)\n    \"\"\"\n    # Split the string by commas to get a list of strings representing the integers\n    int_strings = test_str.split(\", \")\n    # Convert each string to an integer and add it to a new tuple\n    int_tuple = tuple(int(s) for s in int_strings)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string and returns an integer tuple.\n    \"\"\"\n    # Split the string into a list of substrings separated by comma\n    substrings = test_str.strip('()').split(',')\n    # Convert each substring to an integer and append to a new list\n    int_list = [int(s.strip()) for s in substrings]\n    # Convert the list to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # split the string on comma and convert each element to integer\n    int_tuple = tuple(int(i) for i in test_str.strip('()').split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    str_list = test_str.split(',')\n    # Convert each string in the list to integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    str_list = test_str.split(',')\n    # Convert each string element to integer\n    int_list = [int(x) for x in str_list]\n    # Convert the list to tuple\n    tuple_obj = tuple(int_list)\n    return tuple_obj"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string tuple and returns an integer tuple.\n    \"\"\"\n    # convert string tuple to integer tuple\n    int_tuple = tuple(map(int, test_str[1:-1].split(',')))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the tuple string by comma and space\n    tuple_list = test_str.split(\", \")\n\n    # Convert the list elements to integers and create a tuple\n    int_tuple = tuple(int(i) for i in tuple_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string using comma separator\n    tuple_str_list = test_str.split(',')\n    \n    # Convert the string elements to integer and store in a new list\n    int_list = []\n    for element in tuple_str_list:\n        int_list.append(int(element))\n    \n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a(?=b{3})\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\s*b\\s*b\\s*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b's.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'The quick brown fox jumps over the lazy dog.'\nprint(text_match_three(text)) # Output: False\n\ntext = 'The quick brown fox jumps over the lazy abbabb.'\nprint(text_match_three(text)) # Output: True"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function takes a list and a string as input and returns a new tuple\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str,) + tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function creates a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains even numbers and False otherwise.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += remove_nested(item)\n        else:\n            new_tup += (item,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n        else:\n            remove_nested(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            result += remove_nested(elem)\n        else:\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) is not tuple:\n            new_tup.append(elem)\n        else:\n            for sub_elem in elem:\n                new_tup.append(sub_elem)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            result.extend(remove_nested(i))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup += (i,)\n        else:\n            continue\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n        else:\n            new_tup += item\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup += (item,)\n        else:\n            for subitem in item:\n                new_tup += (subitem,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup += (elem,)\n        else:\n            for sub_elem in elem:\n                new_tup += (sub_elem,)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for elem in input_list:\n        if isinstance(elem, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Counts the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    '''\n    Counts the number of lists in a given list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as an input and returns the count of all the sub-lists present in the given list.\n    '''\n    count = 0\n    \n    for i in input_list:\n        if type(i) == list:\n            count += 1\n            \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n    - arr (list): A sorted list of integers.\n    - x (int): The element to search for in the array.\n\n    Returns:\n    - int: The last position of the element in the array. If the element is not present in the array, return -1.\n    \"\"\"\n    n = len(arr)\n    l, r = 0, n - 1\n\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            while mid < n - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the index of the last occurrence of x in the sorted array arr.\n    If x is not present in the array, returns -1.\n    \"\"\"\n    if x < arr[0] or x > arr[-1]:\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # search for the last occurrence of x in the left half\n            i = mid - 1\n            while i >= 0 and arr[i] == x:\n                i -= 1\n            \n            return i + 1\n        \n        elif arr[mid] < x:\n            left = mid + 1\n        \n        else:\n            right = mid - 1\n    \n    # if x is not present in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the last position of an element in a sorted array.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function will find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    last_position = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            last_position = mid\n            break\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    :param arr: list of sorted integers\n    :param x: integer to search for\n    :return: index of the last occurrence of x in the array, or -1 if x is not found\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    last_occurrence = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_occurrence = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_occurrence"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n    arr: A sorted list of integers.\n    x: An integer to search for in the list.\n\n    Returns:\n    An integer representing the last position of x in the list.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    arr: A sorted array of integers.\n    x: An integer to be searched in the array.\n\n    The function returns the last position of the element in the array if it is present, else -1.\n    '''\n\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Loop until the pointers meet or cross\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, then we have found the element\n        if arr[mid] == x:\n            # We need to find the last occurrence of the element in the array\n            while mid < right and arr[mid + 1] == x:\n                mid += 1\n            return mid\n\n        # If the middle element is greater than x, then the element must be in the left half of the array\n        elif arr[mid] > x:\n            right = mid - 1\n\n        # If the middle element is less than x, then the element must be in the right half of the array\n        else:\n            left = mid + 1\n\n    # If we reach here, then the element is not present in the array\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'  # regular expression pattern\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as an argument and returns the sum of all items in the dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as an input and returns the sum of all its items.\n    '''\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    return sum(i for i in range(1, n+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n+1) * n // 2"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    '''\n    Find the sum of all odd natural numbers within the range l and r.\n\n    :param l: The starting number of the range (inclusive)\n    :type l: int\n    :param r: The ending number of the range (inclusive)\n    :type r: int\n\n    :return: The sum of all odd natural numbers within the range l and r.\n    :rtype: int\n    '''\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through all odd numbers within the range\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            # Add the current odd number to the sum\n            sum += i\n\n    # Return the sum of all odd numbers within the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    This function takes a number as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # initialize sum to 0\n    total = 0\n    \n    # iterate over all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        total += i\n        \n    # return the sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function calculates the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n    n: int - upper limit of the range\n\n    Returns:\n    int - sum of all odd natural numbers within the range 1 to n\n    \"\"\"\n\n    # Initialize a variable to keep track of the sum\n    total = 0\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add the odd number to the total\n            total += i\n    \n    # Return the total sum of all odd numbers\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function finds the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of its elements.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_array(arr):\n    \"\"\"\n    Returns the sum of all elements in the input array.\n    \"\"\"\n    if not arr:\n        return 0\n    return arr[0] + sum_array(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of all the elements in the array.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    mask = (2**d - 1) << (32 - d)\n    result = (n << d) & mask | (n >> (32 - d)) & (2**d - 1)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the bits of a given number n by d bits to the left.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1   # mask to get the desired number of bits\n    shifted_left_bits = (n << d) & mask   # shift left the desired number of bits\n    shifted_right_bits = (n >> (32 - d)) & mask   # shift right the remaining bits\n    return shifted_left_bits | shifted_right_bits   # combine the shifted bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n & ~mask)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    # convert n and d to binary strings with 32 bits\n    n_str = bin(n)[2:].zfill(32)\n    d_str = bin(d)[2:].zfill(5)\n\n    # concatenate the binary strings and add leading zeros\n    bits = n_str + d_str.zfill(32)\n\n    # split the bits into two parts\n    left = bits[:d]\n    right = bits[d:]\n\n    # reverse the right part\n    right = right[::-1]\n\n    # concatenate the reversed right part and the left part\n    rotated = left + right\n\n    # convert the rotated binary string back to an integer\n    result = int(rotated, 2)\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary and remove '0b' prefix\n    binary_n = bin(n)[2:]\n\n    # Pad the binary string with zeros to make it 32 bits long\n    binary_n = binary_n.zfill(32)\n\n    # Convert d to binary and remove '0b' prefix\n    binary_d = bin(d)[2:]\n\n    # Pad the binary string with zeros to make it 5 bits long\n    binary_d = binary_d.zfill(5)\n\n    # Concatenate the binary strings\n    binary_n_d = binary_n + binary_d\n\n    # Rotate left by d bits\n    rotated_binary_n_d = binary_n_d[-d:] + binary_n_d[:-d]\n\n    # Convert rotated binary string to decimal and return\n    return int(rotated_binary_n_d, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes a number n and rotates left d bits. We assume that n is 32 bit.\n    \"\"\"\n    # Convert n to binary and remove the prefix \"0b\"\n    binary = bin(n)[2:]\n    # Pad the binary string with zeros if it's less than 32 bits long\n    binary = binary.zfill(32)\n    # Split the binary string into two parts: the leftmost d bits and the rest of the bits\n    left_part = binary[:d]\n    right_part = binary[d:]\n    # Concatenate the right part with the left part\n    rotated = right_part + left_part\n    # Convert the rotated binary string back to a decimal integer\n    result = int(rotated, 2)\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # convert d into binary and pad it with zeros to get a 32-bit binary string\n    d_bin = bin(d)[2:].zfill(32)\n\n    # convert n into binary and pad it with zeros to get a 32-bit binary string\n    n_bin = bin(n)[2:].zfill(32)\n\n    # concatenate the d-th and the rest of n_bin to get the shifted binary string\n    shifted_bin = d_bin + n_bin[32-d:]\n\n    # convert shifted_bin back to decimal and return it as an integer\n    return int(shifted_bin, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    n_bin = bin(n)[2:]  # remove the '0b' prefix\n    # Pad with zeros if necessary\n    n_bin = n_bin.rjust(32, '0')\n    # Rotate left d bits\n    rotated_bin = n_bin[d:] + n_bin[:d]\n    # Convert rotated binary string back to integer\n    rotated = int(rotated_bin, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    shifted_n = (n << d) & mask\n    shifted_n |= (n >> (32 - d)) & mask\n    return shifted_n"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespace characters from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal numbers from them.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    :param x: First integer\n    :param y: Second integer\n    :param z: Third integer\n    :return: Number of equal integers (0, 1, or 2)\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers in the three integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 2\n    else:\n        count += 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] >= arr[0]:\n            break\n    if i == 0:\n        return 0\n    if i == n-1:\n        return 1\n    if arr[i] < arr[0]:\n        return 1 + count_rotation(arr[i:])\n    else:\n        return count_rotation(arr[i:]) + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Finding the smallest element in the array\n    min_ele = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_ele:\n            min_ele = arr[i]\n    # If the smallest element is not at the beginning, then we need to count the number of rotations required to make it at the beginning.\n    if arr.index(min_ele)!= 0:\n        return arr.index(min_ele)\n    # If the smallest element is at the beginning, then we need to count the number of rotations required to make it at the end.\n    else:\n        return n - arr[::-1].index(min_ele)"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Count the number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i] > min_element:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    # Find the mid element of the array\n    mid = arr[len(arr)//2]\n    # Check if the mid element is already at the correct position\n    if arr[0] <= mid:\n        return count_rotation_helper(arr, mid, len(arr)-1)\n    # If the mid element is not at the correct position, then the sorted array lies between arr[0] and mid\n    else:\n        return len(arr) - count_rotation_helper(arr[len(arr)//2:], arr[0], len(arr)//2-1) - 1\n\n\ndef count_rotation_helper(arr, low, high):\n    if low > high:\n        return 0\n    # Find the mid element of the array\n    mid = (low + high) // 2\n    # Check if the mid element is already at the correct position\n    if arr[mid] <= arr[high]:\n        return mid + 1\n    # If the mid element is not at the correct position, then the sorted array lies between arr[mid] and arr[high]\n    else:\n        return count_rotation_helper(arr, mid+1, high)"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    \n    # Binary search for the minimum element in the array\n    left, right = 0, n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # Now arr[left] is the minimum element of the array\n    # If all elements are less than arr[left], then the array is already sorted\n    if left == 0:\n        return n - 1\n    \n    # Now, we have to count the number of rotations.\n    # Let's first find the index of the minimum element in the array\n    min_index = arr.index(arr[left])\n    # If the minimum element is at the beginning of the array, then all elements are less than arr[left]\n    if min_index == 0:\n        return min_index\n    \n    # Now, we have to count the number of rotations.\n    # If the minimum element is at the end of the array, then the number of rotations required is n-1 - index of the minimum element\n    if min_index == n - 1:\n        return n - 1 - min_index\n    \n    # If the minimum element is in the middle of the array, then we have to count the number of rotations as follows:\n    # If the array is not rotated, the minimum element would be at the end of the array.\n    # So, we have to count the number of rotations required to generate a sorted array.\n    # But, we also know that there are some elements less than arr[left].\n    # So, the minimum element can only be at the beginning or middle of the array.\n    # If the minimum element is at the beginning of the array, then the number of rotations required is min_index.\n    # If the minimum element is at the middle of the array, then the number of rotations required is n-1 - index of the minimum element.\n    return min_index"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Base cases\n    if n == 0 or n == 1:\n        return 0\n    if arr[0] < arr[n-1]:\n        return 0\n    \n    # Binary search for the minimum element\n    left = 0\n    right = n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[mid+1]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # Minimum element found\n    # Now count the number of rotations\n    # If arr[0] is minimum element, then all elements are sorted\n    if arr[0] == arr[n-1]:\n        return 0\n    \n    # Find the pivot point\n    pivot = left\n    for i in range(pivot, n):\n        if arr[i] < arr[pivot]:\n            return i - pivot\n    \n    # If no pivot point is found, then array is not sorted\n    return n - pivot"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    low = 0\n    high = n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] <= arr[n-1]:\n            break\n    if i == n-1:\n        return 0\n    else:\n        return n-i-1\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Find the pivot element in the array\n    pivot = arr[n-1]\n    # Find the index of pivot element in the array\n    pivot_index = -1\n    for i in range(n):\n        if arr[i] == pivot:\n            pivot_index = i\n            break\n    # If pivot element is not present in the array\n    if pivot_index == -1:\n        return -1\n    # If pivot element is at the end of the array\n    if pivot_index == n-1:\n        return 0\n    # If pivot element is at the beginning of the array\n    if pivot_index == 0:\n        return 1\n    # If pivot element is in the middle of the array\n    # Find the boundary element on the right side of pivot element\n    boundary_index = -1\n    for i in range(n-1, pivot_index-1, -1):\n        if arr[i] > pivot:\n            boundary_index = i\n            break\n    # If boundary element is not present in the array\n    if boundary_index == -1:\n        return -1\n    # Count the number of rotations\n    count = 1\n    for i in range(n):\n        if arr[i] > pivot:\n            count += 1\n        elif arr[i] == pivot:\n            if i < boundary_index:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the index of minimum element\n    min_index = arr.index(min(arr))\n    # If minimum element is not at the beginning, rotate it to the beginning\n    if min_index!= 0:\n        arr = arr[min_index:] + arr[:min_index]\n    # If minimum element is at the beginning, no rotation required.\n    else:\n        pass\n    # Initialize variables for counting\n    i = 0\n    count = 0\n    # Compare adjacent elements and count the number of swaps required\n    while i < n - 1:\n        if arr[i] > arr[i+1]:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer as input and returns True if the number is a perfect square, else False.\n    '''\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    A function to check whether the given number is a perfect square or not.\n    '''\n    return int(n**0.5)**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if it is a perfect square, else it returns False.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    # handle edge cases: 0 and 1 are perfect squares\n    if n == 0 or n == 1:\n        return True\n    \n    # use binary search to find the square root\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    A function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # If n is less than 2, it is not a perfect square\n    if n < 2:\n        return False\n\n    # Use a binary search to find the square root of n\n    left, right = 2, n // 2\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the binary search ends without finding a square root, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and checks whether it is a perfect square or not.\n    A perfect square is a number that is the square of an integer. For example, 16 is a perfect square because 16 = 4^2.\n    \"\"\"\n    # Find the square root of n\n    square_root = int(n**0.5)\n    \n    # Check if square root is an integer\n    if square_root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list as input and returns True if the product of all numbers in the list is even, otherwise False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns True if the product of all the numbers in the list is even, otherwise it returns False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return [max_list]"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        sum = 0\n        for i in l:\n            sum += i\n        if sum > max_sum:\n            max_sum = sum\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_sum_lists = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_sum_lists = [lst]\n        elif sum(lst) == max_sum:\n            max_sum_lists.append(lst)\n    return max_sum_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = sum(max(lists, key=sum))\n    return [list_ for list_ in lists if sum(list_) == max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for i in range(1, len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase = ''\n    max_run = 0\n\n    # Iterate over each character in the string\n    for char in test_str:\n        # If the character is uppercase, append it to the uppercase string\n        if char.isupper():\n            uppercase += char\n        # If the character is not uppercase, check if there is a run of uppercase characters\n        else:\n            # If there is a run of uppercase characters, update the max_run variable\n            if len(uppercase) > max_run:\n                max_run = len(uppercase)\n            # Reset the uppercase string\n            uppercase = ''\n    \n    # Check for a final run of uppercase characters\n    if len(uppercase) > max_run:\n        max_run = len(uppercase)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        test_str (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Traverse through the string\n    for i in range(len(test_str)):\n        # If current character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If current character is lowercase or non-alphabetic, reset the current run\n        else:\n            current_run = 0\n        \n        # Update the maximum run if current run is greater\n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    return max(max_count, count)"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    current_run = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        if current_run > max_run:\n            max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    i = 1\n    while i < len(test_str):\n        if test_str[i].isupper() and test_str[i] == test_str[i-1].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 1\n        i += 1\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there is no odd number in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # No odd number found"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number present in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the K or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and checks if the given tuples contain the given number K or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return any(K in tup for tup in test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths are not equal\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"Element at index {i} of tuple 2 is not smaller than its corresponding element in tuple 1\")\n            return\n    \n    print(\"All elements of tuple 2 are smaller than their corresponding elements in tuple 1\")"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tupples should have same length\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                result = False\n                break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    }
]