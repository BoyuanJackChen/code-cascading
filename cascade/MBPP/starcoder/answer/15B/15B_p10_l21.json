[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the common elements from both tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return tuple(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (3, 4, 5, 6, 7)\n\nprint(similar_elements(test_tup1, test_tup2)) # Output: [3, 4, 5]"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and finds the shared elements from both tuples.\n    '''\n    # Convert tuples to sets to perform set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the sets\n    common_elements = set1.intersection(set2)\n\n    # Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the common elements\n    '''\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common.append(i)\n    return common"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in common_elements:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a new tuple containing the common elements between the two tuples.\n    \"\"\"\n    result = ()\n    for i in test_tup1:\n        if i in test_tup2:\n            result += (i,)\n    return result"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as an input and returns True if the number is not prime,\n    and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(7))  # Output: True\nprint(is_not_prime(11))  # Output: False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not prime, and False otherwise.\n    '''\n    if n <= 1: # 1 is not a prime number\n        return False\n    elif n == 2: # 2 is a prime number\n        return True\n    elif n % 2 == 0: # If n is even, it's not a prime number\n        return False\n    else: # Check odd divisors up to the square root of n\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n < 2: # 0 and 1 are not prime\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sieve(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    return [i for i in range(n+1) if primes[i]]\n\ndef is_not_prime(n):\n    primes = sieve(int(math.sqrt(n))+1)\n    return all(n % p!= 0 for p in primes)"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a number is not a prime number or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Returns the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n\n    # Add the first n elements to the heap\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n\n    # Iterate through the remaining elements and add them to the heap if they are greater than the minimum element\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, nums[i])\n\n    # Sort the heap in descending order and return it\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n\n    for num in nums:\n        hq.heappush(heap, num)\n\n        if len(heap) > n:\n            hq.heappop(heap)\n\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # Convert the list into a heap\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]  # Reverse the order to get descending order"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if it is a power of two, else returns False.\n    '''\n    # If x is less than or equal to 0, it cannot be a power of two\n    if x <= 0:\n        return False\n    \n    # If x is even and not equal to 1, it cannot be a power of two\n    if x % 2 == 0 and x!= 1:\n        return False\n    \n    # If x is odd and not equal to 1, it can be a power of two\n    if x % 2!= 0 and x!= 1:\n        return True\n    \n    # If x is equal to 1, it cannot be a power of two\n    if x == 1:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes in a number 'x' and returns True if it is a power of 2 and False otherwise.\n    '''\n    return (x!= 0) and (x & (x - 1) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes an integer x as an argument and returns True if x is a power of 2, otherwise False.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 0:\n        if x & 1!= 0 and x & (x-1)!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is a positive integer\n    if x <= 0 or type(x)!= int:\n        return False\n    \n    # Check if x is a power of 2\n    while x % 2 == 0 and x > 1:\n        x //= 2\n    \n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return (x & (x-1) == 0) and (x!= 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # To check if the number is a power of 2, we need to check if it is equal to 0 or a power of 2\n    # To check if a number is a power of 2, we need to check if the binary representation of the number\n    # has only one '1' bit\n    # Therefore, we need to check if the binary representation of the number has only one '1' bit\n    \n    # Convert the number to binary using the bin() function\n    binary = bin(x)[2:]\n    \n    # Check if the binary representation has only one '1' bit\n    return binary.count('1') == 1 and binary.count('0') == len(binary)-1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes a number as input and returns True if the number is a power of 2, otherwise it returns False.\n    '''\n    if x == 0: \n        return False\n    while x > 1: \n        if x % 2!= 0: \n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # To check whether the number is power of 2 or not, we can check if the number is equal to 0 or not.\n    # If the number is 0, then it is a power of 2.\n    if x == 0:\n        return True\n    \n    # We can use bitwise AND operator (&) to check if the two numbers differ at one bit position only or not.\n    # If the result is 0, then the two numbers differ at one bit position only.\n    # If the result is not 0, then the two numbers differ at more than one bit position.\n    return (x & (x - 1)) == 0"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find words of length at least 4\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches in the text\n    matches = pattern.findall(text)\n    # Return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\w+', text)\n\n    # Find all words which are at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # find all words of at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to find all words in the string\n    words = re.findall(r'\\w+', text)\n\n    # Filter out words which are less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = 'The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.'\nprint(find_char_long(text))"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to match words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n\nprint(square_nums([1, 2, 3, 4, 5])) # Output: [1, 4, 9, 16, 25]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of their squares.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of squares of the individual elements in the input list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # Check for the special cases\n    if n == 1:\n        return 1\n    if n == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 2\n    # Find the mid-point\n    mid = n // 2\n    # Check if the first half is a palindrome\n    if str[:mid] == str[:mid][::-1]:\n        # Check if the second half is also a palindrome\n        if str[mid:] == str[mid:][::-1]:\n            return 0\n        else:\n            # Return the minimum number of rotations required to make both halves palindromes\n            return 1 + find_Rotations(str[mid:])\n    else:\n        # Return the minimum number of rotations required to make the first half a palindrome\n        return 1 + find_Rotations(str[:mid][::-1] + str[mid:])"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    if n == 1:\n        return 1\n    else:\n        for i in range(n):\n            if str[i:n] == str[i:n][::-1]:\n                return 1\n        return 2 * find_Rotations(str[1:]) + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(s):\n    # Check if the string is already a palindrome\n    if s == s[::-1]:\n        return 0\n    \n    # Calculate the number of rotations needed\n    n = len(s)\n    k = 1\n    while k < n // 2 and s[k] == s[n - k - 1]:\n        k += 1\n    if s[k:n-k] == s[k:n-k][::-1]:\n        return n - k\n    else:\n        return n - k + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    rotations = 1\n    while str!= str[n-rotations:]+str[:n-rotations]:\n        rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(s):\n    \"\"\"\n    Returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(s)\n    count = 0\n    while s!= s[n-1:]+s[:n-1]:\n        s = s[1:]+s[0]\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str == str[i:]+str[:i]:\n            return i\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    # Find the lexicographically smallest rotation of s\n    t = s + s\n    i = 0\n    while t[i:i+n]!= s:\n        i += 1\n    # Check if the rotation is the same as s\n    if t[i:i+n] == s:\n        return i\n    # If not, continue searching for smaller rotations\n    for j in range(i+1, i+n):\n        if t[j:j+n] == s:\n            return j\n    # If no rotation is found, return the length of s\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    str_len = len(str)\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    for i in range(str_len):\n        # Check if string is already a palindrome after rotation\n        if str[i:] == str[i:][::-1]:\n            return i + 1\n    # If string is not a palindrome after any rotation, return None\n    return None"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    else:\n        # Find the rotation point.\n        for i in range(n):\n            if str[i:] == str[:n-i]:\n                return n - i\n        # If no rotation point is found, then the string is already a palindrome.\n        return 1"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes two arguments:\n    1. s: The input string from which the occurrence of the character needs to be removed.\n    2. ch: The character which needs to be removed.\n    \n    It returns a string after removing the first and last occurrence of the given character.\n    '''\n    # Finding the index of first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Finding the index of last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # Removing the character from the string using string slicing\n    result = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    \n    # Returning the result\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments:\n    1. s: The input string from which the character needs to be removed.\n    2. ch: The character that needs to be removed.\n    '''\n    \n    # Remove first occurrence of the character\n    s = s.replace(ch, '', 1)\n    \n    # Remove last occurrence of the character\n    s = s.rsplit(ch, 1)[0]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n\n    :param s: The input string\n    :param ch: The character to be removed\n    :return: The modified string\n    \"\"\"\n\n    # Initialize the variables\n    first_index = -1\n    last_index = -1\n\n    # Find the index of the first occurrence of the character\n    for i in range(len(s)):\n        if s[i] == ch:\n            first_index = i\n            break\n\n    # Find the index of the last occurrence of the character\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == ch:\n            last_index = i\n            break\n\n    # Check if the character was found in the string\n    if first_index == -1 or last_index == -1:\n        return s\n\n    # Remove the first and last occurrence of the character\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    if s.count(ch) < 2:\n        return s\n    \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        return s[:first_occurrence] + s[last_occurrence+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    if s.count(ch) >= 2:\n        s = s.replace(ch+s[s.index(ch):s.rindex(ch)+1], '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    if ch not in s:\n        return s\n    else:\n        if s.find(ch) == 0:\n            return s[1:len(s)-1]\n        elif s.rfind(ch) == len(s)-1:\n            return s[0:len(s)-1]\n        else:\n            return s[0:s.find(ch)] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and removes the first and last occurrence of the given character from the string.\n    '''\n    # check if character is present in the string\n    if ch in s:\n        # get the index of first occurrence of the character\n        index = s.index(ch)\n        \n        # get the index of last occurrence of the character\n        last_index = s.rindex(ch)\n        \n        # remove the character from the string\n        new_s = s[:index] + s[index+1:last_index] + s[last_index+1:]\n        \n        return new_s\n    else:\n        return \"Character not found in the string!\""
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    This function takes a string s and a character ch as input and returns the string with the first and last occurrence of ch removed.\n    '''\n    if s.count(ch)<2: # check if ch occurs more than once in s\n        return s\n    else:\n        first_occ = s.find(ch) # find the first occurrence of ch in s\n        last_occ = s.rfind(ch) # find the last occurrence of ch in s\n        s = s[:first_occ] + s[last_occ+1:] # remove the first and last occurrence of ch from s\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        # check if first occurrence of the character exists\n        if s.find(ch) == 0:\n            s = s[1:]\n        else:\n            s = s.replace(ch, '', 1)\n        \n        # check if last occurrence of the character exists\n        if s.rfind(ch) == len(s)-1:\n            s = s[:-1]\n        else:\n            s = s.replace(ch, '', -1)\n        \n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s.index(ch) == 0 and s.index(ch) == len(s)-1:\n            return s[:s.index(ch)] + s[s.index(ch)+1:]\n        elif s.index(ch) == 0:\n            return s[s.index(ch)+1:]\n        elif s.index(ch) == len(s)-1:\n            return s[:s.index(ch)]\n        else:\n            return s[:s.index(ch)] + s[s.index(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sums of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Use the sorted() function to sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    \n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Iterate over the sorted row sums and append the corresponding row to the sorted matrix\n    for row_sum in sorted_row_sums:\n        for row in M:\n            if sum(row) == row_sum:\n                sorted_matrix.append(row)\n                break\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    :param M: a list of lists representing the matrix to be sorted\n    :return: a sorted matrix in ascending order according to the sum of its rows\n    \"\"\"\n\n    # Calculate the sum of each row in the matrix\n    sums = [sum(row) for row in M]\n\n    # Use the `sorted` function to sort the matrix by the sums of its rows\n    sorted_indices = sorted(range(len(sums)), key=lambda i: sums[i])\n    sorted_matrix = [[M[i][j] for i in sorted_indices] for j in range(len(M[0]))]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    sorted_rows = sorted(M, key=lambda row: sum(row))\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted(M, key=lambda row: sum(row))\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    for i in range(len(M)):\n        M[i].sort(key=sum)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as input parameters and returns the volume of the prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism and returns its volume.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function finds the volume of a triangular prism.\n    Parameters:\n        l (int): length of the base of the triangular prism\n        b (int): width of the base of the triangular prism\n        h (int): height of the triangular prism\n    Returns:\n        int: volume of the triangular prism\n    '''\n    volume = (1/2) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as arguments and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input parameters and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression to match lowercase letters separated by an underscore\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    # Check if there is at least one match in the input string\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns True if the input string contains sequences of lowercase letters joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'(?=[a-z])_|(?<=_)([a-z])|(?<=_)([a-z])_|(?=[a-z])([a-z])_([a-z])', text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_chars(string, char_to_remove):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    for char in char_to_remove:\n        try:\n            string.remove(char)\n        except ValueError:\n            pass\n    return ''.join(string)\n\ndef str_to_list(string):\n    '''\n    Convert a string to a list of characters.\n    '''\n    return list(string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    remove_chars_list = list(remove_chars)\n    for char in remove_chars_list:\n        try:\n            string_list.remove(char)\n        except ValueError:\n            pass\n    return string_list\n\nstring = 'hello world'\nremove_chars = 'ld'\nresult = str_to_list(string, remove_chars)\nprint(result) # Output: ['he', 'o ', 'w', 'r']"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for char in string_list:\n        if char in string_list:\n            string_list.remove(char)\n    return string_list"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    This function takes two string arguments, the first string is the string from which we want to remove the characters\n    and the second string is the string which contains the characters that we want to remove.\n    The function removes the characters present in the second string from the first string and returns a list of the modified string.\n    '''\n    # Create a boolean array \"bool_arr\" to keep track of characters that are present in the remove_chars string\n    bool_arr = [False for i in range(NO_OF_CHARS)]\n    for char in remove_chars:\n        bool_arr[ord(char)] = True\n    \n    # Create a new string with all characters from the first string that are not present in the remove_chars string\n    new_string = ''\n    for char in string:\n        if not bool_arr[ord(char)]:\n            new_string += char\n    \n    # Convert the new string into a list and return it\n    return list(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string, characters):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # convert the characters string to a set to perform faster membership test\n    chars_set = set(characters)\n\n    # create an empty list to store the resulting string\n    result = []\n\n    # iterate through the first string\n    for char in string:\n        # if the character is not present in the characters set, append it to the result list\n        if char not in chars_set:\n            result.append(char)\n\n    # convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, char_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    char_list = list(char_list)\n    result = \"\"\n    for char in string_list:\n        if char not in char_list:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    for char in remove_chars:\n        string = string.replace(char, '')\n    return list(string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(remove_chars)\n    return [c for c in string if c not in char_set]"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_chars(str1, str2):\n    # Convert strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize count array\n    count = [0] * NO_OF_CHARS\n\n    # Count the frequency of each character in the second string\n    for char in list2:\n        count[ord(char)] += 1\n\n    # Remove characters from the first string which are present in the second string\n    i = 0\n    while i < len(list1):\n        if count[ord(list1[i])] > 0:\n            del list1[i]\n        else:\n            i += 1\n\n    # Convert the list back to a string and return it\n    return ''.join(list1)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    Return the resulting list of characters.\n    '''\n    # Convert strings to lists of characters\n    str_list = list(string)\n    remove_list = list(remove_chars)\n    \n    # Use a set to keep track of characters to be removed\n    remove_set = set(remove_list)\n    \n    # Iterate over the characters in the string and remove the ones in the remove set\n    for i in range(len(str_list)):\n        if str_list[i] in remove_set:\n            str_list[i] = ''\n    \n    # Remove the empty elements from the list\n    str_list = [char for char in str_list if char!= '']\n    \n    # Return the resulting list of characters\n    return str_list"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers and checks if any duplicates are present in it.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n\narraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(test_duplicate(arraynums)) # True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a set from the given array to remove duplicate elements\n    unique_nums = set(arraynums)\n\n    # compare length of unique_nums and length of arraynums\n    if len(unique_nums) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # iterate through the array and count the frequency of each element\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # check if any element has a frequency greater than 1\n    for freq in freq_dict.values():\n        if freq > 1:\n            return True\n\n    # if no element has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as an argument and returns True if it contains any duplicate element, False otherwise.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks if the given number is woodball or not.\n    \"\"\"\n    num = x\n    count = 0\n    while num > 0:\n        digit = num % 10\n        count += digit ** 3\n        num //= 10\n    if x == count:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 10 or x > 99:\n        return False\n    sum = 0\n    for i in str(x):\n        sum += int(i) ** 3\n    return sum == x"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the given number is positive\n    if x > 0:\n        # Check if the given number is divisible by 7\n        if x % 7 == 0:\n            # Check if the given number has only one digit\n            if len(str(x)) == 1:\n                return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Check if a given number is woodball or not.\n    '''\n    # If x is divisible by 4 and not divisible by 100, it's a woodball\n    if x % 4 == 0 and x % 100!= 0:\n        return True\n    # If x is divisible by 400, it's also a woodball\n    elif x % 400 == 0:\n        return True\n    # Otherwise, it's not a woodball\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    elif x % 3 == 0 and x % 4 == 0:\n        return True\n    elif x % 5 == 0 and x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x % 2 == 0 or x == 2 or x % 3 == 0 or x == 3 or x % 5 == 0 or x == 5 or x % 7 == 0 or x == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if a given number is a woodball number or not.\n    \"\"\"\n    # Initialize a list of factors of x\n    factors = []\n    # Loop over all numbers from 1 to x//2\n    for i in range(1, x // 2 + 1):\n        # Check if i is a factor of x\n        if x % i == 0:\n            # Add i to factors if it's not already there\n            if i not in factors:\n                factors.append(i)\n    # Check if x has an odd number of factors\n    if len(factors) % 2 == 1:\n        # If it has an odd number of factors, it's a woodball number\n        return True\n    else:\n        # If it has an even number of factors, it's not a woodball number\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = str(num)[::-1]\n    if int(reverse_num)*2 == num+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and checks if the number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n    \n    # Reverse the given number and convert it back to an integer\n    rev_num = int(num_str[::-1])\n    \n    # Check if the difference between the given number and its reverse is 2\n    if num == rev_num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    temp = num\n    while temp!= 0:\n        rev = rev * 10 + temp % 10\n        temp //= 10\n    return num == rev+1"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the given number is one less than twice its reverse and False otherwise.\n    \"\"\"\n    # Reverse of the given number\n    rev_num = int(str(num)[::-1])\n    \n    # Check if the reverse of the given number is doubled\n    if num - 2*rev_num == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    # get the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # check if the number is one less than twice its reverse\n    if num == (reverse // 2) + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    # converting the given number into a string to reverse it\n    num_str = str(num)\n    # reversing the string\n    rev_str = num_str[::-1]\n    # converting the reversed string back to an integer\n    rev_num = int(rev_str)\n    # checking if the given number is one less than twice the reversed number\n    if num + 1 == 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n\n    # convert the reversed string back to an integer and add 1\n    new_num = int(rev_num) + 1\n\n    # check if the new number is twice the original number\n    if new_num == num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    if str(num) == str(num)[::-1] and num + 1 == 2*int(str(num)[::-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num == str(num)[::-1]:\n        return num\n    else:\n        return None"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    return rev_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        temp_num = arr[i]\n        for j in range(i+1, len(arr)):\n            temp_num = temp_num * 10 + arr[j]\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed from those digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            num = int(\"\".join(str(digit) for digit in arr[i:j]))\n            max_num = max(max_num, num)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    num = 0\n    for i in arr:\n        num = num * 10 + i\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Convert the list of digits to a string\n    digits_str = \"\".join(map(str, arr))\n    # Convert the string to an integer\n    max_num = int(digits_str)\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_num = 0\n        for i in range(len(arr)):\n            temp_num = find_Max_Num(arr[:i] + arr[i+1:])\n            if temp_num > max_num:\n                max_num = temp_num\n        return max_num * 10 + arr[-1]"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i, len(arr)):\n            temp *= int(arr[j])\n            if temp > max_num:\n                max_num = temp\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    res = \"\"\n    for num in arr:\n        res += str(num)\n    return int(res)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = int(''.join(map(str, arr[i:j])))\n            max_num = max(max_num, temp_num)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp_num = 1\n            for k in range(i, j):\n                temp_num *= int(arr[k])\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(\"The given integers have opposite sign.\")\n    else:\n        print(\"The given integers do not have opposite sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite sign, otherwise False.\n    '''\n    if x < 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    Returns True if they have opposite sign, else False.\n    '''\n    if x >= 0 and y <= 0:\n        return True\n    elif x <= 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y >= 0) or (x > 0 and y <= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and checks whether they have opposite sign or not.\n    If the signs of the integers are opposite, the function returns True, else False.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, else False.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if the given number is an octagonal number,\n    False otherwise.\n    \"\"\"\n    i = 1\n    while True:\n        # Compute the nth octagonal number\n        octagonal = i * (2*i - 1)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2)"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagonal = i*(3*i-1)/2\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    octagonals = []\n    while True:\n        octagonals.append(count * (2 * count - 1))\n        count += 1\n        if len(octagonals) == n:\n            return octagonals[-1]"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n and checks if it is an octagonal number. \n    An octagonal number is a number that is the product of the nth integer and the (n-1)th integer. \n    '''\n    # Find the nth octagonal number\n    octagonal_num = n * (3 * n - 2) // 2\n\n    # Check if the nth number is octagonal\n    if octagonal_num == int(octagonal_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 8\n        count += 1\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an octagonal number,\n    and False otherwise.\n    An octagonal number is a positive integer that can be expressed as the sum of the\n    nth powers of the digits of its decimal representation.\n    \"\"\"\n    # Convert n to a string\n    n_str = str(n)\n    \n    # Find the sum of the nth powers of the digits of n\n    octagonal_sum = sum([int(digit)**n for digit in n_str])\n    \n    # Check if octagonal_sum is equal to n\n    if octagonal_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        oct_num = i * (2*i - 1)\n        count += 1\n        if count == n:\n            return oct_num\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagon = i*(3*i - 1) // 2\n        if octagon == n:\n            return True\n        elif octagon > n:\n            return False\n        count += 1\n        i += 1\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(d) for d in substring)\n            if digit_sum == len(substring):\n                count[len(substring)] += 1\n    return count\n\ns = \"123456\"\nprint(count_Substrings(s))"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            temp = sum(int(digit) for digit in s[i:j+1])\n            if temp == len(s[i:j+1]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as input and returns the count of substrings \n    with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = s[i:j]\n            if sum(int(d) for d in sub_str) == len(sub_str):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count[sub_str] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    freq = defaultdict(int)\n    n = len(s)\n    \n    for i in range(n):\n        freq[int(s[i])] += 1\n        \n        for j in range(i+1, n+1):\n            if sum(int(s[k]) for k in range(i, j)) == j-i:\n                count += 1\n            \n            freq[int(s[i])] -= 1\n            if freq[int(s[i])] == 0:\n                del freq[int(s[i])]\n                \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if sum(int(digit) for digit in sub) == len(sub):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    \n    # Initialize a dictionary to store the count of substrings for each digit sum\n    digit_sum_count = defaultdict(int)\n    digit_sum_count[0] = 1\n    \n    # Loop through all substrings of length 3 or greater\n    for i in range(n):\n        for j in range(i+2, n+1):\n            substring = s[i:j]\n            # Calculate the sum of digits in the substring\n            digit_sum = sum(int(digit) for digit in substring)\n            # Increment the count of substrings with digit sum equal to length\n            count += digit_sum_count[digit_sum-len(substring)]\n        # Increment the count of substrings with the current digit as the last character\n        digit_sum_count[int(s[i])] += 1\n        \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = dp[i][j-1]\n            if dp[i][j] == len(str(sum(int(x) for x in s[i:j+1]))):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sum_of_digits = sum(int(digit) for digit in s[i:j+1])\n            if sum_of_digits == j-i+1:\n                count += 1\n                count_dict[s[i:j+1]] += 1\n    return count, count_dict"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:  # if the list is empty\n        return None\n    smallest = xs[0]  # initialize smallest to first element of the list\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]  # update smallest if current element is smaller\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in the list xs.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and finds the maximum difference between any two pairs of tuples.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > difference:\n                difference = test_list[j][0] - test_list[i][1]\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples by the second element (i.e., the values)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize the maximum difference to negative infinity\n    max_diff = float('-inf')\n    \n    # Iterate over the sorted list, keeping track of the current difference\n    current_diff = 0\n    for i in range(len(sorted_list)-1):\n        current_diff = sorted_list[i+1][1] - sorted_list[i][1]\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][1] - test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n\n    # Sort the list in ascending order of first element\n    test_list = sorted(test_list)\n\n    # Traverse the sorted list and find the maximum difference\n    for i in range(n-1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    if isinstance(data_list[0], list):  # recursive case: sublist found\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # leaf case: element found\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    \n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Recursively flatten a list and sum all of its elements.\n\n    Args:\n    data_list (list): A list of numbers or nested lists.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n\n    total = 0\n    for item in data_list:\n        total += recursive_list_sum(item)\n\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0: # base case\n        return 0\n    else:\n        if isinstance(data_list[0], list): # if the first element is a list, flatten it recursively\n            flattened_list = recursive_list_sum(data_list[0])\n        else:\n            flattened_list = data_list[0]\n        return flattened_list + recursive_list_sum(data_list[1:]) # sum the first element with the sum of the rest of the list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return sum([recursive_list_sum(x) for x in data_list])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    \n    total = 0\n    for item in data_list:\n        total += recursive_list_sum(item)\n    \n    return total"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \n    :param lst: A list of integers.\n    :return: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n\n    :param lst: A list of integers\n    :return: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_num = [0] * (n + 1)\n        bell_num[0] = 1\n        bell_num[1] = 1\n\n        for i in range(2, n + 1):\n            for j in range(i):\n                bell_num[i] += bell_num[j] * bell_num[i - j - 1]\n\n        return bell_num[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [1]\n        for i in range(1, n + 1):\n            bell_numbers.append(sum(bell_numbers))\n        return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n + 1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [1]\n        for i in range(1, n+1):\n            bell_numbers.append(sum(bell_numbers))\n        return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number, which is the number of ways to partition a set of n labeled elements.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(k) * bell_number(n-k-1) for k in range(n))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    This function calculates the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell))\n        return bell[n]\n\ndef partition_number(n):\n    '''\n    This function calculates the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n) + partition_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_prev = 1\n        bell_curr = 1\n        for i in range(2, n+1):\n            bell_next = bell_prev + bell_curr\n            bell_prev = bell_curr\n            bell_curr = bell_next\n        return bell_curr"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_number(k)*bell_number(n-k) for k in range(n+1)])\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Calculates the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    if n == 2:\n        return A[0] <= A[1]\n    if A[n-1] == A[n-2]:\n        return is_Monotonic(A[:-1])\n    if A[n-1] < A[n-2]:\n        return is_Monotonic(A[:-1])\n    if A[n-1] > A[n-2]:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic, False otherwise.\n    An array is considered monotonic if it is either increasing or decreasing.\n    '''\n    n = len(A)\n    increasing = True\n    decreasing = True\n    \n    # Check if the array is increasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n            break\n    \n    # Check if the array is decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            decreasing = False\n            break\n    \n    # Check if the array is neither increasing nor decreasing\n    if not increasing and not decreasing:\n        return False\n    \n    # If the array is increasing or decreasing, it is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array as input and returns True if the array is monotonic, else False.\n    A monotonic array is an array which is either non-decreasing or non-increasing.\n    Non-decreasing array means that all the elements of the array are non-negative and increase with each index, \n    while non-increasing array means that all the elements of the array are non-positive and decrease with each index.\n    '''\n    n = len(A)\n    \n    if n == 1:\n        return True\n    \n    # check if the array is non-decreasing\n    if A[n-1] > A[n-2]:\n        for i in range(n-2):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    \n    # check if the array is non-increasing\n    if A[n-1] < A[n-2]:\n        for i in range(n-2):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    \n    # if the array is neither non-decreasing nor non-increasing, it is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            decreasing = False\n        if A[i] > A[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    if n <= 2: \n        return True\n    \n    if A[1] < A[0]: \n        for i in range(2, n): \n            if A[i] > A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(2, n): \n            if A[i] < A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[1] > A[0]:\n        for i in range(2, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(2, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n    return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    inc = False\n    dec = False\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            inc = True\n        elif A[i] > A[i+1]:\n            dec = True\n        if inc and dec:\n            return False\n    return True if inc or dec else False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n    \"\"\"\n    # If s is empty, the function will always return True\n    if not s:\n        return True\n\n    # Iterate through the list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist starts at index i in the list\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if s == l[i:i+len(s)]:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    \n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes a list and a sublist as arguments and returns True if the sublist is present in the given list, else it returns False.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to check\n    :param s: the sublist to look for\n    :return: True if the sublist is found, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than the length of the list\n    if len(s) > len(l):\n        return False\n    \n    # Create a copy of the list\n    temp_list = l[:]\n    \n    # Loop through the sublist and check if it is a subset of the list\n    for i in s:\n        if i in temp_list:\n            temp_list.remove(i)\n        else:\n            return False\n    \n    # If all elements in the sublist are in the list, return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a boolean variable to store the result\n    result = True\n    \n    # Get the length of the first tuple\n    len_tuple = len(Input[0])\n    \n    # Check if all the tuples have equal length or not\n    for i in range(1, len(Input)):\n        if len(Input[i])!= len_tuple:\n            result = False\n            break\n    \n    return result"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes in a list of tuples as input and checks if all the tuples have equal length or not.\n    \"\"\"\n    length_set = set()\n    for tup in Input:\n        length_set.add(len(tup))\n    return len(length_set) == 1"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, and False otherwise.\n    '''\n    if len(set(len(i) for i in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    lengths = []\n    for tup in Input:\n        lengths.append(len(tup))\n\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function will check if all the given tuples have equal length or not.\n    '''\n    result = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            result = False\n            break\n    return result"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Set the gap to the length of the list\n    gap = len(nums)\n\n    # Initialize swaps to zero\n    swaps = 0\n\n    # Loop while the gap is greater than 1 and swaps is less than the length of the list\n    while gap > 1 or swaps < len(nums):\n\n        # Set the gap to the next power of 1.3\n        gap = max(1, int(gap * 1.3))\n\n        # Compare elements using the gap\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                # Swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                # Increment the swaps counter\n                swaps += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n            \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    A function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    # While gap is more than 1\n    while gap > 1 or shrink!= 1:\n        # Set the gap to the shrink factor\n        gap = int(gap / shrink)\n        \n        # If gap is less than or equal to 1, set it to 1\n        if gap < 1:\n            gap = 1\n        \n        # Compare adjacent elements and swap them if they are in the wrong order\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check if a given integer is the difference of two squares.\n    \"\"\"\n    # Check if the number is negative or zero\n    if n <= 0:\n        return False\n    \n    # Find the square root of the number\n    root = int(n ** 0.5)\n    \n    # Check if the square of the square root is equal to the number\n    if root ** 2 == n:\n        return True\n    \n    # Check if the difference of the square root and the square root of the difference is equal to the number\n    diff = root - n ** 0.5\n    if diff >= 0 and int(diff ** 0.5) ** 2 == n:\n        return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_difference_of_squares(n):\n    \"\"\"\n    This function takes a number as input and checks whether it can be represented as the difference of two squares or not.\n    \"\"\"\n    # Calculate the square root of the number\n    sqrt_n = int(n**0.5)\n    # Check if the square root is an integer\n    if sqrt_n**2!= n:\n        return False\n    # Check if the sum of the two squares is equal to the given number\n    return (sqrt_n + sqrt_n + 1)**2 == n or (sqrt_n + sqrt_n - 1)**2 == n\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    sqrt_n = int(n**0.5)\n    return sqrt_n**2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if is_square(n-i*i) and is_square(i):\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_valid_sum_of_squares(n):\n    \"\"\"\n    Returns True if the given number can be represented as the sum of two squares.\n    \"\"\"\n    if n < 2:\n        return False\n\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                return True\n            elif i * i < n:\n                if n % (n // i) == 0:\n                    return True\n        i += 1\n\n    return False\n\n\ndef is_valid_diff_of_squares(n):\n    \"\"\"\n    Returns True if the given number can be represented as the difference of two squares.\n    \"\"\"\n    if n < 2:\n        return False\n\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                return True\n            elif i * i < n:\n                if (n - i * i) % (n // i) == 0:\n                    return True\n        i += 1\n\n    return False\n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_valid_diff_of_squares(n):\n        print(f\"{n} can be represented as the difference of two squares\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_square(n): \n    \"\"\"\n    Helper function to check if a number is a square or not.\n    \"\"\"\n    x = int(n**0.5) \n    return x*x == n \n\ndef dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, n): \n        if is_square(n-i) and is_square(i): \n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_square(n):\n    return int(n**0.5)**2 == n\n\ndef dif_square(n):\n    for i in range(1, n):\n        if is_square(i) and is_square(n-i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    return int(math.sqrt(n))**2 == n\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_square(n-i*i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it can be represented as the difference of two squares or False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        for i in range(int(n**0.5), 1, -1):\n            if i**2 >= n:\n                return True\n            if n % i**2 == 0:\n                return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # We check if the given number is a perfect square or not\n    if int(n**0.5)**2 == n: \n        return False\n    else: \n        for i in range(2, int(n**0.5)+1): \n            if n%i == 0: \n                return False\n        else: \n            return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_square(n):\n    \"\"\"\n    Check if a number is a square.\n    \"\"\"\n    root = int(n ** 0.5)\n    return root ** 2 == n\n\ndef dif_square(n):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares or not.\n    \"\"\"\n    if is_square(n):\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_square(n - i ** 2):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether the colors array follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    color_index = 0\n    pattern_index = 0\n\n    # loop through both arrays\n    while color_index < len(colors) and pattern_index < len(patterns):\n\n        # if the color matches the pattern\n        if colors[color_index] == patterns[pattern_index]:\n\n            # move on to the next color and pattern\n            color_index += 1\n            pattern_index += 1\n\n        # if the color does not match the pattern\n        else:\n\n            # if the pattern is \"o\"\n            if patterns[pattern_index] == \"o\":\n\n                # move on to the next color\n                color_index += 1\n\n            # if the pattern is \"x\"\n            else:\n\n                # return False because the colors array does not follow the sequence in the patterns array\n                return False\n\n    # if we have reached the end of both arrays\n    if color_index == len(colors) and pattern_index == len(patterns):\n\n        # return True because the colors array follows the sequence in the patterns array\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function checks whether it follows the sequence given in the patterns array.\n\n    Args:\n    colors (list): A list of colors in string format\n    patterns (list): A list of patterns in string format\n\n    Returns:\n    bool: True if the sequence is correct, False otherwise\n\n    Example:\n    >>> colors = ['red', 'green', 'blue', 'yellow']\n    >>> patterns = ['red', 'green', 'blue', 'yellow']\n    >>> is_samepatterns(colors, patterns)\n    True\n\n    >>> colors = ['red', 'green', 'blue', 'yellow']\n    >>> patterns = ['blue', 'yellow','red', 'green']\n    >>> is_samepatterns(colors, patterns)\n    False\n\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i%len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i%len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    i = 0\n    for pattern in patterns:\n        if pattern == 1:\n            if colors[i]!= 0:\n                return False\n            i += 1\n        else:\n            if colors[i] == 0:\n                return False\n            i += 1\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 'R':\n            if colors[i]!='red':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i]!= 'green':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i]!= 'blue':\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        elif patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'Y' and (colors[i]!= 'G' and colors[i]!= 'Y'):\n            return False\n        elif patterns[i] == 'R' and (colors[i]!= 'G' and colors[i]!= 'Y' and colors[i]!= 'R'):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'G' and colors[i]!= 'G':\n            return False\n        elif patterns[i] == 'Y' and colors[i]!= 'Y':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'B':\n            return False\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a list of tuples which have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer 'n' as input and returns True if 'n' is not divisible by 11, otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11,\n    and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, else False.\n    '''\n    word = s.split()[0]  # Splitting the string into words and taking the first word\n    if len(word) % 2 == 1:  # Checking if the length of the word is odd or not\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    \"\"\"\n    if len(s)%2!=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    \"\"\"\n    This function will check whether the length of the word is odd or not.\n    \"\"\"\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    # Initialize a variable to hold the result\n    result = 0\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the square of i to result\n        result += i**2\n    # Return the result\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    tetra_num = 0\n    for i in range(n):\n        tetra_num += (4 * i + 1) ** 3\n    return tetra_num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    return n * (n+1) * (n+2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    return n*(n+1)*(n+2)//6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    tetrahedral_numbers = [1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960, 5456, 5984, 6545, 7140, 7770, 8436, 9139, 9880, 10660, 11480, 12341, 13244, 14190, 15180, 16215, 17296, 18424, 19600, 20825, 22100, 23426, 24804, 26235, 27720, 29260, 30856, 32509, 34220, 35990, 37820, 39711, 41664, 43680, 45760, 47905, 50116, 52394, 54740, 57155, 59640, 62196, 64824, 67525, 70300, 73150, 76076, 79079, 82160, 85320, 88560, 91881, 95284, 98770, 102340, 105995, 109736, 113564, 117480, 121485, 125580, 129766, 134044, 138415, 142880, 147440, 152096, 156849, 161700, 166650, 171700, 176851, 182104, 187460, 192920, 198485, 204156, 209934, 215820, 221815, 227920, 234136, 240464, 246905, 253460, 260130, 266916, 273819, 280840, 287980, 295240, 302621, 310124, 317750, 325500, 333375, 341376, 349504, 357760, 366145, 374660, 383306, 392084, 400995, 410040, 419220, 428536, 437989, 447580, 457310, 4"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((1/6)*(n*(n+1)*(n+2)))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return n * (n+1) * (n+2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680, 816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060, 4495, 4960, 5456, 5984, 6545, 7140, 7770, 8436, 9139, 9880, 10660, 11480, 12341, 13244, 14190, 15180, 16215, 17296, 18424, 19600, 20825, 22100, 23426, 24804, 26235, 27720, 29260, 30856, 32509, 34220, 35990, 37820, 39711, 41664, 43680, 45760, 47905, 50116, 52394, 54740, 57155, 59640, 62196, 64824, 67525, 70300, 73150, 76076, 79079, 82160, 85320, 88560, 91881, 95284, 98770, 102340, 105995, 109736, 113564, 117480, 121485, 125580, 129766, 134044, 138415, 142880, 147440, 152096, 156849, 161700, 166650, 171700, 176851, 182104, 187460, 192920, 198485, 204156, 209934, 215820, 221815, 227920, 234136, 240464, 246905, 253460, 260130, 266916, 273819, 280840, 287980, 295240, 302621, 310124, 317750, 325500, 333375, 341376, 349504, 357760, 366145, 374660, 383306, 392084, 400995, 410040, 419220, 428536, 437989, 447580, 457310, 467180,"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its volume.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # function to calculate the character made by adding ASCII values of characters\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr(ascii_sum % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    This function takes a string as input and returns the character which is made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_ascii_sum = sum(ord(i) for i in strr)\n    return chr(total_ascii_sum % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char) - 64  # subtracting 64 is done to make the result between 1 and 26\n        \n    return chr((sum % 26) + 64)  # adding 64 to convert the result back to the ASCII value of a character"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    This function finds the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the sum of ASCII values of characters in the string\n    sum = 0\n    # Iterate through each character in the string and add its ASCII value to the sum\n    for i in strr:\n        sum += ord(i)\n    # Calculate the character made by adding the sum modulo 26\n    char = chr((sum % 26) + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr(result % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of all characters to 0\n    sum = 0\n    # Iterate through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    # Find the character by taking the sum modulo 26 and subtracting it from 26 to get the ASCII value of the character\n    char = chr(sum % 26 + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    sum_ascii = 0\n    for i in strr:\n        sum_ascii += ord(i) - ord('a') + 1\n    return chr((sum_ascii % 26) + ord('a') - 1)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = sum([ord(i) - 96 for i in strr])\n    return chr(sum_ascii % 26 + 96)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    result = sum([ord(c) - 64 for c in strr]) % 26\n    return chr(result + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values\n    sum_ascii = 0\n\n    # Loop through each character in the string and add its ASCII value to the sum_ascii variable\n    for char in strr:\n        sum_ascii += ord(char)\n\n    # Calculate the remainder when sum_ascii is divided by 26\n    remainder = sum_ascii % 26\n\n    # Calculate the character made by adding the remainder to ASCII value of 'a'\n    char = chr(remainder + 97)\n\n    # Return the character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev = 1\n        curr = 1\n        for i in range(3, n+1):\n            next_num = prev + curr\n            prev = curr\n            curr = next_num\n        return curr"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        while len(seq) < n:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman Conway Sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]\n\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th number in the Newman Conway Sequence is:\", newman_conway(n))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return \"Invalid input\"\n    elif n == 1: \n        return \"1\"\n    else: \n        seq = [0, 1, 1]\n        for i in range(3, n+1): \n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            sequence_list.append(sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]])\n        return sequence_list[n]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in the radius of a sphere and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere with radius r.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere and returns its surface area.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The surface area of the sphere is:\", surfacearea_sphere(radius))"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    \"\"\"\n    count = 1  # initialize a counter variable\n    hex_num = 1  # initialize the first centered hexagonal number\n\n    while count < n:\n        hex_num += 6 * count  # increment the hexagonal number by 6 times the count\n        count += 1\n\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i-1) for i in range(1, n+1)]\n    centered_hexagonal_numbers = [i+j for i,j in zip(hexagonal_numbers, [n+1]*len(hexagonal_numbers))]\n    return centered_hexagonal_numbers"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center = n*2 - 1\n    return center*(center + 1)"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = 2*n*(2*n - 1) # nth hexagonal number\n    return hexagonal_num - (n - 1) # centered hexagonal number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = n * 2 * n - 1\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    hexagonal_number = 0\n    while count < n:\n        hexagonal_number += count\n        count += 1\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    i = 1\n    while True:\n        hex_num = i*(2*i - 1)\n        if hex_num >= n:\n            return hex_num\n        elif hex_num < n:\n            count += 1\n        i += 1"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonals = [i*(2*i - 1) for i in range(1, n+1)]\n    return hexagonals[n-1]"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        for key, value in d.items():\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.OrderedDict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    # Iterate through each dictionary and add each key-value pair to the merged dictionary\n    for dictionary in [dict1, dict2, dict3]:\n        for key, value in dictionary.items():\n            merged_dict[key] = value\n    \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)\n"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all elements in the list.\n    '''\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a dictionary with keys as elements of the list and values as frequency count of each element.\n    \"\"\"\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency count\n    freq_dict = {}\n\n    # Iterate through the list and count the frequency of each element\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    '''\n    This function returns the closest smaller number to n.\n    '''\n    i = n - 1\n    while i > 0:\n        if i % n == 0:\n            return i\n        i -= 1\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    '''\n    This function takes a number as input and returns the closest smaller number in the sequence.\n    '''\n    if n == 0:\n        return None\n    elif n > 0:\n        return n-1\n    else:\n        return n+1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, -1, -1):\n        if i == n:\n            continue\n        if closest is None or abs(n - i) < abs(n - closest):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return None\n    else:\n        # Initialize the closest number variable to infinity\n        closest = float('inf')\n        # Iterate over the range from 1 to N-1\n        for i in range(1, N):\n            # If the current number is smaller than the current closest, update closest\n            if abs(N - i) < abs(N - closest):\n                closest = i\n        # Return the closest smaller number\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the closest smaller integer.\n    \"\"\"\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i < n:\n            closest = i\n            break\n    if closest is None:\n        return \"There are no smaller numbers.\"\n    else:\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return N-1"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = N\n    while i > 0:\n        if i < N:\n            return i\n        i -= 1\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(n):\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i <= n/2:\n            closest = i\n            break\n    if closest is None:\n        closest = 1\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for i in range(n-1, -1, -1):\n        if i < n:\n            smaller_num = i\n            break\n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    # If n is zero, return -1\n    if n == 0:\n        return -1\n\n    # Initialize the closest smaller number to n\n    closest = n\n\n    # Loop from 1 to n/2 and check if each number is closer to n than the current closest\n    for i in range(1, n // 2 + 1):\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    \n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of strings as input and returns the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(lst):\n    \"\"\"\n    This function takes a list of strings as an argument and returns the length of the longest word in the list.\n    \"\"\"\n    longest_word = \"\"\n    for word in lst:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n    - str1: a list of string values\n    - sub_str: a string to search for in str1\n\n    Returns:\n    - True if sub_str is present in str1, False otherwise\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    This function checks if a given substring is present in a list of strings.\n\n    :param str_list: List of strings.\n    :param sub_str: Substring to search for.\n    :return: True if substring is found, False otherwise.\n    \"\"\"\n    for str in str_list:\n        if sub_str in str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for s in str1:\n        if sub_str in s:\n            result = True\n            break\n    return result"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, a string and a substring, and returns True if the substring is present in the string, else False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the sum of digits of n is divisible by n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits % n!= 0:\n        return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # initialize variables\n    count = 0\n    previous_digit = 0\n    # iterate through the digits of the number\n    for digit in str(n):\n        # if the current digit is the same as the previous digit, increment count\n        if int(digit) == previous_digit:\n            count += 1\n        # if the current digit is different from the previous digit, update previous_digit and reset count\n        else:\n            previous_digit = int(digit)\n            count = 1\n        # if count reaches 3, return False (not undulating)\n        if count == 3:\n            return False\n    # if count never reaches 3, return True (undulating)\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Convert the given number into a string to check if it's a palindrome\n    num_str = str(n)\n    if num_str == num_str[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        # check if number can be written as a power of 2\n        if n & (n - 1) == 0:\n            # check if the number can be expressed as a sum of two numbers\n            if n % 2 == 0:\n                return True\n            else:\n                for i in range(3, int(n ** 0.5) + 1, 2):\n                    if n % i == 0:\n                        return False\n                return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input\"\n    \n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Create a list of factors of n\n    factors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            factors.append(i)\n    \n    # Check if the list of factors contains any repeated numbers\n    for i in range(len(factors)):\n        if factors.count(factors[i]) > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number n is undulating or not.\n    A number is said to be undulating if the difference between any two consecutive terms of a sequence is the same.\n    \"\"\"\n    # To check whether a number is undulating or not, we need to check if the difference between any two consecutive terms of a sequence is the same.\n    # We will create a list of consecutive terms and check if the difference between any two consecutive terms is the same or not.\n    terms = []\n    for i in range(n):\n        terms.append(i)\n    # Checking if the difference between any two consecutive terms is the same.\n    diff = terms[1] - terms[0]\n    for i in range(1, n-1):\n        if terms[i+1] - terms[i]!= diff:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Calculate the difference between consecutive digits\n    digits = [int(d) for d in str(n)]\n    diff = [digits[i+1] - digits[i] for i in range(len(digits)-1)]\n    \n    # Check whether all the differences are the same or not\n    return all(d == diff[0] for d in diff)"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if the given number is equal to its reverse\n    if str(n) == str(n)[::-1]:\n        return False\n\n    # Check if the given number is equal to the sum of its digits\n    if n == sum(int(digit) for digit in str(n)):\n        return False\n\n    # If none of the above conditions are true, then the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    An undulating number is a positive integer that has a repeated sequence of digits.\n    For example, 12321 is an undulating number because it has a repeated sequence of digits 123.\n    '''\n    # Convert the number to a string to check for repeated digits\n    s = str(n)\n    # Check if the length of the string is less than 2, return False if it is\n    if len(s) < 2:\n        return False\n    # Check if the first and last digits are the same, return True if they are\n    if s[0] == s[-1]:\n        return True\n    # Check if the sequence of digits is the same as the previous sequence, return True if it is\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            return True\n    # If none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments: a and b.\n    It returns the value of a to the power of b.\n    \"\"\"\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = a ** b\n    return result\n\nprint(power(2, 3))  # Output: 8\nprint(power(3, 4))  # Output: 81"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    This function takes two arguments, a and b, and returns the value of a raised to the power of b.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1)) # sort the list based on the second value of the tuples\n    return sorted_list[0][0] # return the first value of the tuple with the smallest second value"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second value using the itemgetter function\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  # initialize minimum length to the length of the first list\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes in a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0]) # initialize the minimum length to the length of the first list in the list\n    \n    # loop through the list of lists and find the length of the smallest list\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    \n    return min_length # return the minimum length of the list of lists"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')  # Initialize the minimum length to a very large value\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)  # Update the minimum length if a smaller list is found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function finds the number of divisors of a given integer.\n    \"\"\"\n    div_count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten(lst):\n    \"\"\"\n    Flatten a list of lists into a single list\n    \"\"\"\n    return [item for sublist in lst for item in sublist]\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find frequency of each element in a flattened list of lists, returned in a dictionary\n    \"\"\"\n    flat_lst = flatten(lst)\n    freq_dict = {}\n    for item in flat_lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list of lists into a single list.\n    \"\"\"\n    flattened_list = []\n    for sublist in lst:\n        for element in sublist:\n            flattened_list.append(element)\n    return flattened_list\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find the frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_lst = flatten_list(lst)\n    frequency_dict = {}\n    for element in flattened_lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            sub_list = item\n            for sub_item in sub_list:\n                if sub_item not in freq_dict:\n                    freq_dict[sub_item] = 1\n                else:\n                    freq_dict[sub_item] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for element in list1:\n        if type(element) == list:\n            for item in element:\n                if item in freq:\n                    freq[item] += 1\n                else:\n                    freq[item] = 1\n        else:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and returns the multiplication of all the numbers divided by the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in the list and divides the result with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    This function takes a list of numbers as input and multiplies all the numbers in the list.\n    Then it divides the result with the length of the list to get the average value.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    else: \n        binary = \"\"\n        while n > 0: \n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert a decimal number to its binary equivalent, with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary.lstrip('0') or '0'"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize a binary string\n    binary = \"\"\n    # loop until the decimal number is 0\n    while n > 0:\n        # check if the remainder is 1 or 0\n        if n % 2 == 1:\n            binary = \"1\" + binary\n        else:\n            binary = \"0\" + binary\n        # divide the decimal number by 2 to get the next digit\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n        \n    return binary.lstrip('0') or '0'"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Invalid input, please enter a positive integer\"\n    # Convert the integer to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is a palindrome, find the next smallest palindrome by adding 1 to the integer\n        num += 1\n        # Convert the integer to a string\n        num_str = str(num)\n    # If the number is not a palindrome, find the next smallest palindrome by adding the reversed integer to itself\n    else:\n        # Reverse the string and add it to the original string to find the next smallest palindrome\n        num_str = num_str + str(int(num_str[::-1]))\n    # Convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is a palindrome, add 1 to it and return it as an integer\n        return int(num_str) + 1\n\n    # Create a list of all the possible palindromes that can be formed by adding 1 to the digits of the number\n    palindromes = []\n    for i in range(len(num_str)):\n        new_num = num_str[:i] + str(int(num_str[i])+1) + num_str[i+1:]\n        new_num = int(new_num)\n        if new_num!= num and new_num == new_num[::-1]:\n            palindromes.append(new_num)\n\n    # Return the smallest palindrome in the list\n    return min(palindromes)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the first digit that needs to be incremented and create a new string with the incremented digit\n    i = len(num_str) - 1\n    while i > 0 and num_str[i] == num_str[0]:\n        i -= 1\n    new_num_str = num_str[:i] + str(int(num_str[i]) + 1)\n    \n    # Check if the new number is already a palindrome, if not, repeat the process\n    while True:\n        new_num = int(new_num_str)\n        if new_num == new_num[::-1]:\n            return new_num\n        new_num_str = str(int(new_num_str) + 1)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to make it easier to check for palindromes\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is a palindrome, add 1 and return it as an integer\n        return int(str(num+1))\n    else:\n        # If the number is not a palindrome, find the next smallest palindrome by checking odd and even palindromes\n        # Start with odd palindromes\n        odd_palindrome = num - (num % 2) + 1\n        while True:\n            odd_palindrome += 2\n            odd_str = str(odd_palindrome)\n            if odd_str == odd_str[::-1]:\n                return odd_palindrome\n        # If no odd palindrome is found, start with even palindromes\n        even_palindrome = num - 1\n        while True:\n            even_palindrome += 2\n            even_str = str(even_palindrome)\n            if even_str == even_str[::-1]:\n                return even_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Returns True if n is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        # Base case: num is already a palindrome\n        return num + 1\n    \n    # Get the next smallest number by adding 1 to the smallest palindrome that is smaller than num\n    smallest_palindrome = num\n    while True:\n        smallest_palindrome += 1\n        if is_palindrome(smallest_palindrome):\n            break\n            \n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Convert the number to a string and check if it's already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the next largest palindrome by adding 1 to the current number\n    while str(num+1)!= str(num+1)[::-1]:\n        num += 1\n    \n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        # base case: already a palindrome\n        return num + 1\n    \n    # check odd-length palindromes\n    next_num = num + 2\n    while not is_palindrome(next_num):\n        next_num += 2\n    \n    # check even-length palindromes\n    next_num += 2\n    while not is_palindrome(next_num):\n        next_num += 2\n    \n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    if num < 0:\n        return \"Invalid input: number must be non-negative\"\n    elif str(num) == str(num)[::-1]:\n        return num + 1\n    else:\n        # convert number to string and reverse it\n        s = str(num)\n        s_rev = s[::-1]\n        # find the rightmost digit in the reversed string\n        i = len(s_rev) - 1\n        while s_rev[i] == '9' and i > 0:\n            i -= 1\n        # if rightmost digit is already 9, replace it with 1 and add 1 to next digit on the left\n        if s_rev[i] == '9':\n            s_rev = s_rev[:i] + '1' + s_rev[i+1:]\n            s_rev = str(int(s_rev) + 1)\n        else:\n            # increment the rightmost digit and reverse the string again to get the new palindrome\n            s_rev = s_rev[:i] + str(int(s_rev[i]) + 1) + s_rev[i+1:]\n        s_rev = s_rev[::-1]\n        return int(s_rev)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def quicksort(arr, left, right):\n    if left < right:\n        pivot_index = partition(arr, left, right)\n        if pivot_index == k-1:\n            return arr[pivot_index]\n        elif pivot_index < k-1:\n            return quicksort(arr, pivot_index+1, right)\n        else:\n            return quicksort(arr, left, pivot_index-1)\n\ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[right] = arr[right], arr[i+1]\n    return i+1\n\ndef kth_element(arr, k):\n    return quicksort(arr, 0, len(arr)-1)\n\narr = [5, 3, 8, 6, 2, 7, 1, 4]\nk = 3\nprint(kth_element(arr, k))"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Finds the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within range of the array\n    if k > len(arr) or k < 1:\n        return None\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the kth element in the sorted array\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Finds the kth element in the given array using 1-based indexing.\n\n    :param arr: The input array.\n    :param k: The kth element to find, 1-based indexing.\n    :return: The kth element in the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return sorted(arr)[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return sorted(arr)[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(x.capitalize() for x in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split(\"_\")\n    return parts[0] + \"\".join(p.capitalize() for p in parts[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            camel_word += word[i+1].upper()\n            i += 1\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words with the first letter capitalized\n    return ''.join(words)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return m**2 - 1\n    else:\n        return (m**n - 1) // (m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize a list to store the Eulerian number\n    eulerian_num = [0] * (n+m)\n\n    # set the first n values to 1\n    for i in range(n):\n        eulerian_num[i] = 1\n\n    # set the last m values to -1\n    for i in range(m):\n        eulerian_num[n+i] = -1\n\n    # calculate the sum of the absolute values of the elements in the list\n    sum_abs = sum(map(abs, eulerian_num))\n\n    # return the sum divided by n\n    return sum_abs / n"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    while n > 0:\n        a = a * n\n        n -= 1\n    while m > 0:\n        a = a * m\n        m -= 1\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = m ** n\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 0\n    a = 0\n    \n    # Initialize the number of Eulerian cycles to 0\n    num_cycles = 0\n    \n    # Loop through all possible combinations of n and m\n    for i in range(n+1):\n        for j in range(m+1):\n            # Count the number of Eulerian cycles with i and j\n            count = i + j\n            \n            # Update the Eulerian number and the number of cycles if the current combination gives a larger number\n            if count > num_cycles:\n                a = count * (i * j)\n                num_cycles = count\n                \n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n * eulerian_num(n, m - 1) + eulerian_num(n - 1, m)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the variables\n    count = 0\n    prev = -1\n\n    # Loop through the numbers from 1 to n*m\n    for num in range(1, n*m+1):\n        # Check if the number is divisible by n or m\n        if num % n == 0 or num % m == 0:\n            # Check if the previous number was divisible by n or m\n            if prev % n == 0 or prev % m == 0:\n                # Increment the count\n                count += 1\n            # Set the previous number to the current number\n            prev = num\n\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (m**(n-1) - 1)//(m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 2 or m < 2:\n        return \"n and m must be greater than or equal to 2.\"\n    else:\n        a = (m*(m-1))//2 + (n*(n-1))//2\n        return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function finds the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m*n)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of True values in a list of booleans.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of true values in the given list.\n\n    Args:\n    lst: a list of boolean values\n\n    Returns:\n    The number of true values in the list.\n    \"\"\"\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    This function takes a list as an argument and returns the count of True boolean values in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes a list and a tuple as input and returns a tuple that contains the elements of the original tuple and the list.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function will append the given list to the given tuple and return the new tuple.\n    \"\"\"\n    new_tuple = test_tup + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return tuple(test_tup + tuple(test_list))"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    for nums in [num1, num2, num3]:\n        heapq.heappush(heap, nums[0])\n    result = []\n    while heap:\n        smallest = heapq.heappop(heap)\n        result.append(smallest)\n    return result[::-1]"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    while num1 or num2 or num3:\n        if num1:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif num2:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 or num2 or num3:\n        if num1 and num2 and num1[0] <= num2[0] and num1[0] <= num3[0]:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif num2 and num3 and num2[0] <= num1[0] and num2[0] <= num3[0]:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a min-heap using heapq module\n    heap = []\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    \n    # Create a new list to store the merged sorted list\n    merged_list = []\n    \n    # Iterate until the heap is empty\n    while heap:\n        # Pop the smallest element from the heap\n        smallest = heapq.heappop(heap)\n        \n        # Add the smallest element to the merged list\n        merged_list.append(smallest)\n        \n        # If there are still elements in the input lists, add the next smallest element to the heap\n        if smallest == num1[0]:\n            heapq.heappush(heap, num1[1])\n        elif smallest == num2[0]:\n            heapq.heappush(heap, num2[1])\n        elif smallest == num3[0]:\n            heapq.heappush(heap, num3[1])\n    \n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    for lst in [num1, num2, num3]:\n        for num in lst:\n            heapq.heappush(heap, num)\n\n    sorted_lst = []\n    while heap:\n        sorted_lst.append(heapq.heappop(heap))\n\n    return sorted_lst"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged, num3[0])\n            heapq.heappop(num3)\n    while num1:\n        heapq.heappush(merged, num1[0])\n        heapq.heappop(num1)\n    while num2:\n        heapq.heappush(merged, num2[0])\n        heapq.heappop(num2)\n    while num3:\n        heapq.heappush(merged, num3[0])\n        heapq.heappop(num3)\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = heapq.merge(num1,num2,num3)\n    return list(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n\n    # Heapify the first two lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n\n    # Merge the two heaps\n    while num1 and num2:\n        if num1[0] < num2[0]:\n            heapq.heappush(heap, num1.pop(0))\n        else:\n            heapq.heappush(heap, num2.pop(0))\n\n    # Merge the last list\n    heap += num1 + num2\n\n    return heap"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1 (list): A sorted list of integers.\n        num2 (list): A sorted list of integers.\n        num3 (list): A sorted list of integers.\n\n    Returns:\n        list: A sorted list of integers.\n    \"\"\"\n    merged_list = heapq.merge(num1, num2, num3)\n    return list(merged_list)"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s*n\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == '1' and s[i+1] == '0':\n            count += 1\n        \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string n times.\n    \"\"\"\n    s_rotated = s * n\n    count = 0\n    for i in range(len(s_rotated)):\n        if s_rotated[i] == '1' and i % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    total = 0\n    for i in range(n):\n        binary = bin(int(s, 2) << i)[2:]\n        total += sum(int(digit) % 2 == 1 for digit in binary)\n    return total\n"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string s and a positive integer n as inputs and returns the number of numbers with odd value when the binary string is rotated n times.\n    '''\n    s = s*2\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1' and (s[i-n:i] == '0'*n or s[i-n:i] == '1'*n):\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes two arguments, the binary string s and the number of rotations n to be performed on the string.\n    It returns the number of numbers with an odd value when the string is rotated n times.\n    '''\n    # convert binary string to a list of integers\n    lst = [int(i) for i in s]\n    # rotate the list n times\n    rotated_lst = lst[-n:] + lst[:-n]\n    # count the number of odd values in the rotated list\n    odd_count = 0\n    for i in rotated_lst:\n        if i % 2 == 1:\n            odd_count += 1\n    # return the count of odd values\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes in a binary string s and an integer n as input and returns the number of numbers with an odd value when rotating the string n times.\n    '''\n    # convert binary string to list of integers\n    s_list = [int(i) for i in s]\n\n    # loop n times to rotate the string\n    for i in range(n):\n        # concatenate the last digit to the beginning of the list\n        s_list = [s_list[-1]] + s_list[:-1]\n\n    # count the number of odd values in the rotated string\n    count = 0\n    for i in s_list:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the string to a list of characters\n    s = list(s)\n    # initialize a count variable to keep track of the number of odd numbers\n    count = 0\n    # loop through the list n times\n    for i in range(n):\n        # create a temporary list to hold the rotated string\n        temp_list = []\n        # loop through the original string and append each character to the temporary list\n        for char in s:\n            temp_list.append(char)\n        # append the first character of the original string to the end of the temporary list\n        temp_list.append(s[0])\n        # remove the first character of the original string from the list\n        s.remove(s[0])\n        # convert the temporary list to a string and check if it has an odd number of characters with an odd value\n        if sum(int(i)%2!=0 for i in temp_list)%2!=0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables\n    count = 0\n    temp = \"\"\n\n    # Convert string to binary\n    bin_s = bin(int(s, 2))[2:]\n\n    # Pad binary string with zeros\n    if len(bin_s) < n:\n        bin_s = \"0\"*(n-len(bin_s)) + bin_s\n\n    # Rotate binary string n times\n    for i in range(n):\n        temp += bin_s[i]\n\n    # Check if each character in the rotated string is odd\n    for i in range(n):\n        if int(temp[i]) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the string to a list of binary digits\n    digits = [int(d) for d in s]\n    \n    # count the number of odd digits\n    count = sum(d % 2 == 1 for d in digits)\n    \n    # rotate the digits n times\n    rotated = digits[n:] + digits[:n]\n    \n    # count the number of odd digits in the rotated string\n    count += sum(d % 2 == 1 for d in rotated)\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    # Rotate the digits n times\n    rotated_digits = digits[-n:] + digits[:-n]\n    # Count the number of odd digits\n    count = 0\n    for digit in rotated_digits:\n        if digit % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for lst in nestedlist:\n        if len(common) == 0:\n            common = lst\n        else:\n            common = [x for x in common if x in lst]\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(result)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if i!= k and nestedlist[i][j] in nestedlist[k]:\n                    common_elements.append(nestedlist[i][j])\n                    break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements += list(set(nestedlist[i]) & set(nestedlist[j]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common.append(set(nestedlist[i]) & set(nestedlist[j]))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]).intersection(set(nestedlist[j]))\n            if common:\n                common_elements.append(list(common))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[i][j]!= []:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Check if a given string represents an integer or not.\n    \n    Parameters:\n    text (str): The string to check.\n    \n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function takes a string as input and checks if it represents an integer or not.\n    If the string represents an integer, it returns True. Otherwise, it returns False.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dict_list(list1):\n    \"\"\"\n    This function takes a list of dictionaries as an input and returns True if all dictionaries in the list are empty.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    This function takes a list of dictionaries as input and returns True if all dictionaries are empty and False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dict_list(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    This function checks whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    This function takes a list of dictionaries as input and returns True if all the dictionaries are empty or False if not.\n    '''\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes in a tuple of positive integers and returns the integer value of that tuple.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers as input and returns a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result*10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(num) for num in nums))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n    \n    # Iterate over each element of the tuple\n    for num in nums:\n        # Multiply the result by 10 and add the current element to it\n        result = result * 10 + num\n        \n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            sub_list = list_to_float(item)\n            result.append(sub_list)\n        elif isinstance(item, (int, float)):\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            result.append(float(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        converted_sublist = []\n        for element in sublist:\n            try:\n                converted_element = float(element)\n                converted_sublist.append(converted_element)\n            except ValueError:\n                pass\n        result.append(converted_sublist)\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    This function converts a string to a list of strings split on the space character.\n    '''\n    # Convert string to a list of strings using the split method\n    list_of_strings = string.split()\n\n    # Return the list of strings\n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    \n    if n == 1:\n        return arr[0]\n    \n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    \n    if arr[0] == arr[1]:\n        return search(arr[2:])\n    \n    if arr[n-2] == arr[n-1]:\n        return search(arr[:n-2])\n    \n    return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    left = 0\n    right = n - 1\n    \n    # Loop until we find the element that appears only once\n    while left < right:\n        # Calculate middle index\n        mid = (left + right) // 2\n        \n        # If middle element appears only once, update result and search for its complement\n        if (mid == 0 or arr[mid - 1]!= arr[mid]) and (mid == n - 1 or arr[mid + 1]!= arr[mid]):\n            return arr[mid]\n        \n        # If middle element appears more than once, search in the left half\n        elif arr[mid] > arr[left]:\n            left = mid + 1\n        \n        # If middle element appears more than once, search in the right half\n        else:\n            right = mid - 1\n    \n    # If we reach this point, there is no element that appears only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    # Initialize variables for counting and index\n    count = 0\n    index = 0\n    \n    # Loop through the array and count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] == arr[index]:\n            count += 1\n        else:\n            index = i\n            count = 1\n            \n    # Check if there is only one element that appears only once\n    for i in range(len(arr)):\n        if arr[i]!= arr[index] and count == 1:\n            return arr[i]\n    \n    # If no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1] and i < n-2:\n            return arr[i+1]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    count = 1\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n        \n        if count == 0:\n            result = arr[i]\n            break\n    \n    return result"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    i = 0\n    j = n-1\n    while i < j:\n        mid = (i+j)//2\n        if mid == 0 or arr[mid]!= arr[mid-1]:\n            if arr[mid] == arr[mid+1]:\n                return arr[mid]\n            else:\n                i = mid+1\n        else:\n            j = mid-1\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Iterate through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Loop through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array as input and returns the element that appears only once in the array.\n    '''\n\n    # Initialize variables to keep track of the first and second occurrence of the element\n    first = None\n    second = None\n\n    # Traverse through the array and find the first occurrence of the element\n    for i in range(len(arr)):\n        if arr[i]!= arr[0]:\n            first = arr[i]\n            break\n\n    # Traverse through the array again and find the second occurrence of the element\n    for i in range(len(arr)):\n        if arr[i]!= arr[0] and arr[i]!= first:\n            second = arr[i]\n            break\n\n    # Return the element that appears only once in the array\n    return second"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Loop through the array and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Loop through the dictionary and find the element that appears only once\n    for num, count in count_dict.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[j][0] * list1[i][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                product = abs(lst[i][0]*lst[i][1]*lst[j][0]*lst[j][1]*lst[k][0]*lst[k][1])\n                if product > max_product:\n                    max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the maximum absolute product between numbers in pairs of tuples.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]) * abs(list1[i][1]) * abs(list1[j][0]) * abs(list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n                \n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n            product = abs(list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n                \n            product = abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        sum1 = sum([x for x in range(1, i) if i % x == 0])\n        sum2 = sum([x for x in range(1, sum1+1) if sum1 % x == 0])\n        if i == sum2 and i!= sum1:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        sum_of_divisors = sum([num for num in range(1, i) if i % num == 0])\n        if sum_of_divisors < i and sum([num for num in range(1, sum_of_divisors + 1) if sum_of_divisors % num == 0]) == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter the limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisors(n):\n    div = []\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            div.append(i)\n    return div\n\ndef amicable_numbers_sum(limit):\n    sum = 0\n    for i in range(1, limit+1):\n        if i!= divisors(i)[-1]:\n            if i == sum(divisors(i)):\n                sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit):\n        sum_divisors = sum([i for i in range(1, num) if num % i == 0])\n        if sum_divisors > num and sum([i for i in range(1, sum_divisors) if sum_divisors % i == 0]) == num:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        divisor_sum = sum(divisor for divisor in range(1, int(num/2)+1) if num % divisor == 0)\n        if divisor_sum > num and num not in amicable_numbers:\n            amicable_numbers.append(num)\n            sum_amicable_numbers += num\n    return sum_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_amicable_number(num):\n    div1 = sum(div for div in range(1, num) if num % div == 0)\n    div2 = sum(div for div in range(1, div1) if div1 % div == 0)\n    return div1 == num and div2 == num and div1!= div2\n\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for num in range(1, limit):\n        if is_amicable_number(num):\n            total += num\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisors(num):\n    \"\"\"\n    Returns a list of all the divisors of a given number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(2, limit):\n        if i in divisors(i):\n            continue\n        j = sum(divisors(i))\n        if j < limit and j in divisors(j):\n            if i!= j:\n                total += i + j\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit):\n        sum_divisors_i = sum(div for div in range(1, i) if i % div == 0)\n        if sum_divisors_i < i:\n            sum_divisors_i = sum(div for div in range(i+1, limit) if i % div == 0)\n        if sum_divisors_i > i and sum_divisors_i < limit and i == sum_divisors_i:\n            sum_amicable += i\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisors(n):\n    \"\"\"Returns a list of all divisors of a given number\"\"\"\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return divs\n\ndef is_amicable(n):\n    \"\"\"Returns True if a number is amicable, False otherwise\"\"\"\n    d1 = sum(divisors(n))\n    d2 = sum(divisors(d1))\n    return n == d2 and n!= d1\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Returns the sum of all amicable numbers up to the given limit\"\"\"\n    total = 0\n    for n in range(1, limit+1):\n        if is_amicable(n):\n            total += n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_amicable(num):\n    # Check if the number is divisible by any number other than 1 and itself\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    # Find the sum of all factors of the number\n    sum_factors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_factors += i\n    \n    # Check if the sum of factors is equal to the original number\n    if sum_factors == num:\n        return True\n    \n    # Check if the sum of factors is equal to the sum of divisors\n    divisor_sum = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisor_sum += i\n    \n    if divisor_sum == sum_factors:\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False\n\ndef amicable_numbers_sum(limit):\n    # Initialize a variable to keep track of the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the sum of amicable numbers\n            amicable_sum += num\n    \n    # Return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle\n\na = int(input(\"Enter the real part of the complex number: \"))\nb = int(input(\"Enter the imaginary part of the complex number: \"))\n\nprint(\"The angle of complex number {} + {}i is {}\".format(a, b, angle_complex(a, b)))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return round(cmath.phase(complex(a,b)),2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        if count_1 > count_0:\n            max_len = max(max_len, count_1 - count_0)\n        elif count_0 > count_1:\n            max_len = max(max_len, count_0 - count_1)\n    \n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    max_length = 0\n    current_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_length += 1\n        else:\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    if n == 0:\n        return 0\n    \n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    n = len(string)\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string): \n    max_length = 0\n    current_length = 0\n    prev_digit = None\n    \n    for digit in string:\n        if digit!= prev_digit:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n        else:\n            current_length += 1\n        prev_digit = digit\n        \n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            length = abs(count_0 - count_1)\n            if length > max_length:\n                max_length = length\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            length = abs(count_0 - count_1)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            length = abs(count_0 - count_1)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Returns the greatest common divisor of two given numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        \"\"\"\n        Returns the least common multiple of two given numbers.\n        \"\"\"\n        return a * b // gcd(a, b)\n    \n    def sum_of_divisors(n):\n        \"\"\"\n        Returns the sum of divisors of a given number.\n        \"\"\"\n        result = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                result += i\n        return result\n    \n    lcm_ab = lcm(a, b)\n    sum_ab = sum_of_divisors(a) + sum_of_divisors(b)\n    sum_lcm = sum_of_divisors(lcm_ab)\n    sum_common = sum_lcm - sum_ab\n    \n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of common divisors of those two numbers.\n    \"\"\"\n    # Find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Initialize a variable to store the sum of common divisors\n    sum_common = 0\n\n    # Loop through all numbers from 1 to smaller number\n    for i in range(1, smaller + 1):\n        # Check if the number is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            sum_common += i\n\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Initialize the sum of common divisors\n    sum_common_divisors = 0\n\n    # Iterate through all numbers from 1 to the smaller number\n    for i in range(1, smaller+1):\n        # Check if both numbers have the same factor\n        if a % i == 0 and b % i == 0:\n            # Add the factor to the sum of common divisors\n            sum_common_divisors += i\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Get the set of common divisors\n    common_divisors = set(range(1, max(a, b) + 1)) & set(a) & set(b)\n    \n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # initialize the sum of common divisors\n    sum_of_common_divisors = 0\n\n    # loop through the range of 1 to the smaller number\n    for i in range(1, smaller+1):\n        # check if the number is a divisor of both numbers\n        if (a % i == 0) and (b % i == 0):\n            # if it is a divisor, add it to the sum of common divisors\n            sum_of_common_divisors += i\n\n    # return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of a and b\n    divisors = [i for i in range(1, min(a,b) + 1) if a % i == 0 and b % i == 0]\n\n    # Find the sum of common divisors\n    total = sum(divisors)\n\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two integers as arguments and returns the sum of their common divisors.\n    \"\"\"\n    # Get the set of common divisors\n    divisors = set(range(1, max(a, b) + 1)) & set(range(1, max(a, b) + 1))\n    \n    # Sum the common divisors\n    return sum([x for x in divisors if a % x == 0 and b % x == 0])"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_list = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function returns the sum of the common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function multiplies two integers and returns the result.\n\n    Args:\n    x: An integer.\n    y: An integer.\n\n    Returns:\n    The product of x and y.\n\n    Raises:\n    TypeError: If x or y is not an integer.\n    \"\"\"\n\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y should be integers.\")\n\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n\nprint(multiply_int(5, 7)) # Output: 35"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers x and y as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    This function multiplies two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()  # split the string into words\n    result = []  # initialize an empty list to store the long words\n    \n    for word in words:\n        if len(word) > n:  # check if the length of the word is greater than n\n            result.append(word)  # if it is, append it to the result list\n    \n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments: n (an integer representing the maximum number of characters\n    for a word) and str (a string representing a list of words). The function returns a list of words\n    that are longer than n characters from the given list of words.\n    '''\n    words = str.split()  # split the string into a list of words\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    result = [] # initialize an empty list to store the long words\n    for word in words: # loop through each word in the list\n        if len(word) > n: # if the length of the word is greater than n\n            result.append(word) # add the word to the result list\n    return result # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments: n (an integer representing the maximum number of characters a word can have) and str (a list of words).\n    The function returns a list of words that are longer than n characters from the given list of words.\n    '''\n\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters.\n\n    Parameters:\n        n (int): The maximum length of words to consider.\n        words (list): A list of words.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    \n    # Calculate the sum of each row, column, and diagonal\n    row_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    diag_sum_right = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum_left = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    \n    # Check if the sums are equal\n    if row_sums == col_sums and diag_sum_right == diag_sum_left:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(matrix):\n    # Get the dimensions of the matrix\n    n = len(matrix)\n    \n    # Calculate the sum of the magic numbers\n    magic_sum = (n * (n*n + 1)) // 2\n    \n    # Calculate the sum of the elements in the matrix\n    matrix_sum = sum(sum(row) for row in matrix)\n    \n    # Check if the sum of the magic numbers equals the sum of the elements in the matrix\n    if magic_sum == matrix_sum:\n        # Check if the matrix is a magic square by verifying each row, column, and diagonal sum\n        if all(sum(row) == magic_sum for row in matrix) and \\\n           all(sum(matrix[i][j] for j in range(n)) == magic_sum for i in range(n)) and \\\n           all(sum(matrix[i][j] for i in range(n)) == magic_sum for j in range(n)) and \\\n           all(sum(matrix[i][i] for i in range(n)) == magic_sum for j in range(n)):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the sum of each row and column is the same\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n        if row_sum!= col_sum:\n            return False\n    \n    # Check if the sum of the diagonals is the same\n    diag_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # The matrix is a magic square if all conditions are satisfied\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if matrix is symmetrical\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    # Calculate the sums of the rows, columns and diagonals\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    diag_sum_1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum_2 = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    \n    # Check if the sums of the rows, columns and diagonals are equal\n    if row_sums!= col_sums or row_sums[0]!= diag_sum_1 or row_sums[-1]!= diag_sum_2:\n        return False\n    \n    # If the matrix passes all the tests, it is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    # calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    # calculate the sum of the first column\n    col_sum = sum(my_matrix[i][0] for i in range(n))\n    # calculate the sum of the diagonal from top-left to bottom-right\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    # calculate the sum of the diagonal from top-right to bottom-left\n    rev_diagonal_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    # check if all four sums are equal\n    return row_sum == col_sum == diagonal_sum == rev_diagonal_sum"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    # Check if row_sums is equal to col_sums\n    if row_sums!= col_sums:\n        return False\n\n    # Calculate the sum of the diagonals\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # Check if diagonal_sum1 is equal to diagonal_sum2\n    if diagonal_sum1!= diagonal_sum2:\n        return False\n\n    # If all the above conditions are met, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Check if all rows and columns have the same sum\n    for i in range(1, len(my_matrix)):\n        if sum(my_matrix[i])!= row_sum:\n            return False\n        \n        # Check if each row and column has the same sum\n        for j in range(len(my_matrix)):\n            if sum(my_matrix[i][j:len(my_matrix[i])+1])!= row_sum or sum(my_matrix[j][i:len(my_matrix)])!= row_sum:\n                return False\n    \n    # If all the above conditions are satisfied, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes in a matrix as input and checks whether it is a magic square or not.\n    A magic square is a square grid of numbers where the sum of each row, column, and diagonal\n    is the same.\n    '''\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Calculate the sum of the diagonal and anti-diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    anti_diagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    # Check if the sum of each row, column, and diagonal is the same\n    if row_sums == col_sums and row_sums == [i for i in range(1, len(my_matrix)+1)]:\n        if diagonal_sum == anti_diagonal_sum == len(my_matrix)*(len(my_matrix)+1)/2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of the first row, then add the sum of the last row\n    row_sum = sum(my_matrix[0]) + sum(my_matrix[-1])\n    # Calculate the sum of the first column, then add the sum of the last column\n    col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix))) + sum(my_matrix[i][-1] for i in range(len(my_matrix)))\n    # Calculate the sum of the diagonals\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    # Check if the sum of each row, column, and diagonal is the same as the sum of the other elements\n    return (row_sum == col_sum == diagonal_sum1 == diagonal_sum2)"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if matrix is symmetrical\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # Check if diagonal sums are equal\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum1 += my_matrix[i][i]\n        diagonal_sum2 += my_matrix[i][len(my_matrix) - i - 1]\n    if diagonal_sum1!= diagonal_sum2:\n        return False\n\n    # Check if row and column sums are equal\n    row_sum = []\n    column_sum = []\n    for i in range(len(my_matrix)):\n        row_sum.append(sum(my_matrix[i]))\n        column_sum.append(sum(my_matrix[j][i] for j in range(len(my_matrix))))\n    if row_sum!= column_sum:\n        return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n            break\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int) # initialize a dictionary to store item frequencies\n    for num in nums:\n        freq[num] += 1 # increment the frequency count for each item in the list\n    \n    max_freq = max(freq.values()) # get the maximum frequency\n    max_item = [k for k, v in freq.items() if v == max_freq][0] # get the item with maximum frequency\n    \n    return max_item, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store item frequencies\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency count in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    \n    for num in nums:\n        frequency[num] += 1\n    \n    max_freq = max(frequency.values())\n    \n    for num, freq in frequency.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int) # create a default dictionary with initial value of 0\n    for num in nums:\n        counts[num] += 1 # increment count for each item in the list\n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, c in enumerate(str1) if c in vowels]\n    vowel_substrings = [str1[i:j+1] for i, j in zip(vowel_indices[:-1], vowel_indices[1:])]\n    reversed_vowel_substrings = [s[::-1] for s in vowel_substrings]\n    result = ''.join([s if s in vowels else s[::-1] for s in str1])\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_indexes = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indexes.append(i)\n    new_str = \"\"\n    for i in range(len(vowel_indexes)):\n        if i == 0:\n            new_str += str1[vowel_indexes[-1]]\n        else:\n            new_str += str1[vowel_indexes[i-1]:vowel_indexes[i]][::-1]\n        if i == len(vowel_indexes) - 1:\n            new_str += str1[vowel_indexes[0]]\n        else:\n            new_str += str1[vowel_indexes[i]:vowel_indexes[i+1]][::-1]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    reversed_vowels = vowels_list[::-1]\n    result = \"\"\n    for char in str1:\n        if char not in vowels:\n            result += char\n        elif reversed_vowels:\n            result += reversed_vowels.pop()\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = str1[vowel_indices[-1]:vowel_indices[0]+1][::-1]\n    new_str = ''\n    for i, char in enumerate(str1):\n        if i in vowel_indices:\n            new_str += reversed_vowels[vowel_indices.index(i)]\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1_list = list(str1)\n    vowel_indices = []\n\n    # Finding vowel indices and adding them to list\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n\n    # Reversing the vowels\n    for i in range(len(vowel_indices)//2):\n        str1_list[vowel_indices[i]], str1_list[vowel_indices[-i-1]] = str1_list[vowel_indices[-i-1]], str1_list[vowel_indices[i]]\n\n    # Converting the list back to string\n    str1 = \"\".join(str1_list)\n\n    # Removing the 'y' from the string\n    if 'y' in str1:\n        str1 = str1.replace('y', '')\n\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiou')\n    vowels_found = False\n    result = []\n    for char in str1:\n        if char.lower() in vowels:\n            vowels_found = True\n            result.append(char)\n        elif vowels_found:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_chars = [str1[i] for i in vowel_indices]\n    reversed_vowel_chars = vowel_chars[::-1]\n    for i, char in zip(vowel_indices, reversed_vowel_chars):\n        str1 = str1[:i] + char + str1[i+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    start = 0\n    end = len(str1) - 1\n    \n    while start < end:\n        if str1[start] in vowels:\n            if str1[end] in vowels:\n                str1[start], str1[end] = str1[end], str1[start]\n                start += 1\n                end -= 1\n            else:\n                end -= 1\n        else:\n            start += 1\n            \n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    str1_list = list(str1)\n    for i in vowel_indices:\n        str1_list[i], str1_list[i+1] = str1_list[i+1], str1_list[i]\n    return \"\".join(str1_list)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    \n    # Find the indices of all vowels in the string\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    \n    # Reverse the vowels and the non-vowels in the string\n    rev_str = ''\n    for i in range(len(str1)):\n        if i in vowel_indices:\n            rev_str += str1[vowel_indices.index(i)][::-1]\n        else:\n            rev_str += str1[i]\n    \n    return rev_str"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) + ', '\n    return str1[:-2]"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    This function converts a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an input and returns a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n\nprint(sum_negativenum([-1, 2, -3, 4, -5])) # Output: -9"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function calculates the sum of negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of negative numbers in a list of numbers.\n\n    :param nums: A list of numbers.\n    :return: The sum of negative numbers in the list.\n    \"\"\"\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of negative numbers in the list.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 1  # Initialize a counter\n    hex_num = 1  # Initialize the first hexagonal number\n    \n    while count < n:\n        hex_num += 6*count  # Add 6 to the hexagonal number for each increment of the counter\n        count += 1\n        \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_nums = [1]\n    count = 1\n    while count < n:\n        hexagonal_nums.append(hexagonal_nums[-1] + 6 * count)\n        count += 1\n    return hexagonal_nums[n-1]"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6\n        count += 1\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 6\n    return"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    if count_zeroes == 0:\n        return 'There are no zeroes in the array'\n    else:\n        return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    \n    return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zeros = 0\n    count_nonzeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_nonzeros += 1\n    \n    return count_zeros / count_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n    return count_zeros / count_non_zeros if count_non_zeros > 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers and returns the ratio of zeroes to non-zeroes.\n    \"\"\"\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    return zeroes / non_zeroes"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    sum_of_powers = 0\n    \n    # Keep adding powers of 2 until the sum of powers becomes greater than or equal to n\n    while sum_of_powers < n:\n        sum_of_powers += (2 ** power)\n        power += 1\n    \n    # If the sum of powers is greater than or equal to n, then n can be represented as sum of non-zero powers of 2\n    if sum_of_powers >= n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function takes an integer n as input and returns True if it can be represented as sum of non-zero powers of 2 and False otherwise.\n    '''\n    power = 0\n    while(n > 0): \n        if n & 1 == 1: \n            power += 1\n        n >>= 1\n    if power == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        i = 1\n        while 2**i <= n:\n            if n % (2**i) == 0:\n                n -= 2**i\n            else:\n                i += 1\n        if n == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Initialize a boolean variable to keep track of whether n can be represented as sum of powers of 2 or not\n    result = False\n    # Loop through all numbers from 0 to n\n    for i in range(n+1):\n        # Check if i can be represented as sum of powers of 2\n        if sum(1 for j in range(31) if (i >> j) & 1) == i:\n            result = True\n            break\n    # Return the result\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number can be represented as sum of non-zero powers of 2.\n    \"\"\"\n    # convert the number to binary\n    binary = bin(n)[2:]\n    \n    # initialize a variable to track the sum\n    total = 0\n    \n    # iterate over the binary string and check if the number is represented as sum of powers of 2\n    for bit in binary:\n        if bit == '1':\n            # if the bit is 1, add 2^i to the total sum\n            total += 2**int(binary.index(bit))\n            \n    # check if the total sum is equal to the given number\n    if total == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers_of_two = 0\n    \n    # Check if the number is power of 2 or not\n    if n & (n-1) == 0: \n        # If number is power of 2, then sum of powers of 2 will be one less than n\n        return sum_of_powers_of_two == n-1\n    \n    # Convert the number to binary and iterate through each bit\n    while n > 0: \n        # If the current bit is 1, add its power of 2 to the sum of powers of 2\n        if n & 1: \n            sum_of_powers_of_two += 2**(len(bin(n))-3)\n        \n        # Right shift the number by one bit\n        n >>= 1\n    \n    # Check if the sum of powers of 2 is equal to the original number\n    return sum_of_powers_of_two == n"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as a sum of non-zero powers of 2,\n    otherwise, it returns False.\n    \"\"\"\n    # Initialize a boolean variable 'flag' to True.\n    flag = True\n    \n    # Loop through all powers of 2 from 0 to 31 (inclusive).\n    for i in range(32):\n        # Check if n is a multiple of 2 raised to i.\n        if n % (2 ** i) == 0:\n            # If yes, subtract 2 raised to i from n.\n            n -= 2 ** i\n        else:\n            # If not, set the flag variable to False.\n            flag = False\n            break\n    \n    # If the flag variable is True after the loop, n can be represented as a sum of non-zero powers of 2.\n    return flag"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    # Split the binary into a list of digits\n    digits = list(binary)\n    # Initialize a variable to keep track of the sum of powers of 2\n    sum_of_powers_of_two = 0\n    # Loop through the digits in the list\n    for digit in digits:\n        # If the digit is '1', add 2 to the sum of powers of 2\n        if digit == '1':\n            sum_of_powers_of_two += 2\n        # If the digit is '0', do nothing\n    # Check if the sum of powers of 2 is equal to the given number\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(31, -1, -1):\n        power = 2**i\n        if power <= n:\n            if n - power == 0:\n                return True\n            n -= power\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as sum of non-zero powers of 2, otherwise returns False.\n    \"\"\"\n    # Convert n to binary\n    binary = bin(n)[2:] # [2:] is used to remove the '0b' prefix from the binary representation\n    \n    # Iterate through each digit in the binary representation\n    for digit in binary: \n        if digit!= '0': # Check if the digit is not 0\n            \n            # Calculate the power of 2 for that digit\n            power = len(binary) - binary.index(digit) - 1\n            \n            # Check if the power of 2 is less than or equal to the number of set bits in the binary representation\n            if 2 ** power > bin(n).count('1'): \n                return False # If the condition is not satisfied, return False\n    \n    # If all conditions are satisfied, return True\n    return True"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            for sub_item in item:\n                result.append(sub_item)\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(extract_singly(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for item in test_list:\n        if type(item) == list:\n            for num in item:\n                singly_list.append(num)\n        else:\n            singly_list.append(item)\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists as input and flattens it into a single set of numbers.\n    \"\"\"\n    # Initialize an empty set to store the flattened numbers.\n    flattened_set = set()\n    \n    # Iterate over each sublist in the input list.\n    for sublist in test_list:\n        # Iterate over each element in the sublist.\n        for element in sublist:\n            # Add each element to the flattened set.\n            flattened_set.add(element)\n    \n    # Convert the set to a list and return it.\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements in ascending order using pancake sorting.\n    '''\n    n = len(nums)\n    # Start from the last element and move up to the second element\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_idx = nums.index(max(nums[:i+1]))\n        # Reverse the sublist from 0 to max_idx\n        nums[:max_idx+1] = nums[:max_idx+1][::-1]\n        # Reverse the entire list\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Iterate over the indices of the input array\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted portion of the array\n        max_index = nums.index(max(nums[:n-i]))\n        # Reverse the order of this portion of the array\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Reverse the entire array\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Start from the last element and move towards the beginning\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        \n        # Move the maximum element to the beginning of the list\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Reverse the entire list to sort it\n        nums[:i+1] = reversed(nums[:i+1])\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    '''\n    n = len(nums)\n    \n    # Reverse the entire list\n    for i in range(n//2):\n        nums = flip(nums, i)\n    \n    # Sort the list from largest to smallest\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums = flip(nums, j)\n                \n    return nums\n\ndef flip(nums, k):\n    '''\n    Reverse the first k elements of the list.\n    '''\n    start = 0\n    end = k\n    \n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    This function implements the Pancake Sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # move the maximum element to the beginning of the list if it is not already there\n        if max_index!= 0:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # reverse the entire list\n        nums = nums[:i+1][::-1] + nums[i+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # move the maximum element to the beginning of the unsorted part\n        nums = [nums[max_index]] + nums[:max_index] + nums[max_index+1:]\n        # reverse the unsorted part\n        nums = nums[:i+1][::-1] + nums[i+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # Start with the largest index i and move towards 0\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # If the index is different from i, move the largest element to the front of the list\n        if max_index!= i:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Reverse the list to put the largest element at the beginning.\n    nums = list(reversed(nums))\n    # Iterate over the list, swapping adjacent elements if necessary.\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the list.\n        max_idx = nums.index(max(nums[i:]))\n        # Move the largest element to its correct position.\n        nums[max_idx], nums[i] = nums[i], nums[max_idx]\n        # Reverse the sublist starting from the position of the largest element.\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of elements as input and sorts them using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Start from the complete list and work our way down to 1\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:i]))\n        # Move the maximum element to the end of the list\n        nums[:i], nums[max_index:max_index+1] = nums[max_index:max_index+1], nums[:i]\n        # Reverse the first i elements\n        nums[:i] = nums[:i][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n\n    # Find the maximum element in the list and its index\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # Reverse the list up to the maximum element\n    for i in range(max_index+1):\n        nums.reverse()\n\n    # Reverse the list again to get the sorted list\n    nums.reverse()\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of identical elements in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables to keep track of minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n    \n    # Loop through the array and update min_val and max_val as necessary\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    \n    # Compute and return the maximum absolute difference between min_val and max_val\n    return abs(max_val - min_val)"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    n = len(arr)\n    max_diff = 0\n    for i in range(n-1):\n        max_diff = max(max_diff, abs(arr[i+1]-arr[i]))  # Finding the maximum difference between any two elements\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function returns the maximum absolute difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = 0\n    n = len(arr)\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    max_diff = abs(arr[1] - arr[0])\n    \n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    n = len(arr)\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    This function returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*a + j*b == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the equation is solvable\n    if a*b == 0:\n        return None\n\n    # Find the solution using the extended Euclidean algorithm\n    d = extended_euclidean(a, b)[0]\n    x = (n*extended_euclidean(a, b)[1])//d\n    y = (n*extended_euclidean(a, b)[2])//d\n    \n    return (x, y)\n\ndef extended_euclidean(a, b):\n    '''\n    Returns the gcd and coefficients for ax + by = gcd(a, b).\n    '''\n\n    # Check if the equation is solvable\n    if b == 0:\n        return (a, 1, 0)\n\n    # Find coefficients for ax + by = gcd(a, b) using the extended Euclidean algorithm\n    d, s, t = extended_euclidean(b, a % b)\n    return (d, t, s - (a // b) * t)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if (a*x) % n == b:\n            y = (a*x) // n\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    for x in range(n+1):\n        if (a*x + b*n) % n == 0:\n            y = (a*x + b*n) // n\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if x*a % n == 0:\n            y = (n - x*a) // b\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if a*x % b == 0:\n            y = n // a*x // b\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    \n    if n % a == 0 and n % b == 0:\n        return (n//a, n//b)\n    \n    if a == 0 and n % b == 0:\n        return (0, n//b)\n    \n    if b == 0 and n % a == 0:\n        return (n//a, 0)\n    \n    if a < b:\n        a, b = b, a\n        n = -n\n    \n    for i in range(n, a-b+n+1):\n        if i % a == 0 and i % b == 0:\n            return (i//a, i//b)\n    \n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if n % (a*i + b) == 0:\n            x = i\n            y = (n // (a*i + b))\n            return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list after removing all the elements from list2 that are present in list1.\n    '''\n    for element in list2:\n        if element in list1:\n            list2.remove(element)\n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    # Create a new list to store the elements of list1 that are not in list2\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    return list(set(list1) - set(list2))"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list after removing all elements of list2 from list1.\n    \"\"\"\n    return [ele for ele in list1 if ele not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return n * (n + 1) // 2\n    else:\n        return (n * (n + 1) // 2) + (n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of the series up to\", n, \"is\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    This function calculates the sum (n - 2*i) from i=0 to n // 2.\n    '''\n    if n % 2!= 0:  # if n is odd\n        n -= 1  # make n even\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        n += 1\n    return sum([n - 2 * i for i in range(n // 2 + 1)])"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series (n-2i) for i=0 to n/2 (inclusive)\n    \"\"\"\n    sum = 0\n    for i in range(n//2+1):\n        sum += (n-2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of a series of numbers.\n\n    :param n: The number till which the series is to be generated.\n    :return: The sum of the series.\n    \"\"\"\n    sum = 0\n    for i in range(0, n//2 + 1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(i for i in range(n // 2 + 1))\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    if n % 2 == 1:\n        n -= 1\n    return sum(range(n // 2 + 1))"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / 2\n    A = tan(pi / s) * a ** 2\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given the length and number of sides.\n    '''\n    A = (0.25 * s * s * tan(pi / s)) / tan(pi / s)\n    return A * l"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter\n    p = s * l\n    \n    # calculate the area\n    a = (0.25 * p * p) / tan(pi/s)\n    \n    return a"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the polygon\n    a = l / (2 * tan(pi / s))\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (0.25 * a ** 2) * tan(pi / s)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given its side length and number of sides.\n    '''\n    return 0.5 * l * s * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * l * tan(pi / s))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.5 * s * l) / tan(pi / s)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\nn = int(input(\"Enter an integer: \"))\nif div_sum(n) == div_sum(n-1):\n    print(f\"{n} and {n-1} have the same sum of divisors.\")\nelse:\n    print(f\"{n} and {n-1} do not have the same sum of divisors.\")"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n//i:\n                div_list.append(n//i)\n    div_list = sorted(div_list)\n    return sum(div_list)\n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n and False otherwise.\n    '''\n    # Get the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.sort()\n    \n    # Check if the sum of the divisors is the same as n\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # get all divisors of n\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if i!= n//i:\n                divisors.add(n//i)\n    # check if sum of divisors is equal to n\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs_1 = []\n    divs_2 = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs_1.append(i)\n            divs_2.append(n//i)\n    return sum(divs_1) == sum(divs_2)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return sum(divisors)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_sum += i\n    if divisor_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) % 2!= 0:\n        return False\n    else:\n        sum1 = sum(divisors[:len(divisors)//2])\n        sum2 = sum(divisors[len(divisors)//2:])\n        if sum1 == sum2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum \n\nnum1 = int(input(\"Enter first number: \")) \nnum2 = int(input(\"Enter second number: \")) \nif div_sum(num1) == div_sum(num2): \n    print(\"The sum of the divisors of\", num1, \"and\", num2, \"are the same.\") \nelse: \n    print(\"The sum of the divisors of\", num1, \"and\", num2, \"are not the same.\") "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function calculates the sum of the divisors of a given integer.\n    '''\n    def divisor_sum(num):\n        '''\n        This nested function calculates the sum of the divisors of a given integer.\n        '''\n        divisor_sum = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisor_sum += i\n                if num // i!= i:\n                    divisor_sum += num // i\n        return divisor_sum\n    \n    # Find all pairs of integers (a, b) such that the sum of their divisors is equal to n.\n    pairs = []\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            if divisor_sum(a) + divisor_sum(b) == n:\n                pairs.append((a, b))\n    return pairs"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    count_dict = {}\n    for char in str1.lower():\n        if char.isalpha():\n            if char.lower() in count_dict:\n                count_dict[char.lower()] += 1\n            else:\n                count_dict[char.lower()] = 1\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the counts\n    counts = {}\n\n    # Loop through the characters in the string\n    for i in range(len(str1)):\n        # If the character is a letter, add it to the dictionary with its count\n        if str1[i].isalpha():\n            if str1[i] in counts:\n                counts[str1[i]] += 1\n            else:\n                counts[str1[i]] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # converting the string to lowercase\n    str1 = str1.lower()\n    # storing the number of characters in the string\n    n = len(str1)\n    # storing the count of characters at each position\n    count_list = [0] * 26\n    # iterating over the string\n    for i in range(n):\n        # checking if the character is an alphabet\n        if str1[i].isalpha():\n            # converting the character to lowercase\n            c = str1[i].lower()\n            # adding 1 to the count of characters at the corresponding position\n            count_list[ord(c) - 97] += 1\n    # printing the count of characters at each position\n    print(count_list)"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create a list of english alphabet letters\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # create a list to store the count of each character at the same position as the alphabet\n    count_list = [0] * len(alphabet)\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is an alphabet letter, add 1 to the count at the corresponding position in the count_list\n        if char in alphabet:\n            index = alphabet.index(char)\n            count_list[index] += 1\n    # return the count_list\n    return count_list"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase and remove all non-alphabetic characters\n    str1 = ''.join(char.lower() for char in str1 if char.isalpha())\n    \n    # Create a dictionary to store the count of each character at each position in the alphabet\n    char_count = {}\n    \n    # Loop through each character in the string and add it to the dictionary\n    for i, char in enumerate(str1):\n        if char not in char_count:\n            char_count[char] = [0] * 26\n        char_count[char][i % 26] += 1\n        \n    # Loop through the dictionary and count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for key in char_count:\n        if char_count[key] == [1] * 26:\n            count += 1\n            \n    # Return the count of characters that occur at the same position as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes in a string as input and returns the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count_dict = {}\n\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n\n    # Loop through the string and count the number of characters in each position\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            if i in count_dict:\n                count_dict[i] += 1\n            else:\n                count_dict[i] = 1\n\n    # Count the number of characters that occur at the same position in the string as in the English alphabet (case insensitive)\n    same_position_count = 0\n    for char in str1:\n        if char in alphabet:\n            index = str1.index(char)\n            if index in count_dict and count_dict[index] > 0:\n                same_position_count += 1\n                count_dict[index] -= 1\n\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    # convert the string to lowercase\n    str1 = str1.lower()\n    # create an empty list to store the count of characters at each position\n    count_list = [0] * 26\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is an alphabet\n        if char.isalpha():\n            # get the index of the character in the English alphabet\n            index = ord(char) - ord('a')\n            # increment the count of characters at the index position\n            count_list[index] += 1\n    # return the count list\n    return count_list"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0]*26\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char)\n            count[index] += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = []\n    \n    # convert the string to lowercase and remove spaces\n    str1 = str1.lower().replace(' ', '')\n    \n    # iterate over the alphabet and count the number of characters at each position in the string\n    for char in alphabet:\n        count.append(str1.count(char))\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n    for char in str1:\n        if char.isalpha() and char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            if index in count_dict:\n                count_dict[index] += 1\n            else:\n                count_dict[index] = 1\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # find the maximum power of 2 less than or equal to n\n    max_power = 1 << (n.bit_length() - 1)\n\n    # if n is already a power of 2, return n\n    if max_power == n:\n        return n\n    \n    # otherwise, return the next power of 2\n    return max_power << 1\n"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n)) - 2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        # If n is a power of 2, return it\n        return n\n    else:\n        # Otherwise, find the smallest power of 2 greater than or equal to n\n        return 1 << len(bin(n - 1))"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the next power of 2 by checking if n is a power of 2\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    \n    # If n is already a power of 2, return n\n    if power_of_2 == n:\n        return n\n    \n    # Otherwise, return the next power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(len(bin(n-1))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Calculate the logarithm base 2 of n\n    log_n = n.bit_length()\n    \n    # Calculate the next power of 2\n    next_power = 1 << log_n\n    \n    # Return the next power of 2\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 that is greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (int(n) - 1).bit_length()"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes two arguments:\n    a - list to search in\n    x - number to search for\n    \n    It returns the number of occurrences of x in the list a.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for elem in a:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments:\n    a: a list of integers\n    x: an integer to be searched in the list\n\n    It returns the number of occurrences of x in the list a.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes in a list and a number as inputs and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range. The second index must be greater than or equal to the first index.\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n    list1 (list): A list of integers\n    m (int): The start index of the range\n    n (int): The end index of the range\n\n    Returns:\n    int: The sum of the numbers in the specified range\n\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum_of_range = 0\n\n    # Loop through the range of indices and add the numbers to the sum\n    for i in range(m, n+1):\n        sum_of_range += list1[i]\n\n    return sum_of_range"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function finds the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    This function takes a string s as input and returns the number of times the string'std' appears in it.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s)-2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the tuple have the same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        first_type = type(test_tuple[0])\n        for elem in test_tuple:\n            if type(elem)!= first_type:\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # Check if all the elements in the tuple have the same data type or not\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in a tuple have the same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in tuple have the same data type,\n    otherwise returns False.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the index of the first element greater than or equal to x in arr\n    left = bisect_left(arr, x)\n    # If there are no elements greater than or equal to x, the array cannot contain a majority element\n    if left == n:\n        return False\n    # Find the index of the last element less than or equal to x in arr\n    right = bisect_right(arr, x) - 1\n    # If the number of elements between these indices is greater than n/2, the majority element must be x\n    return right - left + 1 > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns True if the element x is the majority element in the given sorted array,\n    False otherwise.\n\n    :param arr: A sorted array of integers\n    :param n: The length of the array\n    :param x: An integer\n    :return: True if x is the majority element, False otherwise\n    \"\"\"\n    if n == 1:\n        return arr[0] == x\n\n    if x == arr[n // 2]:\n        return True\n\n    if x > arr[n // 2]:\n        return is_majority(arr[n // 2 + 1:], n - n // 2 - 1, x)\n\n    return is_majority(arr[:n // 2], n // 2, x)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    \n    # Traverse through the array\n    for i in range(n):\n        # If element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n    \n    # If count is greater than n/2, return True\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize count variable to zero\n    count = 0\n    \n    # Traverse the array and count the frequency of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Check if the count is greater than n/2\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize variables to count the number of occurrences of x in the array and the index of the last occurrence of x\n    count = 0\n    last_index = -1\n    \n    # Loop through the array and count the number of occurrences of x and update last_index\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            last_index = i\n    \n    # If count is greater than n/2, return True, else return False\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    # Find the index of the first occurrence of x in the array\n    i = binary_search(arr, n, x)\n    if i == -1:\n        return False\n\n    # Check if the element occurs more than n/2 times\n    count = 1\n    j = i + 1\n    while j < n and arr[j] == x:\n        count += 1\n        j += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef binary_search(arr, n, x):\n    # Implement binary search to find the first occurrence of x in the array\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] < x):\n            return mid\n        elif arr[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a number as input and returns the number of set bits in it.\n    '''\n    count = 0\n    # Iterate through all bits in the number\n    while n > 0:\n        # If the rightmost bit is set, increment the count\n        if n & 1:\n            count += 1\n        # Right shift the number by one bit to move to the right\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the number of set bits in the binary representation of that integer.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in the binary representation of that integer.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function will count the number of set bits in a given number.\n    \"\"\"\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values of the string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an input and removes the characters which have odd index values of the string.\n    '''\n\n    # Initialize an empty string to store the final result\n    result = \"\"\n\n    # Loop through each character in the input string\n    for i in range(len(str)):\n        # Check if the index of the character is odd\n        if i % 2!= 0:\n            # If the index is odd, skip the character and move on to the next one\n            continue\n        # If the index is even, append the character to the result string\n        result += str[i]\n\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as an argument and returns a new string that contains only the characters with even index values.\n    \"\"\"\n    new_str = \"\"\n    for i in range(0, len(str), 2):\n        new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a string that contains only characters at even index values.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Function to check if all the bits in the given range are unset or not.\n    :param n: integer, number whose bits are to be checked.\n    :param l: integer, left end of the range.\n    :param r: integer, right end of the range.\n    :return: boolean, True if all the bits are set, False otherwise.\n    \"\"\"\n\n    # Perform a bitwise AND operation with all 1's and the range, to get the bits set in the range.\n    mask = ((1 << (r+1)) - 1) & (~(1 << (l)))\n\n    # Check if the result is equal to the original number. If yes, all bits are set in the range.\n    return n & mask == n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    n: an integer representing the number whose bits are to be checked.\n    l: an integer representing the starting index of the range.\n    r: an integer representing the ending index of the range.\n\n    It returns True if all the bits are set in the given range and False otherwise.\n    \"\"\"\n\n    # Create a mask with all bits set to 1.\n    mask = (1 << r) - (1 << l) - 1\n\n    # Check if all the bits are set in the given range.\n    if (n & mask) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # left shift n to the l-th position and then perform a bitwise AND operation with n\n    # the result will be 0 if all the bits are set in the given range, otherwise it will be non-zero\n    result = (n << l) & n\n    # right shift n to the r-th position and then perform a bitwise AND operation with n\n    # the result will be 0 if all the bits are set in the given range, otherwise it will be non-zero\n    result &= (n >> r)\n    # if result is 0, all the bits are unset in the given range\n    return result == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments:\n    n - an integer representing the number to be checked\n    l - an integer representing the starting index of the range\n    r - an integer representing the ending index of the range\n    \n    It returns True if all the bits are set in the given range, otherwise False.\n    \"\"\"\n    # Create a mask to select the bits in the given range\n    mask = ((1 << (r + 1)) - 1) - ((1 << l) - 1)\n\n    # Check if all the bits in the given range are set in the number\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function takes three arguments -\n    n: a number which has to be checked for all bits set or not.\n    l: left end of the range.\n    r: right end of the range.\n    \"\"\"\n    # To check whether all the bits are set in the given range or not.\n    # We need to check if the bits from right end of the range to the left end of the range are set or not.\n    # If the bits are set, it means that all the bits are set in the given range.\n    for i in range(r, l-1, -1):\n        if (n & (1 << i)) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # calculate the mask for the given range\n    mask = ((1 << r) - 1) ^ ((1 << l) - 1)\n    \n    # check if the given number has all the bits set in the given range or not\n    if (n & mask) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Create a binary number with only the rightmost bit set to 1\n    max_num = (1 << r) - 1\n    \n    # Check if the max number has all the bits set to 1\n    if (max_num & n) == max_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Check whether all the bits are set in the given range or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        mid = (l + r) // 2\n        if mid < l or mid > r:\n            return True\n        elif mid >= l and mid <= r:\n            if mid == l:\n                if n & 1 == 1:\n                    return False\n                else:\n                    return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)\n            elif mid == r:\n                if n & 1 == 1:\n                    return False\n                else:\n                    return all_Bits_Set_In_The_Given_Range(n >> 1, l, r)\n            else:\n                if n & 1 == 1:\n                    return False\n                else:\n                    return all_Bits_Set_In_The_Given_Range(n >> 1, l, mid - 1) and all_Bits_Set_In_The_Given_Range(n >> 1, mid + 1, r)\n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    Input:\n    - n: An integer representing the number whose bits are to be checked.\n    - l: An integer representing the left endpoint of the range.\n    - r: An integer representing the right endpoint of the range.\n    Output:\n    - A boolean value indicating whether all the bits are set in the given range or not.\n    '''\n    # To check whether all the bits are set or not, we need to check whether all the bits in the range [l, r] are set or not.\n    # We can check this by using the bitwise AND operator (&) to check whether all the bits in the range are set or not.\n    # If all the bits are set, the result of the AND operation will be the same as the number itself.\n    # Otherwise, it will be zero.\n    mask = (1 << r) - (1 << l)  # creates a mask that has a 1 in each bit from l to r (inclusive)\n    return n & mask == n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check whether the given range is valid or not.\n    if r < l:\n        return False\n\n    # To check whether all bits are set in the given range or not.\n    for i in range(l, r+1):\n        if (n & (1 << i-l))!= 0:\n            return False\n\n    # If all bits are unset in the given range, return True.\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i - len(negatives)]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # create two separate lists to store negative and positive elements\n    neg = []\n    pos = []\n    \n    # iterate over the first n elements of the array and append them to the corresponding list\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n            \n    # sort both lists in ascending order\n    neg.sort()\n    pos.sort()\n    \n    # create a new array to store the re-arranged elements\n    new_arr = neg + pos\n    \n    # return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i - len(negatives)]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    negatives = [num for num in arr if num < 0][:n//2]\n    positives = [num for num in arr if num >= 0][:n//2]\n    arr[:n//2] = negatives[::-1]\n    arr[n//2:] = positives[::-1]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Separate negative and positive elements into two separate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n            \n    # Sort the negative and positive elements separately\n    neg_list.sort()\n    pos_list.sort()\n    \n    # Combine the sorted negative and positive elements to get the final result\n    arr[:n] = neg_list + pos_list\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n    sorted_arr = pos + neg\n    return sorted_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    arr[:n] = neg + pos\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two empty lists to store negative and positive elements\n    negatives = []\n    positives = []\n    \n    # Iterate over the first n elements of the array\n    for i in range(n):\n        # If the element is negative, append it to the negatives list\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        # If the element is positive, append it to the positives list\n        else:\n            positives.append(arr[i])\n    \n    # Sort the negatives list in descending order\n    negatives.sort(reverse=True)\n    \n    # Iterate over the remaining elements of the array\n    for i in range(n, len(arr)):\n        # If the element is negative, append it to the negatives list\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        # If the element is positive, append it to the positives list\n        else:\n            positives.append(arr[i])\n    \n    # Concatenate the negatives and positives lists to form the final array\n    final_arr = negatives + positives\n    \n    # Return the final array\n    return final_arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # iterate through the given array and separate negative and positive elements into their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # sort the negative and positive lists in ascending order\n    neg_list.sort()\n    pos_list.sort()\n    \n    # iterate through the original array and replace negative and positive elements with sorted versions from their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = neg_list.pop(0)\n        else:\n            arr[i] = pos_list.pop(0)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two empty arrays, one for negative elements and one for positive elements\n    negatives = []\n    positives = []\n    \n    # Iterate through the first n elements of the array and append them to the appropriate array\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # Sort the negative array in descending order\n    negatives.sort(reverse=True)\n    \n    # Insert the negative elements into the first n elements of the original array\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n    \n    # Append the positive elements to the end of the original array\n    arr[n:] = positives\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character provided.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with the given character.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a string with a specified character and returns the modified string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef largest_numbers(list1, n):\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap\n\nlist1 = [4, 5, 2, 1, 3, 5, 2, 3, 4, 5]\nn = 3\nprint(largest_numbers(list1, n))"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    This function takes a list of numbers as input and returns the n largest numbers in the list.\n    \"\"\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for num in lst[n:]:\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = list1[:n]  # create a heap of the first n items in the list\n    heapq.heapify(heap)  # convert the list to a heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:  # if the current item is larger than the smallest item in the heap,\n            heapq.heappop(heap)  # remove the smallest item from the heap\n            heapq.heappush(heap, list1[i])  # add the current item to the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in list1[n:]:\n        if i > heap[0]:\n            heapq.heapreplace(heap,i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef largest_numbers(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function finds the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\n\nlateral_surface = lateralsuface_cylinder(r, h)\nprint(\"The lateral surface area of the cylinder is:\", lateral_surface)"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    lateralsurface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns its lateral surface area.\n    \"\"\"\n    lateral_area = 2 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * (r + h)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    print(\"The lateral surface area of the cylinder is:\",lateral_area,\"square units.\")"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface\n\nprint(\"Lateral surface area of a cylinder: \", lateralsurface_cylinder(5, 10))"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return surface_area"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length as input and returns the volume of a cube.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    This function takes in a single argument l, which represents the side length of a cube.\n    It returns the volume of the cube as an integer value.\n    '''\n    volume = l ** 3  # calculate the volume using the side length\n    return volume  # return the volume as an integer value"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    This function takes in the length of a cube's side as a parameter and returns its volume.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes a number as input and returns a number with all even bits set.\n    '''\n    mask = 0xAAAAAAAA # A mask with alternating 0's and 1's\n    return n ^ mask # XORing the mask with the number will set all even bits of the number"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    return (n & 0xAAAAAAAA) | ((n >> 1) & 0x55555555)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Initialize the result variable\n    result = 0\n    # Loop through each bit of the binary string\n    for bit in binary_str:\n        # If the bit is even, set the corresponding bit in the result variable\n        if int(bit) % 2 == 0:\n            result |= (1 << int(binary_str, 2).index(bit))\n    # Return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    # To set all even bits, we can use bitwise OR operation with a mask\n    mask = 0xAAAAAAAA\n    # Apply the mask to the number\n    result = n | mask\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # Iterate over all even bits\n    for i in range(0, 32, 2):\n        # Set the i-th bit of n to 1\n        n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1.\n    '''\n    mask = 0xAAAAAAAA # Set all even bits to 1 in binary form\n    return n & ~mask   # Set all even bits of n to 0 using the mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    return (n | (n >> 1)) & 0x55555555"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer as input and sets all the even bits of the number to 1.\n    \"\"\"\n    # Iterate through each bit of the number and set it to 1 if it is even\n    for i in range(0, 32):\n        if n & (1 << i):\n            if i % 2 == 0:\n                n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    mask = 0xAAAAAAAA\n    return (n & ~mask) | (n << 1 & mask)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    # Loop through all possible substrings of the given string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is non-empty\n            if len(str[i:j]) > 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    prev = 1\n    \n    # Loop through all possible sequences\n    for i in range(n):\n        count += m - prev + 1\n        prev = prev * 2\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, m + 1):\n        if i >= 2:\n            prev = i // 2\n            if prev >= 2:\n                count += get_total_number_of_sequences(prev - 1, n - 1)\n        if i == 1:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n\n    # Initialize the list with the first element\n    seq_list = [i for i in range(m//2+1, m+1)]\n\n    # Compute the sequences of length n-1\n    subseq_list = get_total_number_of_sequences(m, n-1)\n\n    # Multiply each element in the subsequence list by 2 and add it to the list\n    for i in range(len(subseq_list)):\n        seq_list.append(subseq_list[i]*2)\n\n    return seq_list"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    \n    previous_seq = [1]\n    total = 0\n    \n    for i in range(2,n+1):\n        new_seq = []\n        for j in range(len(previous_seq)):\n            for k in range(previous_seq[j],m,previous_seq[j]):\n                new_seq.append(k)\n            if previous_seq[j] * 2 <= m:\n                new_seq.append(previous_seq[j]*2)\n        previous_seq = new_seq\n        total += len(previous_seq)\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, m + 1):\n        count += get_number_of_sequences(i, i, m, n - 1)\n    return count\n\ndef get_number_of_sequences(start, previous, m, n):\n    \"\"\"\n    This function calculates the number of possible sequences of length n, starting with a sequence of\n    length 1 with the first element equal to start, and each subsequent element greater than or equal to\n    twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(previous * 2, m + 1):\n        count += get_number_of_sequences(start, i, m, n - 1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    This function takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(m//2, m+1):\n            total_sequences += get_total_number_of_sequences(i, n-1)\n        return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n\n    # initialize the sequence with the first element\n    current_sequence = [1]\n\n    # iterate through each element of the sequence\n    for i in range(n - 1):\n        # add the next element to the sequence\n        next_element = current_sequence[-1] * 2\n        if next_element <= m:\n            current_sequence.append(next_element)\n        else:\n            current_sequence.append(m)\n\n        # if the sequence is of length n, increment the total number of sequences\n        if len(current_sequence) == n:\n            total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return (m - 1) * m // 2\n    else:\n        total = 0\n        for i in range(1, m):\n            if i % 2 == 0:\n                total += (m - i) // 2\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        count += (m - 2 * i) * (i + 1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    if n == 1:\n        return m // 2 + 1\n    else:\n        num_sequences = get_total_number_of_sequences(m,n-1)\n        num_even = get_total_number_of_sequences(m,n-2)\n        num_odd = get_total_number_of_sequences(m,n-1) - num_even\n        return num_sequences + num_even + num_odd"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    This function takes two lists as inputs and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nnew_list = replace_list(list1, list2)\nprint(new_list)"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\nstring = input(\"Enter a string: \")\nprint(\"The total number of characters in the string is:\", count_charac(string))"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_sqrt = math.ceil(sqrt_N)\n    return int(next_sqrt**2)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return root * root + 1"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if int(math.sqrt(N))**2 == N:\n        return (int(math.sqrt(N))+1)**2\n    else:\n        return int(math.sqrt(N))+1\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # calculate the square root of the given number to get the upper limit of the perfect squares\n    root = int(math.sqrt(N))\n    # increment the square root by one to get the next perfect square\n    root += 1\n    # calculate the square of the new root\n    result = root * root\n    # return the new perfect square\n    return result"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.ceil(math.sqrt(N))\n    return x*x\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    while True:\n        next_square = root * root\n        if next_square > N:\n            return next_square\n        root += 1"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number.\n    '''\n    return math.ceil(math.sqrt(N))**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Round the square root to the nearest integer\n    sqrt_N = round(sqrt_N)\n\n    # Add 1 to the square root to get the next perfect square\n    next_square = sqrt_N + 1\n\n    # Return the next perfect square\n    return next_square**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    next_sqrt_N = sqrt_N + 1\n    next_square = next_sqrt_N ** 2\n    \n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    root = math.floor(math.sqrt(N))\n    return root**2 + (root+1)**2"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for the maximum sum and the ending index of the bitonic subsequence\n    max_sum = float('-inf')\n    end = -1\n    # Loop through the array and find all the increasing subsequences\n    for i in range(n):\n        # Initialize variables for the current increasing subsequence\n        current_sum = arr[i]\n        start = i\n        # Loop through the remaining part of the array to find the maximum sum of the current increasing subsequence\n        for j in range(i+1, n):\n            if arr[j] > current_sum:\n                current_sum += arr[j]\n            else:\n                # If the subsequence is bitonic, update the maximum sum and the ending index\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    end = j\n                # Reset the variables for the next subsequence\n                current_sum = arr[j]\n                start = j\n    # Check if there is a bitonic subsequence at the beginning of the array\n    if end!= -1 and start == 0:\n        if arr[end] > max_sum:\n            max_sum = arr[end]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if l == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][k] + dp[k+1][j] for k in range(i, j))\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            dp[i][j] = max(arr[i], arr[j]) + dp[i+1][j-1]\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Initialize the first row with the first element of the array.\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill the remaining cells of the table using the recurrence relation.\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n\n            # If the current subarray is increasing, then the maximum sum is the sum of the first and last element of the subarray.\n            if arr[i] < arr[j]:\n                dp[i][j] = arr[i] + arr[j]\n            else:\n                # If the current subarray is decreasing, then the maximum sum is the maximum sum of the two subarrays obtained by removing the first and last elements of the current subarray.\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # find the maximum bitonic subsequence ending at each index\n    max_ending_here = [0] * n\n    for i in range(n):\n        max_ending_here[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_ending_here[i] = max(max_ending_here[i], max_ending_here[j] + arr[i])\n\n    # find the maximum bitonic subsequence starting at each index\n    max_so_far = 0\n    for i in range(n):\n        max_so_far = max(max_so_far, max_ending_here[i])\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    # Base cases\n    for i in range(n):\n        dp[i][i] = arr[i]\n        \n    # Fill diagonal elements\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i][i] = arr[i]\n        else:\n            dp[i][i] = arr[i-1]\n            \n    # Fill rest of the matrix\n    for gap in range(1, n):\n        for i in range(0, n-gap):\n            j = i+gap\n            if arr[i] < arr[j] and dp[i+1][j-1] + arr[j] > dp[i][j]:\n                dp[i][j] = dp[i+1][j-1] + arr[j]\n            else:\n                dp[i][j] = dp[i][j-1]\n                \n    # Return the maximum sum\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n  # dp[i] stores the maximum sum of a bitonic subsequence ending at i\n    \n    for i in range(1, n):\n        dp[i] = arr[i]  # maximum sum of a bitonic subsequence ending at i is simply the value at i\n        \n        # check for all previous indices j < i and if arr[j] < arr[i], we can extend the subsequence starting at j\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize the maximum sum variable to -infinity\n    max_sum = float('-inf')\n\n    # Initialize the variables to store the previous and current indices\n    prev_index = -1\n    curr_index = 0\n\n    # Loop through the array\n    while curr_index < n:\n        # Check if the current element is greater than the previous element\n        if curr_index > 0 and arr[curr_index] > arr[curr_index - 1]:\n            # If it is, check if the subsequence between the previous and current indices is bitonic\n            # We can do this by checking if the subarray from the previous index to the current index is increasing and the subarray from the current index to the next index is decreasing\n            if arr[prev_index + 1: curr_index] == sorted(arr[prev_index + 1: curr_index]) and arr[curr_index: curr_index + 1] == sorted(arr[curr_index: curr_index + 1], reverse=True):\n                # If it is, add the sum of the subsequence to the maximum sum variable\n                max_sum = max(max_sum, sum(arr[prev_index + 1: curr_index]))\n\n        # Update the previous and current indices\n        prev_index = curr_index\n        curr_index += 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    inc = [0] * n\n    dec = [0] * n\n\n    # Find the maximum increasing subsequence for each index\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], dp[j] + 1)\n        dp[i] = inc[i]\n\n    # Find the maximum decreasing subsequence for each index\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[j] > arr[i]:\n                dec[i] = max(dec[i], dp[j] + 1)\n\n    # Find the maximum sum of bitonic subsequence for each index\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[i] + dec[i] - 1)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize the maximum sum variable to the first element of the array\n    max_sum = arr[0]\n\n    # Initialize two variables to keep track of the current increasing and decreasing subsequence sum\n    inc_sum = arr[0]\n    dec_sum = 0\n\n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # If the current element is greater than the previous element, add it to the increasing subsequence sum\n        if arr[i] > arr[i-1]:\n            inc_sum += arr[i]\n        # If the current element is less than the previous element, add it to the decreasing subsequence sum\n        else:\n            dec_sum += arr[i]\n\n        # Update the maximum sum variable if the sum of the current bitonic subsequence is greater than the maximum sum so far\n        max_sum = max(max_sum, inc_sum + dec_sum)\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2  # start with an approximate value\n    while abs(approx * approx - number) > 0.0001:  # continue until the difference is small enough\n        approx = (approx + number / approx) / 2  # use the babylonian method\n    return approx"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.001:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the babylonian method.\n    '''\n    guess = number / 2  # initial guess is the half of the number\n    while abs(guess * guess - number) > 0.00001:  # loop until the difference between the square of the guess and the number is less than 0.00001\n        guess = (guess + number / guess) / 2  # update the guess by averaging the current guess and the number divided by the current guess\n    return guess  # return the computed square root"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    while True:\n        y = (x + (number / x)) / 2\n        if abs(x - y) < 0.0001:\n            break\n        x = y\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001  # Tolerance for convergence\n    guess = number/2  # Initial guess for the square root\n    while abs(guess**2 - number) >= epsilon:\n        guess = (guess + number/guess)/2  # Use the babylonian method\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.0001 # set the tolerance\n    guess = number/2 # set an initial guess as the middle of the number\n    while abs(guess*guess - number) >= epsilon: # continue iterating until the difference between the guess squared and the number is less than the tolerance\n        guess = (guess + number/guess) / 2 # update the guess using the babylonian method\n    return guess # return the computed square root"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n    number: a positive integer or float to find the square root of\n\n    Returns:\n    The square root of the input number as a float\n    \"\"\"\n    epsilon = 0.0001 # Define the desired accuracy of the result\n    guess = number/2 # Start with an initial guess for the square root\n    while abs(guess**2 - number) >= epsilon: # Keep iterating until the desired accuracy is achieved\n        guess = (guess + number/guess) / 2 # Update the guess using the Babylonian method\n    return guess # Return the computed square root"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    while abs(guess*guess - number) >= 0.001:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2  # initial guess\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    This function finds the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n\n    # create a table to store intermediate results\n    # table[i][j] will be false if substring str[i..j] is not a palindrome\n    # table[i][j] will be true if substring str[i..j] is a palindrome\n    table = [[False for j in range(n)] for i in range(n)]\n\n    # all substrings of length 1 are palindromes\n    for i in range(n):\n        table[i][i] = True\n\n    # check for substrings of length greater than 1\n    max_len = 1  # length of longest palindrome subsequence found so far\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                # if first and last characters match, ignore it\n                if (j-i) == 1:\n                    table[i][j] = True\n                # else check for substrings of length greater than 2\n                else:\n                    table[i][j] = table[i+1][j-1]\n            else:\n                # if characters don't match, check for substrings of length 2\n                table[i][j] = table[i+1][j] or table[i][j-1]\n\n            # if the longest palindrome subsequence ends at this index\n            if table[i][j] and (j-i+1) > max_len:\n                max_len = j-i+1\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length greater than 1 \n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]) \n  \n    # Return length of LCS  \n    return L[0][n - 1] "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    # Initialize a table to store lengths of palindromic subsequences of all substrings\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 have only one character\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for len in range(2, n + 1):\n        for i in range(n - len + 1):\n            j = i + len - 1\n            if str[i] == str[j] and len == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D table to store lengths of longest palindromic subsequence\n    # for substrings of length i and j\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 have only one character\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j] and L == 2:\n                # If length of substring is 2 and characters match, then length is 2\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                # If length of substring is greater than 2 and characters match, then length is equal to length of substring - 2\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                # If length of substring is greater than 2 and characters do not match, then length is maximum of the lengths of substrings obtained by removing first and last characters of the substring and its reverse\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Longest palindromic subsequence will be the maximum value in the dp table\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j] and l == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Create a 2D table to store the lengths of longest palindromic subsequences.\n    # table[i][j] will store the length of LPS of substring str[i..j]\n    n = len(str)\n    table = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length 2\n    start = 0\n    end = 1\n    while end < n:\n        if str[start] == str[end]:\n            table[start][end] = 2\n            start += 1\n            end += 1\n        elif str[start]!= str[end]:\n            if table[start+1][end] > table[start][end-1]:\n                table[start][end] = table[start+1][end]\n            else:\n                table[start][end] = table[start][end-1]\n            start += 1\n            end -= 1\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a 2D table to store lengths of palindromes of substrings\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    maxLength = 1\n    for k in range(2, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n                maxLength = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                maxLength = max(maxLength, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return maxLength"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = sum(1.0/i for i in range(1, n+1))\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum(1.0 / i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to find their intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection set back to an array and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurences of the element in the tuple.\n\n    Args:\n    tup (tuple): The tuple in which we need to count the element.\n    x (any): The element which we need to count in the tuple.\n\n    Returns:\n    int: The number of times x occurs in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element in a list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result[1:]  # Return the list without the first element (which is the same as the last element)"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result[1:] # remove the first element since it's just the dummy element\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element as input, and returns a new list with the element inserted before each element in the original list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    '''\n    Inserts a given element before each element in a list and returns the resulting list.\n    '''\n    return [elem] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes a list and an element as input and returns a new list with the element inserted before each element in the original list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(f\"{num} in polar coordinates is {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar_coords.append((abs(num), cmath.phase(num)))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = round(abs(num), 2)\n        theta = round(cmath.phase(num), 2)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            phi = cmath.phase(num)\n            print(\"Polar form of\", num, \"is\", r, \"exp(i\", phi, \")\")\n        else:\n            print(num, \"is not a complex number\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of\", num, \"are\", polar)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes in a list of complex numbers and returns a list of their polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append([r, phi])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes in a list of complex numbers and returns a list of their polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coords.append(polar)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        polar_coordinates.append(polar)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers and returns a list of tuples containing the polar coordinates of the complex numbers.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in it.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of integer elements in the list.\n\n    :param lst: A list of elements\n    :return: Number of integer elements in the list\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the count of integers in the list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(c,) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]\n\nprint(combinations_colors(['red', 'green', 'blue'], 2))  # [('red','red'), ('red', 'green'), ('red', 'blue'), ('green','red'), ('green', 'green'), ('green', 'blue'), ('blue','red'), ('blue', 'green'), ('blue', 'blue')]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a list of primes less than n\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    # Return the length of the list of primes\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    \n    # iterate over all numbers from 2 to n\n    for i in range(2, n):\n        \n        # check if i is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # increment count if i is prime\n        if is_prime:\n            count += 1\n            \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of prime numbers found\n    count = 0\n    # Iterate over all the numbers from 2 to n-1\n    for i in range(2, n):\n        # Assume the number is prime and check if it is\n        is_prime = True\n        for j in range(2, i):\n            # If the number is divisible by any number other than 1 and itself, it is not prime\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the number is prime, increment the counter variable\n        if is_prime:\n            count += 1\n    # Return the count of prime numbers found\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Sort both tuples in ascending order\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    # Get the maximum elements from both tuples\n    max_tup1 = test_tup1[-1]\n    max_tup2 = test_tup2[-1]\n    \n    # Return the maximum elements\n    return max_tup1, max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples must be of the same length.\")\n        return None\n\n    # Initialize the result tuple with the first element of the first tuple\n    result_tup = (test_tup1[0],)\n    \n    # Iterate through the tuples and compare the elements\n    for i in range(1, len(test_tup1)):\n        # If the element in the first tuple is greater than the element in the second tuple, update the result tuple\n        if test_tup1[i] > test_tup2[i]:\n            result_tup = result_tup + (test_tup1[i],)\n        # If the element in the first tuple is less than or equal to the element in the second tuple, do nothing\n        else:\n            result_tup = result_tup + (test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples are not of equal length.\")\n\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = max_tup + (test_tup1[i],)\n        else:\n            max_tup = max_tup + (test_tup2[i],)\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n    \n    return tuple(max_tup)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return None\n\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length!\")\n        return\n\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = max_tup + (test_tup1[i],)\n        else:\n            max_tup = max_tup + (test_tup2[i],)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns the tuple with the maximum value.\n    '''\n    max_tup = ()\n    if test_tup1 > test_tup2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the maximum of the two tuples\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples should be of equal length.\")\n        return\n    \n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            max_tup = test_tup2\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            max_tup = test_tup2\n        elif test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n    \n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    count = 0\n    i = 2\n    while count < n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 2\n        if is_prime(num):\n            count += 1\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 10 # starting point of the search\n    count = 0\n    while count < n:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        if count == n:\n            return p\n        p += 2 # increment by 2 for the next iteration"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i) and is_prime(i - 2) and is_prime(i - 1):\n            count += 1\n        i += 1\n    return i - 3"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    # initialize variables\n    count = 0\n    prime = 2\n    # loop until n newman-shanks-williams primes have been found\n    while count < n:\n        # check if prime is newman-shanks-williams prime\n        if is_newman_prime(prime):\n            count += 1\n            if count == n:\n                return prime\n        prime += 1\n\ndef is_newman_prime(n):\n    \"\"\"\n    This function checks if a given number is a Newman-Shanks-Williams prime.\n    \"\"\"\n    # initialize variables\n    d = n - 1\n    s = 0\n    # loop through odd numbers up to n/2\n    for i in range(3, n+1, 2):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # add i to s if i is odd\n            if i % 2 == 1:\n                s += i\n            # subtract i from d if i is even and divisible by 3\n            elif i % 3 == 0:\n                d -= i\n    # check if n is a newman-shanks-williams prime\n    return (d == 0) or (n == 2 and s == 2)"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Check if n is less than 1 or not an integer\n    if n < 1 or not isinstance(n, int):\n        return None\n\n    # Initialize the variables for the algorithm\n    p = 2  # Initialize p as 2\n    k = 1  # Initialize k as 1\n    while True:\n        # Check if p is a newman-shanks-williams prime number\n        if is_prime(p):\n            k += 1\n            if k == n:\n                return p\n        # Check if p is a newman-shanks-williams composite number\n        else:\n            # Check if p^2 - 1 is a newman-shanks-williams prime number\n            p1 = p ** 2 - 1\n            if is_prime(p1):\n                k += 1\n                if k == n:\n                    return p1\n        # Increment p by 1\n        p += 1\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # Check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Check if n is divisible by 6k + 1 or 6k - 1\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % (i - 1) == 0 or n % (i + 1) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    \n    num = 3\n    count = 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 2\n    \n    return num - 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}th newman-shanks-williams prime number is {newman_prime(n)}\")"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2  # The first prime is 2\n    elif n == 2:\n        return 3  # The second prime is 3\n    else:\n        p = 5  # Start with the 5th prime\n        i = 2  # Start with the 2nd number to test\n        while i < n:\n            is_prime = True\n            for j in range(2, int(p ** 0.5) + 1):\n                if p % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                i += 1\n            if i == n:\n                return p\n            p += 2  # Only consider odd numbers\n        # If n is greater than the number of primes, return None\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    \n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i], )\n    else:\n        print(\"Error: Tuples must have the same length.\")\n        \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n        \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    return tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]/test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + ((test_tup1[i] / test_tup2[i]),)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([test_tup1[i] / test_tup2[i] for i in range(len(test_tup1))])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # Split the list into two parts where the length of the first part of the list is L\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Split the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n\n    # First, check if L is greater than the length of the list1\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list1\"\n\n    # If L is equal to the length of the list1, return a tuple with two identical lists\n    elif L == len(list1):\n        return (list1, list1)\n\n    # If L is less than the length of the list1, split the list into two parts and return a tuple with the two parts\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human years to dog years\n    d_age = h_age * 7\n    \n    # Return the dog's age\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # multiply human age by 7\n    dog_age = h_age * 7\n    # return the dog age in dog's years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Define the conversion factor from human years to dog years\n    conversion_factor = 7\n    \n    # Calculate the dog's age in dog's years\n    d_age = h_age * conversion_factor\n    \n    # Return the dog's age in dog's years\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Split a list for every nth element.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes a list S and an integer step as input. It splits the list S for every nth element,\n    where n is equal to the value of step. It returns a list of the resulting lists.\n    \"\"\"\n    if step == 1:\n        return S\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S):\n        return [S]\n    else:\n        return [S[:step]] + list_split(S[step:], step)"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list into smaller lists every nth element.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Split a list into sublists of size n.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube and calculates its lateral surface area.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its lateral surface area.\n    '''\n    # Calculate the lateral surface area of the cube using the formula\n    lateralsurface = 6 * l**2\n    \n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n odd numbers and add their squares to the sum\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n * 2, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\nprint(square_Sum(5)) # Output: 55 (2^2 + 3^2 + 5^2 + 7^2 + 9^2)"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum of squares to zero\n    sum_of_squares = 0\n    # loop through first n odd numbers and add their squares to sum of squares\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # add the square of the current odd number to the sum\n        sum += i**2\n    \n    # return the sum of squares of first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. n should be a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, 2*n+1, 2):\n            sum += i**2\n        return sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    A star number is a number that has the following property:\n\n    The sum of the digits of the number is equal to the square of the number.\n\n    Example: 45 -> 4^2 + 5^2 = 16 + 25 = 41\n\n    So, 45 is a star number.\n\n    The first few star numbers are:\n\n    1\n    2\n    3\n    5\n    7\n    12\n    15\n    22\n    26\n    35\n\n    So, to find then'th star number, we need to find the first star number that is greater than or equal to n.\n\n    We can use a loop to find the first star number that is greater than or equal to n.\n    We can start by setting i = 1 (the first star number) and then keep incrementing i until we find a star number that is greater than or equal to n.\n\n    For each i, we can calculate the sum of the digits of i and check if it is equal to the square of i.\n    If it is, then i is a star number and we return i.\n\n    If i is not a star number, we continue with the next value of i and check again.\n\n    If we reach a point where i is greater than n, then there are no more star numbers to find, so we return None.\n    '''\n\n    i = 1\n    while True:\n        if sum(int(digit) for digit in str(i)) == i**2:\n            if i >= n:\n                return i\n            i += 1\n        else:\n            i += 1\n        if i > n:\n            return None"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    This function finds then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    while count <= n:\n        print(star_num, end=' ')\n        count += 1\n        star_num += 2*count-1\n        \nn = int(input(\"Enter a number: \"))\nfind_star_num(n)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        print('*' * num)\n        num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    star = 1\n    while count < n:\n        star += 1\n        if (star * (2 * star - 1)) >= n:\n            count += 1\n    return star"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    # initialize variables\n    prev_num = 1\n    curr_num = 2\n    \n    # loop through n-1 times to find then'th star number\n    for i in range(n-1):\n        next_num = prev_num + curr_num\n        prev_num = curr_num\n        curr_num = next_num\n    \n    return curr_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    count = 1\n    while count <= n:\n        print('*' * i)\n        i += 1\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        # Recursive call to find the (n-1)'th star number\n        prev_num = find_star_num(n-1)\n        # Add 2 to the previous number for each recursive call\n        return prev_num + (n-1)*2"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Returns the ASCII value of a character.\n\n    :param k: A character (string of length 1).\n    :return: The ASCII value of the character as an integer.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n    arr: A list of numbers\n\n    Returns:\n    The sum of even numbers at even positions of the input list.\n    \"\"\"\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # calculate power of 5\n        power = i ** 5\n        \n        # add to sum\n        sum += power\n    \n    # return sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        num = 2*i + 2 # calculate the even natural number at index i\n        power = num**5 # raise the even number to the fifth power\n        sum += power # add the power to the sum\n        i += 1 # increment the index\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    i = 2\n    while i <= n:\n        result += i**5\n        i += 2\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    power_sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        power_sum += i ** 5\n        count += 1\n        if count == n:\n            break\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    while count < n:\n        sum += (2*count + 1)**5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tpl in test_list:\n        rear_elements.append(tpl[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tpl[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function finds the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    # Initialize sum to zero\n    even_sum = 0\n    # Loop through all even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient\n        coeff = math.comb(n, i)\n        # Check if index is even\n        if i % 2 == 0:\n            # Add binomial coefficient to sum if index is even\n            even_sum += coeff\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Args:\n    n (int): A positive integer\n\n    Returns:\n    int: The sum of even index binomial coefficients\n    \"\"\"\n    total = 0\n    for i in range(0, n+1, 2):\n        total += math.comb(n, i)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    # Initialize the sum to zero\n    even_sum = 0\n    \n    # Loop through all even indices from 0 to n\n    for i in range(0, n, 2):\n        # Calculate the binomial coefficient for the given i and n\n        binomial_coeff = math.comb(n, i)\n        # Add the binomial coefficient to the sum if it is even\n        if binomial_coeff % 2 == 0:\n            even_sum += binomial_coeff\n            \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0 \n    for i in range(0, n+1, 2): \n        sum += math.comb(n, i) \n    return sum "
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(0, n+1, 2):\n        sum_even_binomial += math.comb(n, i)\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns the volume of the cylinder.\n    \"\"\"\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159265 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n    \"\"\"\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Returns a dictionary with only entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        d (dict): The dictionary to filter.\n        n (int): The minimum value to include in the filtered dictionary.\n\n    Returns:\n        dict: A filtered dictionary.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[len(test_tup)-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < test_tup[1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in test_tup:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num == int((10*num-9)/9):\n            count += 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal = 0\n    while decagonal < n:\n        decagonal = (10 * i * i) + (5 * i) + 1\n        i += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    d = 10 * n * n + 1\n    while len(set(str(d)))!= 10:\n        d += 10\n    return d"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 10 * n * n + 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 10*n*(n-1) + 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal_num = 1\n    while count <= n:\n        decagonal_num += 10 * count\n        count += 1\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # initialize the variable to store the count of decagonal numbers\n    count = 0\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n\n        # calculate the nth decagonal number using formula\n        decagonal_num = (10**((i-1)//10 + 2) - 1) // 9 * (i-1) + 1\n\n        # check if the current number is decagonal\n        if decagonal_num == i:\n            count += 1\n\n    # check if the nth decagonal number is present in the loop\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * 10 + is_num_decagonal(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Returns True if n is a decagonal number, False otherwise.\n    A decagonal number is a number that is equal to the sum of the nth term of a geometric series with a common ratio of 11:1.\n    \"\"\"\n    if n == 0:\n        return False\n    x = 1\n    i = 1\n    while i <= n:\n        x += i * 11\n        i += 1\n    return x == n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if n is a decagonal number, else False.\n    A decagonal number is a number that follows the pattern 1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000, 100000000, 200000000, 300000000, 400000000, 500000000, 600000000, 700000000, 800000000, 900000000, 1000000000.\n    \"\"\"\n    if n % 10!= 0:\n        return False\n    n = n // 10\n    num = 1000000000\n    count = 1\n    while count <= n:\n        if num == n:\n            return True\n        num += 1000000000\n        count += 1\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    is_found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            is_found = True\n            index = i\n            break\n    return (is_found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Check if all elements in a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, otherwise it returns False.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements in a given list are unique or not.\n\n    Args:\n    test_list (list): The list whose elements need to be checked for uniqueness.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n\n    # Create an empty list to store the unique elements.\n    unique_list = []\n\n    # Iterate over the elements of the given list.\n    for element in test_list:\n        # Check if the element is already present in the unique list.\n        if element in unique_list:\n            # If it is already present, then the list contains duplicates.\n            return False\n        else:\n            # If the element is not present, then add it to the unique list.\n            unique_list.append(element)\n\n    # If all elements are unique, then the function returns True.\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    This function takes two lists as input and returns the element-wise subtraction of two lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]-nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Length of both lists should be equal.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of the same length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must be of equal length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        sub_list = []\n        for i in range(len(nums1)):\n            sub_list.append(nums1[i] - nums2[i])\n        return sub_list\n    else:\n        return \"The length of the two lists should be same.\""
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should have the same length.\"\n    else:\n        sub_list = []\n        for i in range(len(nums1)):\n            sub_list.append(nums1[i] - nums2[i])\n        return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1) == len(nums2):\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    else:\n        return \"The two lists must have the same length\""
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Create an empty list to store the differences\n    diff_list = []\n\n    # Iterate through the lists and subtract each element\n    for i in range(len(nums1)):\n        diff_list.append(nums1[i] - nums2[i])\n\n    return diff_list"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        if str(n).count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Iterate through each digit in the string\n    for digit in num_str:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if num_str.count(digit) > int(digit):\n            # If not, return False\n            return False\n    # If all digits meet the criteria, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    while n!= 0:\n        digit = n%10\n        freq[digit] += 1\n        if freq[digit] > digit:\n            return False\n        n = n//10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    frequency = {}\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    # Convert the integer to a string and store it in a list\n    n_list = list(str(n))\n    # Loop through the list and check the frequency of each digit\n    for digit in n_list:\n        if n_list.count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    # Convert the integer to a string to iterate over its digits\n    n_str = str(n)\n    # Iterate over each digit in the string\n    for digit in n_str:\n        # Convert the digit back to an integer and check its frequency\n        if int(digit) > n_str.count(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)] # Convert integer to list of digits\n    frequency = [digits.count(i) for i in range(10)] # Count frequency of each digit\n    return all(f <= i for i, f in enumerate(frequency)) # Check if frequency of each digit is less than or equal to the digit itself\n"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n): \n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer into a string to count the frequency of digits\n    num_str = str(n)\n    \n    # Initialize a dictionary to store the frequency of digits\n    digit_freq = {}\n    \n    # Iterate through each digit in the string and count its frequency\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    # Iterate through each digit in the dictionary and check its frequency\n    for digit in digit_freq:\n        if digit_freq[digit] > int(digit):\n            return False\n    \n    # If all digits have frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    # Convert the integer to a string to check its individual digits\n    digits = str(n)\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n    # Loop through each digit in the string and count its frequency\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function checks if all elements of the list are equal to the given element.\n    \"\"\"\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, else False.\n    \"\"\"\n    return all(elem == i for i in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Returns True if all elements of the list are equal to the given element.\n    \"\"\"\n    return all(elem == x for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(elem == element for elem in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n    \"\"\"\n    return all(elem == element for elem in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    This function checks if all elements in the list are equal to the given element.\n    '''\n    return all(i == element for i in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, element):\n    if len(set(lst)) == 1:\n        return True if element in set(lst) else False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): A list of elements\n    element (any): An element to check if all items in the list are equal to\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise\n    \"\"\"\n    return all(elem == element for elem in lst)\n"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile('a.*(b{2,3})$')\n    return pattern.match(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Check whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*(b{2,3})$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b{2,3})$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = 'abcabbba'\nprint(text_match_two_three(text)) # True\n\ntext = 'abcbbbba'\nprint(text_match_two_three(text)) # True\n\ntext = 'abcbbb'\nprint(text_match_two_three(text)) # False\n\ntext = 'abcabcba'\nprint(text_match_two_three(text)) # False\n"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*(b{2,3})$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Find the maximum sum of a contiguous subarray\n    def max_sub_array_sum(arr): \n        if len(arr) == 1: \n            return arr[0] \n        else: \n            mid = len(arr) // 2 \n            left_sum = max_sub_array_sum(arr[:mid]) \n            right_sum = max_sub_array_sum(arr[mid:]) \n            return max(left_sum, right_sum, sum(arr)) \n  \n    # Find the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    max_sum = 0 \n    for i in range(k): \n        max_sum += max_sub_array_sum(a) \n    return max_sum "
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        curr_sum = 0\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the total sum of original array\n    total_sum = sum(a)\n    \n    # Calculate the sum of each subarray when repeated k times\n    subarray_sum = [0] * (n+1)\n    for i in range(n+1):\n        subarray_sum[i] = (a[i%n] * (k+1)) * (i//n)\n    \n    # Calculate the maximum sum of subarrays when repeated k times\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            curr_sum = subarray_sum[j] - subarray_sum[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    \n    return max_sum if max_sum <= total_sum else None"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the total sum of the original array\n    total_sum = sum(a)\n    \n    # Calculate the sum of each contiguous subarray of length k\n    subarray_sum = [sum(a[i:i+k]) for i in range(n-k+1)]\n    \n    # Find the maximum sum of a contiguous subarray in the modified array\n    max_subarray_sum = max(subarray_sum)\n    \n    # Multiply the maximum sum by k to get the maximum sum of the original array repeated k times\n    max_sum = max_subarray_sum * k\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k): \n        curr_sum = 0\n        for j in range(n): \n            curr_sum += a[j] \n        if curr_sum > max_sum: \n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            curr_sum = sum(a[i:j]) * k\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize max_sum and sum with the first element of the array.\n    max_sum = sum = a[0]\n\n    # Traverse the array from index 1 to k.\n    for i in range(1, k):\n        # Add the element to the sum.\n        sum += a[i]\n\n        # Update the max_sum if the sum is greater than the current max_sum.\n        max_sum = max(max_sum, sum)\n\n    # Initialize a variable to store the maximum sum of the repeated array.\n    max_sum_repeated = sum = 0\n\n    # Traverse the array from index 0 to n-1.\n    for i in range(n):\n        # Add the element to the sum.\n        sum += a[i]\n\n        # Update the max_sum_repeated if the sum is greater than the current max_sum_repeated.\n        max_sum_repeated = max(max_sum_repeated, sum)\n\n    # Return the maximum sum of the repeated array.\n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Step 1: Find the sum of original array\n    sum_of_original_array = sum(a)\n    \n    # Step 2: Multiply the sum of original array by k\n    sum_of_modified_array = sum_of_original_array * k\n    \n    # Step 3: Initialize variables for max_sum and current_sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Step 4: Calculate sum of each sub-array and keep track of maximum sum found so far\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k-1:\n            current_sum -= a[i-k+1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a_new = a * k  # repeat the array k times\n    max_sum = 0  # initialize max_sum as zero\n    curr_sum = 0  # initialize curr_sum as zero\n    for i in range(n * k):\n        curr_sum += a_new[i]  # add current element to current sum\n        if curr_sum > max_sum:  # if current sum is greater than max_sum, update max_sum\n            max_sum = curr_sum\n        if curr_sum < 0:  # if current sum becomes negative, reset curr_sum to zero\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return 4 + (2 * (n - 1))**2"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**2\n        count += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n            max_list = [list1[i]]\n        elif len(list1[i]) == max_length:\n            max_list.append(list1[i])\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n            max_list = sub_list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = [sub_list]\n        elif len(sub_list) == max_len:\n            max_list.append(sub_list)\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_list = list1[i]\n    \n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)] \n    for i in range(n+1): \n        dp[i][0] = 1 \n    for j in range(1, k+1): \n        dp[1][j] = j-1 \n    for i in range(2, n+1): \n        for j in range(1, k+1): \n            dp[i][j] = sum(dp[i-1][:j]) \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    dp[1][1] = 1\n    dp[1][2] = 1\n    dp[2][1] = 2\n    dp[2][2] = 1\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] + dp[i-2][j]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if k == 1:\n        return n\n    if n == 1:\n        return k\n    \n    dp = [[0 for j in range(k)] for i in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    \n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j >= 1:\n                dp[i][j] += dp[i-1][j-1]\n            if j >= 2:\n                dp[i][j] += dp[i-1][j-2]\n                \n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function takes two arguments:\n    n: the number of posts in the fence\n    k: the number of different colors\n    \n    It returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    \"\"\"\n    # Initialize a list of lists to represent the fence\n    fence = [[0 for _ in range(k)] for _ in range(n)]\n    \n    # Initialize the first two posts as different colors\n    fence[0][0] = 1\n    fence[1][0] = 1\n    \n    # Fill in the rest of the fence\n    for i in range(2, n):\n        for j in range(k):\n            # Add up all the possible ways of painting the previous two posts\n            fence[i][j] = fence[i-1][j] + fence[i-2][j]\n            \n            # If the current color is the same as the previous color, subtract it from the count\n            if j == fence[i-1][j]:\n                fence[i][j] -= fence[i-1][j]\n    \n    # Return the total number of ways of painting the fence\n    return sum(fence[n-1])"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize dp array\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Base cases\n    for j in range(1, k+1):\n        dp[1][j] = 1\n    \n    # Fill dp array\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= i-1:\n                dp[i][j] += dp[i-2][j-i+1]\n    \n    # Return final answer\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    else:\n        return k * count_no_of_ways(n-1, k) + (k*(k-1))//2\n"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the count of ways of painting each fence post\n    dp = [[0] * k for i in range(n)]\n\n    # Initialize the first two posts to have one color\n    dp[0][0] = 1\n    dp[1][0] = 1\n\n    # Fill the remaining cells of the 2D array using the given recurrence relation\n    for i in range(2, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j]\n            \n            # If there are more than two adjacent posts with the same color, then the current post can have any color\n            if i > 2 and dp[i-1][j] > 0 and dp[i-2][j] > 0:\n                dp[i][j] += dp[i-3][j]\n\n    # Return the count of ways of painting the fence\n    return dp[n-1][0]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n\n    :param n: Number of posts in the fence.\n    :param k: Number of colors available.\n    :return: Number of ways of painting the fence.\n    \"\"\"\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n\n    # Count the number of ways of painting the first post\n    count = count_no_of_ways(n - 1, k)\n\n    # Count the number of ways of painting the second post if it's different from the first\n    if n >= 2:\n        count += count_no_of_ways(n - 2, k - 1)\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D array to store the number of ways to paint each post\n    dp = [[0] * k for _ in range(n)]\n    \n    # Base cases: there's only one way to paint the first post, and no ways to paint the rest\n    dp[0] = [1] + [0] * (k - 1)\n    for i in range(1, n):\n        dp[i] = [0] * k\n    \n    # Fill in the rest of the array using the recurrence relation\n    for i in range(n):\n        for j in range(k):\n            # If there's no adjacent posts, we can choose any color\n            if i == 0 or i == n - 1:\n                dp[i][j] = 1\n            # If there's an adjacent post with the same color, we can reuse that color\n            elif j == dp[i-1][j]:\n                dp[i][j] = dp[i-1][j]\n            # If there's an adjacent post with a different color, we need to use a different one\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                \n    return dp[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    else:\n        return count_no_of_ways(n, k-1) + k*(k-1)*count_no_of_ways(n-1, k)"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers (rounded down to the nearest integer).\n    \"\"\"\n    q = n // m  # using floor division to get the quotient\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 > 0:\n        c = math.sqrt(w**2 + h**2)\n        return c\n    else:\n        print(\"Invalid input. Please enter positive values for both sides.\")"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes the length of the two shorter sides of a right-angled triangle \n    and calculates the length of the third side.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 <= h*w:\n        print(\"The given sides do not form a right angled triangle.\")\n    else:\n        third_side = math.sqrt(w**2 + h**2)\n        print(\"The third side of the triangle is:\", third_side)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the width and height of a right-angled triangle\n    as inputs and returns the length of the third side.\n    \"\"\"\n    if w**2 + h**2 > h**2 + w**2:\n        return math.sqrt(w**2 + h**2)\n    else:\n        return math.sqrt(h**2 + w**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function finds the third side of a right-angled triangle given the two shorter sides and the longest side.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 > 0:\n        # Calculate the third side using the Pythagorean theorem\n        c = math.sqrt(w**2 + h**2)\n        return c\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]  # initialize max_val to the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]  # update max_val if a larger element is found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    This function finds the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    This function finds the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list of heterogeneous values as input and returns the maximum value in the list.\n    '''\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate through all the numbers from 1 to the given number\n    for i in range(1, number+1):\n        \n        # If the number is divisible by the current iteration, add it to the sum\n        if number % i == 0:\n            sum += i\n            \n    # Return the sum of all divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as an input and returns the sum of all its divisors.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as an input and returns the number of inversions in the array.\n    An inversion is defined as a pair of elements in the array such that the second element is greater than the first element.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    temp = []\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp.append(arr[i])\n            i += 1\n        else:\n            temp.append(arr[j])\n            j += 1\n            inv_count += (mid - i + 1)\n    while i <= mid:\n        temp.append(arr[i])\n        i += 1\n    while j <= right:\n        temp.append(arr[j])\n        j += 1\n    for x in range(len(temp)):\n        arr[k] = temp[x]\n        k += 1\n\ndef merge_sort(arr, left, right):\n    if left < right:\n        mid = (left + right) // 2\n        merge_sort(arr, left, mid)\n        merge_sort(arr, mid + 1, right)\n        merge(arr, left, mid, right)\n        \ndef get_Inv_Count(arr):\n    inv_count = 0\n    merge_sort(arr, 0, len(arr) - 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            count += len(left[i:])\n    result += left[i:]\n    result += right[j:]\n    return result, count\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, count_left = merge_sort(arr[:mid])\n    right, count_right = merge_sort(arr[mid:])\n    result, count_merge = merge(left, right)\n    return result, count_left + count_right + count_merge\n\ndef get_inv_count(arr):\n    return merge_sort(arr)[1]\n"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            inv_count += 1\n    return inv_count\n\narr = [5, 3, 1, 2, 4]\nprint(get_inv_count(arr))"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is defined as a pair of indices (i, j) such that i < j and arr[i] > arr[j].\n    '''\n\n    n = len(arr)\n    inv_count = 0\n\n    # Create a temporary array to store the sorted sub-array\n    temp = [0] * n\n\n    # Sort the input array using merge sort\n    merge_sort(arr, temp, 0, n - 1)\n\n    # Traverse the sorted array and count the number of inversions\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n\ndef merge_sort(arr, temp, left, right):\n    '''\n    This function sorts the input array using merge sort.\n    '''\n\n    if left < right:\n        mid = (left + right) // 2\n\n        # Sort the left and right sub-arrays separately\n        merge_sort(arr, temp, left, mid)\n        merge_sort(arr, temp, mid + 1, right)\n\n        # Merge the two sorted sub-arrays into a single sorted array\n        merge(arr, temp, left, mid, right)\n\n\ndef merge(arr, temp, left, mid, right):\n    '''\n    This function merges the two sorted sub-arrays into a single sorted array.\n    '''\n\n    i = left\n    j = mid + 1\n    k = left\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            j += 1\n            inv_count += (mid - i + 1)  # Count the number of inversions in the left sub-array\n        k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted array back to the input array\n    for i in range(left, right + 1):\n        arr[i] = temp[i]"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\n\ndef count_inv(arr):\n    inv_count = 0\n    temp = merge_sort(arr)\n    for i in range(1, len(temp)):\n        if temp[i] < temp[i-1]:\n            inv_count += len(temp) - i\n\n    return inv_count\n\n\nif __name__ == '__main__':\n    arr = [1, 5, 2, 4, 3]\n    print(count_inv(arr))"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function will flatten a given nested list structure.\n    \"\"\"\n\n    # Base case: if the list is empty or has only one element, return the list\n    if len(list1) == 0 or len(list1) == 1:\n        return list1\n\n    # If the first element of the list is a list, flatten it recursively\n    if isinstance(list1[0], list):\n        flattened_list = flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        flattened_list = [list1[0]] + flatten_list(list1[1:])\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n    - list1 (list): The nested list to flatten.\n\n    Returns:\n    - list: The flattened list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n    list1 (list): A nested list structure to flatten.\n\n    Returns:\n    list: A flattened list.\n\n    Example:\n    >>> flatten_list([1, 2, 3, [4, [5, 6], 7], 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function will flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result += flatten_list(element)\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list.\n\n    :param lst: The list to flatten.\n    :return: The flattened list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes in a nested list and returns a flattened version of it.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    max_aggr = 0\n    for (s,t,v) in stdata:\n        d[s] += v\n        d[t] -= v\n        max_aggr = max(max_aggr, max(d.values()))\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    if n == 0:\n        return 0\n    \n    # Initialize a dictionary to store the maximum aggregate for each prefix of the string\n    max_agg = defaultdict(int)\n    max_agg[0] = 0\n    \n    # Iterate through all substrings of the string and calculate the maximum aggregate for each prefix\n    for i in range(n):\n        for j in range(i, n):\n            prefix_len = j - i + 1\n            prefix_sum = sum(stdata[i:j+1])\n            max_agg[prefix_len] = max(max_agg[prefix_len], prefix_sum)\n    \n    return max_agg[n]"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    # Create a dictionary to store the sums for each prefix length\n    sums = defaultdict(int)\n\n    # Initialize the sums for the prefix of length 0 to be the first element of the list\n    sums[0] = stdata[0][0]\n\n    # Initialize the maximum aggregate to be the first element of the list\n    max_agg = stdata[0][0]\n\n    # Iterate over the remaining elements in the list\n    for i in range(1, len(stdata)):\n        # Get the current element\n        num, agg = stdata[i]\n        # Iterate over the prefixes of length 1 to n-1\n        for j in range(1, i+1):\n            # Get the sum of the previous prefix and the current element\n            prev_sum = sums[j-1] + num\n            # Update the maximum aggregate if necessary\n            if prev_sum > max_agg:\n                max_agg = prev_sum\n            # Update the sum for the current prefix\n            sums[j] = prev_sum\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregate for each stop ID\n    aggs = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for route_id, stop_id, timestamp, direction, schedule_period, stop_seq, arrival_time in stdata:\n        # Calculate the aggregate for this stop ID and update the dictionary\n        aggs[stop_id] += int(arrival_time)\n\n    # Find the maximum aggregate and its stop ID\n    max_agg = max(aggs.values())\n    max_stop_id = max(aggs, key=aggs.get)\n\n    return max_agg, max_stop_id"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for i in stdata:\n        freq[i[1]] += 1\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in range(1, len(stdata)):\n        # Check if the current element is in the previous tuple\n        if stdata[i][0] == stdata[i-1][0] and freq[stdata[i][1]] > 1:\n            # Calculate the aggregate by adding the current element to the previous one\n            agg = stdata[i][1] + stdata[i-1][1]\n            # Check if the aggregate is greater than the current maximum\n            if agg > max_agg:\n                max_agg = agg\n                # Decrement the frequency of the previous element since it's being used to calculate the current aggregate\n                freq[stdata[i-1][1]] -= 1\n                # Increment the frequency of the current element since it's no longer available for use\n                freq[stdata[i][1]] += 1\n        # Check if the current element is not in the previous tuple\n        elif stdata[i][0]!= stdata[i-1][0]:\n            # Calculate the aggregate by adding the current element to the first element in the tuple\n            agg = stdata[i][1] + stdata[i-1][1]\n            # Check if the aggregate is greater than the current maximum\n            if agg > max_agg:\n                max_agg = agg\n                # Decrement the frequency of the previous element since it's being used to calculate the current aggregate\n                freq[stdata[i-1][1]] -= 1\n                # Increment the frequency of the current element since it's no longer available for use\n                freq[stdata[i][1]] += 1\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    counts = defaultdict(int)\n    total = 0\n    for item, weight in stdata:\n        counts[item] += weight\n        total += weight\n    max_agg = 0\n    for item, weight in counts.items():\n        if weight == total:\n            max_agg += item\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each student\n    max_agg = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for student, score in stdata:\n        # Calculate the current aggregate for the student\n        agg = score - max_agg[student]\n        # Update the maximum aggregate for the student\n        max_agg[student] = max(agg, max_agg[student])\n    \n    # Return the maximum aggregate across all students\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to keep track of the aggregate for each customer\n    aggs = defaultdict(int)\n    # Initialize a dictionary to keep track of the number of transactions for each customer\n    counts = defaultdict(int)\n    # Loop through each tuple in the list\n    for cust_id, trans_amt in stdata:\n        # Increment the count for this customer\n        counts[cust_id] += 1\n        # Add the transaction amount to the aggregate for this customer\n        aggs[cust_id] += trans_amt\n    # Find the maximum aggregate\n    max_agg = 0\n    for cust_id in aggs:\n        max_agg = max(max_agg, aggs[cust_id] / counts[cust_id])\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the sums of each stock\n    stock_sums = defaultdict(int)\n\n    # Calculate the sum of each stock\n    for stock, price, shares in stdata:\n        stock_sums[stock] += price * shares\n\n    # Create a dictionary to store the maximum aggregate of each stock\n    max_aggs = defaultdict(int)\n\n    # Calculate the maximum aggregate of each stock\n    for stock, price, shares in stdata:\n        max_agg = stock_sums[stock] / price\n        if max_agg > max_aggs[stock]:\n            max_aggs[stock] = max_agg\n\n    # Return a list of the maximum aggregates\n    return [max_agg for stock, max_agg in max_aggs.items()]"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the number of times each student appears in the list of tuples.\n    student_count = defaultdict(int)\n\n    # Loop through the list of tuples and update the student_count dictionary.\n    for student, times_taught in stdata:\n        student_count[student] += times_taught\n\n    # Calculate the maximum aggregate.\n    max_agg = 0\n    for student in student_count:\n        max_agg += student_count[student] * (student_count[student] - 1) // 2\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n - len(binary)) + binary\n        if sum(map(int, binary[:n])) == sum(map(int, binary[n:])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits.startswith('0') and bits.endswith('0'):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(1 << n):\n        # convert integer i to binary string\n        bin_str = bin(i)[2:].zfill(n)\n        # convert binary string to list of integers\n        bin_list = [int(b) for b in bin_str]\n        # check if sum of first n bits is same as sum of last n bits\n        if sum(bin_list[:n]) == sum(bin_list[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # Convert integer to binary string\n        binary = bin(i)[2:]\n        # Pad binary string with zeros to length n\n        binary = binary.zfill(n)\n        # Check if sum of first n bits is same as sum of last n bits\n        if sum(int(bit) for bit in binary[:n]) == sum(int(bit) for bit in binary[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    # Initialize the count variable\n    count = 0\n    \n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary sequence into a string\n        binary_seq = bin(i)[2:].zfill(2*n)\n        \n        # Extract the first n bits from the binary sequence\n        first_n_bits = binary_seq[:n]\n        \n        # Extract the last n bits from the binary sequence\n        last_n_bits = binary_seq[-n:]\n        \n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n, 2*n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    This function returns the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        if sum(int(x) for x in bin_str[:n]) == sum(int(x) for x in bin_str[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize count variable\n    count = 0\n    \n    # Iterate over all binary numbers of length 2n\n    for i in range(2**n):\n        # Convert the binary number to its decimal form and store it in a variable\n        num = bin(i)[2:].zfill(n)\n        \n        # Convert the decimal number back to binary form and store it in another variable\n        reversed_num = bin(int(num, 2))[2:].zfill(n)\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if int(num, 2) + int(reversed_num, 2) == 2**n:\n            count += 1\n            \n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in bits[:n]) == sum(int(bit) for bit in bits[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Args:\n    d (dict): a dictionary\n\n    Returns:\n    int: the depth of the dictionary\n\n    \"\"\"\n\n    if not isinstance(d, dict):\n        return 0\n\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as input and returns the depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(value) for key, value in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    A function to find the depth of a dictionary.\n    :param d: The dictionary for which the depth is to be found.\n    :param depth: The current depth of the dictionary.\n    :return: The depth of the dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return max(dict_depth(v, depth+1) for v in d.values()) + depth\n    else:\n        return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n                \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return depth\n    \n    max_depth = depth\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            sub_depth = dict_depth(value, depth)\n            if sub_depth > max_depth:\n                max_depth = sub_depth\n    \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value)+1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Finding the length of the given array\n    n = len(arr)\n\n    # Finding the number of times the array will be rotated\n    k = rotations % n\n\n    # If the number of rotations is greater than the length of the array, we need to subtract the remaining rotations from the length of the array\n    if k > n:\n        k = k - n\n\n    # Finding the range of the array that will be used for finding the element at the given index\n    low = ranges[0]\n    high = ranges[1]\n\n    # If the range is greater than the length of the array, we need to subtract the remaining range from the length of the array\n    if high > n:\n        high = high - n\n\n    # If the range is negative, we need to add the remaining range to the length of the array\n    if low < 0:\n        low = low + n\n\n    # If the range is greater than the range of the array, we need to swap the values\n    if high < low:\n        temp = high\n        high = low\n        low = temp\n\n    # Finding the new index of the element at the given index after number of rotations\n    new_index = (index + k) % n\n\n    # Finding the element at the new index\n    element = arr[new_index]\n\n    # If the new index is outside the given range, we need to adjust it\n    if new_index < low:\n        new_index = new_index + n\n    elif new_index > high:\n        new_index = new_index - n\n\n    # Returning the element at the adjusted new index\n    return element\n"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    n = len(arr)\n    if index < 0 or index >= n : \n        return \"Index out of range\"\n    else : \n        if rotations > ranges[n-1] : \n            return \"Invalid rotations\"\n        elif rotations == ranges[n-1] : \n            return arr[index]\n        else : \n            for i in range(1,n) : \n                if ranges[i] >= rotations and ranges[i-1] < rotations : \n                    if index >= ranges[i-1] and index < ranges[i] : \n                        new_index = (index - ranges[i-1] + rotations)%n\n                        return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Rotating the list by rotations number of times\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(n-1):\n            arr[j] = arr[j+1]\n        arr[n-1] = temp\n\n    # Finding the element at the given index\n    element = arr[index % n]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    This function takes an array, ranges, rotations and the index as input parameters and returns the element at the given index after rotations.\n    '''\n    # Checking if the index is within the range of the array\n    if index >= len(arr) or index < 0:\n        print(\"Invalid index!\")\n        return\n\n    # Finding the actual index of the element after the rotations\n    actual_index = (index + rotations*ranges) % len(arr)\n\n    # Returning the element at the actual index\n    return arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # convert ranges list to a dictionary\n    ranges_dict = {k: v for k, v in zip(ranges[::2], ranges[1::2])}\n    \n    # rotate the array based on the rotations\n    arr = arr[rotations:] + arr[:rotations]\n    \n    # find the range of the given index\n    index_range = ranges_dict[index]\n    \n    # find the start and end indices of the given range\n    start_index = index_range[0] - rotations\n    end_index = index_range[1] - rotations\n    \n    # find the element at the given index\n    return arr[start_index:end_index+1][0]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # find the minimum element in the range\n    min_element = min(arr[ranges[0]:ranges[1]+1])\n    # find the actual rotation count\n    rotation_count = rotations % (ranges[1] - ranges[0] + 1)\n    # calculate the actual index\n    actual_index = (index + rotation_count) % (ranges[1] - ranges[0] + 1)\n    # return the element at the actual index\n    return arr[ranges[0] + actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # compute number of elements before rotation\n    num_before_rotation = sum(ranges) - sum(ranges[:rotations])\n    # add number of elements before rotation to index\n    adjusted_index = (index + num_before_rotation) % sum(ranges)\n    # find element at adjusted index\n    result = arr[adjusted_index]\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, ranges, number of rotations and the index to find.\n    It returns the element at the specified index after the specified number of rotations.\n\n    :param arr: list of integers\n    :param ranges: number of ranges in the array\n    :param rotations: number of rotations to perform on the array\n    :param index: index of the element to find\n    :return: element at the specified index after the specified number of rotations\n    '''\n    # Calculate the number of elements in each range\n    elements_per_range = len(arr) // ranges\n\n    # Calculate the starting index of the first range\n    start_index = 0\n\n    # Calculate the index of the range containing the target element\n    target_range_index = index // elements_per_range\n\n    # Calculate the starting index of the target range\n    start_index = target_range_index * elements_per_range\n\n    # Calculate the offset of the target element within the range\n    offset = index % elements_per_range\n\n    # Perform the specified number of rotations on the range containing the target element\n    for i in range(rotations):\n        # Find the index of the element to move to the front of the range\n        new_index = (start_index + offset) % len(arr)\n\n        # Swap the target element with the element at the front of the range\n        arr[start_index + offset], arr[new_index] = arr[new_index], arr[start_index + offset]\n\n        # Update the starting index and offset for the next rotation\n        start_index = new_index\n        offset = (offset + 1) % elements_per_range\n\n    # Return the element at the specified index after the specified number of rotations\n    return arr[start_index + offset]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations > 0:\n        arr = arr[ranges-rotations:ranges] + arr[0:ranges-rotations]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Adjust index to account for rotations\n    index = (index + rotations) % n\n    # Use binary search to find the element at the given index\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if ranges[mid] <= index < ranges[mid + 1]:\n            return arr[mid]\n        elif index < ranges[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(\"^p\\w+\", word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    # using list comprehension to get the words starting with 'p'\n    p_words = [word for word in words if re.match('^p', word)]\n    # if there are at least two words starting with 'p', return the first two\n    if len(p_words) >= 2:\n        return p_words[:2]\n    # else return an empty list\n    else:\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\bp\\w*\\b')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n    if len(result) < 2:\n        return 'No words found.'\n    else:\n        return result[0] +'' + result[1]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) < 2:\n        return \"There is less than two words starting with 'p' in the list\"\n    else:\n        return \"The two words starting with 'p' are: {} and {}\".format(p_words[0], p_words[1])"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p\\w*\\s'\n    matches = [word for word in words if re.match(pattern, word)]\n    if len(matches) < 2:\n        return \"No words found starting with 'p'.\"\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    filtered_words = list(filter(pattern.match, words))\n    if len(filtered_words) < 2:\n        return \"There are less than 2 words starting with 'p' in the list.\"\n    else:\n        return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return \"No words starting with 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(\"^p\", word, flags=re.IGNORECASE)]\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = []\n    for word in words:\n        if re.match(pattern, word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0] if k == 1 else 0\n\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n\n    return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    res = dp[index]\n    for i in range(index+1, n):\n        if a[i] > a[k] and dp[i] > res:\n            res = dp[i]\n    return res"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k < index:\n        return -1\n    \n    dp = [0] * n\n    for i in range(n):\n        if i == index:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[i-1]\n            if i > index and a[i] > a[i-1]:\n                dp[i] += a[i]\n            if k > index and a[i] > a[k]:\n                dp[i] = max(dp[i], dp[k] + a[i])\n\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (n)\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(index, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return dp[k-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(n):\n        if i == 0:\n            dp[i] = a[i]\n        elif i == index:\n            dp[i] = dp[i-1] + a[i] + a[k]\n        else:\n            dp[i] = max(dp[i-1], a[i] + dp[i-2])\n    return dp[n-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize dp array with zeros\n    dp = [0] * n\n    for i in range(n):\n        # Initialize dp[i] with maximum sum of increasing subsequence ending at index i\n        dp[i] = max(dp[:i]) + a[i]\n        # Check if kth element is included in the increasing subsequence\n        if i > 0 and k > i:\n            # If kth element is greater than a[i-1], then we can include it in the increasing subsequence\n            if k < n and a[k] > a[i-1]:\n                dp[i] = max(dp[i], dp[i-1] + a[k])\n            # If kth element is smaller than a[i-1], then it cannot be included in the increasing subsequence\n            else:\n                dp[i] = max(dp[i], dp[i-1])\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        if i <= index:\n            dp[i] = max(dp[i - 1], a[i])\n        else:\n            dp[i] = max(dp[i - 1], a[i], dp[i - 1] + a[i])\n\n    if k > index:\n        return dp[n - 1]\n    else:\n        return dp[k - 1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize dp table\n    dp = [0] * n\n\n    # Traverse the array from 0 to n-1\n    for i in range(n):\n        # Initialize maximum sum\n        max_sum = float('-inf')\n\n        # Traverse from 0 to i-1\n        for j in range(i):\n            # If jth element is less than ith element and jth element is less than kth element after ith index\n            if a[j] < a[i] and a[j] < a[k]:\n                # Add dp[j] to maximum sum\n                max_sum = max(max_sum, dp[j])\n\n        # Add ith element to maximum sum\n        max_sum += a[i]\n\n        # Update dp[i] with maximum sum\n        dp[i] = max_sum\n\n    # Return maximum sum\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n-1:\n        return a[index]\n    \n    if a[index] > a[k-1]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index-1, -1, -1):\n        if i == index-1:\n            dp[i] = a[i] + a[index]\n        else:\n            dp[i] = max(dp[i+1], a[i] + dp[i+1])\n            \n    return dp[0] + a[index] + dp[index+1] - dp[k] - dp[index+2]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    :param tuplex: A tuple.\n    :param m: An integer representing the start index of the colon.\n    :param n: An integer representing the end index of the colon.\n    :return: A tuple containing the values of the tuple `tuplex` between indices `m` and `n`, inclusive.\n    \"\"\"\n    # Create a copy of the tuple to prevent modifying the original\n    tuplex_copy = deepcopy(tuplex)\n    # Create an empty list to hold the colon values\n    colon_values = []\n    # Iterate over the indices of the colon\n    for i in range(m, n + 1):\n        # Append the value at the current index to the colon_values list\n        colon_values.append(tuplex_copy[i])\n    # Convert the colon_values list to a tuple and return it\n    return tuple(colon_values)"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): the tuple to get the colon from\n        m (int): the start index of the colon\n        n (int): the end index of the colon (exclusive)\n\n    Returns:\n        A new tuple containing the elements from index m to index n-1 (inclusive) of the input tuple.\n    \"\"\"\n    # Create a deep copy of the input tuple to avoid modifying it\n    tuplex_copy = deepcopy(tuplex)\n    # Slice the tuple and return the result\n    return tuplex_copy[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return deepcopy(tuplex[m-1:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex):\n        return \"Index out of range\"\n    elif m == 0 and n == 0:\n        return ()\n    elif m == 0:\n        return deepcopy(tuplex[:n])\n    elif n == 0:\n        return deepcopy(tuplex[m:])\n    else:\n        return deepcopy(tuplex[m:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if m and n are within range of the tuple\n    if m < 0 or m > len(tuplex) or n < 0 or n > len(tuplex):\n        return \"Invalid range\"\n    \n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Remove elements from the copy till m-1th index\n    for i in range(0,m-1):\n        del tuplex_copy[0]\n    \n    # Remove elements from the copy till n-1th index\n    for i in range(n-1,len(tuplex_copy)):\n        del tuplex_copy[i]\n    \n    # Return the colon of the tuple\n    return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying it\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the slice of the tuple\n    colon = tuplex_copy[m:n]\n    \n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): The tuple from which to get the colon.\n        m (int): The starting index of the colon (inclusive).\n        n (int): The ending index of the colon (exclusive).\n\n    Returns:\n        tuple: The colon of the tuple.\n    \"\"\"\n    # Create a deep copy of the input tuple\n    result = deepcopy(tuplex)\n\n    # Sort the indices m and n so that m < n\n    if m > n:\n        m, n = n, m\n\n    # Slice the tuple using m and n\n    result = result[m:n]\n\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m, n+1):\n        colon.append(deepcopy(tuplex[i-1]))\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    This function takes a tuple and two integers m and n.\n    It returns a new tuple where the elements from index m to index n are included.\n    '''\n    newtuplex = deepcopy(tuplex)\n    newtuplex = newtuplex[m:n+1]\n    return newtuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n > len(tuplex) - 1:\n        return None\n    else:\n        return deepcopy(tuplex[m:n+1])"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product not in products:\n                products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a list to store the maximum products\n    max_products = []\n    \n    # Iterate over each pair of lists\n    for i in range(N):\n        # Select the maximum value and index from nums1\n        max_num1 = max(nums1)\n        max_idx1 = nums1.index(max_num1)\n        # Remove the maximum value from nums1\n        nums1.remove(max_num1)\n        \n        # Select the maximum value and index from nums2\n        max_num2 = max(nums2)\n        max_idx2 = nums2.index(max_num2)\n        # Remove the maximum value from nums2\n        nums2.remove(max_num2)\n        \n        # Calculate the product of the two maximum values\n        product = max_num1 * max_num2\n        \n        # Append the product to the list of maximum products\n        max_products.append(product)\n    \n    # Return the list of maximum products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum and minimum values in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n    min1 = min(nums1)\n    min2 = min(nums2)\n\n    # Initialize the result list\n    products = []\n\n    # Iterate over all possible pairs of factors in nums1 and nums2\n    for factor1 in range(max1, min1 - 1, -1):\n        for factor2 in range(max2, min2 - 1, -1):\n            # Calculate the product of the two factors and add it to the result list\n            product = factor1 * factor2\n            products.append(product)\n\n            # If we have found the required number of products, return the list\n            if len(products) == N:\n                return products\n\n    # If we have reached this point, it means we have found less than N products, so return an empty list\n    return []"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        max1 = max(nums1)\n        max2 = max(nums2)\n        result.append(max1*max2)\n        nums1.remove(max1)\n        nums2.remove(max2)\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # create a list to store the products\n    products = []\n    # iterate through each factor in nums1\n    for factor1 in nums1:\n        # iterate through each factor in nums2\n        for factor2 in nums2:\n            # append the product to the list\n            products.append(factor1 * factor2)\n    # sort the products in descending order\n    products.sort(reverse=True)\n    # return the first N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over the given lists and calculate the product of the selected factors\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            result.append(product)\n    \n    # Sort the result in descending order and return the first N elements\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    product = 0\n    result = []\n\n    for i in range(N):\n        product = nums1[-i-1] * nums2[-i-1]\n        result.append(product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    # initialize variables\n    max_products = []\n    i = 0\n    j = 0\n    \n    # loop through lists\n    while i < len(nums1) and j < len(nums2):\n        # calculate product\n        product = nums1[i] * nums2[j]\n        \n        # check if product is greater than current max\n        if len(max_products) < N or product > max_products[-1]:\n            # add product to list\n            max_products.append(product)\n            \n            # remove smallest product if necessary\n            if len(max_products) > N:\n                max_products.sort()\n                max_products.pop(0)\n        \n        # move to next factor in nums1\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables\n    largest_products = []\n    largest_product_indexes = []\n    max_product = float('-inf')\n    \n    # Loop through the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product and update the max product and indexes if necessary\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n                largest_products = [product]\n                largest_product_indexes = [(i, j)]\n            elif product == max_product:\n                largest_products.append(product)\n                largest_product_indexes.append((i, j))\n                \n    # Select the specified number of largest products\n    largest_products.sort(reverse=True)\n    result = []\n    for i in range(N):\n        result.append(largest_products[i] * nums1[largest_product_indexes[i][0]] * nums2[largest_product_indexes[i][1]])\n        \n    return result"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum value.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10)) # Output: 10\nprint(maximum(10, 5)) # Output: 10\nprint(maximum(0, 0))  # Output: 0"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes a positive integer `n` as input and returns the number with the left most unset bit set.\n    '''\n    return n | (n ^ (n-1)) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number n.\n    \"\"\"\n    # iterate through each bit from right to left\n    for i in range(31, -1, -1):\n        # check if the i-th bit is set or not\n        if n & (1 << i) == 0:\n            # set the i-th bit\n            n |= (1 << i)\n            # return the modified number\n            return n\n    # if all the bits are set, return -1\n    return -1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the right most bit that is set to 1\n    i = 1\n    while (n & i)!= 0:\n        i <<= 1\n\n    # Set the right most bit to 1\n    n |= i\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a number.\n    \"\"\"\n    return (n | (n + 1))\n\n\nn = int(input(\"Enter a number: \"))\nprint(set_left_most_unset_bit(n))"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a given number.\n    \"\"\"\n    return n & -n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the right most bit to 1\n    right_most_bit = 1\n    # Keep shifting the right most bit to the left until the left most bit is set\n    while (n & right_most_bit)!= 0:\n        right_most_bit <<= 1\n    # Return the left most bit\n    return right_most_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit of a number.\n    '''\n    return n & ~(n-1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as input and returns an integer with the left most unset bit set.\n    \"\"\"\n    return n | (n-1) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a number.\n    \"\"\"\n    # XOR n with n-1 to clear the right most set bit\n    n = n ^ (n-1)\n    # Increment n by 1 to set the right most set bit\n    n = n + 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a positive integer n.\n    Returns the updated integer.\n    \"\"\"\n    if n == 0:\n        return 1  # special case: 0 has only one unset bit (the least significant bit)\n    else:\n        # shift n one bit to the left\n        n = n << 1\n        # flip all the bits on the right of the least significant bit\n        n = ~n\n        # set the least significant bit\n        n = n | 1\n        return n"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with base radius 'r' and height 'h'.\n    \"\"\"\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    \"\"\"\n    This function finds the volume of a cone.\n    \"\"\"\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone given its radius and height.\n\n    Args:\n        r (float): radius of the cone.\n        h (float): height of the cone.\n\n    Returns:\n        float: the volume of the cone.\n    '''\n\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns its volume.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two arguments - radius r and height h - and returns the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Computes the volume of a cone with base radius r and height h.\n    '''\n    V = math.pi * r**2 * h / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input parameters and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        if 2 ** power == n:\n            return power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    power_of_2 //= 2\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    power_of_2 = power_of_2 // 2\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        if power_of_2 == n:\n            return power_of_2\n        power_of_2 *= 2\n"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number using the recursive formula.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Lucas number is\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) "
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(10))"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for elem in list_:\n        new_list.append(string.format(elem))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(lst, fmt_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [fmt_str.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in lst:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a nested dictionary.\n\n    :param l1: List 1\n    :param l2: List 2\n    :param l3: List 3\n    :return: Nested dictionary\n    \"\"\"\n\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the three lists and create a nested dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {}\n\n        for j in range(len(l2)):\n            sub_key = l2[j]\n            sub_value = l3[i][j]\n\n            value[sub_key] = sub_value\n\n        nested_dict[key] = value\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[j][i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {l2[i]: l3[i]}\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert three lists to a nested dictionary.\n\n    The first list represents the keys of the outer dictionary,\n    the second list represents the keys of the inner dictionaries,\n    and the third list represents the values of the inner dictionaries.\n\n    Example:\n    >>> l1 = ['key1', 'key2']\n    >>> l2 = ['inner1', 'inner2']\n    >>> l3 = ['value1', 'value2']\n    >>> convert_list_dictionary(l1, l2, l3)\n    {'key1': {'inner1': 'value1', 'inner2': 'value2'}, 'key2': {'inner1': 'value1', 'inner2': 'value2'}}\n    \"\"\"\n    result = {}\n    for i, key in enumerate(l1):\n        inner_dict = {}\n        for j, inner_key in enumerate(l2):\n            value = l3[j]\n            inner_dict[inner_key] = value\n        result[key] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        for j in range(len(l2)):\n            dictionary[l1[i]][l2[j]] = l3[j]\n    return dictionary"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError('All input lists must have the same length')\n    \n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'col1': l2[i], 'col2': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {'key1': l2[i], 'key2': l3[i]}\n    return result_dict"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        f1 = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        f2 = n\n        return max(f1, f2)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize a dictionary to store the results of subproblems\n    results = {1:n}\n    # Recursively find the maximum sum for all subproblems\n    for i in range(2, n+1):\n        results[i] = max(results[i//2] + results[i//3] + results[i//4] + results[i//5], i)\n    return results[n]"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return n + get_max_sum(n/2)\n    elif n % 3 == 0:\n        return n + get_max_sum(n/3)\n    elif n % 4 == 0:\n        return n + get_max_sum(n/4)\n    elif n % 5 == 0:\n        return n + get_max_sum(n/5)\n    else:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n\nprint(get_max_sum(10)) # Output: 43"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    else:\n        lst = []\n        for i in range(1, n+1):\n            lst.append(i)\n            \n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                lst.remove(i)\n                lst.remove(n//i)\n                \n        return max(lst)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    max_sum = max(max_sum, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    max_sum = max(max_sum, n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(n, (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)))"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the list with the maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = [i]\n        elif len(i) == max_length:\n            max_length_list.append(i)\n    \n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = [lst]\n        elif len(lst) == max_length:\n            max_length_list.append(lst)\n    return max_length_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    max_list = [x for x in input_list if len(x) == max_length]\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if a tuple contains no duplicates.\n    \n    Args:\n    - test_tup: A tuple to check for duplicates.\n    \n    Returns:\n    - True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if a given tuple contains no duplicates.\n    \n    Args:\n        test_tup (tuple): The tuple to be checked.\n        \n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return \"All characters are repeating.\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    # Iterate through each character in the string and count the frequency\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through each character in the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeating character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return \"No non-repeating characters found.\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a dictionary of character frequencies\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate over the string and return the first character that appears only once\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string and return the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n            \n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n            \n    return None  # no non-repeating characters found"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store character counts\n    char_counts = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_counts:\n            char_counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_counts[char] = 1\n    # Loop through each character in the string again\n    for char in str1:\n        # If the character has a count of 1, return it\n        if char_counts[char] == 1:\n            return char\n    # If no non-repeating characters were found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None # If no non-repeating character is found"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(pattern, string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character or False otherwise.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    elif string[0] == string[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        return True\n    \n    if string[0] == string[-1]:\n        return True\n    \n    if re.match(regex, string):\n        return True\n    \n    return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character, otherwise it returns False.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of these numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Find the median value\n    if len(sorted_nums) % 2 == 0:\n        median = (sorted_nums[len(sorted_nums)//2] + sorted_nums[len(sorted_nums)//2 - 1])/2\n    else:\n        median = sorted_nums[len(sorted_nums)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # find the median\n    if len(sorted_numbers) % 2 == 0:\n        # if there are two middle numbers, take their average\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + \n                  sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        # if there is only one middle number, take it\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a,b,c])\n    \n    # Find the median\n    if len(set(sorted_nums)) == 1:\n        # All three numbers are the same\n        return sorted_nums[1]\n    elif len(set(sorted_nums)) == 2:\n        # Two of the three numbers are the same\n        return sorted_nums[1]\n    else:\n        # One of the three numbers is different\n        return sorted_nums[1]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing the sum of digits of each number in the input list.\n    '''\n    sum_digits = []\n    for num in nums:\n        sum_digit = 0\n        while num > 0:\n            sum_digit += num % 10\n            num //= 10\n        sum_digits.append(sum_digit)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num = num // 10\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the sum of digits for each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        total += sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns a list containing the sum of digits of each number in the input list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of digits of each number in the list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        print(sum_digits)\n        sum_digits = 0\n"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    This function takes a list of numbers as input and returns the sum of the digits of each number.\n    '''\n    result = []\n    for num in nums:\n        # convert the number to a string and then sum the digits\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    \n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # iterate over each tuple in the list and add it to the set if it's not already present\n    for tuple in test_list:\n        unique_tuples.add(tuple)\n    \n    # return the size of the set as the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for i in test_list:\n        freq.add(tuple(i))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(t) for t in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for i in range(len(test_list)):\n        freq.add(tuple(test_list[i]))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for i in test_list:\n        freq.add(tuple(i))\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the outer tuple\n    for i in range(len(test_tup1)):\n        # Initialize an empty list to store the result for the current tuple element\n        inner_result = []\n        \n        # Loop through the inner tuple at the current index\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements of the two tuples and append to the inner result list\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        \n        # Append the inner result list to the outer result list\n        result.append(inner_result)\n    \n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_tup = []\n        for j in range(len(test_tup1[i])):\n            temp_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp_tup))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_tup = []\n        for j in range(len(test_tup1[i])):\n            inner_tup.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_tup))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        if type(tup1_elem) == tuple and type(tup2_elem) == tuple:\n            result_tup += (add_nested_tuples(tup1_elem, tup2_elem),)\n        else:\n            result_tup += (tup1_elem + tup2_elem,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        new_tup = []\n        for i in range(len(tup1)):\n            new_tup.append(tup1[i] + tup2[i])\n        result_tup.append(tuple(new_tup))\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (tuple(map(lambda x,y: x+y, test_tup1[i], test_tup2[i])),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two nested tuples and performs index-wise addition of their elements.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += tuple(a + b for a, b in zip(test_tup1[i], test_tup2[i]))\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a Python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of the two numbers.\n    \"\"\"\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1.count(tuplex) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1.count(tuplex) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1.count(tuplex) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1.count(tuplex) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    :param tuplex: The tuple to be checked.\n    :param tuple1: The element to be checked.\n    :return: True if element exists in tuple, False otherwise.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as arguments - the first tuple is the tuple to be searched, and the second tuple is the tuple to be searched for.\n    It checks whether the second tuple is present in the first tuple or not.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, else False.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is Even\")\n    else:\n        print(f\"{x} is Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_parity(x):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd,\n    and False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the input number is odd.\n    \"\"\"\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the index of the rightmost non-9 digit\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == 9:\n        i -= 1\n    \n    # If no such digit found, the number is the maximum possible\n    if i < 0:\n        return -1\n    \n    # Otherwise, increment the digit at that index and return the modified number\n    digits[i] += 1\n    for j in range(i+1, len(digits)):\n        digits[j] = 0\n    return int(''.join([str(d) for d in digits]))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert n to a list of digits\n    digits = list(str(n))\n    # Find the rightmost digit that needs to be incremented\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    # If no such digit was found, return -1 (no bigger number possible)\n    if i == 0:\n        return -1\n    # Find the next highest digit to the right of i\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    # Swap the digits at indices i-1 and j\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    # Sort the remaining digits in descending order\n    digits[i:] = sorted(digits[i:], reverse=True)\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a list of digits\n    digits = list(str(n))\n    \n    # Loop through the digits from right to left\n    for i in range(len(digits)-1, 0, -1):\n        # If the current digit is greater than or equal to the digit to its left,\n        # swap the digits and return the modified number as an integer\n        if digits[i] >= digits[i-1]:\n            j = i-1\n            while digits[j] >= digits[i]:\n                j -= 1\n            digits[i], digits[j] = digits[j], digits[i]\n            return int(''.join(digits))\n    \n    # If no larger number can be formed, return None\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    nums = list(str(n))  # convert the number to a list of digits\n    i = len(nums) - 1  # start from the last digit\n    while i > 0 and nums[i - 1] >= nums[i]:\n        i -= 1  # find the rightmost digit that is smaller than the current digit\n    if i <= 0:\n        return -1  # no next bigger number\n    j = len(nums) - 1  # start from the last digit\n    while nums[j] <= nums[i - 1]:\n        j -= 1  # find the rightmost digit that is greater than the digit to the left of i\n    nums[i - 1], nums[j] = nums[j], nums[i - 1]  # swap the two digits\n    nums[i:] = sorted(nums[i:])  # sort the digits to the right of i\n    return int(\"\".join(nums))  # convert the list of digits back to an integer\n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    s = str(n)\n    max_num = n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] < s[j]:\n                new_num = int(s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:])\n                if new_num > max_num:\n                    max_num = new_num\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_num = n\n    n = str(n)\n    n_len = len(n)\n    for i in range(n_len):\n        for j in range(i+1, n_len):\n            if int(n[i:j+1]) > int(n[i:j]):\n                max_num = int(n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:])\n                return max_num\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    max_num = n\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if int(n[i:j+1]) > int(n) and int(n[i:j+1]) < int(max_num):\n                max_num = n[i:j+1]\n    return int(max_num)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the number into a list of digits\n    digits = list(str(n))\n    # Initialize the variables for the result and the indices of the digits to swap\n    result = []\n    indices = []\n    # Find the indices of the digits to swap\n    for i in range(len(digits)):\n        if i+1 < len(digits) and int(digits[i+1]) > int(digits[i]):\n            indices.append((i, i+1))\n        elif i+2 < len(digits) and int(digits[i+2]) > int(digits[i]):\n            indices.append((i, i+1, i+2))\n    # Swap the digits and create the result\n    for i, j in indices:\n        temp = digits[j]\n        digits[j] = digits[i]\n        digits[i] = temp\n        result = int(''.join(digits))\n    # Return the result if it exists, otherwise return None\n    return result if result > n else None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_list = list(n)\n    n_list.sort(reverse=True)\n    n_list_str = ''.join(n_list)\n    max_num = int(n_list_str)\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Find the index of the rightmost digit that is not in its correct position\n    for i in range(len(num_str)-1, -1, -1):\n        if int(num_str[i]) < int(num_str[i-1]):\n            break\n\n    # If no such digit exists, return -1\n    if i == 0:\n        return -1\n\n    # Find the rightmost digit that is not in its correct position\n    j = i-1\n    while int(num_str[j]) == int(num_str[i-1]):\n        j -= 1\n    rightmost_digit = int(num_str[j])\n\n    # Find the index of the rightmost occurrence of the rightmost digit\n    k = num_str.rfind(str(rightmost_digit))\n\n    # Swap the rightmost digit with the digit at index i-1\n    num_str = num_str[:i-1] + str(rightmost_digit) + num_str[i:]\n\n    # Swap the digit at index i-1 with the rightmost occurrence of the rightmost digit\n    num_str = num_str[:k] + str(rightmost_digit) + num_str[k+1:]\n\n    # Convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    result = []\n    while heap:\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n\n    result = []\n\n    while k > 0 and heap:\n        result.append(heapq.heappop(heap))\n        k -= 1\n\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(heap, (i+j, i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [(num1, num2) for (_, num1, num2) in heap]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    for _ in range(k):\n        pairs.append(heapq.heappop(heap)[1:])\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [pair for _, num1, num2 in heap for pair in [(num1, num2), (num2, num1)]]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1+num2, num1, num2))\n    return [heapq.heappop(pairs)[1:] for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    result.reverse()\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1:])\n    return result[::-1]"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function finds the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')  # initialize a variable to store the minimum product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]  # calculate the product of the pairs\n            if product < min_product:  # check if the product is smaller than the current minimum product\n                min_product = product  # update the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Returns the minimum product of the tuples within the given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            minimum = min(minimum, product)\n    return minimum"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function finds the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Returns the minimum value in a given heterogeneous list.\n\n    Args:\n        listval (list): A list of heterogeneous values.\n\n    Returns:\n        The minimum value in the list.\n    \"\"\"\n    min_value = None\n    for val in listval:\n        if min_value is None or val < min_value:\n            min_value = val\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_num = None\n    \n    for num in listval:\n        if min_num == None or num < min_num:\n            min_num = num\n    \n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    minimum = lst[0]\n    for i in lst:\n        if i < minimum:\n            minimum = i\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous elements and returns the minimum value in the list.\n    '''\n    min_value = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n            \n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if min_val is None or i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case.\n    '''\n    # Split the word into words using underscores as separators\n    words = word.split('_')\n    # Create the first word in camel case\n    camel_case = words[0].lower()\n    # Append the rest of the words in camel case\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n\nprint(snake_to_camel('snake_case_string')) # Output: snakeCaseString"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.lower().replace(\"_\", \" \").title().replace(\" \", \"\")"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Converts snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() for x in re.split('[_-]', word))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert snake case string to camel case string.\n    \"\"\"\n    # Split the string into words using regex\n    words = re.findall(r'[a-z]+|[A-Z]*(?=[A-Z]|$)', word)\n    \n    # Capitalize the first letter of each word except the first one\n    words = [word.capitalize() for word in words]\n    \n    # Combine the words into a single string\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = ''\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case_word += word\n        else:\n            camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove all odd numbers from a list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as an input and removes all the odd numbers from it.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"Index out of range.\")\n        return None\n    \n    # Sort the list by the first element of each tuple\n    sorted_list = sorted(list1, key=lambda x: x[0])\n    \n    # Extract the nth element from the sorted list\n    result = sorted_list[n-1][1]\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tuple[n-1] for tuple in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0 or n >= len(list1):\n        return \"Invalid input\"\n    else:\n        return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Parameters:\n        list1 (list of tuples): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        The nth element of the list of tuples.\n\n    \"\"\"\n    return list1[n-1][n]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    return [t[n-1] for t in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    :param list1: list of values\n    :param list2: list of values\n    :return: True if any value in list1 exists in list2, False otherwise\n    \"\"\"\n    set2 = set(list2)\n    for value in list1:\n        if value in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Returns True if there is at least one value in list1 that is also in list2.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    set2 = set(list2)\n    for element in list1:\n        if element in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, otherwise it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence or not.\n\n    :param seq1: Sequence to search for values.\n    :param seq2: Sequence to search values in.\n    :return: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for val in seq1:\n        if val in seq2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list is present in the second list, and False otherwise.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] * arr[j] > max_product: \n                max_product = arr[i] * arr[j]\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_index = 0\n    second_max_num = arr[1]\n    second_max_index = 1\n    \n    for i in range(2, len(arr)):\n        if arr[i] > max_num:\n            second_max_num = max_num\n            second_max_index = max_index\n            max_num = arr[i]\n            max_index = i\n        elif arr[i] > second_max_num:\n            second_max_num = arr[i]\n            second_max_index = i\n    \n    return (max_num * second_max_num, max_num, second_max_num)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_num_product = arr[1]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_num_product = arr[i]\n        elif arr[i] > max_num_product and arr[i] < max_num:\n            max_num_product = arr[i]\n    return max_num, max_num_product\n\narr = [10, 20, 30, 40, 50]\nprint(max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_num = max(arr)\n    second_max_num = max(arr[0], arr[1])\n    \n    if max_num >= 0:\n        return max_num * second_max_num\n    \n    return max_num * min(arr)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers and returns the pair of integers with the highest product.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    elif n == 2:\n        return (arr[0], arr[1]) if arr[0] * arr[1] > arr[1] * arr[0] else (arr[1], arr[0])\n    else:\n        max_pair = (arr[0], arr[1])\n        for i in range(2, n):\n            if arr[i] * max_pair[0] > max_pair[1] * arr[i]:\n                max_pair = (arr[i], max_pair[0])\n            elif arr[i] * max_pair[1] > max_pair[0] * arr[i]:\n                max_pair = (max_pair[1], arr[i])\n        return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n\n    Args:\n    arr (list): List of integers.\n\n    Returns:\n    tuple: A tuple containing the pair with the highest product.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    arr.sort()\n    if arr[n-1] <= 0:\n        return arr[n-1]*arr[n-2]\n    else:\n        return arr[n-1]*arr[n-2]*arr[n-3]"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair\n\narr = [3, 2, -1, -5, 4, -3, 0]\nprint(max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize variables to keep track of maximum and second maximum values\n    max1 = max2 = float('-inf')\n    \n    # Loop through the array and update max1 and max2 as necessary\n    for num in arr: \n        if num > max1: \n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1: \n            max2 = num\n    \n    # Calculate and return the product of the maximum and second maximum values\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append(Input[i][0])\n                break\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store groups\n    groups = {}\n\n    # iterate through the input list\n    for t in Input:\n        # extract the first element of the tuple\n        first = t[0]\n        # if the first element is already present in the dictionary, append the tuple to the group\n        if first in groups:\n            groups[first].append(t)\n        # otherwise, create a new group with the first element and the tuple\n        else:\n            groups[first] = [t]\n\n    # return the groups dictionary\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store the groups\n    groups = {}\n    \n    # iterate through each tuple in the input list\n    for tpl in Input:\n        # get the first element of the tuple\n        first = tpl[0]\n        \n        # if the first element is not already in the groups dictionary\n        if first not in groups:\n            # add the first element as a key to the groups dictionary with a value of a list containing the tuple\n            groups[first] = [tpl]\n        else:\n            # if the first element is already in the groups dictionary\n            # append the tuple to the list of tuples associated with that key\n            groups[first].append(tpl)\n    \n    # return the groups dictionary\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for item in Input:\n        if item[0] in groups:\n            groups[item[0]].append(item)\n        else:\n            groups[item[0]] = [item]\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store the groups\n    groups = {}\n    \n    # iterate over the input tuples\n    for tpl in Input:\n        # get the first element of the tuple\n        first = tpl[0]\n        \n        # check if the group for this first element already exists\n        if first in groups:\n            # if it does, append the tuple to the existing group\n            groups[first].append(tpl)\n        else:\n            # if it doesn't, create a new group with the first tuple\n            groups[first] = [tpl]\n    \n    # return the list of groups\n    return list(groups.values())"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append(Input[i][0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = None\n    for tup in Input:\n        if first_element is None:\n            first_element = tup[0]\n        else:\n            if first_element!= tup[0]:\n                return None\n    return first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    # find common first element in the list of tuple\n    common_first_elem = None\n    for tup in Input:\n        if common_first_elem is None:\n            common_first_elem = tup[0]\n        else:\n            if tup[0]!= common_first_elem:\n                return None\n    return common_first_elem"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] in groups:\n            groups[tup[0]].append(tup)\n        else:\n            groups[tup[0]] = [tup]\n    return groups"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list that has maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_max(lst):\n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(len(i) for i in lst)\n    max_lst = [i for i in lst if len(i) == max_length]\n    return max_lst"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element with the maximum length in the list.\n    \"\"\"\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(str(elem)) for elem in lst)\n    return [elem for elem in lst if len(str(elem)) == max_len][0]"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(map(lambda x: round(x), list1))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num, 2)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum variable\n    cube_sum = 0\n    \n    # Loop through the even numbers from 2 to 2n\n    for i in range(2, 2*n+1, 2):\n        cube_sum += i**3\n        \n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through first n even natural numbers\n    for i in range(2, n*2, 2):\n        # Add the cube of the number to the sum\n        sum += i**3\n    # Return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    \n    for i in range(2, n+2, 2):\n        sum += i**3\n        \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, (2*n)+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 2\n    cube_sum = 0\n    while i <= n:\n        cube_sum += i**3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result.strip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string.strip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with each element concatenated by the delimiter.\n    \"\"\"\n    new_tup = ()\n    for i in test_tup:\n        new_tup += (delimiter.join(str(i)),)\n    return new_tup"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of a tuple by a delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]  # remove trailing delimiter"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of strings.\n    delimiter (str): A delimiter to concatenate the strings.\n\n    Returns:\n    str: Concatenated string.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    This function takes a tuple of strings as an argument.\n    It then concatenates each string in the tuple by the delimiter''.\n    '''\n    result = ''\n    for string in test_tup:\n        result += string +''\n    return result.strip()"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_average_of_cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_average_of_cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    average = total_sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function will find the average of cubes of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i ** 3\n    average = total_sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[len(string)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(string[len(string)-1] for string in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0])-1  # get the index of the rear element of the first string in the tuple\n    result = []\n    for string in test_tuple:\n        result.append(string[rear_index])  # extract the rear element of each string and append to result list\n    return tuple(result)  # convert the result list to a tuple and return"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for s in test_tuple:\n        if s:\n            result.append(s[-1])\n        else:\n            result.append(None)\n    return tuple(result)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[::-1][-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as an input and returns a tuple containing the rear index element of each string.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a new tuple with only the rear index element of each string.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in test_tuple:\n        rear_tuple = rear_tuple + (i[len(i)-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    result = []\n    for string in test_tuple:\n        result.append(string[rear_index])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return tuple(rear_elements)"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes two parameters, list1 and x.\n    list1: list of elements\n    x: element to be counted\n    \n    This function returns the number of sublists containing x in the given list1.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublst in lst:\n        if x in sublst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function counts the number of sublists containing a particular element.\n    '''\n    count = 0\n    \n    for sub_lst in lst:\n        if x in sub_lst:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        list1 (list): The input list.\n        x: The element to search for.\n\n    Returns:\n        int: The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    This function takes a list as input and counts the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        else:\n            if list1[i] == x:\n                count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of integers as input and returns a list of odd numbers from the input list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the odd numbers from the input list.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of integers as input and returns a list of all the odd numbers present in the input list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of only the odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in yyyy-mm-dd format and returns it in dd-mm-yyyy format.\n    '''\n    date_obj = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if date_obj:\n        year = date_obj.group(1)\n        month = date_obj.group(2)\n        day = date_obj.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format. Please enter a date in yyyy-mm-dd format.\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Extract the year, month, and day from the input date string\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if not match:\n        raise ValueError('Invalid date format. Please use yyyy-mm-dd format.')\n    year, month, day = map(int, match.groups())\n    \n    # Convert the date to dd-mm-yyyy format\n    new_dt = f\"{day:02d}-{month:02d}-{year}\"\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date_match = re.search(date_pattern, dt)\n    if date_match:\n        year, month, day = date_match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_regex = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    match = date_regex.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        raise ValueError(f'{dt} is not a valid date format. It should be in yyyy-mm-dd format.')"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    This function takes a date in yyyy-mm-dd format and returns the date in dd-mm-yyyy format.\n    \"\"\"\n    # Regular expression to match the date format\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    # Searching for the pattern in the given date\n    match = re.search(pattern, dt)\n    if match:\n        # Extracting the groups from the match object\n        year, month, day = match.groups()\n        # Returning the date in dd-mm-yyyy format\n        return f\"{day}-{month}-{year}\"\n    else:\n        # Returning an error message if the date format is incorrect\n        return \"Incorrect date format. Please enter the date in yyyy-mm-dd format.\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date of format \"yyyy-mm-dd\" and returns a date of format \"dd-mm-yyyy\".\n    '''\n    # First, we need to split the date into day, month, and year.\n    day, month, year = dt.split('-')\n    \n    # Now, we need to rearrange the date into the desired format.\n    new_date = f\"{day}-{month}-{year}\"\n    \n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'  # regular expression pattern for yyyy-mm-dd format\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()  # extract the date components\n        return f\"{day}-{month}-{year}\"  # format the date into dd-mm-yyyy format\n    else:\n        return None  # return None if the date format is not recognized"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        return f'{match.group(3)}-{match.group(2)}-{match.group(1)}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.match(pattern, dt)\n    if result:\n        new_dt = '{}-{}-{}'.format(result.group(3), result.group(2), result.group(1))\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    # Perform insertion sort on small subarrays.\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes in an array and sorts it using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Determine the gap between the elements to be compared\n    n = len(my_list)\n    gap = n // 2\n\n    # Perform insertion sort for each gap size\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function takes an array as input and returns the array sorted using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n                \n            my_list[j] = temp\n        \n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    \n    # Start with a gap of n/2, then reduce by half until gap is 1\n    gap = n//2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # shift earlier gap-sorted elements up until the correct location for a[i] is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # put temp (the original a[i]) in its correct location\n            my_list[j] = temp\n        \n        # Decrease the gap for the next element\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a gap of n//2 and reduce it until it becomes 1\n    gap = n//2\n    while gap > 0:\n        # Iterate over the array, comparing adjacent elements and swapping them if necessary\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next iteration\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the elementwise and values from the two input tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing the elementwise and values from both the tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] and test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def quadratic_point_of_intersection(a, b, c):\n    \"\"\"\n    Given the coefficients of a quadratic equation ax^2 + bx + c = 0,\n    return the point of intersection with the y-axis as a tuple (x, y).\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None  # no real solution\n    x1 = (-b - discriminant**0.5) / (2*a)\n    y1 = a*x1**2 + b*x1 + c\n    return (x1, y1)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x = (-b + discriminant ** 0.5) / (2 * a)\n        return x\n    else:\n        # The parabola has no directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the x-intercepts\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Return the x-intercepts\n        return x1, x2\n    else:\n        # The parabola has no real directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x = (-b + discriminant**0.5)/(2*a)\n        return x\n    else:\n        print(\"The discriminant is not greater than zero.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes the coefficients of a quadratic equation in the form of a, b, and c and returns its directrix.\n    \"\"\"\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than zero\n    if delta > 0:\n        # Calculate the two solutions\n        x1 = (-b - delta**0.5) / (2*a)\n        x2 = (-b + delta**0.5) / (2*a)\n        \n        # Return the two solutions\n        return x1, x2\n    else:\n        return \"There are no real solutions to the quadratic equation.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x_directrix = (-b + discriminant**0.5)/(2*a)\n        return x_directrix\n    elif discriminant == 0:\n        x_directrix = -b/(2*a)\n        return x_directrix\n    else:\n        return \"No real solution.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Check if the equation is a quadratic equation\n    if a == 0:\n        raise ValueError(\"The equation is not a quadratic equation.\")\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than zero\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x_directrix = (-b + math.sqrt(discriminant))/(2*a)\n        return x_directrix\n    \n    elif discriminant == 0:\n        # Calculate the x-coordinate of the directrix\n        x_directrix = -b/(2*a)\n        return x_directrix\n    \n    else:\n        # The equation has complex roots, so there is no directrix\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d > 0:\n        x_dir = (-b + d ** 0.5) / (2 * a)\n        return x_dir\n    elif d == 0:\n        x_dir = (-b) / (2 * a)\n        return x_dir\n    else:\n        return None # Parabola has no real roots"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the x-coordinate of the directrix\n        x = -b / (2*a)\n        \n        # Check if the directrix is a vertex\n        if a == 0:\n            if b == 0:\n                print(\"The directrix is undefined.\")\n            else:\n                print(\"The directrix is at x =\", x)\n        else:\n            print(\"The directrix is at x =\", x)\n    elif discriminant == 0:\n        # Calculate the x-coordinate of the directrix\n        x = -b / (2*a)\n        \n        # Print the result\n        print(\"The directrix is at x =\", x)\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1).intersection(set(list2))) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Returns True if there is at least one common element in the two input lists.\n    \"\"\"\n    # Convert the lists to sets to enable fast element lookup\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any element is present in both sets\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if set(list1).intersection(set(list2)) else False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n\n    # Iterate over each element in the first list\n    for i in list1:\n        # Check if the element is also present in the second list\n        if i in list2:\n            return True\n    \n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the median length of the trapezium\n    median = (2 * area) / (base1 + base2)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium\n    based on the given base1, base2, and height values.\n    '''\n    a = (base1 + base2) / 2\n    median = a * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    median = (base1 + base2) / 2\n    median_height = height / 2\n    return median * median_height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes the base1, base2, and height of a trapezium as inputs and returns the median length of the trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) / 2 * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median length of the trapezium\n    median = ((base1 + base2) / 2) * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) / 2 * height / 2\n    return area"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = ((base1 + base2) / 2) * height\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments, an array and a number, and checks whether the number is greater than\n    the elements of the array. If it is, it returns True, otherwise, it returns False.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = True\n    for element in arr:\n        if element > number:\n            result = False\n            break\n    return result"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a\\Sb+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\sb+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_digit(n):\n    '''\n    Returns the last digit of the given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    # If the input number is negative, find its absolute value and use the modulo operator to find the last digit\n    if n < 0:\n        n = abs(n)\n        last_digit = n % 10\n    \n    # If the input number is positive, use integer division to find the last digit\n    else:\n        last_digit = n // 10**len(str(n)) % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of that integer.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n *= -1\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    if n < 0:\n        n *= -1  # if the number is negative, take its positive value\n\n    last_digit = n % 10  # take the last digit using the modulo operator\n\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n *= -1\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list containing all the negative numbers in the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with negative numbers from the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers from the list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the negative numbers from the list.\n    \"\"\"\n    negative_list = []\n    for i in list1:\n        if i < 0:\n            negative_list.append(i)\n    return negative_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if ord(i) % 2 == 0:\n            result += i\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i.isdigit() or i.isalpha():\n            result += i\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the odd characters removed.\n    \"\"\"\n    # Convert the string to a list of characters\n    str_list = list(str1)\n\n    # Loop through each character in the list and remove it if it is odd\n    for i in range(len(str_list)-1, -1, -1):\n        if ord(str_list[i]) % 2!= 0:\n            str_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as an input and removes all odd characters from the string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i % 2 == 0:\n            new_str += i\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(c for i, c in enumerate(str1) if i % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]) or \\\n            (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuples in a list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] > test_list[j][0]) and (test_list[j][1] > test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list as input and returns the number of bidirectional tuple pairs in the list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]) or (test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0]) or (test_list[j][1] == test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result*10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a string, then split it into individual characters,\n    # and finally join them back into a single string\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(?:an?|the)\\b\\s+\\b(?:more|less|most|least|best|worst|mostly)\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return f\"The first adverb is '{match.group()}' at position {match.start()}.\"\n    else:\n        return \"No adverb found in the given sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|really|quite|rather|extremely|very much|almost|nearly|more than|less than|much|little|a lot|a little)\\b'\n    matches = re.search(pattern, text)\n    if matches:\n        return matches.group(), matches.start()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(very|really|rather|quite|extremely|really|very|really|much|more|most|mostly)\\b')\n    match = adverb_pattern.search(text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b(very|really|extremely|really well|really badly|really well done|very well)\\b', text)\n\n    # If adverbs are found, find their positions and return them\n    if adverbs:\n        for adv in adverbs:\n            position = text.find(adv)\n            print(f\"The adverb '{adv}' was found at position {position}.\")\n    else:\n        print(\"No adverbs were found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # pattern to match adverbs\n    pattern = r'\\b(very|extremely|really|rather|quite|actually|actually)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n\n    if matches:\n        for match in matches:\n            print(f\"Adverb found: {match.group()}\")\n            print(f\"Position: {match.start()}\")\n            break\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'  # regular expression pattern to match adverbs\n    match = re.search(pattern, text)  # search for the pattern in the text\n    \n    if match:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        return adverb, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\nPosition: {match.start()}\"\n    else:\n        return \"No adverb found.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\nPosition: {match.start()}\"\n    else:\n        return \"No adverb found.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b\\w*ly\\b')\n    match = adverb_pattern.search(text)\n    if match:\n        return f\"The first adverb is '{match.group()}' and its position is {match.start()} to {match.end() - 1}.\"\n    else:\n        return \"No adverb found in the sentence.\""
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the surface area of the cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns the surface area of the cube.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of a cube as input and returns its surface area.\n    '''\n    surface_area = 6 * l ** 2   # formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/total_count\n"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    ratio = positive_count / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function returns the largest negative number from the given list.\n    '''\n    largest_num = None\n    for num in list1:\n        if num < 0 and (largest_num is None or num > largest_num):\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') # initialize the largest number to negative infinity\n    for num in list1:\n        if num < largest: # if the current number is smaller than the largest, update the largest\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If the list contains no negative numbers, it returns None.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    If there are no negative numbers in the list, it returns None.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    largest_num = None\n    for num in list1:\n        if num < 0 and (largest_num is None or num > largest_num):\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number in a list.\n    \"\"\"\n    largest_neg = None\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            if i >= K:\n                trimmed_tup += (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(K))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[i] for i in range(K)))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[-K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i!= K)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0][K:], x[1][K:]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            result.append(tuple(test_list[i][:K]))\n        else:\n            result.append(tuple(test_list[i]))\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error! Tuples should be of equal size.\")\n        return\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return count_dict[lst]"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrences of all elements of lst in the tuple tup.\n    \"\"\"\n    count = Counter(lst)\n    return tuple(count[elem] for elem in tup)"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input. It returns a dictionary with keys as elements of the list and values as the number of times that element occurs in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for element in tup:\n        if element in count:\n            result[element] = count[element]\n        else:\n            result[element] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for i in tup:\n        if i in count_dict:\n            result.append(count_dict[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes two arguments:\n    tup: A tuple of elements\n    lst: A list of elements\n    \n    The function returns a dictionary with keys as elements of lst and values as the corresponding count of occurrence in tup.\n    \"\"\"\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = tup.count(i)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    - tup: a tuple of elements\n    - lst: a list of elements\n    \n    The function returns a dictionary with the elements of the tuple as keys and their corresponding counts in the list as values.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for elem in tup:\n        if elem in count_dict:\n            result[elem] = count_dict[elem]\n        else:\n            result[elem] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n    \n    # Create an empty list to store the count of each element in the list\n    count_lst = []\n    \n    # Iterate over the elements in the list\n    for elem in lst:\n        # If the element is in the tuple, append its count to the count_lst\n        if elem in count_dict:\n            count_lst.append(count_dict[elem])\n        # If the element is not in the tuple, append 0 to the count_lst\n        else:\n            count_lst.append(0)\n    \n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        if i in count: \n            print(f\"The element {i} occurs {count[i]} times in the tuple.\") \n        else: \n            print(f\"The element {i} does not occur in the tuple.\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns the count of all elements of the list \n    in the tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = lst.count(item)\n    for key, value in count_dict.items():\n        if key in tup:\n            print(key, \"occurs\", value, \"times in the tuple.\")"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the cubes of individual elements in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function will take a list of numbers as input and return a list of cubes of individual elements in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers up to n.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is odd, add 1 to the sum\n        if i % 2 == 1:\n            sum += 1\n        # if the number is even, add i to the sum\n        else:\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    p = [1, -1]\n    for i in range(2, n):\n        next = p[i-1] + p[i-2]\n        p.append(next)\n    return sum(p)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"The sum of the first\", n, \"terms of the Perrin sequence is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i == 0 or i == 1:\n            sum += 1\n        else:\n            sum += i * (i + 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i * (i-1)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers up to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [0, 1]\n    for i in range(2, n):\n        p.append(p[i-1] + p[i-2])\n    return p[n-1]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [0, 1]\n    for i in range(2, n):\n        perrin.append(perrin[i-1] + perrin[i-2])\n    return perrin[n-1]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(''.join(l[i:i+str]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str (str): The string that will be used as the delimiter to split the list of strings.\n    l (list): The list of strings to extract strings from.\n\n    Returns:\n    list: A list of strings extracted from the input list.\n    '''\n    result = []\n    current_string = ''\n    current_size = 0\n    \n    for i in l:\n        words = i.split(str)\n        for word in words:\n            if len(current_string) + len(word) + len(str) <= current_size:\n                result[-1] += word + str\n            else:\n                result.append(word)\n                current_string = word\n                current_size = len(word)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            result.append(str[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified number of characters from each string in a list of strings.\n    \"\"\"\n    result = []\n    for s in str_list:\n        result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of specified size.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(str_list[i:i+size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(' '.join(l[i:i+str]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a list of strings from a given list of strings.\n    Each string is extracted from a given size starting from the beginning of the list.\n\n    :param str_list: A list of strings to extract from.\n    :param size: The size of each extracted string.\n    :return: A list of extracted strings.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(''.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings as input and returns a list of strings with specified size.\n    '''\n    result_list = []\n    for string in str_list:\n        if len(string) >= size:\n            result_list.append(string[:size])\n    return result_list"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and returns a string with all whitespaces removed.\n    '''\n    # Using regex to replace all whitespaces with empty string\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Removes all whitespaces from a given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the loss amount on a sale if the given amount has loss, else returns 0.\n\n    :param actual_cost: The actual cost of the product before the sale.\n    :param sale_amount: The amount of the product sold.\n    :return: The loss amount on a sale if the given amount has loss, else returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return abs(sale_amount - actual_cost)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given sale amount has loss.\n    If the sale amount is greater than the actual cost, it returns 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes actual cost and sale amount as input and returns the loss amount if there is any loss, else it returns 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if i!= n // i:\n                if (n // i) % 2 == 0:\n                    sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n            if i!= n//i:\n                sum_of_factors += n//i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is a factor of n and is even, add it to the sum\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i!= i:\n                if n // i % 2 == 0:\n                    sum += n // i\n    return sum\n\nprint(sumofFactors(12)) # Output: 10"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    \n    # check if the number is even\n    if n % 2 == 0:\n        # find the square root of the number\n        root = int(math.sqrt(n))\n        \n        # loop through all the numbers from 2 to the square root of the number\n        for i in range(2, root+1):\n            # check if the number is a factor of n\n            if n % i == 0:\n                # check if the factor is even\n                if i % 2 == 0:\n                    # add the factor to the sum\n                    sum += i\n                    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes an integer as input and returns the sum of even factors of the number.\n    '''\n    factors = []  # creating an empty list to store factors of the number\n    for i in range(1, n+1) : \n        if n % i == 0 :  # checking if the number is divisible by i \n            factors.append(i)  # appending i to the list of factors\n    \n    even_factors = [i for i in factors if i % 2 == 0]  # creating a list of even factors\n    \n    return sum(even_factors)  # returning the sum of even factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i \n            if i!= n//i : \n                sum += n//i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a text as input and returns all words containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b' # pattern to match words containing 'z'\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    if result:\n        return result\n    else:\n        return \"No match found\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function takes a month number as input and returns True if the given month number contains 31 days.\n    If the given month number is not a valid number (e.g. not an integer), it returns False.\n    \"\"\"\n    if not isinstance(monthnum2, int):\n        return False\n    \n    if monthnum2 == 2:\n        return True\n    \n    if monthnum2 % 2 == 0:\n        return True\n    \n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    \n    return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    A function to check whether a given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11] and monthnum!= 2:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Check if a month number contains 31 days.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Month number is invalid\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"This month contains 30 days.\")\n    elif monthnum == 2:\n        print(\"This month contains 28 or 29 days.\")\n    else:\n        print(\"This month contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 31 days and False otherwise.\n    '''\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and (2020 % 4 == 0 and (2020 % 100!= 0 or 2020 % 400 == 0))):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"The month number contains 30 days.\")\n    elif monthnum2 == 2:\n        print(\"The month number contains 28 days.\")\n    else:\n        print(\"The month number contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11] or (monthnum2 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Reverse each string in a given list of string values.\n    \"\"\"\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = [sublist]\n        elif len(sublist) == min_len:\n            min_lst.append(sublist)\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min(lst):\n    \"\"\"\n    This function takes a list as input and returns a sublist of minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst[1:]:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_lst = sublist\n            min_len = len(sublist)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_lst = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_lst = sub_lst\n            min_len = len(sub_lst)\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes two arguments, length and breadth, which represent the length and breadth of a rectangle.\n    It returns the area of the rectangle.\n    \"\"\"\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as arguments and returns its area.\n    \"\"\"\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes length and breadth of a rectangle as arguments and returns the area of the rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Returns the area of a rectangle given its length and breadth.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes the length and width of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function finds the area of a rectangle given its length and breadth.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function removes all uppercase substrings from a given string.\n    \"\"\"\n    # Find all uppercase substrings\n    uppercase_substrings = re.findall('[A-Z]+', str1)\n\n    # Remove all uppercase substrings\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # find all uppercase substrings using regex\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    # replace each uppercase substring with a space\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring,'')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define regex pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Find all uppercase substrings in the string and replace with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list with the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list containing only the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract(lst):\n    return [lst[i][0] for i in range(len(lst))]\n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract(lst))  # Output: [1, 4, 7]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list of sublists and returns the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function counts the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            res.append(list1[i] + list1[j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n    \"\"\"\n    return [lst[i:j] for i in range(len(lst)) for j in range(i+1, len(lst)+1)]"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append([list1[i], list1[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(list1[i]+list1[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Create an empty list to store all possible combinations\n    combinations = []\n    \n    # Generate all possible combinations using the itertools module\n    from itertools import combinations\n    for i in range(1, len(lst) + 1):\n        for c in combinations(lst, i):\n            combinations.append(list(c))\n    \n    # Return all possible combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i] + lst[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(list1[i] + list1[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for subset in itertools.combinations(list1, i):\n            result.append(subset)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    local_max = 1\n    local_min = 1\n    for i in range(len(arr)):\n        local_max = max(arr[i], local_max * arr[i])\n        local_min = min(arr[i], local_min * arr[i])\n        max_product = max(max_product, local_max)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to keep track of the maximum and maximum subarray found so far\n    max_product = float('-inf')\n    max_subarray = []\n\n    # Iterate over all possible subarrays of the array\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray = arr[i:j+1]\n            product = 1\n            for k in subarray:\n                product *= k\n            if product > max_product:\n                max_product = product\n                max_subarray = subarray\n\n    return max_subarray"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    Args:\n    - arr (list of int): The input array of integers.\n\n    Returns:\n    - int: The maximum product subarray.\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    end_index = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Update current product\n        current_product *= arr[i]\n\n        # Update maximum product and indices if necessary\n        if current_product > max_product:\n            max_product = current_product\n            start_index = i\n            end_index = i\n\n        # If current product becomes negative, reset it and move to the next index\n        if current_product < 0:\n            current_product = 1\n            end_index = i + 1\n\n    # Return maximum product and subarray\n    return max_product, arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = float('-inf')\n    min_ending_here = float('inf')\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num, min_ending_here * num)\n        min_ending_here = min(num, max_ending_here * num, min_ending_here * num)\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function finds the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        temp = max_ending_here * arr[i]\n        max_ending_here = max(arr[i], temp, arr[i]*max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    local_product = 1\n    for i in range(len(arr)):\n        local_product *= arr[i]\n        if local_product > max_product:\n            max_product = local_product\n        if local_product < 0:\n            local_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    left = 0\n    right = 0\n    n = len(arr)\n\n    for i in range(n):\n        curr_product *= arr[i]\n\n        while curr_product > max_product:\n            max_product = curr_product\n            left = i - (right - left) + 1\n            right = i\n\n        if curr_product == 0:\n            curr_product = 1\n            left = i + 1\n\n    return arr[left:right+1], max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n        \n        if curr_product == 0:\n            curr_product = 1\n            \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(d, n):\n    '''\n    This function takes a dictionary and a value and checks if all values are the same.\n    If all values are the same, it returns True, otherwise it returns False.\n    '''\n\n    # initialize a variable to keep track of the first value\n    first_value = None\n\n    # loop through the dictionary\n    for value in d.values():\n\n        # if the first value is None, set it to the current value\n        if first_value is None:\n            first_value = value\n\n        # if the current value is not the first value, return False\n        elif value!= first_value:\n            return False\n\n    # if all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Args:\n    dictionary (dict): A dictionary of values.\n    n (int): The number of values in the dictionary.\n\n    Returns:\n    bool: True if all values are the same, False otherwise.\n    \"\"\"\n\n    # Initialize a variable to keep track of the first value\n    first_value = None\n\n    # Loop through the dictionary\n    for value in dictionary.values():\n\n        # If the first value hasn't been set yet, set it\n        if first_value is None:\n            first_value = value\n\n        # If the current value is different from the first value, return False\n        elif value!= first_value:\n            return False\n\n    # If we've gone through the whole dictionary and all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for i in range(1, n):\n        if value!= list(dict.values())[i]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_list = []\n    for i in dict.values():\n        value_list.append(i)\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \"\"\"\n    for value in d.values():\n        if value!= d[list(d.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    return values.count(values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    This function takes a dictionary as input and checks if all the values in the dictionary are the same.\n    \"\"\"\n    values = set(dictionary.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a value as input.\n    It returns True if all values in the dictionary are equal to the given value.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in the dictionary are the same.\n    '''\n    # Get the first value from the dictionary\n    first_value = next(iter(dict.values()))\n    \n    # Check if all values in the dictionary are the same\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    \n    return True"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as an input and returns a new dictionary\n    with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function takes a dictionary as input and removes all the empty items from it.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        min_so_far = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n    \n    for num in arr:\n        if num > 0:\n            current_product *= num\n        elif num < 0:\n            current_product /= num\n        else:\n            current_product = 1\n            \n        if current_product > max_product:\n            max_product = current_product\n            \n        if current_product < min_product:\n            min_product = current_product\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = min_so_far = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    max_product = float('-inf')\n    curr_product = 1\n    \n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n        if curr_product < 0:\n            curr_product = 1\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    \n    max_product = arr[0] * arr[1]\n    max_index = 0\n    \n    for i in range(2, len(arr)):\n        if arr[i] > arr[max_index]:\n            max_product = arr[i] * arr[max_index]\n            max_index = i\n        elif arr[i] * arr[max_index] > max_product:\n            max_product = arr[i] * arr[max_index]\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_ending_here * arr[i]:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here = max_ending_here * arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    Maximum product of the increasing subsequence.\n    \"\"\"\n\n    n = len(arr)\n    if n < 2:\n        return None\n\n    # Initialize maximum and second maximum product variables\n    max_product = arr[0]\n    second_max_product = arr[0]\n\n    # Traverse through the array from second element\n    for i in range(1, n):\n        # If current element is greater than the maximum element\n        if arr[i] > max_product:\n            # Update the second maximum element\n            second_max_product = max_product\n            # Update the maximum element\n            max_product = arr[i]\n        # If current element is greater than the second maximum element and not equal to the maximum element\n        elif arr[i] > second_max_product and arr[i]!= max_product:\n            # Update the second maximum element\n            second_max_product = arr[i]\n\n    # Return the maximum product\n    return max_product * second_max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize maximum product to the first element\n    max_product = arr[0]\n    # Initialize minimum product to the first element\n    min_product = arr[0]\n    # Initialize maximum subsequence length to 1\n    max_length = 1\n    \n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Update maximum and minimum product as per the current element\n        if arr[i] >= arr[i-1]:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n            max_length += 1\n        else:\n            # Reset the maximum and minimum products to the current element\n            max_product = arr[i]\n            min_product = arr[i]\n            max_length = 1\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Returns the maximum product of an increasing subsequence in the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n\n    # Find the maximum subarray of length 2\n    max_product_2 = max(arr[0] * arr[1], arr[0], arr[1])\n\n    # Find the maximum subarray of length 3\n    max_product_3 = max(arr[0] * arr[1] * arr[2], arr[0] * arr[2], arr[1] * arr[2])\n\n    # Find the maximum subarray of length 4 and above\n    for i in range(3, n):\n        max_product_4 = max(max_product_2 * arr[i], max_product_3, arr[i])\n        max_product_3 = max_product_2\n        max_product_2 = max_product_4\n\n    return max_product_4"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    # Find the product of the array\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    \n    # Return the remainder of the product divided by n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments:\n    - arr: an array of integers\n    - n: an integer\n    \n    The function returns the product of the array multiplication modulo n.\n    '''\n    # initialize the product to 1\n    product = 1\n    \n    # loop through the array and multiply each element with the product\n    for i in arr:\n        product = (product * i) % n\n    \n    # return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    \n    for num in arr:\n        result = (result * num) % n\n        \n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product = product % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    This function will check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    Checks if the given list contains consecutive numbers.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if abs(l[i+1]-l[i]) == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    for i in range(len(l)-1):\n        if abs(l[i+1] - l[i]) == 1:\n            consecutive = True\n            break\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    This function checks whether a given list contains consecutive numbers or not.\n    :param l: A list of integers\n    :return: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    result = [t for t in test_list1 if t in intersection_set or t in test_list2]\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets of tuples to remove duplicates and then convert them back to lists\n    set1 = list(set(map(tuple, test_list1)))\n    set2 = list(set(map(tuple, test_list2)))\n    \n    # Create an empty list to store the intersection of tuples\n    intersection = []\n    \n    # Loop through each tuple in the first set and check if it's in the second set\n    for tpl in set1:\n        if tpl in set2:\n            intersection.append(tpl)\n    \n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    result = [t for t in test_list1 + test_list2 if t in intersection]\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Converting the list to sets to find the intersection of the tuples\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Converting the intersection set back to a list of tuples\n    result = list(map(tuple, intersection))\n    \n    # Returning the result\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    intersection_set = set1 & set2\n    return list(map(list, intersection_set))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1 & set2\n    return [tuple(x) for x in intersection]"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty list to store the common tuples\n    common_tuples = []\n    \n    # loop through the first list and check if the element is present in the second list\n    for i in test_list1:\n        if i in test_list2:\n            # check if the element is already present in the common_tuples list\n            if i not in common_tuples:\n                common_tuples.append(i)\n    \n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(tuple(i) for i in test_list1)\n    set2 = set(tuple(i) for i in test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = set(test_list1) & set(test_list2)\n    return list(result)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    result = []\n    for item in intersection:\n        if isinstance(item, tuple):\n            if item not in result:\n                result.append(item)\n        elif isinstance(item, list):\n            if tuple(item) not in result:\n                result.append(tuple(item))\n        else:\n            print(\"Error: Input list should contain only tuples or lists.\")\n            return None\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character 'ch' in the string'str1' with the character 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with the character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    This function replaces a character in a given string with a new character.\n\n    Parameters:\n    str1 (str): A string that contains characters to be replaced.\n    ch (str): A character that needs to be replaced.\n    newch (str): The new character to replace the old character with.\n\n    Returns:\n    str: A new string with the replaced characters.\n    '''\n\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces the character 'ch' with 'newch' in the given string'str1'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a given character `ch` in a string `str1` with a new character `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a given string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with the character 'newch'.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value in descending order.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and sorts it by its values in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and returns a list of tuples sorted by the value in descending order.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function finds the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # sort the array in ascending order\n    nums.sort()\n    # find the sum of the smallest and largest values\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    This function returns the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case,\n    and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are lower case.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an input and returns True if all the characters in the string are lowercase, else returns False.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are in lower case, else False.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    \"\"\"\n    return string.lower() == string"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if it is all in lower case, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(r'[a-z]+', str1, re.IGNORECASE)\n    \n    # Replace all lowercase substrings with an empty string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1, flags=re.IGNORECASE)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b\\w*[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Use regex to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Find all matches and store them in a list\n    matches = pattern.findall(str1)\n    # Remove all matches from the string and return the modified string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1, flags=re.IGNORECASE)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove all lowercase substrings from a given string.\n\n    Args:\n    string (str): the string to remove lowercase substrings from\n\n    Returns:\n    str: the input string with all lowercase substrings removed\n    \"\"\"\n    pattern = r'(?<!\\w)[a-z]+|(?<=\\w)[a-z]+(?=\\W|$)'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function removes lowercase substrings from a given string.\n    \"\"\"\n    # Find all lowercase substrings\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Replace lowercase substrings with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from the given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # create an empty list to store the words with lowercase characters\n    result = []\n    # iterate over the words and check if they contain lowercase characters\n    for word in words:\n        if any(c.islower() for c in word):\n            # if the word contains lowercase characters, append it to the result list\n            result.append(word)\n    # join the words in the result list back into a string and return it\n    return''.join(result)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10 ** (len(str(n)) - 1) % 10"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the first digit of the number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Returns the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function returns the first digit of a number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the first digit of n.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    elif n == 0:\n        return 0\n    else:\n        return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:  # Handling negative numbers\n        n *= -1\n    while n >= 10:\n        n /= 10\n    return int(n)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    \"\"\"\n    Returns the first digit of a given number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_odd_numbers(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Split(list):\n    even = []\n    odd = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even, odd"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a list with only the odd integers from the input list.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_odd_numbers(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [num for num in numbers if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n ** 2 + n) // 2\n\n    # calculate the sum of the first n natural numbers\n    sum_of_n = n * (n + 1) // 2\n\n    # calculate the difference between the sum of cubes and the sum of n\n    return sum_of_n - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_n = sum(range(1, n+1))\n    return sum_cubes - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function will take an integer n as input and will calculate the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_n = 0\n    \n    # iterate from 1 to n and add the cubes of natural numbers and natural numbers to their respective sum variables\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_n += i\n        \n    # return the difference between the two sums\n    return sum_cubes - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize variables\n    cube_sum = 0\n    num_sum = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # add i^3 to cube_sum\n        cube_sum += i**3\n        # add i to num_sum\n        num_sum += i\n\n    # return the difference\n    return cube_sum - num_sum"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes in an integer n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    \n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A of size N and returns the number of pairs of odd XOR values.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all pairs of integers in A\n    for i in range(N-1):\n        for j in range(i+1, N):\n            # Check if the xor value is odd\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, B):\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if (A[i] ^ B[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if(A[i]^A[j])%2!=0:\n                count+=1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between the two integers.\n    '''\n    # convert the input integers into strings\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # initialize the variable to store the sum of the per-digit difference\n    sum_digit_diff = 0\n\n    # loop through each digit in the strings and add the difference to the sum\n    for i in range(len(num1)):\n        diff = abs(int(num1[i]) - int(num2[i]))\n        sum_digit_diff += diff\n\n    return sum_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers into lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Find the per-digit difference between the two integers and add them up\n    distance = 0\n    for i in range(len(digits1)):\n        distance += abs(digits1[i] - digits2[i])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    while n1 > 0:\n        digit_n1 = n1 % 10\n        digit_n2 = n2 % 10\n        s += abs(digit_n1 - digit_n2)\n        n1 //= 10\n        n2 //= 10\n    return s"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    while n1 > 0:\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n        s += abs(digit1 - digit2)\n        n1 //= 10\n        n2 //= 10\n    return s"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # initialize variables\n    digit_sum = 0\n    \n    # loop over digits in the two numbers and add the difference to digit_sum\n    for i in range(len(n1_str)):\n        digit_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n        \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Find the length of the strings (assuming they are the same length)\n    length = len(n1_str)\n\n    # Initialize the sum of the per-digit differences to 0\n    digit_distance_sum = 0\n\n    # Loop through each digit in the strings and add the absolute value of the difference to the sum\n    for i in range(length):\n        digit_distance_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert n1 and n2 to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # initialize the sum variable\n    digit_distance_sum = 0\n\n    # loop through the characters in n1 and n2\n    for i in range(len(n1_str)):\n        # calculate the absolute difference between the two characters\n        digit_distance = abs(int(n1_str[i]) - int(n2_str[i]))\n        # add the difference to the sum variable\n        digit_distance_sum += digit_distance\n\n    # return the sum of the per-digit differences\n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and get their digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the sum of per-digit differences\n    diff_sum = 0\n    for i in range(len(digits1)):\n        diff_sum += abs(digits1[i] - digits2[i])\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1 = str(n1)\n    n2 = str(n2)\n    diff = 0\n    for i in range(len(n1)):\n        diff += abs(int(n1[i]) - int(n2[i]))\n    return diff\n\nprint(digit_distance_nums(123, 456)) # Output: 450"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    diff_sum = 0\n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list a of size'size' as input and returns the maximum sum of \n    a contiguous sublist in the list.\n    \n    For example:\n    >>> max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 8)\n    18\n    \"\"\"\n    \n    max_sum = float('-inf')  # initialize the maximum sum variable with negative infinity\n    curr_sum = 0  # initialize the current sum variable with 0\n    \n    for i in range(size):\n        curr_sum += a[i]  # add the ith element of the list to the current sum\n        \n        # if the current sum is greater than the maximum sum so far, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        # if the current sum becomes negative, reset it to 0, because we are looking for contiguous sublists\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to remove duplicates and then back to tuples\n    set1 = tuple(sorted(set(test_tup1)))\n    set2 = tuple(sorted(set(test_tup2)))\n    \n    # Create a set of elements that are in either tuple\n    union_set = set1 + set2\n    \n    # Convert the set back to a sorted tuple and return it\n    return tuple(sorted(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple to remove duplicates\n    set1 = set(test_tup1)\n    # Create a set from the second tuple to remove duplicates\n    set2 = set(test_tup2)\n    # Find the union of the two sets and convert it back to a sorted list\n    union_list = sorted(set1.union(set2))\n    # Return the sorted list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n\n    # Convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # convert the set to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(set(test_tup2))\n    sorted_union = sorted(union)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n    sorted_tup = sorted(union_tup)\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove any duplicate elements from the combined tuple\n    unique_tup = tuple(set(combined_tup))\n    \n    # Sort the unique tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    \n    # Output the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set from the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the set back to a sorted list\n    union_list = sorted(list(union_set))\n    \n    # Print the sorted list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set()\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the union set back to a sorted tuple\n    union_tup = tuple(sorted(union_set))\n\n    # Return the union tuple\n    return union_tup"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n\n    :param lst: A list of integers\n    :return: The length of the longest sublist\n    \"\"\"\n\n    max_len = 0\n\n    # iterate over all possible sublists of lst\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            # if the length of the sublist is greater than the current max length\n            if j - i + 1 > max_len:\n                # update the max length\n                max_len = j - i + 1\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist_length = 0\n        for j in range(i, len(lst)):\n            if lst[j]!= lst[j-1]:\n                sublist_length += 1\n            else:\n                break\n        if sublist_length > max_length:\n            max_length = sublist_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublists.\n\n    Parameters\n    ----------\n    lst : list\n        A list of integers.\n\n    Returns\n    -------\n    max_length : int\n        The length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length and all(lst[k] < lst[k+1] for k in range(i,j)):\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of sublists and finds the length of the longest sublist.\n    \"\"\"\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function will find the length of the longest sublists in a given list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[j] == lst[i]:\n                temp_length += 1\n            else:\n                if temp_length > max_length:\n                    max_length = temp_length\n                temp_length = 0\n    if temp_length > max_length:\n        max_length = temp_length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function takes in a string and returns a list of all the values between quotation marks.\n    \"\"\"\n    # Use regex to find all matches of quotation marks\n    matches = re.findall(r'\"[^\"]*\"', text)\n    # Remove quotation marks from each match and add to list\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\"(.*?)\"'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 # initialize the count to 0\n\n    # loop through all possible pairs of the given list\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]: # check if both elements are unequal\n                count += 1 # increment the count if both elements are unequal\n\n    return count # return the count of unordered pairs"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs \n    where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count "
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Create a set to store unique elements of the array\n    unique_set = set(arr)\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through each element in the unique set\n    for i in unique_set:\n\n        # Iterate through each element in the remaining portion of the array\n        for j in arr[arr.index(i)+1:]:\n\n            # If the current element is unequal to i and j, increment the count by 1\n            if i!= j:\n                count += 1\n\n    # Return the count of possible unordered pairs\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as an input and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n    \n    Args:\n    word (str): The string to be splitted.\n    \n    Returns:\n    list: A list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function returns the sum of digits of a given non-negative integer n.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input: Please enter a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Error: input must be non-negative\"\n    else:\n        sum = 0\n        while n!= 0:\n            sum += n % 10\n            n = n // 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be a non-negative integer\"\n    else:\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as an argument and returns the sum of its digits.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a non-negative integer.\"\n    else:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"The number should be a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    otherwise False.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted, else False.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as an input and returns True if the list is sorted in ascending order, and False otherwise.\n    \"\"\"\n    n = len(list1)\n    \n    # If the list has only one element or is empty, it is considered to be sorted.\n    if n <= 1:\n        return True\n    \n    # Loop through the list and compare each element with its adjacent element. If any element is greater than its adjacent element, then the list is not sorted.\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # If all the elements in the list are in ascending order, then the list is sorted.\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    :param list1: A list of integers or floats\n    :return: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    n = len(list1)\n    for i in range(0, n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    This function takes a list of lists as input and sorts each sublist of strings.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns two unique numbers from the list.\n    '''\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 2:\n        return \"There are not enough unique numbers in the list\"\n    else:\n        return unique_nums[0], unique_nums[1]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n            else:\n                unique_nums.remove(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if isinstance(num, list):\n            for n in num:\n                unique_nums.add(n)\n        else:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    # Create a set to store unique numbers\n    unique_nums = set()\n    # Loop through each list in nums\n    for lst in nums:\n        # Loop through each number in the list\n        for num in lst:\n            # Add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Return a list of unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    if len(unique_nums) < 2:\n        return None\n    return unique_nums[0], unique_nums[1]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function removes duplicate numbers from a given list of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        for j in i:\n            if j not in unique_nums:\n                unique_nums.append(j)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    if len(unique_nums) < 2:\n        return None\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(lst):\n    unique_nums = set(lst)  # create a set of unique numbers in the list\n    product = 1\n    for num in unique_nums:\n        product *= num  # multiply each unique number by the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_numbers = set(list_data) # create a set of unique numbers from the given list\n    product = 1 # initialize the product to 1\n\n    for num in unique_numbers: # iterate through the unique numbers\n        product *= num # multiply the product with the current number\n\n    return product # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes in a list as an argument and returns the product of the unique numbers in the list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(list_data)\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate over the unique numbers in the set and multiply them together\n    for num in unique_nums:\n        product *= num\n        \n    # Return the product of the unique numbers\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input, and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area_base = 2 * 3.14 * r * h\n    area_side = 2 * 3.14 * r * r\n    total_area = area_base + 2 * area_side\n    return total_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius (r) and height (h) of a cylinder and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as arguments, and returns the surface area of the cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * (r + h)\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nprint(\"The surface area of the cylinder is:\", surfacearea_cylinder(radius, height))"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h + 2 * 3.14159 * r**2\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and checks whether A is a sublist of B or not.\n\n    Parameters:\n    A (list): First list\n    B (list): Second list\n    \n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    '''\n\n    n = len(A)\n    m = len(B)\n\n    # if A is greater than B, then A cannot be a sublist of B\n    if n > m:\n        return False\n\n    # loop through all possible subarrays of B of length n\n    for i in range(m - n + 1):\n        j = 0\n\n        # loop through the elements of the current subarray of B\n        while j < n and B[i + j] == A[j]:\n            j += 1\n\n        # if we have reached the end of the subarray without finding any mismatch,\n        # then A is a sublist of B\n        if j == n:\n            return True\n\n    # if we have checked all possible subarrays of B and none of them contain A,\n    # then A is not a sublist of B\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and returns True if list A is a sublist of list B, otherwise False.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        count = 0\n        for i in range(len(B)):\n            if B[i] == A[0]:\n                for j in range(i, i+len(A)):\n                    if B[j] == A[j-i]:\n                        count += 1\n                if count == len(A):\n                    return True\n                else:\n                    count = 0\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sub_array(A, B):\n    '''\n    This function takes two lists as input and returns True if A is a sublist of B,\n    otherwise it returns False.\n    '''\n    # Check if A is a sublist of B\n    if all(elem in B for elem in A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    This function takes two lists as input, A and B, and checks whether A is a sublist of B or not.\n    \"\"\"\n    \n    if A == []:\n        return True\n    \n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        for j in range(len(A)):\n            if B[i+j]!= A[j]:\n                break\n        else:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function checks whether a list A is a sublist of another list B or not.\n    '''\n    if B == A: \n        return True\n    \n    if len(A) > len(B): \n        return False\n    \n    for i in range(len(B) - len(A) + 1): \n        for j in range(len(A)): \n            if B[i+j]!= A[j]: \n                break\n        else: \n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, False otherwise.\n    '''\n    # Check if A is empty\n    if len(A) == 0:\n        return True\n    # Check if A is a sublist of B\n    i = 0\n    j = 0\n    while i < len(B) and j < len(A):\n        if B[i] == A[j]:\n            j += 1\n        if j == len(A):\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and returns True if A is a sublist of B, otherwise, it returns False.\n    '''\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)-len(A)+1):\n        if B[i:i+len(A)] == A:\n            return True\n\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    \n    factorial = 1\n    \n    for i in range(1, n+1): \n        factorial *= i\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    return int(str(factorial)[-1])"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    # find the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # find the last digit of the factorial\n    last_digit = fact % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        return \"Lists must be of the same length.\"\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\n\nprint(interleave_lists(list1, list2, list3))"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists of the same length and interleaves them into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"All lists should be of the same length.\"\n    \n    # Interleave the lists\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for pair in zip(list1, list2, list3) for x in pair]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All input lists must have the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n\n    # create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n\n    # find the difference between the two sets to get the dissimilar elements\n    dissimilar_elements = set1.symmetric_difference(set2)\n\n    # return the dissimilar elements as a list\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing \n    the elements which are present in only one tuple.\n    '''\n    common_elements = tuple(set(test_tup1) & set(test_tup2))\n    dissimilar_elements = tuple(set(test_tup1) ^ set(test_tup2))\n    return common_elements, dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples have different lengths.')\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append((i, test_tup1[i], test_tup2[i]))\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_list = []\n\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return None\n\n    # Loop through the tuples and append the dissimilar elements to the dissimilar_list\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n\n    # Check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of the same length\"\n\n    # Loop through the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(i)\n\n    # Return the dissimilar elements as a list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, int):  # if element is an integer, check if it's even\n            if even_fnc(elem):  # if element is even, add it to the result list\n                result.append(elem)\n        elif isinstance(elem, tuple):  # if element is a tuple, call the function recursively\n            even_elem = even_ele(elem, even_fnc)\n            if even_elem:  # if the resulting tuple is not empty, append it to the result list\n                result.append(even_elem)\n    return tuple(result)  # convert the result list to a tuple and return it\n"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes in a nested tuple of integers and a function to check if an integer is even.\n    It returns a new nested tuple with only even elements from the original nested tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, int):\n            if even_fnc(i):\n                new_tuple.append(i)\n        else:\n            new_tuple.append(even_ele(i, even_fnc))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            result.append(even_ele(tup, even_fnc))\n        elif even_fnc(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in a nested mixed tuple.\n\n    Args:\n    - test_tuple: A nested tuple with numbers and strings.\n    - even_fnc: A function that returns True if a number is even, False otherwise.\n\n    Returns:\n    - A new nested tuple with only even numbers.\n    \"\"\"\n    result = []\n    for sub_tuple in test_tuple:\n        new_sub_tuple = []\n        for element in sub_tuple:\n            if isinstance(element, int) and even_fnc(element):\n                new_sub_tuple.append(element)\n        result.append(new_sub_tuple)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple and a function as arguments. The function is used to determine\n    whether an element is even or not. If an element is even, it is retained in the tuple, otherwise, it is removed.\n    The function then returns the modified tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Check if a number is even.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result_tuple.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result_tuple.append(item)\n    return tuple(result_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == tuple:\n            for j in range(len(test_tuple[i])):\n                if type(test_tuple[i][j]) == tuple:\n                    for k in range(len(test_tuple[i][j])):\n                        if not even_fnc(test_tuple[i][j][k]):\n                            test_tuple[i][j] = (test_tuple[i][j][:k] + (0,) + test_tuple[i][j][k+1:])\n                else:\n                    if not even_fnc(test_tuple[i][j]):\n                        test_tuple[i] = (test_tuple[i][:j] + (0,) + test_tuple[i][j+1:])\n        else:\n            if not even_fnc(test_tuple[i]):\n                test_tuple = (test_tuple[:i] + (0,) + test_tuple[i+1:])\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    test_tuple (tuple): A tuple with a mix of integers and nested tuples.\n    even_fnc (function): A function that returns True if an integer is even.\n\n    Returns:\n    tuple: A tuple with only even elements.\n    \"\"\"\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_tuple.append(even_fnc(item))\n        else:\n            even_tuple.append(item)\n    return tuple(even_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes the base edge and height of a square pyramid as input and returns the surface area of the pyramid.\n    '''\n    surface_area = 2 * (base_edge * height + (base_edge ** 2) * 2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two arguments:\n    b - base edge of the square pyramid\n    s - height of the square pyramid\n\n    The function returns the surface area of the square pyramid.\n    '''\n    area = (2 * b * s) + (2 * b * b) + (2 * s * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (4*b*s) + (2*b*b) + (2*b*b) + (2*b*b)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the area of a square pyramid\n    area = (b*s)/2\n    \n    # Find the surface area of the square pyramid\n    surface_area = 4*area + (2*b*s)\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with given base and height.\n    :param base: int, the length of the base edge of the pyramid\n    :param height: int, the height of the pyramid\n    :return: int, the surface area of the pyramid\n    \"\"\"\n    # Calculate the area of the base\n    base_area = base ** 2\n    # Calculate the area of the slant\n    slant_area = (base * height) / 2\n    # Calculate the total surface area\n    total_area = 4 * base_area + 2 * slant_area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square base\n    base_area = 4 * b ** 2\n    \n    # Calculate the surface area of the square side\n    side_area = 4 * b * s\n    \n    # Calculate the surface area of the square top\n    top_area = 2 * (b ** 2 + s ** 2)\n    \n    # Calculate the total surface area\n    total_area = base_area + 2 * side_area + 2 * top_area\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * b * s + 2 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function returns the surface area of a square pyramid with given base and height.\n    \"\"\"\n    return (2 * base ** 2) + (2 * base * height) + (2 * height ** 2)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 4 * b * s + 2 * b ** 2 # calculate surface area using formula\n    return surface_area # return the surface area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base using the formula A = b*s\n    A = b * s\n    \n    # Calculate the area of the pyramid's slant using the formula slant_area = (b^2 + s^2)/2\n    slant_area = (b**2 + s**2)/2\n    \n    # Calculate the total surface area using the formula SA = A + 2*slant_area\n    SA = A + 2*slant_area\n    \n    # Return the surface area of the square pyramid\n    return SA"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"The dictionary is empty\"\n    else:\n        return \"The dictionary is not empty\""
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return \"Dictionary is empty\"\n    else:\n        return \"Dictionary is not empty\""
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        catalan = 0\n        for i in range(n):\n            catalan += catalan_number(i) * catalan_number(n-i-1)\n        return catalan\n\nn = int(input('Enter a number: '))\nprint(f'The {n}th Catalan number is {catalan_number(n)}')"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    c = 1\n    for i in range(2, num+1):\n        c = c * (4*i - 2)/(i+1)\n    return int(c)"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num+1):\n            res += catalan_number(i)*catalan_number(num-i)\n        return res"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function calculates the nth catalan number using dynamic programming approach.\n    :param num: The number whose catalan number is to be calculated.\n    :return: The nth catalan number.\n    \"\"\"\n    c = [0] * (num + 1)\n    c[0] = 1\n    for i in range(1, num + 1):\n        c[i] = 0\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n    return c[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c = c + catalan_number(i) * catalan_number(n-i-1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes an integer num and returns the nth catalan number.\n    \"\"\"\n    catalan = [1] * (num+1)\n    for i in range(2, num+1):\n        catalan[i] = catalan[i-1] * (2*i-1) // (i)\n    return catalan[num]"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.findall(pattern, text)\n    positions = [m.start() for m in re.finditer(pattern, text)]\n    if len(matches) > 0:\n        return matches[0], positions[0]\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        print(f'Adverb: \"{adverb}\" found at position {start}-{end}')"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        print(f\"Adverb found: '{adverb}' at positions {start} to {end}\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Use regular expression to find all adverbs ending with \"ly\" in the text\n    adverb_list = re.findall(r'\\b\\w*ly\\b', text)\n    adverb_pos_list = []\n\n    # Loop through all adverbs and find their positions in the original text\n    for adverb in adverb_list:\n        # Use findall() method to find the position of the adverb in the original text\n        pos = re.findall(adverb, text)\n        # Append the position of the adverb to the adverb_pos_list\n        adverb_pos_list.append(pos[0])\n\n    # Return the adverb_list and adverb_pos_list as a tuple\n    return (adverb_list, adverb_pos_list)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        return adverb, start_pos, end_pos\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end]\n        print(f'Found adverb \"{adverb}\" at positions {start} to {end}')"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Finds the first adverb ending with \"ly\" and its positions in a given string.\n\n    Args:\n    text (str): The input text to search for adverbs.\n\n    Returns:\n    (str, list): The adverb ending with \"ly\" and its positions in the text.\n    \"\"\"\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(r'\\w+ly', text)\n\n    if not adverbs:\n        # Return an empty string and an empty list if no adverbs were found\n        return \"\", []\n\n    # Get the first adverb ending with \"ly\" and its positions in the text\n    first_adverb = adverbs[0]\n    positions = [m.start() for m in re.finditer(first_adverb, text)]\n\n    return first_adverb, positions"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(\"Adverb ending with ly found at position\", match.start())\n        return match.group()"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function takes a string as input and returns the first adverb ending with 'ly' along with its position in the string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap with the first n items\n    heap = items[:n]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining items and add them to the heap if their price is higher than the smallest item in the heap\n    for item in items[n:]:\n        if item['price'] > heap[0]['price']:\n            heapq.heappushpop(heap, item)\n\n    # Return the n most expensive items in descending order\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in the given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, (item[1], item))\n\n    result = []\n\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for price, item in sorted(heap, reverse=True)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): A list of dictionaries where each dictionary contains information about a product.\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list: A list of dictionaries containing information about the n most expensive items.\n    '''\n\n    # Create a min-heap using the price as the key.\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    # Pop the top n items from the heap and append them to a list.\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in the given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n    return [items[i]['name'] for i in range(len(items)) if heap[0] == items[i]['price']]\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [items[i][0] for i in range(len(heap)) if heap[i] == heapq.heappop(heap)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n\n    most_expensive = []\n    for i in range(n):\n        most_expensive.append(heapq.heappop(heap)[1])\n\n    return most_expensive"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list l and a number n and splits the list l at the nth element and adds the first part to the end.\n    '''\n    # split the list at the nth element and get the first part\n    first_part = l[:n]\n    # get the second part of the list\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    result = second_part + first_part\n    # return the result\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Splits a list at the nth element and adds the first part to the end.\n\n    Parameters:\n    l (list): The list to be split.\n    n (int): The index of the element to split at.\n\n    Returns:\n    The original list with the first n elements added to the end.\n\n    Raises:\n    ValueError: If n is not a valid index for the list.\n    '''\n    if n < 0 or n >= len(l):\n        raise ValueError(\"n is not a valid index for the list.\")\n    \n    first_part = l[:n+1]\n    second_part = l[n+1:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns its corresponding tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and returns its corresponding tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in a list of numbers.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    This function finds the difference between the largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if i == root**2:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns a list of all the perfect squares between the given numbers (inclusive).\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        if num == 0:\n            squares.append(0)\n        elif num == 1:\n            squares.append(1)\n        else:\n            is_perfect = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_perfect = False\n                    break\n            if is_perfect and int(num**0.5)**2 == num:\n                squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all perfect squares between two given numbers (inclusive).\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5) # find the square root of the number\n        if root ** 2 == num: # check if the square root is a perfect square\n            result.append(num) # add the perfect square to the result\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a is a perfect square or not\n    if a < 0:\n        a = abs(a)\n    elif a == 0:\n        return [0]\n\n    # check if b is a perfect square or not\n    if b < 0:\n        b = abs(b)\n    elif b == 0:\n        return [0]\n\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate through all the numbers between a and b\n    for num in range(a, b+1):\n        # check if num is a perfect square or not\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            result.append(num)\n\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num == 0:\n            result.append(0)\n        elif num == 1:\n            result.append(1)\n        else:\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    break\n            else:\n                result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print(\"Perfect squares between\", a, \"and\", b, \"are:\")\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if int(root) ** 2 == num:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Loop through all the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num**0.5)\n        if root**2 == num:\n            # If it is, add it to the list of perfect squares\n            squares.append(num)\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds the perfect squares between two given numbers a and b.\n    '''\n    result = []\n    for i in range(a, b+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Convert polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    return (rho * cmath.cos(theta), rho * cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    This function takes in two parameters:\n    - rho: the magnitude of the vector (float)\n    - theta: the angle of the vector (in radians) (float)\n    \n    It returns a tuple of the rectangular coordinates (x, y) (complex).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Converts polar coordinates to rectangular coordinates.\n\n    :param rho: distance from the origin\n    :param theta: angle from the x-axis\n\n    :return: a tuple (x, y) representing the rectangular coordinates\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x, y))[0]\n    theta = cmath.polar(complex(x, y))[1]\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    r: magnitude of the vector\n    theta: angle between the positive x-axis and the vector\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and interchanges the first and last elements of the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an input and returns the list with the first and last elements swapped.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    This function swaps the first and last element of a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n    else:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        print(\"Swapped List: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements of the list.\n    '''\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    print(\"The list after swapping is: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and interchanges the first and last elements.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as input and swaps the first and last elements of the list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = 1\n    for i in range(k): \n        ans = ans * (n-i) // (i+1)\n    return ans"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k) * (n-k+1) / k\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nresult = binomial_Coeff(n,k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", result)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two arguments, n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n\n    numerator = 1\n    denominator = 1\n    for i in range(k):\n        numerator *= (n - i)\n        denominator *= (i + 1)\n\n    return numerator // denominator"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k==0:\n        return 1\n    if k==1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1)*n/k"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two parameters n and k.\n    n is the total number of items and k is the number of items to be selected.\n    It returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Removes leading zeroes from an IP address.\n    '''\n    ip_parts = ip.split('.')\n    for i in range(len(ip_parts)):\n        ip_parts[i] = re.sub(r'^0+(\\d+)$', r'\\1', ip_parts[i])\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an IP address.\n    '''\n    # First, remove any leading zeroes from the IP address.\n    ip_no_zeros = re.sub(r'^0+(\\d+)', r'\\1', ip)\n    \n    # Next, remove any leading or trailing dots.\n    ip_no_dots = ip_no_zeros.strip('.')\n    \n    return ip_no_dots"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Split the IP address into octets\n    octets = ip.split('.')\n    \n    # Remove leading zeroes from each octet, if any\n    octets = [str(int(o)) for o in octets]\n    \n    # Join the octets back into an IP address\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an ip address as input and removes leading zeroes from it.\n    '''\n    # Using regex to remove leading zeroes from the ip address\n    return re.sub(r'(?<=\\d)\\.0+(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for num in ip_list:\n        if num.startswith('0') and len(num) > 1:\n            new_ip += num[1:] + '.'\n        else:\n            new_ip += num + '.'\n    return new_ip[:-1]"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expression to remove leading zeroes\n    ip = re.sub(r'(\\d+)(\\.\\d+)+', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^0*(?=\\d)\\d+'\n    return re.sub(pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Splitting the ip address into a list of octets\n    octets = ip.split('.')\n    \n    # Removing leading zeroes from the list of octets\n    for i in range(len(octets)):\n        octets[i] = octets[i].lstrip('0')\n        \n        # Checking if the octet is empty string after removing leading zeroes\n        if octets[i] == '':\n            octets[i] = '0'\n    \n    # Joining the octets with a dot separator to form the final ip address\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove all non-digit characters from the ip address\n    ip = re.sub(r'\\D', '', ip)\n    # Split the ip address into octets and remove any leading zeroes\n    octets = [octet.lstrip('0') for octet in ip.split('.')]\n    # Join the octets back together into an ip address\n    new_ip = '.'.join(octets)\n    # Return the new ip address without leading zeroes\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into four parts\n    ip_parts = ip.split('.')\n    \n    # Loop through each part and remove any leading zeroes\n    for i in range(len(ip_parts)):\n        if ip_parts[i].startswith('0') and len(ip_parts[i]) > 1:\n            ip_parts[i] = ip_parts[i].lstrip('0')\n            \n    # Join the parts back together and return the result\n    return '.'.join(ip_parts)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == 0:\n        print(\"There are no even numbers in the list.\")\n    elif odd == 0:\n        print(\"There are no odd numbers in the list.\")\n    else:\n        diff = abs(list1[even-1] - list1[odd-1])\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function finds the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n        if even_num!= 0 and odd_num!= 0:\n            break\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n            \n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        return None\n\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        return even_num - odd_num\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    # find the first even and first odd number in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # find the difference of the first even and first odd numbers\n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    n1 = len(str1)\n    n2 = len(str2)\n\n    # if lengths of the strings are not equal, then it is not possible to convert str1 to str2\n    if n1!= n2:\n        return -1\n    \n    # count frequency of each bit in str1\n    freq1 = [0] * 2\n    for i in range(n1):\n        freq1[int(str1[i])] += 1\n\n    # count frequency of each bit in str2\n    freq2 = [0] * 2\n    for i in range(n2):\n        freq2[int(str2[i])] += 1\n\n    # count the number of bits that need to be swapped to convert str1 to str2\n    swaps = 0\n    for i in range(2):\n        swaps += abs(freq1[i] - freq2[i])\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    nums1 = [int(x) for x in str1]\n    nums2 = [int(x) for x in str2]\n\n    # Find the length of the strings\n    n = len(nums1)\n\n    # Initialize a list to store the count of swaps needed for each prefix\n    swaps = [0] * (n + 1)\n\n    # Loop through each prefix of the strings\n    for i in range(1, n + 1):\n        # If the first bit of the prefix is different, we need to swap the prefix with the prefix that starts with 0\n        if nums1[i - 1]!= nums2[i - 1]:\n            # If the prefix we're comparing to starts with 1, we need to swap it with the prefix that starts with 1\n            if nums1[i - 1] == 1:\n                swaps[i] = swaps[i - 1] + 1\n            # Otherwise, we need to swap it with the prefix that starts with 0\n            else:\n                # Find the index of the prefix that starts with 0 that is the closest to the current prefix\n                j = i - 2\n                while j >= 0 and nums1[j] == 1:\n                    j -= 1\n                # If we found a prefix that starts with 0, we need to swap it with the current prefix\n                if j >= 0:\n                    swaps[i] = swaps[i - 1] + (i - 1 - j)\n                # If we didn't find a prefix that starts with 0, we need to swap it with the prefix that starts with 1\n                else:\n                    swaps[i] = swaps[i - 1] + 1\n\n    # Return the count of swaps needed for the entire string\n    return swaps[n]"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings and returns the minimum number of swaps required to convert one binary number\n    to another.\n    \"\"\"\n    # If both strings have the same length, return 0 as no swaps are required\n    if len(str1) == len(str2):\n        return 0\n\n    # Initialize a dictionary to store the count of each digit\n    digit_count = {}\n\n    # Count the occurrence of each digit in the first string\n    for digit in str1:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n\n    # Initialize a variable to store the number of swaps required\n    swaps = 0\n\n    # Traverse the second string and subtract the count of each digit from the dictionary\n    for digit in str2:\n        if digit in digit_count:\n            digit_count[digit] -= 1\n        else:\n            # If the digit is not present in the first string, increment the swaps by the count of this digit in the second string\n            swaps += 1\n\n    # Add the remaining counts to the swaps variable\n    for count in digit_count.values():\n        swaps += abs(count)\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    if n1!= n2:\n        return -1  # Strings have different lengths, no swaps possible\n    \n    # Convert strings to lists of 0's and 1's\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n    \n    # Initialize count of swaps and a dictionary to keep track of indices of elements\n    swaps = 0\n    indices = {}\n    \n    # Traverse both lists simultaneously\n    for i in range(n1):\n        if arr1[i]!= arr2[i]:  # If elements are not equal, swap them and count a swap\n            if arr1[i] not in indices:\n                indices[arr1[i]] = [i]\n            else:\n                indices[arr1[i]].append(i)\n            \n            if arr2[i] not in indices:\n                indices[arr2[i]] = [i]\n            else:\n                indices[arr2[i]].append(i)\n            \n            arr1[i], arr1[indices[arr2[i]].pop()], arr2[i], arr2[indices[arr1[i]].pop()] = arr1[indices[arr2[i]].pop()], arr1[i], arr2[indices[arr1[i]].pop()], arr2[i]\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to lists\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # initialize variables\n    swaps = 0\n    len1 = len(str1)\n    len2 = len(str2)\n    i = 0\n\n    # loop through the strings\n    while i < len1:\n        if str1[i]!= str2[i]:\n            # find the index of the first different character in str2\n            j = i\n            while j < len2 and str1[i]!= str2[j]:\n                j += 1\n\n            # swap the characters in str1 and str2\n            str1[i], str2[j] = str2[j], str1[i]\n            swaps += 1\n\n        i += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # Step 1\n    freq1 = [0]*26\n    freq2 = [0]*26\n    for i in range(len(str1)):\n        freq1[ord(str1[i])-ord('a')]+=1\n        freq2[ord(str2[i])-ord('a')]+=1\n        \n    # Step 2\n    list1 = []\n    list2 = []\n    for i in range(26):\n        if freq1[i]>0:\n            list1.append(freq1[i])\n        if freq2[i]>0:\n            list2.append(freq2[i])\n            \n    # Step 3\n    swaps = 0\n    for i in range(len(list1)):\n        min_freq = min(list1[i],list2[i])\n        if min_freq>0:\n            swaps+=min_freq\n    \n    # Step 4\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    n1 = len(str1)\n    n2 = len(str2)\n    if n1!= n2 : \n        print(\"Strings should be of same length\")\n        return\n    \n    # count number of set bits in each string\n    setBits1 = [0]*n1\n    setBits2 = [0]*n2\n    \n    for i in range(n1) : \n        if str1[i] == '1' : \n            setBits1[i] = 1\n    \n    for i in range(n2) : \n        if str2[i] == '1' : \n            setBits2[i] = 1\n    \n    # compare the set bits to count number of swaps required\n    swaps = 0\n    for i in range(n1) : \n        if setBits1[i]!= setBits2[i] : \n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a list to store the number of swaps required for each character\n    swap_count = [0] * len(str1)\n\n    # Traverse both the strings simultaneously and count the number of swaps required for each character\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # If the characters are different, swap them and increment the swap count\n            temp = str1[i]\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + temp + str2[i+1:]\n            swap_count[i] += 1\n\n    # Find the minimum swap count required among all characters\n    return min(swap_count)"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # initialize the dictionary to store the count of each character in the string\n    count_dict = {}\n    for char in str1:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    \n    # initialize the count of swaps required to 0\n    count_swaps = 0\n    \n    # iterate over the characters in the string2\n    for char in str2:\n        # if the character is not in the string1, it's not possible to swap it, so return -1\n        if char not in str1:\n            return -1\n        \n        # subtract the count of the character in the dictionary from the count in the string2\n        count_swaps += count_dict[char]\n        count_dict[char] -= 1\n        \n        # if the count of the character in the string2 becomes negative, it means that the character in the string2 is \n        # more than the corresponding count in the dictionary, so we need to swap it with another character\n        if count_dict[char] < 0:\n            count_swaps += abs(count_dict[char])\n            count_dict[char] = 0\n    \n    # return the count of swaps required\n    return count_swaps"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        size = sys.getsizeof(t)\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from the two sorted arrays.\n\n    Args:\n    arr1: A sorted list of integers.\n    arr2: A sorted list of integers.\n    k: An integer representing the kth element to find.\n\n    Returns:\n    The kth element from the two sorted arrays.\n    \"\"\"\n    n = len(arr1)\n    m = len(arr2)\n\n    # If either of the arrays is empty, return the kth element from the other array.\n    if n == 0:\n        return arr2[k-1]\n    if m == 0:\n        return arr1[k-1]\n\n    # If k is smaller than or equal to the sum of n and m, then the kth element is present in the second array.\n    if k <= n+m:\n        return find_kth(arr2, arr1, k)\n\n    # Calculate the average of n and m.\n    avg = (n + m) / 2\n\n    # If the kth element is smaller than or equal to the average of n and m,\n    # then the kth element is present in the first array.\n    if k <= avg:\n        return find_kth(arr1, arr2[:m], k)\n\n    # If the kth element is greater than the average of n and m,\n    # then the kth element is present in the second array.\n    return find_kth(arr1[n-avg+m:], arr2, k - n + avg)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    elif not arr1:\n        return arr2[k-1]\n    elif not arr2:\n        return arr1[k-1]\n    else:\n        n1, n2 = len(arr1), len(arr2)\n        if k > n1 + n2:\n            return None\n        elif k <= n1:\n            return find_kth(arr1[k-1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[k-n1-1:], k-n1)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    n = len(arr1)\n    m = len(arr2)\n    \n    if k > n+m:\n        return None\n    \n    if k <= m:\n        return find_kth(arr2, arr1, k)\n    \n    lo = 0\n    hi = n-1\n    \n    while lo <= hi:\n        mid1 = (lo+hi)//2\n        mid2 = k-mid1-1\n        \n        if arr1[mid1] > arr2[mid2]:\n            lo = mid1+1\n        elif arr1[mid1] < arr2[mid2]:\n            hi = mid1-1\n        else:\n            return arr1[mid1]\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1  # swap to ensure that arr1 is smaller\n\n    low = 0\n    high = len(arr1)\n\n    while low <= high:\n        mid = (low + high) // 2\n        remaining = k - mid - 1\n\n        if remaining < 0 or (mid == len(arr1) - 1 and remaining >= len(arr2)):\n            return arr1[mid]\n        elif remaining < len(arr2) and arr1[mid] > arr2[remaining]:\n            return arr1[mid]\n        else:\n            low = mid + 1"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth smallest element in two sorted arrays using binary search approach.\n    It returns the kth smallest element present in the arrays.\n    \"\"\"\n    n = len(arr1)\n    m = len(arr2)\n    if k > n + m:\n        return None\n    if k <= m:\n        return find_kth(arr2, arr1, k)\n    lo, hi = 0, n - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr1[mid] <= arr2[m - 1]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    i = lo\n    j = k - i\n    if j == 0:\n        return arr1[i - 1]\n    if j > m or arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1[:i], arr2, k)\n    else:\n        return find_kth(arr1, arr2[:j], k - i)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # initialize pointers\n    i = 0  # pointer for arr1\n    j = 0  # pointer for arr2\n    \n    # initialize count of elements in both arrays\n    count = 0\n    \n    # loop until either i or j reaches the end of its respective array\n    while i < n1 and j < n2:\n        # if arr1[i] is smaller than arr2[j], increment i and increment count\n        if arr1[i] <= arr2[j]:\n            i += 1\n            count += n1 - i  # increase count by the number of elements remaining in arr1\n        \n        # if arr2[j] is smaller than arr1[i], increment j and increment count\n        else:\n            j += 1\n            count += n2 - j  # increase count by the number of elements remaining in arr2\n            \n    # if the remaining elements in arr1 are less than k, increment k by the difference\n    if i < n1:\n        k += n1 - i\n    \n    # if the remaining elements in arr2 are less than k, increment k by the difference\n    if j < n2:\n        k += n2 - j\n    \n    # if k is still greater than the number of elements in both arrays, return -1\n    if k > n1 + n2:\n        return -1\n    \n    # if k is 0, return the smallest element in arr1 or arr2\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    \n    # if k is less than the number of elements in both arrays, find the kth element\n    # initialize pointers\n    i = 0  # pointer for arr1\n    j = 0  # pointer for arr2\n    \n    # loop until k elements have been found\n    while k > 0:\n        # if arr1[i] is smaller than arr2[j], increment i and decrement k\n        if arr1[i] <= arr2[j]:\n            i += 1\n            k -= 1\n        \n        # if arr2[j] is smaller than arr1[i], increment j and decrement k\n        else:\n            j += 1\n            k -= 1\n    \n    # return the kth element\n    return min(arr1[i-1], arr2[j-1])"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize pointers for both arrays\n    i = 0\n    j = 0\n    \n    # Iterate till we get k elements\n    while k > 0:\n        # If i-th element of arr1 is smaller than j-th element of arr2,\n        # increment i and decrement k\n        if arr1[i] < arr2[j]:\n            k -= 1 - i\n            i += 1\n        else:\n            # Otherwise, increment j and decrement k\n            j += 1\n            k -= j\n    \n    # If k is less than or equal to zero, it means we have found the kth element.\n    if k == 0:\n        return max(arr1[i-1], arr2[j-1])\n    else:\n        # If k is not zero, it means we have not found the kth element.\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Concatenate the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    merged_arr.sort()\n    \n    # Return the kth element of the merged array\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n    \n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 + n2:\n        return None\n    \n    if k <= n1:\n        return find_kth_helper(arr1, arr2, k)\n    else:\n        return find_kth_helper(arr2, arr1, k - n1)\n\ndef find_kth_helper(arr1, arr2, k):\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1, mid2 = len(arr1) // 2, len(arr2) // 2\n    \n    if arr1[mid1] > arr2[mid2]:\n        return find_kth_helper(arr1[:mid1], arr2, k)\n    elif arr1[mid1] < arr2[mid2]:\n        return find_kth_helper(arr1, arr2[:mid2], k)\n    else:\n        return find_kth_helper(arr1[:mid1], arr2[:mid2], k)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element in the two sorted arrays.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    lo, hi = 0, n1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if arr1[mid] >= arr2[k-1]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return arr1[lo] if lo == k-1 else arr2[k-1-lo]"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is Armstrong or not.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n    # convert the number to string\n    num_str = str(number)\n\n    # calculate the length of the number\n    num_len = len(num_str)\n\n    # calculate the sum of the power of each digit\n    sum_power = sum([int(digit) ** num_len for digit in num_str])\n\n    # return True if the sum is equal to the original number, else False\n    return True if sum_power == number else False\n"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum = 0\n    order = len(str(number))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number,\n    otherwise it returns False. An Armstrong number is a number that is equal to the sum of \n    its own digits each raised to the power of the number of digits. For example, 153 is an \n    Armstrong number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n    # Convert the integer to a string so we can iterate through its digits\n    num_str = str(number)\n    # Get the length of the number of digits in the string\n    num_len = len(num_str)\n    # Initialize a variable to store the sum of the raised digits\n    sum = 0\n    # Iterate through the digits and add their raised value to the sum\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    # Return True if the sum is equal to the original number, otherwise False\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number into a string\n    num_str = str(number)\n    \n    # Calculate the length of the string\n    length = len(num_str)\n    \n    # Calculate the sum of the cubed digits of the number\n    sum_of_cubes = sum([int(digit) ** length for digit in num_str])\n    \n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, otherwise False.\n    \"\"\"\n    num_str = str(number)\n    length = len(num_str)\n    result = sum([int(digit) ** length for digit in num_str])\n    return result == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number into a string\n    num_str = str(number)\n    # get the length of the string\n    n = len(num_str)\n    # initialize sum variable to 0\n    sum = 0\n    # iterate over each digit in the string and add it to the sum\n    for digit in num_str:\n        sum += int(digit) ** n\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether the given number is Armstrong or not.\n    \"\"\"\n    num_str = str(n)\n    num_len = len(num_str)\n    sum_of_powers = sum([int(digit) ** num_len for digit in num_str])\n    return n == sum_of_powers\n\ndef armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if is_armstrong(number):\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, else False.\n    \"\"\"\n    order = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(number))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string to easily access its digits\n    digits = str(number)\n    \n    # Calculate the length of the number\n    length = len(digits)\n    \n    # Calculate the sum of the raised digits to the power of the length\n    sum_of_powers = sum([int(digit) ** length for digit in digits])\n    \n    # If the sum is equal to the original number, it's an armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes a positive integer 'number' as input,\n    and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\nn = int(input(\"Enter the value of n: \"))\nprint(sum_average(n))"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum and count variables to zero\n    sum_n = 0\n    count = 0\n    \n    # Loop over the first n natural numbers\n    for i in range(1, n+1):\n        # Add the current number to the sum\n        sum_n += i\n        # Increment the count\n        count += 1\n    \n    # Compute the average by dividing the sum by the count\n    average = sum_n / count\n    \n    # Return the sum and average as a tuple\n    return (sum_n, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    '''\n    # Initialize sum and counter variables\n    sum = 0\n    count = 0\n\n    # Iterate through first n natural numbers and add them to the sum variable\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    # Calculate the average and return the sum and average as a tuple\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if number < 1:\n        return \"Invalid input. Please enter a positive integer greater than 0.\"\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        average = sum/number\n        return f\"The sum of the first {number} natural numbers is {sum}.\\nThe average of the first {number} natural numbers is {average:.2f}.\""
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Check if a given number is even or odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function will check whether the given number is even or not.\n    :param n: An integer number\n    :return: True if the number is even, False if the number is odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is Even\")\n    else:\n        print(f\"{n} is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is Even\")\n    else:\n        print(f\"{n} is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n\n    Parameters:\n    n (int): The number to be checked for evenness.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is Even\")\n    else:\n        print(f\"{n} is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_even(n):\n    \"\"\"\n    This function returns True if the given number is even, and False otherwise.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, it returns None.\n    '''\n\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the character has been repeated\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n\n    # return None if no repeated character is found\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n            \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated characters found\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated characters found!\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = \"\"\n    for char in str1:\n        if str1.count(char) > 1 and char not in repeated_char:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store character counts\n    char_counts = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, return it\n        if char in char_counts:\n            return char\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            char_counts[char] = 1\n\n    # if no repeated characters were found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for num in range(2, n+1):\n        is_ludic = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(num)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        is_ludic = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_ludic = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(2, n+1):\n        lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n+1):\n        flag = True\n        for i in range(2, num):\n            if num%i == 0:\n                flag = False\n                break\n        if flag:\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        is_ludic = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic.append(i)\n        i += 1\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_lucid(n):\n    '''\n    Returns a list of all lucid numbers smaller than or equal to n.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return get_lucid(n-1) + [n]\n    else:\n        return get_lucid(n-2) + [n]\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(1, n+1) if x in get_lucid(x)]\n\nprint(get_ludic(10)) # Output: [1, 2, 3, 4, 5, 7]"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lucid(n):\n    '''\n    Check if a number is lucid or not.\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\ndef get_ludic(n):\n    '''\n    Get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            ludic.append(i)\n        elif i > 2 and i % 2 == 0:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string\n    reversed_s =''.join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n\n    # reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as an argument and reverses the order of words in the string.\n    '''\n    # Splitting the string into a list of words\n    words = s.split()\n\n    # Reversing the order of words in the list\n    reversed_words = words[::-1]\n\n    # Joining the words in the reversed order using space as a separator\n    reversed_sentence =''.join(reversed_words)\n\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # Split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]  # Reverse the word\n        reversed_words.append(reversed_word)\n    reversed_sentence =''.join(reversed_words)  # Join the reversed words with a space\n    return reversed_sentence"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = ''\n        for char in word:\n            reversed_word = char + reversed_word\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    words = [word[::-1] for word in words] # reverse each word\n    reversed_s =''.join(words) # join the reversed words with a space in between\n    return reversed_s # return the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**(0.5))+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees and returns the equivalent angle in radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value as input and returns the equivalent\n    value in radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and converts it to radians.\n    '''\n    radians = (math.pi/180) * degree\n    return radians"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    results = []\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        results.append((match, start, end))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(0), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regex pattern in a string and returns the matching substring, start index, and end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        substring = match.group()\n        print(f\"Match found: {substring} (index {start}:{end})\")\n    return substring, start, end"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    bell = [[1]]\n    for i in range(1, n+1):\n        row = [1]\n        for j in range(i):\n            row.append(bell[i-1][j] + bell[i-1][j+1])\n        row.append(1)\n        bell.append(row)\n    return bell[-1][-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(i) for i in range(n)])"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Bell Number.\n    \"\"\"\n    bell_numbers = [1]  # initialize the first Bell Number as 1\n    for i in range(1, n):\n        bell_numbers.append(sum(bell_numbers))  # append the sum of previous Bell Numbers to the list\n    return bell_numbers[-1]  # return the nth Bell Number"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        bell_1 = 1\n        bell_2 = 1\n        for i in range(3, n+1):\n            bell = bell_1 + bell_2\n            bell_1 = bell_2\n            bell_2 = bell\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[-i:]))\n    return bell[-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Bell Number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum([bell_Number(i) for i in range(n)])"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n+1))"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return \"Invalid input\"\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as input,\n    and returns a new list with the k'th element removed.\n    \"\"\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from the given list\n    \"\"\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a number L as input. It returns a list with the same elements as the input list, but with the kth element removed.\n    '''\n    k = L - 1\n    new_list = list1[:k] + list1[k+1:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = int(input(\"Enter the position of the element to be removed: \"))\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function removes the k'th element from a given list.\n\n    Args:\n    list1 (list): The list from which the k'th element should be removed.\n    k (int): The index of the element to be removed.\n\n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n\n    # create a new list with all elements but the k'th element\n    new_list = list1[:k] + list1[k+1:]\n\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function removes the k'th element from a list.\n    \"\"\"\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Removes the k'th element from the list and returns the modified list.\n    '''\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element of the list and return the resulting list.\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = [row[N] for row in test_list]\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -float('inf')\n    for row in test_list:\n        if len(row) > N-1:\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')  # initialize max value to negative infinity\n    for row in test_list:\n        if N <= len(row):\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if row[N] > max_num:\n            max_num = row[N]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = None\n    for row in test_list:\n        if N < len(row):\n            val = row[N]\n            if max_val is None or val > max_val:\n                max_val = val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    col_max = max(test_list[i][N-1] for i in range(len(test_list)))\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = None\n    \n    # iterate over each row of the matrix\n    for row in test_list:\n        # extract the nth element from the current row\n        num = row[N-1]\n        \n        # check if the current number is greater than the previous max\n        if max_num is None or num > max_num:\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function takes a list of lists and a number N as inputs and returns the maximum element of the Nth column.\n    \"\"\"\n    max_num = float('-inf')  # initialize the maximum number to negative infinity\n    for row in test_list:\n        if row[N-1] > max_num:  # check if the element in the Nth column is greater than the current maximum\n            max_num = row[N-1]  # if it is, update the maximum number\n    return max_num  # return the maximum number"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -float('inf')\n    for row in test_list:\n        if len(row) > N-1 and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes in a list of lists and an integer N and returns the maximum value in the Nth column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    \n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n        \n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, \n    and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    # Initialize two empty lists\n    first_list = []\n    second_list = []\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the first list\n        first_list.append(sublist[0])\n        # Append the second element of the sublist to the second list\n        second_list.append(sublist[1])\n\n    # Return a list of the two lists\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i][1]\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1):\n            result.append(test_list[j][1])\n    return sum(result)"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i[1]\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i][1]\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        total = sum(t)\n        count = len(t)\n        average = total / count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # compute the average of each tuple\n        average = sum(num) / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Returns a list of the average values for each tuple in the input tuple of tuples.\n    \"\"\"\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            avg = sum(num) / len(num)\n            result.append(avg)\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        sum = 0\n        for num in t:\n            sum += num\n        result.append(sum/len(t))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples are not of the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are of different lengths\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i], )\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n        \n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i], )\n        \n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples should be of the same length\"\n    else:\n        return tuple(i % j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n    else:\n        print(\"The tuples are not of the same length.\")\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i], )\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    \n    # Initialize a matrix to store the minimum number of jumps required to reach each point from the origin\n    dp = [[0 for j in range(d+1)] for i in range(steps+1)]\n    \n    # Fill the first column of the matrix with the minimum number of jumps required to reach each point from the origin\n    for i in range(steps+1):\n        dp[i][0] = 0\n    \n    # Fill the first row of the matrix with the minimum number of jumps required to reach each point from the origin\n    for j in range(1, d+1):\n        dp[0][j] = float('inf')\n    \n    # Fill the rest of the matrix with the minimum number of jumps required to reach each point from the origin\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-steps+i]) + 1\n                \n    # Return the minimum number of jumps required to reach the point of form (d, 0) from origin\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 1\n    elif d < steps:\n        return min_Jumps(steps-1, d) + 1\n    else:\n        return min_Jumps(steps-1, d)"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    This function takes the number of steps to reach the point (d,0) and the number of steps in a single dimension d and returns the minimum number of jumps required to reach the destination point.\n    '''\n    if d == 0:\n        return 0\n    if d == 1:\n        return steps\n    dp = [0] * (d+1)\n    dp[1] = steps\n    for i in range(2, d+1):\n        dp[i] = float('inf')\n        for j in range(1, i):\n            if j + dp[j] >= i:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes two parameters:\n    steps: number of steps to reach point (d, 0)\n    d: distance from the origin to the point\n\n    It returns the minimum number of jumps required to reach the point.\n    \"\"\"\n    # Create a dictionary to store the minimum number of jumps required to reach each point\n    jump_dict = {}\n    \n    # Initialize the first point to reach (0, 0) from origin\n    jump_dict[(0, 0)] = 0\n    \n    # Iterate over all the points that can be reached from the origin\n    for i in range(steps):\n        # For each point, calculate the minimum number of jumps required to reach it from all previous points\n        for j in range(i+1):\n            # Calculate the distance from the origin to the point\n            dist = i - j\n            \n            # If the distance is greater than the current point, skip to the next point\n            if dist > d:\n                continue\n            \n            # Calculate the minimum number of jumps required to reach the point from the previous points\n            min_jumps = min(jump_dict.get((j, k), float('inf')) + 1 for k in range(j+1))\n            \n            # Update the minimum number of jumps required to reach the point in the dictionary\n            jump_dict[(i, dist)] = min_jumps\n            \n    # Return the minimum number of jumps required to reach the point (d, 0) from origin\n    return jump_dict[(steps, d)]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes the number of steps and the length of each step and returns the minimum number of jumps required to reach the destination.\n    \"\"\"\n    dp = [float('inf')] * d  # dp[i] stores minimum number of jumps required to reach the point (d, i)\n    dp[0] = 0  # starting point is (d, 0)\n\n    # fill the dp table in bottom-up manner\n    for i in range(1, d):\n        for j in range(i):\n            if j + steps[j] >= i:  # if we can reach (d, i) from (d, j)\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    # return the minimum number of jumps required to reach the destination\n    return dp[d - 1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    dp = [float('inf')] * (d+1) # create a list to store the minimum number of jumps required to reach each point in the array\n    dp[0] = 0 # base case: starting point has 0 jumps required\n    \n    for i in range(1, d+1):\n        for j in range(min(i, steps), -1, -1): # iterate backwards from 1 to min(i, steps)\n            if dp[i] > dp[i-j] + 1: # update dp if we can reach the current point with a smaller jump\n                dp[i] = dp[i-j] + 1\n                \n    return dp[d] # return the minimum number of jumps required to reach the target point"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return steps\n    else:\n        return min_Jumps(steps+1, d-1) + 1\n    "
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the variables\n    current_jumps = 0\n    jumps = []\n\n    # Iterate over the steps array\n    for i in range(len(steps)):\n        # Check if the current position is within the jump range\n        if current_jumps < d and steps[i] > 0:\n            current_jumps += 1\n            # If the current position is the end of the jump, update the jumps count\n            if current_jumps == d:\n                jumps.append(i)\n                current_jumps = 0\n\n    # Return the minimum number of jumps required\n    return len(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    # Initialize the number of jumps to zero and the current position to (0, 0)\n    jumps = 0\n    current_pos = [0, 0]\n    \n    # Check if we can reach the destination from the origin using the given number of steps\n    if current_pos[1] >= d or current_pos[0] >= d:\n        return jumps\n    \n    # Loop through the given number of steps to check if we can reach the destination from the origin\n    for i in range(steps):\n        # Check if we can reach the destination from the current position\n        if current_pos[1] >= d or current_pos[0] >= d:\n            return jumps\n        \n        # Check if we need to move to the right\n        if current_pos[0] < d and (current_pos[1] + current_pos[0] + 1 >= d or current_pos[1] + current_pos[0] + 1 >= current_pos[0]):\n            current_pos[0] += 1\n            jumps += 1\n        \n        # Check if we need to move down\n        elif current_pos[1] < d and (current_pos[0] + current_pos[1] + 1 >= d or current_pos[0] + current_pos[1] + 1 >= current_pos[1]):\n            current_pos[1] += 1\n            jumps += 1\n        \n        # Check if we need to move diagonally\n        elif current_pos[0] < d and current_pos[1] < d:\n            current_pos[0] += 1\n            current_pos[1] += 1\n            jumps += 1\n        \n        # If none of the above conditions are satisfied, we can't reach the destination from the current position\n        else:\n            return -1\n    \n    # Return the number of jumps required to reach the destination from the origin\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    if steps == 1: \n        return 0\n    elif d == 1: \n        return steps\n    else: \n        return min_Jumps(steps-1, d-1) + 1"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns the division of each element of the lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists of numbers and returns a new list containing the result of each element in the two lists divided by each other.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            result.append(float('nan'))  # Division by zero\n        else:\n            result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise and return the result as a new list.\n    If the lengths of the input lists are not equal, the function will raise a ValueError.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lengths of the input lists must be equal.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    num_str = \"\"\n    alpha_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    return alpha_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = \"\"\n    str_list = list(test_str)\n    for char in str_list:\n        if char.isdigit():\n            num += char\n        else:\n            str_list.remove(char)\n            str_list.append(char)\n    return \"\".join(str_list) + num"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Move all the numbers in the given string to the end of the string.\n    '''\n    num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            test_str = test_str.replace(char, '', 1)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    for num in numbers:\n        result += num\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # Find all the digits in the string using a regular expression\n    digits = re.findall(r'\\d+', test_str)\n\n    # Replace the digits with a placeholder string\n    for digit in digits:\n        test_str = test_str.replace(digit, \"XXXX\")\n\n    # Remove any extra spaces from the string\n    test_str = \" \".join(test_str.split())\n\n    # Move the digits to the end of the string and return the modified string\n    return test_str.rstrip(\"XXXX\") + \" \".join(digits)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as an argument and moves all the numbers to the end of the string.\n    \"\"\"\n    num_lst = [i for i in test_str if i.isdigit()]  # find all the digits in the string and store them in a list\n    num_str = ''.join(num_lst)  # join the digits in the list to form a string\n    new_str = test_str.replace(num_str, '', 1)  # remove the digits from the original string\n    return new_str + num_str  # return the new string with the digits at the end"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    \n    # separate the string into two lists: one with numbers, and one with non-numbers\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    \n    # join the two lists to form the final string\n    final_str = ''.join(char_list) + ''.join(num_list)\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    non_nums = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n        else:\n            non_nums += char\n    return non_nums + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize two empty strings to hold the digits and non-digits\n    digits = \"\"\n    non_digits = \"\"\n    \n    # Iterate through each character in the input string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is, append it to the digits string\n            digits += char\n        else:\n            # If it's not, append it to the non-digits string\n            non_digits += char\n    \n    # Return the non-digits string followed by the digits string\n    return non_digits + digits"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    # Find all the numbers in the string using regular expression\n    numbers = re.findall(r'\\d+', test_str)\n\n    # Create a new string with all numbers at the end\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n    for num in numbers:\n        new_str += num\n\n    # Return the new string with numbers at the end\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    if n < 2:\n        return 0\n    \n    # Initialize variables\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 2 if a[0] % a[1] == 0 else 1\n    \n    # Fill dp table\n    for i in range(2, n):\n        dp[i] = 1 if a[i] % a[i-1] == 0 else 1\n        for j in range(1, i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    \n    # Find the largest subset size\n    max_size = 0\n    for i in range(n):\n        if dp[i] > max_size:\n            max_size = dp[i]\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of integers as input and returns the size of the largest subset of the list so that every pair is divisible.\n    \"\"\"\n\n    # Sort the input list in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables to keep track of the largest subset size and the current subset size\n    max_subset_size = 0\n    current_subset_size = 0\n\n    # Iterate through the sorted list of numbers\n    for i in range(len(a)):\n        # If the current number is divisible by the next number in the list, add it to the current subset and increment the subset size\n        if a[i] % (a[i+1] * 2) == 0:\n            current_subset_size += 1\n        # Otherwise, reset the current subset size to 0\n        else:\n            current_subset_size = 0\n\n        # Update the maximum subset size if the current subset size is greater than the maximum subset size\n        if current_subset_size > max_subset_size:\n            max_subset_size = current_subset_size\n\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    n = len(a)\n    dp = [0] * n\n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [1] * n  # dp[i] stores the size of the largest subset ending at i\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n\n    # Initialize diagonal values as 1 because every element is a subset of itself\n    for i in range(n + 1):\n        dp[i][i] = 1\n\n    # Fill the table in a bottom-up manner\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L\n            dp[i][j] = 1\n            for k in range(i + 1, j):\n                if a[i] % a[k] == 0 and a[k] % a[j] == 0:\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n\n    return dp[0][n]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # Sort the list in ascending order\n    n = len(a)\n    dp = [1] * n # Initialize the dp list with all ones\n\n    # Fill the dp list using the formula for the Longest Increasing Subsequence (LIS) problem\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] % a[i] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n\n    # Return the maximum value in the dp list\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n\n    # initialize variables\n    i = 0\n    j = 1\n    count = 1\n\n    while j < len(a):\n        if a[j] % a[i] == 0:  # if the next number is divisible by the current one\n            j += 1\n            count += 1\n        else:\n            i += 1\n            j = i + 1\n            count = 1\n\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = True\n            else:\n                dp[i][j] = (a[i] % a[j] == 0) and dp[i-1][j]\n    \n    for i in range(n):\n        if dp[n-1][i]:\n            return i\n    \n    return -1"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    count = 1\n    for i in range(len(a)-1):\n        if a[i] % a[i+1] == 0:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    a = sorted(a)\n    n = len(a)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into one\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2] + sorted_list[n//2 - 1]) / 2\n    else:\n        median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    # Merging the two sorted arrays\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Finding the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the sizes of the two lists are equal\n    if len(arr1)!= len(arr2):\n        return \"Lists are not of equal size.\"\n\n    # Get the median of the two lists\n    middle_index = n // 2\n    if n % 2 == 0:\n        median = (arr1[middle_index - 1] + arr1[middle_index]) / 2\n    else:\n        median = arr1[middle_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # combine the two arrays into one\n    arr = arr1 + arr2\n    \n    # sort the combined array\n    arr.sort()\n    \n    # find the middle index of the combined array\n    mid_index = n // 2\n    \n    # if the combined array has an odd number of elements, the median is the middle element\n    if n % 2!= 0:\n        return arr[mid_index]\n    \n    # if the combined array has an even number of elements, the median is the average of the two middle elements\n    else:\n        return (arr[mid_index - 1] + arr[mid_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # create a new array to store the merged list\n    merged_arr = [0] * (n)\n\n    # merge the two sorted lists into one\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # copy the remaining elements of the non-empty list\n    while i < len(arr1):\n        merged_arr[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < len(arr2):\n        merged_arr[k] = arr2[j]\n        j += 1\n        k += 1\n\n    # find the median of the merged list\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size and returns their median value.\n    \"\"\"\n    # Concatenate the two lists into one\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Check if the list size is odd or even\n    if n % 2 == 0:\n        # If the list size is even, the median is the average of the middle two elements\n        return (sorted_list[n//2] + sorted_list[n//2 - 1])/2\n    else:\n        # If the list size is odd, the median is the middle element\n        return sorted_list[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_arr = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    \n    while i < n:\n        merged_arr.append(arr1[i])\n        i += 1\n    \n    while j < n:\n        merged_arr.append(arr2[j])\n        j += 1\n    \n    if n % 2 == 0:\n        return (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        return merged_arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    i = 0\n    j = 0\n    while True:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == n // 2:\n            median = arr1[i - 1]\n            break\n        elif j == n // 2:\n            median = arr2[j - 1]\n            break\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function will find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # If the length of the lists is even, return the average of the middle two elements.\n        return (sorted([arr1[n//2], arr2[n//2]])[0] + sorted([arr1[n//2], arr2[n//2]])[1])/2\n    else:\n        # If the length of the lists is odd, return the middle element.\n        return sorted([arr1[n//2], arr2[n//2]])[1]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers as input and computes the n-th power of each number.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and returns a new list with the n-th power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and an integer n,\n    and returns a list of the n-th power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Convert the given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as an argument and returns the string in uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase, else False.\n    '''\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase, False otherwise.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if the string is uppercase, else False.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:  # check if the list has at least 2 elements\n        return newList  # return the original list if it's not long enough\n    else:\n        temp = newList[0]  # store the first element in a temporary variable\n        newList[0] = newList[-1]  # assign the last element to the first position\n        newList[-1] = temp  # assign the temporary variable to the last position\n        return newList  # return the modified list"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and returns the same list with the first and last elements interchanged.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and interchanges the first and last element of the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and returns the list with the first and last elements swapped.\n    '''\n    # Get the length of the list and the first and last elements\n    length = len(newList)\n    first_element = newList[0]\n    last_element = newList[length-1]\n    \n    # Swap the first and last elements and return the modified list\n    newList[0] = last_element\n    newList[length-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # Swapping first and last element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as an input and swaps the first and last element of the list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"After swapping the list is:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes the radius of the semicircle as input and returns the area of the largest \n    triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # First, find the angle at which the largest triangle can be formed\n    angle = math.asin(1/2)\n    # Then, find the length of the opposite side of the largest triangle using the Pythagorean theorem\n    opposite = r*math.sin(angle)\n    # Finally, calculate the area of the largest triangle using the formula A = (1/2)*base*height\n    area = 0.5*opposite*r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # The radius of the semicircle\n    r_semicircle = r\n    \n    # The length of the hypotenuse of the triangle\n    h = r_semicircle / math.sqrt(2)\n    \n    # The length of the base of the triangle\n    a = r_semicircle / math.sin(math.pi/3)\n    \n    # The area of the largest triangle\n    area = (math.sqrt(3)/4) * h * a\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the circumference of the semicircle\n    circumference = 2 * math.pi * r\n    \n    # Divide the circumference by 2 to get the length of each side of the triangle\n    side_length = circumference / 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = (math.sqrt(3) / 4) * (side_length ** 2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n    \n    # Calculate the length of the hypotenuse of the largest triangle\n    hypotenuse = math.sqrt(math.pow(r, 2) + math.pow(diameter/2, 2))\n    \n    # Calculate the area of the largest triangle using Heron's formula\n    area = math.sqrt(math.pow(hypotenuse, 2) - math.pow(r, 2))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the circumference of the semicircle\n    circumference = 2 * math.pi * r\n    \n    # Calculate the length of each side of the triangle\n    height = 2 * r * math.sin(math.pi / 3)\n    width = circumference / 3\n    \n    # Calculate the area of the triangle\n    area = height * width / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the diameter of the semicircle\n    d = 2 * r\n    \n    # calculate the area of the semicircle\n    A = math.pi * r**2\n    \n    # calculate the maximum side of the triangle\n    s = math.sqrt(r**2 - (d/2)**2)\n    \n    # calculate the area of the largest triangle\n    area = (s * (d/2)) / 2\n    \n    # return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the angle at the center of the semicircle\n    theta = math.asin(1/r)\n    \n    # Calculate the length of the two legs of the triangle\n    a = r * math.cos(theta)\n    b = r * math.sin(theta)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * a * b\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the chord of the triangle\n    chord_length = 2 * r * math.sin(math.pi / 3)\n\n    # Calculate the area of the triangle\n    area = 0.5 * r**2 * (math.cos(math.pi / 3)**2 / chord_length**2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    # Find the length of the chord of the triangle\n    chord = 2 * math.sqrt(r**2 / 2)\n    # Find the length of the base of the triangle\n    base = chord / 2\n    # Find the height of the triangle\n    height = math.sqrt(r**2 - base**2)\n    # Calculate the area of the triangle\n    area = 0.5 * base * height\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = math.sqrt(r**2 - (0.5*r)**2) # height of the triangle\n    A = (0.5*r*h) # area of the triangle\n    return A"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return end + 1\n    mid = (start + end) // 2\n    if array[mid] - array[start] > mid - start + 1:\n        return find_First_Missing(array, mid+1, end)\n    elif array[mid] - array[start] < mid - start + 1:\n        return find_First_Missing(array, start, mid-1)\n    else:\n        if array[mid] == array[start]:\n            return find_First_Missing(array, start+1, end)\n        else:\n            return array[start]"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start, end+1):\n        if i > 0 and array[i] == array[i-1]:\n            continue\n        elif array[i] == i:\n            continue\n        else:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n\n    pivot = (start + end) // 2\n    left_missing = find_First_Missing(array, start, pivot - 1)\n    right_missing = find_First_Missing(array, pivot + 1, end)\n\n    if left_missing is not None:\n        return left_missing\n    if right_missing is not None:\n        return right_missing\n\n    if pivot == 0:\n        if array[0]!= 0:\n            return 0\n        else:\n            return None\n    if array[pivot] == pivot + 1:\n        return pivot + 1\n    elif array[pivot] == pivot + 2:\n        return find_First_Missing(array, pivot + 1, end)\n    else:\n        return None"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i - 1 >= 0:\n            if array[i]!= i + 1 + array[i - 1]:\n                return i + 1\n\n    if end == len(array) - 1:\n        return end + 2\n    else:\n        return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n        \n    for i in range(start, end+1):\n        if array[i] - i - 1 >= 0 and array[array[i] - i - 1]!= array[i]:\n            array[array[i] - i - 1], array[i] = array[i], array[array[i] - i - 1]\n            \n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n        \n    return end+1+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    n = end + 1\n    missing = n\n    for i in range(start, n):\n        missing = min(missing, abs(i - array[i]))\n    return missing + start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    length = end - start + 1\n\n    # check if the list is already complete\n    for i in range(length):\n        if array[i]!= i + start:\n            return i + start\n\n    # check if the list is missing numbers greater than the length of the list\n    if array[length-1]!= length + start:\n        return length + start\n\n    # check if the list is missing some numbers\n    for i in range(length):\n        if array[i]!= i + start:\n            return i + start\n\n    # if all numbers are present in the list, return the length of the list plus the start value\n    return length + start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    if end < start:\n        return start\n\n    mid = (start + end) // 2\n\n    if array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n\n    return find_First_Missing(array, start, mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: List of natural numbers sorted in ascending order.\n    :param start: starting index of the array (default is 0).\n    :param end: ending index of the array (default is None, which means the end of the array).\n    :return: Smallest missing number from the array.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return start + 1\n\n    mid = (start + end) // 2\n\n    if array[mid] == mid + start:\n        return find_First_Missing(array, mid + 1, end)\n\n    return find_First_Missing(array, start, mid)"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    n = end - start + 1\n    for i in range(n):\n        if array[start + i]!= i + start:\n            return i + start\n    return n + start\n"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    :param string: The string to replace spaces in.\n    :return: The string with spaces replaced with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \", \"%20\")\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_even(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the even numbers.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_even(numbers):\n    evens = []\n    for num in numbers:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(list):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only even numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_even_odd(lst):\n    \"\"\"\n    This function splits a list into two lists based on whether the elements are even or odd.\n    \n    Args:\n    lst: A list of numbers.\n    \n    Returns:\n    Two lists: one containing the even numbers from the original list and one containing the odd numbers.\n    \"\"\"\n    \n    even_lst = []\n    odd_lst = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n        else:\n            odd_lst.append(num)\n    \n    return even_lst, odd_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_even_odd(numbers):\n    evens = []\n    odds = []\n    for num in numbers:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens, odds"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+i, ele[1]+j) for i in range(-1, 2) for j in range(-1, 2) if not(i == 0 and j == 0) and (i,j) not in sub]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple (ele) as input and returns a list of all the adjacent coordinates.\n    The optional parameter sub is a list of tuples that represent the coordinates of the sub-grid.\n    If sub is not provided, the function will consider all the adjacent coordinates.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x, y-1), (x, y+1), (x+1, y)]\n    if sub:\n        return [(i, j) for i, j in adjacent if i in range(sub[0][0], sub[0][0]+sub[1][0]) and j in range(sub[0][1], sub[0][1]+sub[1][1])]\n    else:\n        return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(coord, sub=[]):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = coord\n    adj = []\n    if row > 0:\n        adj.append((row-1, col))\n    if row < 2:\n        adj.append((row+1, col))\n    if col > 0:\n        adj.append((row, col-1))\n    if col < 2:\n        adj.append((row, col+1))\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = [(row-1,col),(row+1,col),(row,col-1),(row,col+1)]\n    return sub+[adj[i] for i in range(len(adj)) if adj[i] not in sub]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    rows, cols = ele\n    adj_coords = []\n    if rows > 0:\n        adj_coords.append((rows-1, cols))\n    if cols > 0:\n        adj_coords.append((rows, cols-1))\n    if rows < 4:\n        adj_coords.append((rows+1, cols))\n    if cols < 4:\n        adj_coords.append((rows, cols+1))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes two arguments:\n    1. ele: a tuple representing the coordinate of the point whose adjacent coordinates need to be extracted.\n    2. sub: a list of tuples representing the coordinates of the sub-square that the given coordinate belongs to.\n    \n    If sub is not provided, it assumes that the given coordinate belongs to the square of side 1.\n    '''\n    \n    side = len(sub) + 1 if sub else 1\n    \n    # Extract the row and column indices of the given coordinate\n    row, col = ele\n    \n    # Extract the coordinates of the adjacent points\n    adj_coords = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n    \n    # Filter out the coordinates that are outside the sub-square\n    if sub:\n        adj_coords = [coord for coord in adj_coords if coord[0] >= 0 and coord[0] < side and coord[1] >= 0 and coord[1] < side and coord not in sub]\n    \n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub == []:\n        sub.append((x-1, y-1))\n        sub.append((x-1, y))\n        sub.append((x-1, y+1))\n        sub.append((x, y-1))\n        sub.append((x, y+1))\n        sub.append((x+1, y-1))\n        sub.append((x+1, y))\n        sub.append((x+1, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    ad = []\n    # add all the adjacent coordinates to the list\n    for x in range(ele[0]-1, ele[0]+2):\n        for y in range(ele[1]-1, ele[1]+2):\n            if (x,y)!= ele and (x,y) not in sub:\n                ad.append((x,y))\n    return ad"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x, y+1), (x+1, y), (x, y-1), (x-1, y)]\n    if sub:\n        adj = [a for a in adj if a not in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a tuple of coordinates (x,y) as an argument and returns a list of all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n\n    # List of tuples containing all the adjacent coordinates\n    adjacent = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n\n    # If a sublist of adjacent coordinates is provided, then we return only those coordinates that are not in the sublist.\n    if sub:\n        result = [coord for coord in adjacent if coord not in sub]\n        return result\n\n    # If no sublist is provided, then we simply return the list of adjacent coordinates.\n    return adjacent"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if'' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        text = text.replace(\" \", \"_\")\n    else:\n        text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    zeroes = []\n    non_zeroes = []\n\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all the zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            num_list.remove(num)\n    num_list += zeroes\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers and moves all zeroes to the end of the list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return zeroes + non_zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create two lists to hold zeroes and non-zeroes\n    zeroes = []\n    non_zeroes = []\n\n    # loop through the given list and append non-zeroes to the non_zeroes list and zeroes to the zeroes list\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n\n    # append the zeroes list to the end of the non_zeroes list\n    non_zeroes.extend(zeroes)\n\n    # return the non_zeroes list\n    return non_zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]  # create a new list with all the zeroes\n    non_zeroes = [x for x in num_list if x!= 0]  # create a new list with all the non-zeroes\n    \n    # concatenate the zeroes and non-zeroes lists\n    new_list = zeroes + non_zeroes\n    \n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    # initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = len(num_list) - 1\n    \n    # iterate through the list until the pointers meet in the middle\n    while left < right:\n        # if the left pointer points to a non-zero value, move it one position to the right\n        if num_list[left]!= 0:\n            left += 1\n        # if the right pointer points to a zero value, move it one position to the left\n        elif num_list[right] == 0:\n            right -= 1\n        # if both pointers point to zeroes, swap them and move both pointers one position to the right\n        else:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n            right -= 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    non_zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Find the first index of a non-zero element\n    first_nonzero_index = next((i for i, x in enumerate(num_list) if x!= 0), None)\n    if first_nonzero_index is None:\n        # All elements are zeroes, return the original list\n        return num_list\n    else:\n        # Move all zeroes to the end of the list\n        return num_list[:first_nonzero_index] + [0] * num_list.count(0) + num_list[first_nonzero_index:]"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as an argument and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Find the indices of all the zeroes\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n\n    # Move the zeroes to the end of the list\n    for i in zero_indices:\n        num_list.append(num_list.pop(i))\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ (arr[i] ^ arr[j])\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function finds the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum + arr[i] ^ arr[j]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of n integers as input and returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_of_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_xor = sum_of_xor ^ arr[i] ^ arr[j]\n    return sum_of_xor"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    # Initialize the sum to 0\n    xor_sum = 0\n    \n    # Iterate over all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1,n):\n            # XOR the current pair of elements and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            result = result ^ (arr[i] ^ arr[j])\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result = result + arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n    '''\n    heap = iterable\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given list using heap sort algorithm.\n    \"\"\"\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    n = len(heap)\n    \n    for i in range(n//2-1, -1, -1):\n        hq.heapify(heap, n, i)\n    \n    for i in range(n-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap, i, 0)\n    \n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    heap = iterable[:]\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a given iterable in ascending order using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a given iterable using heap sort algorithm.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        print(\"There is no profit and no loss\")\n    else:\n        profit_amount = sale_amount - actual_cost\n        print(\"The profit amount is:\", profit_amount)"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"There is no profit. The sale amount is greater than the actual cost.\")\n        return False\n    elif sale_amount == actual_cost:\n        print(\"There is no profit or loss. The sale amount is equal to the actual cost.\")\n        return True\n    else:\n        print(\"There is no loss. The sale amount is less than or equal to the actual cost.\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters, actual_cost and sale_amount, which are the cost of the product and the amount the product is sold, respectively.\n    It checks whether the sale_amount has no profit and no loss by comparing the sale_amount with the actual_cost.\n    If sale_amount is less than or equal to actual_cost, then the sale_amount has no profit and no loss.\n    If sale_amount is greater than actual_cost, then the sale_amount has a profit.\n    If sale_amount is equal to actual_cost, then the sale_amount has no profit but loss.\n    '''\n    if sale_amount <= actual_cost:\n        return \"No profit and no loss\"\n    elif sale_amount > actual_cost:\n        return \"Has profit\"\n    else:\n        return \"No profit but loss\""
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It checks whether the sale_amount has no profit and no loss.\n    Returns True if no profit and no loss, False otherwise.\n    '''\n    \n    profit = sale_amount - actual_cost\n    \n    if profit > 0:\n        print(\"There is profit.\")\n        return False\n    elif profit < 0:\n        print(\"There is loss.\")\n        return False\n    else:\n        print(\"There is no profit and no loss.\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given sale amount has no profit and no loss.\n    :param actual_cost: the actual cost of the item\n    :param sale_amount: the amount of the sale\n    :return: True if there is no profit and no loss, False otherwise\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    :param actual_cost: The actual cost of the product.\n    :param sale_amount: The amount of the product sold.\n    :return: True if the sale has no profit and no loss, False otherwise.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    :param actual_cost: the actual cost of the item\n    :param sale_amount: the amount of the item sold\n    :return: True if there is no profit and no loss, False otherwise\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    '''\n    if sale_amount <= actual_cost:\n        print(f\"Sale amount {sale_amount:.2f} is not higher than actual cost {actual_cost:.2f}.\")\n    else:\n        profit = sale_amount - actual_cost\n        if profit > 0:\n            print(f\"Sale amount {sale_amount:.2f} has a profit of {profit:.2f}.\")\n        else:\n            print(f\"Sale amount {sale_amount:.2f} has a loss of {profit:.2f}.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"No profit no loss\")\n    else:\n        print(\"There is profit or loss\")"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n\n    # Convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n\n    # Calculate the wind chill index using the formula:\n    # T_wc = 13.12 + 0.6215 * T - 11.37 * v_ms^0.16 + 0.3965 * T * v_ms^0.16\n    t_wc = 13.12 + 0.6215 * t - 11.37 * v_ms ** 0.16 + 0.3965 * t * v_ms ** 0.16\n\n    # Round the wind chill index to the next integer\n    return round(t_wc)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index.\n    \n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in Celsius.\n    \n    Returns:\n    float: Wind chill index in Celsius.\n    \"\"\"\n    # Calculate the wind chill index using the formula:\n    # Tc = 13.12 + 0.6215 * V - 11.37 * math.pow(v, 0.16) + 0.3965 * T - 0.4685 * V * math.pow(t, 0.16)\n    Tc = 13.12 + 0.6215 * v - 11.37 * math.pow(v, 0.16) + 0.3965 * t - 0.4685 * v * math.pow(t, 0.16)\n    \n    # Round the result to the nearest integer and return it.\n    return round(Tc)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v = v/3.6\n    \n    # Calculate wind chill index\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    \n    # Round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_f = (t * 9/5) + 32  # Convert temperature to Fahrenheit\n    wci = 35.74 + 0.6215*t_f - 35.75*math.pow(v,0.16) + 0.4275*t_f*math.pow(v,0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wci = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index (WCI) rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # Calculate the wind chill index using the following formula: WCI = 13.12 + 0.6215*T - 11.37*v^0.16 + 0.3965*T*v^0.16\n    wci = 13.12 + 0.6215*t - 11.37*v_ms**0.16 + 0.3965*t*v_ms**0.16\n    \n    # Round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index in Celsius given the wind velocity in km/h and temperature in Celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the next integer\n    \"\"\"\n    # Calculate the wind chill index using the formula (35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16)))\n    wind_chill_index = 35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16))\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names\n    after removing the names that start with a lowercase letter.\n    \"\"\"\n    # initialize a variable to store the sum of the lengths of the names\n    sum_length = 0\n    \n    # loop through the names in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name and move on to the next name in the list\n            continue\n        # if the name does not start with a lowercase letter, add its length to the sum\n        sum_length += len(name)\n    \n    # return the sum of the lengths of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = re.compile(r'\\([^()]*\\)')  # regex pattern to match any text inside parenthesis\n    for i in range(len(items)):\n        items[i] = re.sub(pattern, '', items[i])  # remove text inside parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)' # pattern to match any text inside parenthesis\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item) # remove the text inside parenthesis\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    result = []\n    for item in items:\n        match = pattern.search(item)\n        if match:\n            result.append(item[:match.start()] + item[match.end():])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    new_string = pattern.sub('', items)\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')  # pattern to match parenthesis and what is inbetween them\n    return re.sub(pattern, '', items)  # substitute with empty string"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^()]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 0\n    \n    while count < n:\n        num += 1\n        count += num\n        \n    return num\n\nprint(is_nonagonal(7)) # Output: 28"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    a, b = 1, 1\n    count = 1\n    \n    while count < n:\n        c = a + b\n        a = b\n        b = c\n        count += 1\n        \n    return a"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num += 1\n        count += num\n    return num - 1"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    result = 0\n    while count < n:\n        result += num\n        num += 1\n        count += 1\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 14\n        count += 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    num1 = 1\n    num2 = 1\n    count = 1\n    \n    # loop through n - 1 times and calculate nonagonal numbers\n    for i in range(n - 1):\n        # calculate the next nonagonal number\n        next_num = num1 + num2\n        # set num1 to num2 and num2 to the next nonagonal number\n        num1 = num2\n        num2 = next_num\n        # increment the count\n        count += 1\n    \n    # return the nth nonagonal number\n    return num2\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer 'n' and returns the nth nonagonal number.\n    \"\"\"\n    # Initializing variables\n    a = 1\n    b = 1\n    c = a + b\n\n    # Looping through the sequence until we reach the nth number\n    while c <= 2 * n:\n        if c == n:\n            return c\n        a, b = b, c\n        c = a + b\n\n    # If we haven't returned yet, the nth nonagonal number doesn't exist\n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    num = 1\n    count = 1\n    while count <= n:\n        num += i * (i + 1) // 2\n        i += 1\n        count += 1\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = n * (3 * n - 1) // 2\n    return num"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b)z(?!\\w*\\b)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(?!^)(?!$)[a-z]*z[a-z]*\\b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-zA-Z]{2})\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"\\b(?!\\w*z\\w*\\b)\\w*z\\w*\\b(?!\\w*z\\w*\\b)\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'(?<!\\w)z(?!\\w)'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"(?<![^A-Za-z])z(?![^A-Za-z])\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b(?!.*\\b)\\w*z\\w*(?!\\b)\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n\n    # Using regular expression to match the pattern \"z\" except at the start and end of the word\n    pattern = r\"\\b(?!.*[a-zA-Z]\\b)z(?!.*[a-zA-Z]\\b)\\b\"\n\n    # Checking if the pattern is present in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[^z]z[^z]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array as input and a position k and returns the array in reverse order up to position k.\n    '''\n    return input[::-1][:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array as input and returns the reverse of the array upto a given position k.\n    '''\n    # Reverse the array\n    input = input[::-1]\n    # Create an empty array to store the reversed array upto k position\n    output = []\n    # Loop through the reversed array upto k position\n    for i in range(k):\n        output.append(input[i])\n    # Return the reversed array upto k position\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes in an input array and a position k (0 <= k <= len(input))\n    and returns the reversed array upto position k.\n    \"\"\"\n    # initialize two pointers, one at the beginning of the array (start) \n    # and the other at position k (end).\n    start = 0\n    end = k - 1\n    \n    # reverse the array upto position k.\n    while start < end:\n        # swap the elements at the start and end pointers.\n        input[start], input[end] = input[end], input[start]\n        \n        # move the start pointer one position to the right and\n        # the end pointer one position to the left.\n        start += 1\n        end -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes in two arguments:\n    - input: a list of integers\n    - k: an integer representing the position to reverse the array up to\n\n    It returns a new list with the original array reversed up to the kth position.\n    '''\n\n    # Create a new list to store the reversed array up to kth position\n    reversed_array = []\n\n    # Reverse the array up to kth position\n    for i in range(k):\n        reversed_array.append(input[-1-i])\n\n    # Add the remaining elements of the original array to the reversed array\n    for i in range(k, len(input)):\n        reversed_array.append(input[i])\n\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array upto a given position k.\n\n    :param input: list, the input array\n    :param k: int, the position to reverse up to\n    :return: list, the reversed array\n    \"\"\"\n    # Convert the input list to a string\n    input_str = ''.join(str(x) for x in input)\n    # Reverse the input string\n    reversed_str = input_str[:k][::-1] + input_str[k:]\n    # Convert the reversed string to a list\n    reversed_list = [int(x) for x in reversed_str]\n    # Return the reversed list\n    return reversed_list"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array as input and reverses it up to the given position (k).\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes in a list and an integer k and reverses the list up to position k.\n    '''\n    if k <= len(input) - 1:\n        input[:k+1] = input[:k+1][::-1]\n    else:\n        input = input[::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in an array and a position k and returns the array reversed upto position k.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes two parameters:\n    1. test_tup: a tuple of integers\n    2. test_dict: a dictionary with string keys and integer values\n    \n    The function should return a new tuple that contains the original tuple and the dictionary.\n    '''\n    new_tup = test_tup + tuple(test_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes two arguments - tuple and dictionary. It adds the dictionary to the tuple.\n    '''\n    # convert dictionary to a list\n    dict_list = list(test_dict.items())\n    \n    # add list to tuple\n    new_tuple = test_tup + tuple(dict_list)\n    \n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as input and returns a tuple containing the original tuple and the dictionary.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes a tuple and a dictionary as inputs and returns a new tuple which is the result of adding the dictionary to the tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Get the size of the matrix\n    n = len(cost)\n    \n    # Initialize variables\n    max_avg = 0\n    max_path = []\n    \n    # Iterate through all possible paths starting from top-left cell to bottom-right cell\n    for i in range(n):\n        for j in range(n):\n            # Initialize variables to keep track of the current path\n            curr_sum = 0\n            curr_cells = 1\n            \n            # Initialize variables to keep track of the current cell\n            curr_row = i\n            curr_col = j\n            \n            # Iterate through all possible cells in the path\n            while curr_row < n-1 and curr_col < n-1:\n                # Choose the cell with the lowest cost\n                if cost[curr_row+1][curr_col] < cost[curr_row][curr_col+1]:\n                    curr_sum += cost[curr_row+1][curr_col]\n                    curr_row += 1\n                else:\n                    curr_sum += cost[curr_row][curr_col+1]\n                    curr_col += 1\n                curr_cells += 1\n            \n            # Check if the current path has a higher average than the previous maximum\n            if curr_cells > 1:\n                curr_avg = curr_sum / curr_cells\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                    max_path = [(i, j)]\n                elif curr_avg == max_avg:\n                    max_path.append((i, j))\n    \n    # Print the maximum average and the corresponding paths\n    print(f\"Maximum average: {max_avg}\")\n    print(\"Corresponding paths:\")\n    for path in max_path:\n        print(path)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    max_avg = dp[n-1][n-1] / (n*n)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Initialize variables\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Find the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            # Check all possible paths from (0, 0) to (i, j)\n            for k in range(i+1):\n                for l in range(j+1):\n                    avg = dp[i][j] - dp[i-k][j] - dp[i][j-l] + dp[i-k][j-l]\n                    if k+l == i+j:\n                        max_avg = max(max_avg, avg/i)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Base case\n    dp[0][0] = cost[0][0]\n\n    # For the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    # For the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    # For the remaining cells\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average\n    max_average = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            total_cost = dp[i][j]\n            cells_visited = max(i, j)\n            if i == 0:\n                cells_visited = cells_visited - 1\n            elif j == 0:\n                cells_visited = cells_visited - 1\n            else:\n                cells_visited = cells_visited - 2\n            average = total_cost / cells_visited\n            max_average = max(max_average, average)\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n\n    for i in range(m):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    return dp[m-1][n-1]/2"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize a matrix of size (n+1)x(n+1) to store the maximum average of path at each cell\n    max_avg = [[0 for i in range(n+1)] for j in range(n+1)]\n    # Initialize the first column and row with the corresponding cost of the cell\n    for i in range(n+1):\n        max_avg[i][0] = cost[i-1][0]\n        max_avg[0][i] = cost[0][i-1]\n    # Fill the rest of the matrix with the maximum average of path at each cell\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # Find the maximum average of path ending at current cell\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i-1][j-1]\n            # Compute the average of path ending at current cell and store it in the corresponding cell in the matrix\n            avg = (max_avg[i-1][j] + max_avg[i][j-1] - cost[i-1][j-1]) / (i+j-2)\n            max_avg[i][j] = avg\n    # Return the maximum average of path at bottom right cell\n    return max_avg[n][n]"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n    return dp[0][n-1]"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            path_len = max(i, j, n-1-i, n-1-j) + 1\n            if dp[i][j] > 0:\n                avg = dp[i][j] / path_len\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)] # initialize dp table\n    dp[0][0] = cost[0][0] # first cell is always included in the path\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0] # if we start from this cell, we can either move right from the cell above or move down from the same cell\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i] # if we start from this cell, we can either move down from the cell to the left or move right from the same cell\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] # we can either move down from the cell to the left or move right from the cell above\n    max_path = dp[n-1][n-1]\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] == max_path:\n                path = [(i,j)]\n                current = (i,j)\n                while current!= (0,0):\n                    if current[0] == 0: # move right from the cell above\n                        current = (current[0], current[1]-1)\n                    elif current[1] == 0: # move down from the cell to the left\n                        current = (current[0]-1, current[1])\n                    else: # move down from the cell to the left or move right from the cell above\n                        if dp[current[0]-1][current[1]] > dp[current[0]][current[1]-1]:\n                            current = (current[0]-1, current[1])\n                        else:\n                            current = (current[0], current[1]-1)\n                    path.append(current)\n                return path, max_path/len(path) # return the path and its average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    max_cost = dp[n-1][n-1]\n    max_path = []\n    i, j = n-1, n-1\n    while i >= 0 and j >= 0:\n        max_path.append((i, j))\n        if i == 0 and j == 0:\n            break\n        if dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    avg_path = max_cost/len(max_path)\n    return avg_path, max_path"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[student] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            filtered_students[student] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[key] = value\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    base_power = base**power\n    for digit in str(base_power):\n        total_sum += int(digit)\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the power to an integer\n    power = int(power)\n\n    # Convert the base to a string and then to a list of integers\n    base_list = [int(i) for i in str(base)]\n\n    # Calculate the sum of all digits of the base to the specified power\n    sum_of_digits = sum([base_list[i] ** power for i in range(len(base_list))])\n\n    # Return the result\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_to_power = base ** power\n    digits_sum = sum(int(digit) for digit in str(base_to_power))\n    return digits_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base *= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes two arguments - base and power - and returns the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to string to get individual digits\n    base_str = str(base)\n    # initialize the sum variable to 0\n    total_sum = 0\n    # iterate through each digit of the base\n    for digit in base_str:\n        # convert the digit to integer\n        digit_int = int(digit)\n        # raise the digit to the specified power\n        digit_power = digit_int ** power\n        # add the digit power to the total sum\n        total_sum += digit_power\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string to iterate over its digits\n    base_str = str(base)\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate over each digit in the base\n    for digit in base_str:\n        # Convert the digit back to an integer and add it to the sum\n        sum += int(digit) ** power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext = 'The quick brown \"fox\" jumps over the \"lazy\" dog.'\nprint(extract_quotation(text)) # Output: ['fox', 'lazy']"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"(.*?)\"'  # pattern to extract text between quotation marks\n    matches = re.findall(pattern, text)  # find all matches of pattern in the text\n    return matches  # return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    # Find all matches of patterns with quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    \n    # Return all matches as a list of strings\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts the values between quotation marks \" \"\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"' # matches any character between two double quotes\n    matches = re.findall(pattern, text1) # finds all non-overlapping matches of the pattern in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all occurrences of quotation marks\n    quotes = re.findall(r'\"(.*?)\"', text1)\n    # Return the list of quotation marks\n    return quotes"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'  # pattern to match double quotes and any characters inside them\n    matches = re.findall(pattern, text1)  # find all matches of the pattern in the text\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)-1\n    result_tup = ()\n    for i in range(n):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1 # number of elements in the tuple\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    res_tup = ()\n    for i in range(n):\n        res_tup += (test_tup[i] * test_tup[i+1],)\n    return res_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get the length of the input tuple\n    N = len(test_tup) - 1\n    \n    # create a new tuple with the required values\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"Error: Lists must be of equal length\")\n        return None\n    else:\n        result = []\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list of their element-wise sum.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Check if the lengths of the lists are the same\n    if len(lst1)!= len(lst2):\n        raise ValueError('Lists must have the same length')\n    \n    # Create a new list with the sums of the elements of the input lists\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n        \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the list of their element-wise sums.\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists and returns their element-wise sum as a new list.\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum.\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the sums of corresponding elements in the input lists.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must be of equal length.\")\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists should be of equal length\")\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # convert the list into a string\n    nums_str = ''.join(map(str, nums))\n    # group the consecutive duplicates together\n    grouped = [(key, len(list(group))) for key, group in groupby(nums_str)]\n    # remove the groups with length 1\n    filtered = [num for num, count in grouped if count > 1]\n    # convert the filtered list back to integers\n    result = [int(num) for num in filtered]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        group = list(group)\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group[-1])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby to group the numbers by consecutive duplicates\n    groups = [(k, len(list(g))) for k, g in groupby(nums)]\n\n    # Filter out groups of length 1 (i.e., non-duplicates)\n    groups = [g for g in groups if g[1] > 1]\n\n    # Extract the duplicates and their positions from the groups\n    duplicates = [g[0] for g in groups]\n    positions = [sum(1 for _ in g) for g in groups]\n\n    # Create a new list without the duplicates\n    new_list = [x for i, x in enumerate(nums) if i not in positions]\n\n    return new_list"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        if k == g[0]:\n            continue\n        yield k\n        for x in g:\n            yield x"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a string and use groupby() to group the consecutive duplicates\n    groups = [(len(list(group)), int(key)) for key, group in groupby(map(str, nums))]\n    # Remove the groups with length 1 (i.e. non-consecutive duplicates)\n    groups = [group for group in groups if group[0] > 1]\n    # Flatten the list of groups and convert back to a list\n    result = [group[1] for group in groups]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by consecutive duplicates\n    groups = [(k, len(list(g))) for k, g in groupby(nums)]\n    # remove groups with length 1\n    groups = [g for g in groups if g[1] > 1]\n    # return the resulting list\n    return [g[0] for g in groups]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # convert list to string for groupby() function to work\n    nums = ''.join(map(str, nums))\n    # group consecutive duplicates together using groupby() function\n    groups = groupby(nums)\n    # join the groups with the same consecutive duplicates\n    result = ''.join(group[0] for group in groups if len(list(group[1])) > 1)\n    # convert result back to list\n    result = list(map(int, result))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface_area = math.pi*r*(math.sqrt(r**2 + h**2))\n    return lateralsurface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface = math.pi * r * r + math.pi * r * h\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h + 2 * math.pi * r ** 2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone, and returns the lateral surface area.\n    '''\n    lateralsurface_area = math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface_area\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nlateral_surface_area = lateralsurface_cone(radius, height)\n\nprint(\"The lateral surface area of the cone is:\", lateral_surface_area)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and height h of a cone and returns the lateral surface area of the cone.\n    '''\n    lateralsurface = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes in two parameters:\n    r: The radius of the cone\n    h: The height of the cone\n    \n    It returns the lateral surface area of the cone rounded to two decimal places.\n    '''\n    surface_area = math.pi * r * h + math.pi * r**2\n    lateral_area = 2 * math.pi * r * h\n    return round(surface_area - lateral_area, 2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h + 2 * math.pi * r\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * h\n    lateral_surface_area = math.pi * r**2\n    total_surface_area = 2 * surface_area + lateral_surface_area\n    return total_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r\"[., ]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[,.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    \n    # Replace commas with a colon\n    text = re.sub(r',', ':', text)\n    \n    # Replace dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    \n    return text"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    \n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A (list): a sorted list of integers\n    x (int): the number to search for\n\n    Returns:\n    int: the index of the first occurrence of x in A, or -1 if x is not found in A\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    :param A: A sorted array of integers.\n    :param x: The integer to search for.\n    :return: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1 # search left half for the first occurrence\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # we found the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n\n    # x was not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1 # x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # we found the first occurrence, now we need to find the leftmost occurrence\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    # the number was not found\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            prod = 1\n            for k in sub_arr:\n                prod *= k\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    prefix_prod = [1]\n    prefix_sum = [0]\n    for i in range(n):\n        prefix_prod.append(prefix_prod[-1] * arr[i])\n        prefix_sum.append(prefix_sum[-1] + arr[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = prefix_prod[j+1] - prefix_prod[i]\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += dp[i][j] * prefix_sum[i]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            res += temp\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables\n    total = 0\n    product = 1\n    max_product = 1\n    start = 0\n    \n    for i in range(n):\n        product *= arr[i]\n        \n        while product >= max_product:\n            max_product *= arr[start]\n            start += 1\n        \n        total += max_product\n        \n    return total"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n\n    for i in range(n):\n        # multiplying all elements with zero\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            ans += temp\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            ans += (1 if len(sub_arr) == 1 else sub_arr[0]*sub_arr[-1])\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = 1\n            for k in range(i, j):\n                temp *= arr[k]\n            res += temp\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = 1\n            for k in range(i, j):\n                temp *= arr[k]\n            res += temp\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        # Calculate product of all elements from the start of the sublist\n        prod_start = 1\n        for j in range(i, n):\n            prod_start *= arr[j]\n            res += prod_start\n\n    return res"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # Toggling the bits of the number except the first and the last bit\n    toggled_bits = (n >> 1) ^ n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Finding the mask for the first and last bits\n    first_bit_mask = (1 << 1) - 1\n    last_bit_mask = (1 << 0) - 1\n    \n    # Setting the first and last bits\n    n &= ~(first_bit_mask | last_bit_mask)\n    \n    # Toggling the middle bits\n    n ^= ((1 << len(bin(n)[2:])) - 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # To toggle all the bits of a number except the first and last bit, we can use a bitwise XOR (^) operation.\n    # We first set all the bits to 1 by using a bitwise OR (|) operation.\n    # Then we toggle all the bits by using a bitwise XOR (^) operation with the value of 1 shifted to the left by 1 bit (which toggles the leftmost bit).\n    # Finally, we remove the leftmost bit by using a bitwise AND (&) operation with the value of 0x7ffffffe (which clears the leftmost bit).\n    return (n | 0x7fffffff) ^ (1 << 1) & 0x7fffffff"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 0b11111100 # binary 11111100 has 6 bits set to 1, the rest are set to 0\n    n &= mask  # clear the first and last bit\n    n |= 0b00000100  # set the second bit to 1\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (1 << (len(bin(n)) - 3)) - 1  # Create a mask with all 1's except for the first and last bit\n    return ((n & mask) ^ mask) ^ n  # Toggle the bits of the number except the first and last bit using XOR operations\n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # XOR the number with 0xAAAAAAAAAAAAAAAA (which toggles all bits)\n    # AND the result with 0x5555555555555555 (which sets only the middle 32 bits)\n    return n ^ 0xAAAAAAAAAAAAAAAA & 0x5555555555555555"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles the bits of a given number except the first and last bit.\n    \"\"\"\n    mask = (1 << 31) - 1  # Binary number with only the first 31 bits set to 1\n    n = n & mask  # Clear the first 31 bits of n\n    n = n << 1  # Shift the bits to the left by 1 position\n    n = n ^ mask  # Toggle the bits of n except the first and last bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ ((1 << n.bit_length()-2) - 1))"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # To toggle bits of the number, we need to XOR the number with a mask that sets all bits between the first and last bit to 1\n    # To set all bits between the first and last bit to 1, we need to left shift the mask by the number of bits between them\n    # Then we XOR the number with the mask to toggle the bits\n    mask = ((1 << len(bin(n)[2:])) - 1) << (len(bin(n)) - 1 - len(bin(n)[2:]))\n    return n ^ mask\n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Find the number of bits in n\n    num_bits = len(bin(n)) - 2\n    \n    # Toggle all bits except the first and last bits\n    toggled_bits = ((1 << num_bits) - 1) << 1\n    \n    # XOR n with toggled_bits to get the result\n    result = n ^ toggled_bits\n    \n    return result"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string starts with a vowel, False otherwise.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    return pattern.match(string)"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 2.8333333333333335"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1-n**(1/n)) / (1-1/n)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1)*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Geometric sum of\", n, \"is\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) + (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + geometric_sum(n-1)*n\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The geometric sum of {n-1} is {geometric_sum(n)}\")"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    # Calculate the upper limit of the triangular number with n digits\n    limit = int(math.pow(10, n) * (math.pow(10, n - 1) - 1) / 2)\n\n    # Initialize the lower limit to 1\n    low = 1\n\n    # Initialize the index to 1\n    index = 1\n\n    # Loop until the lower limit exceeds the upper limit\n    while low <= limit:\n        # Calculate the middle point of the range\n        mid = (low + limit) // 2\n\n        # Calculate the triangular number at the middle point\n        triangular = mid * (mid + 1) // 2\n\n        # Check if the triangular number has n digits\n        if len(str(triangular)) == n:\n            # If yes, return the index of the smallest triangular number with n digits\n            return index\n\n        # If the triangular number has more than n digits, update the upper limit\n        elif len(str(triangular)) > n:\n            limit = mid - 1\n\n        # If the triangular number has less than n digits, update the lower limit and increase the index\n        else:\n            low = mid + 1\n            index += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 1\n    count = 1\n    \n    while len(str(triangular_num)) < n:\n        triangular_num += count\n        count += 1\n    \n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        if len(str(i*(i+1)//2)) == n:\n            return i\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(1, n+1):\n        triangular_numbers.append(math.comb(2*i, i))\n    return triangular_numbers.index(min(triangular_numbers)) + 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    i = 1\n    while len(str(int(i*(i+1)/2))) < n:\n        i += 1\n    return i-1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # initialize variables\n    i = 1\n    j = 1\n    count = 0\n    # loop until the required number of digits is reached\n    while len(str(i)) < n:\n        i += j\n        j += 1\n        count += 1\n    # return the count\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the number of digits in the smallest triangular number with n digits\n    num_digits = (n*(n+1)) // 2\n    \n    # Convert the number of digits to an integer\n    num_digits = int(num_digits)\n    \n    # Calculate the index of the smallest triangular number with n digits\n    index = num_digits // 10**(n-1)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the upper limit for the triangular number with n digits\n    limit = int(math.pow(10, n)) * (int(math.pow(10, n-1)) + 1)\n    \n    # Initialize the triangular number and its index\n    triangular_num = 1\n    index = 1\n    \n    # Iterate until the triangular number exceeds the limit\n    while triangular_num <= limit:\n        # Update the triangular number and its index\n        triangular_num += index\n        index += 1\n    \n    # Return the index of the smallest triangular number with n digits\n    return index - 2"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = lambda x: x * (x + 1) // 2\n    count = 0\n    while triangular(count) < 10**n:\n        count += 1\n    return count\n\nprint(find_Index(3)) # Output: 6\nprint(find_Index(4)) # Output: 10\nprint(find_Index(5)) # Output: 15"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the value of the nth triangular number\n    triangular = int(n * (n + 1) / 2)\n\n    # Find the number of digits in the triangular number\n    num_digits = int(math.log10(triangular)) + 1\n\n    # Return the index of the smallest triangular number with n digits\n    return num_digits - n\n"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as an argument and converts it to a dictionary with adjacent elements as key-value pairs.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError('Input must be a tuple.')\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function converts the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2 == 0:\n        dictionary = dict(zip(test_tup[::2], test_tup[1::2]))\n        return dictionary\n    else:\n        return \"Invalid input, tuple length should be even\""
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character\n    first_char = s[0]\n    # Loop through the string\n    for char in s:\n        # Check if the current character is not equal to the first character\n        if char!= first_char:\n            # If a different character is found, return False\n            return False\n    # If all characters are equal, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same, else False.\n    '''\n    # Initialize the counter variable\n    count = 1\n    # Loop through each character in the string\n    for char in s:\n        # If the counter is greater than 1, then return False as the string contains characters other than the first one\n        if count > 1:\n            return False\n        # Increment the counter variable\n        count += 1\n    # If the loop completes without returning False, return True as all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function returns True if all the characters in the given string are the same, otherwise False.\n    \"\"\"\n    if len(s) == 0:\n        return False\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters of a given string are the same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are the same,\n    and False otherwise.\n\n    Args:\n        s (str): The string to be checked.\n\n    Returns:\n        bool: True if all characters in the string are the same, and False otherwise.\n    \"\"\"\n\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n\nprint(all_Characters_Same('hello')) # False\nprint(all_Characters_Same('abc')) # True\nprint(all_Characters_Same('aaa')) # True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters are the same, else False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        for char in s:\n            if char!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are the same,\n    otherwise it returns False.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            prev_char = s[i]\n        elif s[i]!= prev_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (6*math.sqrt(6))/4 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    volume = (1/3) * math.sqrt(3) * side ** 3\n    area = 6 * math.sqrt(2) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a single argument'side' which is the length of one of the three sides of the tetrahedron.\n    It returns the area of the tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 3) / 2\n\n    # Calculate the volume of the tetrahedron\n    volume = (math.sqrt(3) / 3) * s ** 3\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (math.sqrt(3) / 2) * s * volume\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * math.sqrt(3)) / 2\n    area = (6 * s ** 2) / (4 * math.tan(math.pi / 6))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    s = (side * side) / (4 * math.tan(math.pi / 4))\n    area = math.sqrt(6 * s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side length of a tetrahedron and returns its area.\n    '''\n    area = (6 * math.sqrt(2) / 2) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(3)) / (4 * math.tan(math.pi / 12)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(2)) / (4 + math.sqrt(2)) * side ** 2\n    return area\n\nprint(area_tetrahedron(5))  # Output: 52.05"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    volume = (math.pow(side, 3)) / (6 * math.sqrt(2))\n    return volume"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 4 * side ** 2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef rotate_right(lst, n):\n    '''\n    Rotate a list to the right by n items.\n    '''\n    return deque(lst[-n:]) + deque(lst[:-n])"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list as input and rotates it to the right by n elements.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    return list[n-m:]+list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    This function takes a list and a value k as input and rotates the list by k elements to the right.\n    \"\"\"\n    n = len(lst)\n    k = k % n  # to handle cases where k is greater than length of list\n    return lst[n-k:] + lst[:n-k]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function takes a list as input and rotates the list to the right by n positions.\n    '''\n    n = n % len(lst)\n    lst = lst[n:] + lst[:n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list as input and rotates it to the right by m positions.\n    \"\"\"\n    n = len(lst)\n    if m >= n:\n        m = m % n\n    lst = lst[n-m:] + lst[:n-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    new_list = list[-m:] + list[:-m]\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right direction by k items.\n    \"\"\"\n    n = len(lst)\n    k = k % n  # to handle k > len(lst) case\n    lst = lst[-k:] + lst[:-k]  # reverse the first k elements, then the remaining elements\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two arguments, startnum and endnum.\n    It returns a list of numbers within the given range where\n    every number is divisible by every digit it contains.\n    \"\"\"\n\n    # Initialize an empty list to store the valid numbers\n    result = []\n\n    # Loop through each number within the given range\n    for i in range(startnum, endnum+1):\n\n        # Initialize a flag to keep track of whether the number is divisible by every digit\n        divisible = True\n\n        # Extract the digits from the number and convert them to a list\n        digits = list(str(i))\n\n        # Loop through each digit in the list\n        for digit in digits:\n\n            # Check if the digit is not equal to 0 and if the number is not divisible by the digit\n            if digit!= '0' and i % int(digit)!= 0:\n\n                # If any of the digits are not divisible, set the divisible flag to False and break out of the loop\n                divisible = False\n                break\n\n        # If the divisible flag is still True, the number is valid and should be added to the result list\n        if divisible:\n            result.append(i)\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit)!= 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = list(map(int, str(num)))\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))\n\nstartnum = int(input(\"Enter start number: \"))\nendnum = int(input(\"Enter end number: \"))\n\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            divisible_nums.append(num)\n    return divisible_nums\n\nprint(divisible_by_digits(100, 200))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum, which represent the range of numbers to check.\n    It returns a list of all the numbers within the specified range that are divisible by every digit they contain.\n    \"\"\"\n    divisible_list = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)] # convert number to list of digits\n        if all(num % digit == 0 for digit in digits): # check if number is divisible by every digit\n            divisible_list.append(num)\n    return divisible_list"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(digit) % x == 0 for digit in str(x))\n\n    # iterate over the range and check if each number is divisible by every digit it contains\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            print(num)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5*math.pi*r*r)*a/360\n\nprint(sector_area(5, 10)) # Output: 78.53975\nprint(sector_area(5, 45)) # Output: 78.53975\nprint(sector_area(5, 360)) # Output: None"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return round((r**2) * a / 360, 2)\n\nprint(sector_area(5, 30)) # Output: 78.54\nprint(sector_area(7, 50)) # Output: 441.08\nprint(sector_area(9, 75)) # Output: 1396.9\nprint(sector_area(5, 400)) # Output: None"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. \n    The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2)*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5*r*r*a/360*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r**2 * a) / 360 * math.pi\n\nprint(sector_area(5, 90)) # Output: 78.53981633974483\nprint(sector_area(10, 180)) # Output: None"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi * r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Returns the area of a sector given its radius and angle (in degrees).\n    If the angle is larger than 360 degrees, returns None.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return r**2 * (a / 360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (0.5 * math.pi * r**2) * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of subsequences\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Find the length of longest common suffix of subsequences\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while (i > 0 and j > 0 and k > 0):\n        if (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif (L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]):\n            i -= 1\n        elif (L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D matrix to store lengths of longest common subsequence\n    L = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS matrix using the recurrence relation\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Read the LCS matrix to get the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] < L[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Creating a 3D table to store length of LCS\n    lcs_table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Filling the table in a bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs_table[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    lcs_table[i][j][k] = lcs_table[i-1][j-1][k-1] + 1\n                else:\n                    lcs_table[i][j][k] = max(lcs_table[i-1][j][k], lcs_table[i][j-1][k], lcs_table[i][j][k-1])\n\n    # Printing the LCS\n    lcs_length = lcs_table[m][n][o]\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while (i > 0 and j > 0 and k > 0):\n        if (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif (lcs_table[i-1][j][k] > lcs_table[i][j-1][k] and lcs_table[i-1][j][k] > lcs_table[i][j][k-1]):\n            i -= 1\n        elif (lcs_table[i][j-1][k] > lcs_table[i-1][j][k] and lcs_table[i][j-1][k] > lcs_table[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n\n    print(\"The LCS is:\", lcs)\n    print(\"The length of LCS is:\", lcs_length)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D array to store the length of LCS for sub-sequences of X and Y\n    dp = [[0] * (n+1) for i in range(m+1)]\n\n    # create a 3D array to store the length of LCS for sub-sequences of X, Y, and Z\n    lcs = [[[0] * (o+1) for i in range(n+1)] for j in range(m+1)]\n\n    # fill the 3D array lcs with the length of LCS for sub-sequences of X, Y, and Z\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # find the length of LCS for sub-sequences of X and Y using lcs[m][n][0] and lcs[0][n][o]\n    lcs_xy = lcs[m][n][0]\n    lcs_yz = lcs[0][n][o]\n    lcs_z = lcs[0][0][o]\n\n    # find the longest common subsequence of X, Y, and Z\n    lcs_xyz = lcs[m][n][o]\n\n    # find the indices of the LCS sub-sequence in X, Y, and Z\n    i = m\n    j = n\n    k = o\n    lcs_indices = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_indices.append((i-1, j-1, k-1))\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the indices of the LCS sub-sequence to get the correct order\n    lcs_indices = lcs_indices[::-1]\n\n    return (lcs_xy, lcs_yz, lcs_z, lcs_xyz, lcs_indices)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D table to store the lengths of LCS of subsequences of X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCS table using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    lcs_length = L[m][n][o]\n\n    # Create a character array to store the LCS of subsequences of X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    lcs = [\"\"] * (lcs_length+1)\n    lcs[lcs_length] = \"\"\n\n    # Find the LCS of subsequence X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[lcs_length-1] = X[i-1]\n            lcs_length -= 1\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D array to store the length of the common subsequence for each prefix of the three sequences\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # Find the longest common subsequence\n    index = dp[m][n][o]\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] < dp[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Finds the longest common subsequence of the three given strings.\n    \"\"\"\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o + 1) for j in range(n + 1)] for i in range(m + 1)]\n    max_length = 0\n    end_x = 0\n    end_y = 0\n    end_z = 0\n    \n    # Fill the LCS table in a bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1\n                    if lcs[i][j][k] > max_length:\n                        max_length = lcs[i][j][k]\n                        end_x = i - 1\n                        end_y = j - 1\n                        end_z = k - 1\n                else:\n                    lcs[i][j][k] = max(lcs[i][j - 1][k], lcs[i][j][k - 1], lcs[i - 1][j][k])\n    \n    # Reconstruct the LCS from the end_x, end_y, and end_z indices\n    lcs_str = \"\"\n    i, j, k = end_x, end_y, end_z\n    while lcs[i][j][k]!= 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs_str = X[i - 1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i][j - 1][k] == lcs[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Create a 2D table to store the length of LCS for all prefixes of all the three strings\n    LCS = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n    \n    # Find the LCS\n    LCS_length = LCS[m][n][p]\n    i, j, k = m, n, p\n    LCS_list = []\n    \n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            LCS_list.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] > LCS[i][j-1][k] and LCS[i-1][j][k] > LCS[i][j][k-1]:\n            i -= 1\n        elif LCS[i][j-1][k] > LCS[i-1][j][k] and LCS[i][j-1][k] > LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n            \n    # Reverse the LCS list to get the actual LCS in the correct order\n    LCS_list.reverse()\n    \n    # Return the LCS length and the LCS list\n    return LCS_length, LCS_list"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    m, n, o = len(X), len(Y), len(Z) # length of three strings\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] # initializing 3D matrix\n\n    # filling the matrix using dynamic programming approach\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else: \n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # finding the longest common subsequence using the matrix\n    i, j, k = m, n, o # starting from bottom-right corner\n    lcs_str = ''\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] >= lcs[i][j-1][k] and lcs[i-1][j][k] >= lcs[i][j][k-1]: \n            i -= 1\n        elif lcs[i][j-1][k] >= lcs[i-1][j][k] and lcs[i][j-1][k] >= lcs[i][j][k-1]: \n            j -= 1\n        else: \n            k -= 1\n\n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0]*(o+1) for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns the string with spaces between words starting with capital letters.\n    '''\n    # Replace all non-alphanumeric characters with a space\n    str1 = re.sub('[^a-zA-Z0-9]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Create a new list with words starting with capital letters separated by spaces\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        else:\n            new_words.append(''+ word)\n    # Join the new list of words into a string\n    new_str = ''.join(new_words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through each word and check if it starts with a capital letter\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            # If it does, add a space before it\n            words[i] ='' + word\n    \n    # Join the words back together with spaces\n    result = ''.join(words)\n    \n    # Remove any extra spaces\n    result =''.join(result.split())\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1) # Find all words starting with capital letters\n    result = ''\n    for word in words:\n        result += word +'' # Add spaces between words\n    return result.strip() # Remove the last space at the end"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Use regex to find all capitalized words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Use regex to find all non-capitalized words\n    non_capitalized = re.findall(r'\\b[a-z]+\\b', str1)\n    # Join the two lists with a space in between\n    words.extend(non_capitalized)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[^\\W_])(?=[A-Z])','', str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Create a pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    \n    # Use the findall() method to find all matches in the string\n    matches = pattern.findall(str1)\n    \n    # Replace each match with a space followed by the original match\n    for match in matches:\n        str1 = str1.replace(match,'' + match)\n        \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # join the words with a space and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces in between\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Iterate over the list of words and check if each word matches the pattern\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            # If the word matches the pattern, insert a space before the word\n            words[i] ='' + words[i]\n\n    # Join the list of words back into a string with spaces between them\n    result = ''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    words_with_spaces =''.join(words)\n    return words_with_spaces"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num_int in nums_int:\n        sorted_nums_str.append(str(num_int))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = sorted([int(i) for i in nums_str])\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Splitting the string of numbers and removing the empty strings\n    nums = [num for num in nums_str.split() if num.isdigit()]\n\n    # Sorting the list of numbers\n    nums.sort(key=int)\n\n    # Joining the sorted list of numbers back to a string\n    sorted_str =''.join(nums)\n\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str: A list of strings containing numeric characters.\n\n    Returns:\n        A sorted list of strings containing numeric characters.\n    \"\"\"\n    # convert all the strings to integers\n    nums = [int(num_str) for num_str in nums_str]\n\n    # sort the integers\n    nums.sort()\n\n    # convert the integers back to strings\n    nums_str = [str(num) for num in nums]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n    \"\"\"\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = [int(s) for s in nums_str]  # convert strings to integers\n    sorted_nums = sorted(nums_int)  # sort integers\n    sorted_strs = [str(n) for n in sorted_nums]  # convert integers back to strings\n    return sorted_strs"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # convert all elements to numeric values\n    nums_float = [float(num_str) for num_str in nums_str]\n\n    # sort the list of numeric values\n    nums_float.sort()\n\n    # convert the sorted list of numeric values back to strings\n    nums_str_sorted = [str(num_float) for num_float in nums_float]\n\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x.replace('-', '')))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(c) for c in x.split()])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for string in nums_str:\n        nums.append(int(string))\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Using the extend() method to add the tuple to the list\n    test_list.extend(test_tup)\n\n    # Returning the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr)//2:\n        left = 2*i + 1\n        right = 2*i + 2\n        if left < len(arr) and arr[left] > arr[i]:\n            return False\n        if right < len(arr) and arr[right] > arr[i]:\n            return False\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    if i < len(arr):\n        left_child = 2*i + 1\n        right_child = 2*i + 2\n        \n        # Check if left child exists and is greater than parent\n        if left_child < len(arr) and arr[left_child] < arr[i]:\n            return False\n        \n        # Check if right child exists and is greater than parent\n        if right_child < len(arr) and arr[right_child] < arr[i]:\n            return False\n        \n        # Recursive call on left and right children\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    # Check if the last element is the root of the heap\n    if arr[0] > arr[-1]:\n        return False\n    \n    # Call helper function to check for min heap property\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if a given array represents a min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    \n    return True\n    \ndef check_min_heap(arr):\n    '''\n    Main function to check if a given array represents a min heap or not.\n    '''\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    largest = i\n    \n    if left_child < len(arr) and arr[largest] > arr[left_child]:\n        largest = left_child\n    \n    if right_child < len(arr) and arr[largest] > arr[right_child]:\n        largest = right_child\n    \n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        check_min_heap_helper(arr, largest)\n        \n        \ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    for i in range(len(arr)//2, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        # check if left child of i is greater than i\n        if arr[2*i] < arr[i]:\n            return False\n        # recursively check left child\n        if not check_min_heap_helper(arr, 2*i):\n            return False\n        # recursively check right child\n        if not check_min_heap_helper(arr, 2*i+1):\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents a min heap or not.\n\n    Parameters:\n    - arr: a list of integers representing a binary heap.\n    - i: an integer representing the index of the current node.\n\n    Returns:\n    - True if the given array represents a min heap, False otherwise.\n\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n\n    :param arr: array to check if it represents a min heap\n    :param i: index of the last element of the tree\n    :return: True if the array is a min heap, False otherwise\n    \"\"\"\n    # If the index is less than or equal to 0, then the array is a min heap\n    if i <= 0:\n        return True\n\n    # Get the parent index of the current node\n    parent = (i-1) // 2\n\n    # If the parent of the current node is greater than the current node, then the array is not a min heap\n    if arr[parent] > arr[i]:\n        return False\n\n    # Recursively call the function on the left and right subtrees of the current node\n    return check_min_heap_helper(arr, parent) and check_min_heap_helper(arr, i-1)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    :param arr: array to check if it represents a min heap\n    :return: True if the array is a min heap, False otherwise\n    \"\"\"\n    # Get the last element of the array (which will be at the root of the tree)\n    last_element = len(arr)-1\n\n    # Call the helper function on the whole array\n    return check_min_heap_helper(arr, last_element)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    \n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n    \n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    # check if the given array represents min heap or not\n    if i < len(arr):\n        # get left and right child indices\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # check if the left child is less than or equal to parent node\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        \n        # check if the right child is less than or equal to parent node\n        if right < len(arr) and arr[right] < arr[i]:\n            return False\n        \n        # recursively call the function on left and right child nodes\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    \n    # base case: when we have reached the end of the array\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    if len(arr) == 1:\n        return True\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 1:\n        return n\n    \n    # We can calculate the nth Jacobsthal number by using a formula that involves the Jacobsthal number sequence.\n    # The Jacobsthal number sequence is a sequence of numbers that starts with 0 and 1, and each subsequent number is the sum of the previous two numbers.\n    # The Jacobsthal number can be found by taking the sum of the previous two numbers in the sequence.\n    \n    # Let's start by defining the Jacobsthal sequence as a list.\n    jacob_seq = [0, 1]\n    \n    # We can then use a loop to generate the rest of the sequence by summing the previous two numbers.\n    for i in range(2, n+1):\n        jacob_seq.append(jacob_seq[i-1] + jacob_seq[i-2])\n    \n    # Finally, we can return the nth Jacobsthal number.\n    return jacob_seq[n]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K records from the list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort the list based on the second element of each tuple\n    return test_list[:K] # return the first k elements of the sorted list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K tuples\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    heap = []\n    for record in test_list:\n        heapq.heappush(heap, record)\n        if len(heap) > K:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if K > len(test_list):\n        return \"K is greater than length of list\"\n    \n    heap = []\n    for i in range(K):\n        heap.append(test_list[i])\n        \n    heapq.heapify(heap)\n    \n    for i in range(K, len(test_list)):\n        if test_list[i][0] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, test_list[i])\n            \n    return heap"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if K > n:\n        return \"Invalid Input\"\n    else:\n        test_list.sort(key=lambda x: x[1])\n        return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a list of tuples (test_list) and an integer K (number of records to return)\n    It returns a sorted list of the minimum K records from the tuple list\n    '''\n    # sort the list of tuples based on the second element (the value) of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_heap = []\n    for record in test_list:\n        if len(min_heap) < K:\n            heappush(min_heap, record)\n        else:\n            if record[1] < min_heap[0][1]:\n                heappop(min_heap)\n                heappush(min_heap, record)\n    return [record for record in min_heap]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list.sort(key=lambda x: x[0])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Returns the minimum K records from the given list of tuples.\n    \"\"\"\n    test_list.sort(key=lambda x: x[1])\n    return [x[0] for x in test_list[:K]]"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function finds common elements from three lists and returns a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second smallest number in the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List should have at least two numbers\"\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = 'a+b*'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a([b]*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize a dictionary to store the frequency of each word in the list.\n    freq = {}\n    for word in test_list:\n        freq[word] = freq.get(word, 0) + 1\n\n    # Initialize a list to store the indices of each word in the list.\n    indices = [i for i in range(len(test_list))]\n\n    # Sort the indices in ascending order based on the sorted words.\n    indices.sort(key=lambda x: test_list[x])\n\n    # Initialize a variable to store the count of reverse pairs.\n    count = 0\n\n    # Iterate over the sorted indices and check if a reverse pair exists.\n    for i in range(len(indices)):\n        for j in range(i + 1, len(indices)):\n            # Check if the words at the two indices have the same frequency.\n            if freq[test_list[indices[i]]] == freq[test_list[indices[j]]]:\n                # Check if the reverse of the words at the two indices are equal.\n                if test_list[indices[i]][::-1] == test_list[indices[j]][::-1]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sorted(test_list[i]) == sorted(test_list[j][::-1]):\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    result_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in result_dict:\n                result_dict[sublist] += 1\n            else:\n                result_dict[sublist] = 1\n    return result_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every unique sublist in the list is mapped to its count in the original list.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(tuple(lst[i:j]))\n\n    sublist_dict = {}\n    for sublist in sublists:\n        if sublist not in sublist_dict:\n            sublist_dict[sublist] = 1\n        else:\n            sublist_dict[sublist] += 1\n\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique = {}\n    for sublist in lst:\n        t = tuple(sublist)\n        if t not in unique:\n            unique[t] = 1\n        else:\n            unique[t] += 1\n    return unique"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = list1.count(sublist)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    sub_list_dict = {}\n    for sub_list in lst:\n        if tuple(sub_list) in sub_list_dict:\n            sub_list_dict[tuple(sub_list)] += 1\n        else:\n            sub_list_dict[tuple(sub_list)] = 1\n    return sub_list_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and counts the number of unique sublists present in the list.\n    It returns a dictionary where every unique sublist is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            sublist = tuple(list1[i:j+1])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return float_num == round(float_num, 2)\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    if num.count('.') == 1 and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    # check precision\n    num_list = num.split('.')\n    if len(num_list) == 1:\n        return True\n    else:\n        return len(num_list[1]) == 2\n"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    \n    return round(float_num, 2) == float_num"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return True if float_num.is_integer() else round(float_num, 2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            num_str = str(float_num)\n            if \".\" in num_str:\n                decimal_part = num_str.split(\".\")[1]\n                if len(decimal_part) <= 2:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and returns True if the string is a decimal number with a precision of 2,\n    and False otherwise.\n    \"\"\"\n    try:\n        float(num)\n        if num.count('.') == 1:\n            integer_part, decimal_part = num.split('.')\n            if len(decimal_part) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return round(float_num,2) == float_num\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num:\n        num = num.replace(',', '.')  # Replace commas with dots for decimal points\n        parts = num.split('.')\n        if len(parts) == 2 and len(parts[1]) <= 2:\n            try:\n                float(num)\n                return True\n            except ValueError:\n                return False\n        else:\n            return False\n    else:\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_num = float(num)\n        return abs(decimal_num - round(decimal_num, 2)) <= 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # convert the list to set to remove duplicates\n    unique_set = set(arr)\n\n    # check if length of set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_element(arr):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    :param arr: A list of numbers.\n    :return: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(arr)) == 1"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_element(arr):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element or not.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    This function returns True if the given list has only one distinct element, else False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list into a set to remove duplicates\n    arr_set = set(arr)\n    # If the length of the set is 1, then all the elements are distinct\n    if len(arr_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return 'The month has 30 days.'\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 'The month has 31 days.'\n    elif monthnum == 2:\n        return 'The month has 28 or 29 days.'\n    else:\n        return 'Invalid month number.'"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 2:\n        print(\"February has 28 or 29 days.\")\n    else:\n        print(\"This month has 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    else:\n        return None\n\nmonthnum = int(input(\"Enter a month number (1-12): \"))\nif monthnum < 1 or monthnum > 12:\n    print(\"Invalid month number\")\nelse:\n    num_days = check_monthnumber_number(monthnum)\n    if num_days is None:\n        print(\"Invalid month number\")\n    else:\n        print(f\"Month {monthnum} has {num_days} days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function takes an integer month number as an input and returns True if the given month number contains 30 days or False otherwise. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return \"Invalid input!\"\n"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2]:\n        return False\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11] and monthnum3!= 2:\n        print(\"This month has 30 days.\")\n    elif monthnum3 == 2:\n        print(\"This month has 28 or 29 days.\")\n    else:\n        print(\"This month does not have 30 days.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as inputs and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits present in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the count of number of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \"\"\"\n    count = 1\n    num = 1\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\ndef is_prime(num):\n    \"\"\"\n    This function checks if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    \n    count = 0\n    i = 1\n    \n    while count < n: \n        # check if the number is polite or not \n        if is_prime(i) and is_prime(int(math.log(i, 10))): \n            count += 1\n        \n        # increment the number to check for politeness \n        i += 1\n    \n    # return the nth polite number \n    return i - 1\n\ndef is_prime(n): \n    '''\n    This function takes an integer n as input and returns True if it is prime, else False.\n    '''\n    \n    if n < 2: \n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            return False\n    \n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 2\n    while count < n:\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n        i += 1\n        \n    return i-1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    \n    while count < n:\n        i += 1\n        \n        # check if the number is polite\n        if is_prime(i) and is_prime(int(math.log(i, 10))):\n            count += 1\n    \n    return i\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 2\n    while True:\n        if is_prime(i) and is_palindrome(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if a number is palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num) and is_palindrome(num):\n            count += 1\n        num += 1\n    return num - 1\n    \ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while(count < n):\n        i += 1\n        if(is_prime(i) and not is_prime(i-1)):\n            count += 1\n    return i\n\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    p_prev = 1\n    p_curr = 2\n    count = 2\n    \n    while count < n:\n        p_next = p_prev + p_curr\n        if is_prime(p_next):\n            count += 1\n            p_prev = p_curr\n            p_curr = p_next\n        else:\n            p_prev = p_curr\n            p_curr = p_next + 1\n            \n    return p_curr\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_polite_helper(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_polite_helper(num):\n    # Helper function to check if a number is polite\n    # A number is polite if it is prime and odd\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return num % 2!= 0"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_polite(5))"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as an argument and returns a list of all pairs of consecutive items in the given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n                \n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes two arguments - a list of numbers and a target sum.\n    It returns the number of pairs in the list whose sum is equal to the target sum.\n    \"\"\"\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    arr_dict = {}\n\n    for num in arr:\n        complement = sum - num\n\n        if complement in arr_dict:\n            pairs_count += arr_dict[complement]\n\n        if num in arr_dict:\n            arr_dict[num] += 1\n        else:\n            arr_dict[num] = 1\n\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    \n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. \n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function counts the number of pairs whose sum is equal to'sum'.\n    :param arr: list of numbers\n    :param sum: the target sum\n    :return: number of pairs whose sum is equal to'sum'\n    \"\"\"\n    count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and the sum, and returns the number of pairs whose sum is equal to the given sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them as a new list.\n    \"\"\"\n    li_diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists and returns the difference between them.\n    '''\n    diff = set(li1) - set(li2)\n    return list(diff)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists as a new list.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them as a new list.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    diff = []\n    \n    # Iterate through each element in the first list\n    for i in li1:\n        # Check if the element is not in the second list\n        if i not in li2:\n            # Append the element to the difference list\n            diff.append(i)\n    \n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Get the difference between two lists.\n    '''\n    # Get the set of elements in the first list\n    set_li1 = set(li1)\n    # Get the set of elements in the second list\n    set_li2 = set(li2)\n    # Get the difference between the two sets\n    diff_set = set_li1.difference(set_li2)\n    # Convert the set to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    for item in li2:\n        if item not in li1:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes in two lists and returns the difference between them.\n    \"\"\"\n    diff_list = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # iterate through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # calculate the fourth power of the odd number\n        power = i**4\n        # add the power to the sum\n        sum += power\n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        odd_nums = [i for i in range(1, n*2, 2)]\n        return sum([num**4 for num in odd_nums[:n]])"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Calculate fourth power of odd number\n        odd_num = i**4\n        # Add odd_num to total_sum\n        total_sum += odd_num\n        \n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, (n*2)+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = []\n    for i in range(1, 2*n+1, 2):\n        odd_nums.append(i)\n\n    sum = 0\n    for num in odd_nums:\n        sum += num ** 4\n\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function checks if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n\n    # Create an empty stack\n    stack = deque()\n\n    # Loop through each character in the expression\n    for char in exp:\n\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n\n        # If the character is a closing parenthesis, pop the stack until the opening parenthesis is found\n        elif char == ')':\n            if not stack:\n                return False\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            if not stack:\n                return False\n            stack.pop()\n\n    # If there are any characters left in the stack, then the expression is not balanced\n    if stack:\n        return False\n\n    # If the expression is balanced, return True\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for i in exp:\n        if i in pairs.values():\n            stack.append(i)\n        elif i in pairs.keys():\n            if not stack or pairs[i]!= stack.pop():\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {')':'(', ']':'[', '}':'{'}\n\n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop()!= pairs[char]:\n                return False\n        else:\n            pass\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n\n    # Loop through each character in the expression\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        # If the character is a closing bracket, check if it matches the top of the stack\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False  # If the stack is empty, the expression is not balanced\n            elif char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False  # If the character does not match the top of the stack, the expression is not balanced\n\n    # If we have processed all characters and the stack is empty, the expression is balanced\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with length equal to K from the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # split the string into words\n    filtered_words = [word for word in words if len(word)!= K]  # filter out words with length K\n    return''.join(filtered_words)  # join the filtered words back into a string"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function removes all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word)!= K]\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty string to store the result\n    result = ''\n    # iterate through the words and append only the words with length!= K\n    for word in words:\n        if len(word)!= K:\n            result += word +''\n    # remove the last space and return the result\n    return result[:-1]"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the given string into words\n    words = test_str.split()\n\n    # Create an empty list to store the words with length K\n    words_with_length_K = []\n\n    # Loop through all the words in the list\n    for word in words:\n        # Check if the length of the word is equal to K\n        if len(word) == K:\n            # If it is, add it to the list of words with length K\n            words_with_length_K.append(word)\n\n    # Loop through the list of words with length K and remove them from the original list\n    for word in words_with_length_K:\n        words.remove(word)\n\n    # Join the remaining words in the list and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function will find the occurrence and position of the substrings within a string.\n    If there is no match, it will return None.\n    \"\"\"\n    # Find all occurrences of the pattern in the text using regex\n    matches = re.finditer(pattern, text)\n\n    # Create an empty list to store the matches\n    result = []\n\n    # Iterate through all the matches and append them to the result list\n    for match in matches:\n        result.append((match.start(), match.group()))\n\n    # If there are no matches, return None\n    if len(result) == 0:\n        return None\n\n    # Otherwise, return the result list\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if len(result) == 0:\n        return None\n    else:\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Finding all the occurrences of pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Returning None if there are no matches\n    if not matches:\n        return None\n    \n    # Creating a list of tuples containing the occurrence and position of the pattern\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = []\n    for match in re.finditer(pattern, text):\n        start, end = match.start(), match.end()\n        matches.append((start, end-1))\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Returns a list of tuples containing the occurrence and position of the pattern in the text.\n    Returns None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        return [(match.start(), match.end()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        result = []\n        for match in matches:\n            index = text.index(match)\n            result.append((match, index))\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Match found at position {match.start()} with value {match.group()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels and (i == 0 or test_str[i-1].lower() not in vowels) and (i == len(test_str)-1 or test_str[i+1].lower() not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if i!= 0:\n            if test_str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n                if test_str[i-1].lower() in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n        if i!= len(test_str)-1:\n            if test_str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n                if test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:\n                    count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i] == test_str[i+1] or test_str[i] == test_str[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0 or i == len(test_str)-1:\n                count += 1\n            elif test_str[i-1].lower() in vowels or test_str[i+1].lower() in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in ['a', 'e', 'i', 'o', 'u'] and test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is a vowel\n        if test_str[i].lower() in vowels:\n            # Check if the previous and next characters are vowels\n            if i > 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_of_unique_arr = sum(unique_arr)\n    return sum_of_unique_arr"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    non_repeated_sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            non_repeated_sum += num\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_nums = list(set(arr))\n    return sum(unique_nums)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to count the occurrences of each element\n    counts = {}\n    for elem in arr:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    # compute the sum of non-repeated elements\n    total_sum = 0\n    for elem in arr:\n        if counts[elem] == 1:\n            total_sum += elem\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            non_repeated_sum += num\n            seen.add(num)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n\n    Parameters:\n    arr (list): A list of integers\n\n    Returns:\n    int: The sum of non-repeated elements in the given list.\n    \"\"\"\n    # Create an empty dictionary to keep track of non-repeated elements.\n    non_repeated = {}\n\n    # Iterate over each element in the input list.\n    for num in arr:\n        # If the element is already in the dictionary, increment its count by 1.\n        if num in non_repeated:\n            non_repeated[num] += 1\n        # If the element is not in the dictionary, add it to the dictionary with a count of 1.\n        else:\n            non_repeated[num] = 1\n\n    # Create a new list of non-repeated elements.\n    non_repeated_list = []\n    for key, value in non_repeated.items():\n        if value == 1:\n            non_repeated_list.append(key)\n\n    # Return the sum of the non-repeated elements.\n    return sum(non_repeated_list)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    # Iterate through the list and count the occurrences of each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    # Create an empty list to store the unique elements\n    unique_elements = []\n    # Iterate through the dictionary and add the unique elements to the list\n    for key, value in count_dict.items():\n        if value == 1:\n            unique_elements.append(key)\n    # Calculate the sum of the unique elements and return it\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum += num\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and packs consecutive duplicates of the list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]!= x[0]):\n        group = list(map(lambda x: x[1], group))\n        if key:\n            result.append(group)\n        else:\n            result[-1].extend(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # sort the list in ascending order\n    list1.sort()\n    # group the consecutive duplicates\n    result = [list(group) for key, group in groupby(list1)]\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    grouped_list = [(k, list(g)) for k, g in groupby(list1)]\n\n    # create a list of sublists with consecutive duplicates grouped\n    sublists = [list(v) for k, v in grouped_list]\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of sublists where\n    consecutive duplicates are packed into sublists.\n    \"\"\"\n    return [[k for k, g in groupby(lst)] for k, g in groupby(lst, lambda x: x)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for key, group in groupby(lst):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, pack consecutive duplicates of its elements into sublists.\n    \n    :param lst: a list of elements\n    :return: a list of sublists, where each sublist contains consecutive duplicates of the original list\n    \"\"\"\n    result = []\n    for key, group in groupby(enumerate(lst), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], group))\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every unique sublist is mapped to its count of occurrences.\n    '''\n    # Convert the list to a tuple to make it immutable\n    lst = tuple(lst)\n\n    # Create an empty dictionary\n    sublist_dict = {}\n\n    # Iterate through every possible sublist of the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            # Check if the sublist is already present in the dictionary\n            if sublist in sublist_dict:\n                sublist_dict[sublist] += 1\n            else:\n                sublist_dict[sublist] = 1\n\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    counts = {}\n    for sublist in list1:\n        if type(sublist) == list:\n            sublist = tuple(sublist)\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    unique_sublists_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in unique_sublists_dict:\n                unique_sublists_dict[sublist] += 1\n            else:\n                unique_sublists_dict[sublist] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst not in count:\n                count[sub_lst] = 1\n            else:\n                count[sub_lst] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create a dictionary to store the count of each unique sublist\n    sublists = {}\n\n    # iterate through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple to make it immutable\n        sublist_tuple = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in sublists:\n            # increment the count if it is\n            sublists[sublist_tuple] += 1\n        else:\n            # add the sublist to the dictionary with a count of 1\n            sublists[sublist_tuple] = 1\n    \n    # return the dictionary of sublist counts\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst not in counts:\n                counts[sublst] = 0\n            counts[sublst] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_lst = set(tuple(lst) for lst in lst)\n    count_dict = {lst: lst.count(lst) for lst in unique_lst}\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of lists, return a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    counts = {}\n    for sublist in lst:\n        sublist = tuple(sublist)\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    unique_sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in unique_sublists:\n                unique_sublists[sublist] = 1\n            else:\n                unique_sublists[sublist] += 1\n    return unique_sublists"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of tuples\n            sum_of_tuples = tuple(sum(x) for x in zip(test_list[i], test_list[j]))\n            # Check if the sum of tuples is already present in the result\n            if sum_of_tuples not in result:\n                result.append(sum_of_tuples)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find the maximum sum in the test list\n    max_sum = sum(max(tuple_pair) for tuple_pair in test_list)\n    \n    # Create a list of all possible sums from 1 to the maximum sum\n    sums = [i for i in range(1, max_sum+1)]\n    \n    # Find all combinations of sums with tuples in the test list\n    for tuple_pair in test_list:\n        for sum_val in sums:\n            if sum_val >= tuple_pair[0] and sum_val >= tuple_pair[1]:\n                for combination in combinations(test_list, 2):\n                    if sum(combination[0]) == sum_val and sum(combination[1]) == sum_val and tuple_pair!= combination:\n                        print(tuple_pair, combination)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(2, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            if sum(combination) == 2020:\n                result.append(combination)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            total = sum(combo)\n            if total == 0:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function finds all the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            sum_of_tuple = sum(j)\n            result.append((j, sum_of_tuple))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 100:\n                combinations_list.append(combo)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 10:\n                result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n            if n // i!= i : \n                count += 1\n    return count \n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0 : \n    print(f\"The count of divisors of {n} is even\")\nelse : \n    print(f\"The count of divisors of {n} is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Count of divisors:\", count_divisors(n))"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef check_divisor_count(n):\n    divisors_count = count_divisors(n)\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif check_divisor_count(n):\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors of n is even, otherwise False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count % 2 == 0\n\nprint(count_divisors(10))   # True\nprint(count_divisors(15))   # False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            count += 1\n            if n/i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 1\n    if n**0.5 == int(n**0.5) : \n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n/i!= i:\n                count += 1\n    return count\n\nprint(count_divisors(10)) # 4\nprint(count_divisors(12)) # 6"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef check_divisor_count(n):\n    if count_divisors(n) % 2 == 0:\n        print(n, \"has even number of divisors\")\n    else:\n        print(n, \"has odd number of divisors\")\n\ncheck_divisor_count(10)\ncheck_divisor_count(15)"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    if count%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    for i in range(1, len(arr)+1, 2):\n        for j in range(len(arr)-i+1):\n            sum += sum(arr[j:j+i])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    # Initialize sum of all odd length subarrays to zero.\n    odd_sum = 0\n    # Traverse through the array from start to end.\n    for i in range(n):\n        # Initialize the current subarray sum to zero.\n        subarray_sum = 0\n        # Traverse through the array from current index to end.\n        for j in range(i, n):\n            # Add the current element to the subarray sum.\n            subarray_sum += arr[j]\n            # Check if the length of the subarray is odd.\n            if (j - i + 1) % 2!= 0:\n                # Add the subarray sum to the odd sum.\n                odd_sum += subarray_sum\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j+1):\n                sum += arr[k]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function finds the sum of all odd length subarrays in the given array.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function finds the sum of all odd length subarrays.\n    \"\"\"\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray = arr[i:j]\n            if len(subarray) % 2!= 0:\n                result += sum(subarray)\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            temp_sum = sum(arr[i:j])\n            if len(arr[i:j]) % 2!= 0:\n                sum += temp_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize sum as 0\n    sum = 0\n    # Loop through all odd length subarrays\n    for i in range(1, n+1, 2):\n        for j in range(n-i+1):\n            # Add the sum of subarray to sum\n            sum += sum_subarray(arr[j:j+i])\n    return sum\n\ndef sum_subarray(arr):\n    # Calculate sum of a subarray\n    return sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2!= 0: # check if the length of the subarray is odd\n                subarray_sum = sum(arr[i:j+1]) # sum up the subarray\n                sum += subarray_sum # add the sum to the total sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three parameters: r, g, and b, which represent the red, green, and blue values of a color.\n    It returns a tuple containing the hue, saturation, and value of the color in the HSV color space.\n    \"\"\"\n    # Convert the rgb values to a 0-1 scale\n    r /= 255\n    g /= 255\n    b /= 255\n    \n    # Get the maximum and minimum values of the rgb color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val)) + 240\n    \n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    # Return the hue, saturation, and value as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts the given RGB values to HSV values.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60)\n\n    if h < 0:\n        h += 360\n\n    s = 0 if cmax == 0 else delta / cmax\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three arguments - r, g, b representing the red, green and blue values of a color respectively.\n    The function returns a tuple containing the Hue, Saturation and Value (HSV) values of the color.\n\n    \"\"\"\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60, 2)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else round((delta / cmax) * 100, 2)\n\n    value = round(cmax * 100, 2)\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    value = round(cmax * 100)\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else round(delta / cmax, 2)\n    \n    value = round(cmax, 2)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if max_val == 0 else delta / max_val\n    \n    value = max_val\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function converts the given rgb color to hsv color.\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    s = 0 if max_val == 0 else delta / max_val\n\n    v = max_val\n\n    hsv = (h, s, v)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to an HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n        \n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes RGB values and returns HSV values.\n    '''\n    # Convert RGB values to a 0-1 range\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values for RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n    \n    # Calculate the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n    \n    # Calculate the Value\n    value = max_val\n    \n    # Return the HSV values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n        \n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function finds the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    if even is None and odd is None:\n        return None\n    elif even is None:\n        return odd\n    elif odd is None:\n        return even\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and finds the product of the first even and odd number in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return \"No even and odd numbers found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and odd numbers in a list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function returns the product of the first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n            break\n    for i in list1:\n        if i % 2!= 0:\n            odd = i\n            break\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Finding the first even number\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Finding the first odd number\n    for num in lst:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # Finding the product of even and odd numbers\n    product = even_num * odd_num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num * num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num * num\n    return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function finds the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # Finding the first even number\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Finding the first odd number\n    for num in lst:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    # Returning the product of even and odd number\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of the first even and odd numbers in a given list.\n    \"\"\"\n    even = None\n    odd = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even *= num\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd *= num\n    \n    if even is None or odd is None:\n        return None\n    \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    even_num = 1\n    odd_num = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a string of space-separated integers into a tuple of integers.\n    \"\"\"\n    return tuple(int(num) for num in test_str.split())"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove brackets and split the string\n    int_str_list = test_str.strip('()').split(',')\n    # Convert string elements to integer\n    int_tuple = tuple(int(i) for i in int_str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = tuple(map(int, test_str[1:-1].split(',')))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to a tuple of integers.\n    \"\"\"\n    # Split the input string into a list of strings using commas as separators\n    str_list = test_str.split(',')\n    \n    # Convert each string in the list to an integer and add it to a new list\n    int_list = [int(i) for i in str_list]\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # remove any whitespace from the string\n    test_str = test_str.replace(\" \", \"\")\n    # split the string by commas to create a list of strings for each integer\n    int_str_list = test_str.split(\",\")\n    # convert each string to an integer and add it to the tuple\n    int_tuple = tuple(int(i) for i in int_str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for elem in test_str[1:-1].split(', '):\n        result.append(int(elem))\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into individual elements\n    split_str = test_str.strip('()').split(',')\n    # Convert each element to integer and store in a new list\n    int_list = [int(x) for x in split_str]\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Splitting the tuple string by comma and space\n    tuple_str_list = test_str.split(', ')\n    # Converting the string elements of the list to integers\n    int_tuple = tuple(int(i) for i in tuple_str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses from the string\n    test_str = test_str.replace('(', '').replace(')', '')\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return len(a)\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i + 1"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string matches the pattern of a followed by three b.\n    '''\n    pattern = r'a.*b{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a[b]{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b){3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    This function takes a list and a string as input and creates a new tuple\n    from them.\n    '''\n    # Convert the string to a list\n    test_str_list = list(test_str)\n    # Add the list to the tuple\n    test_tuple = tuple(test_list + test_str_list)\n    return test_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains even numbers, and False otherwise.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function returns True if every even index of the given list contains even numbers and False otherwise.\n\n    Args:\n    nums (list): A list of numbers\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            for i in item:\n                if type(i) == tuple:\n                    result.append(i)\n                else:\n                    result.append(i)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes any tuples from the tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            new_tup.extend(remove_nested(elem))\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n        else:\n            for subitem in item:\n                new_tup.append(subitem)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup += (i,)\n        else:\n            new_tup += remove_nested(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup.extend(elem)\n        else:\n            new_tup.append(elem)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n        else:\n            for j in i:\n                new_tup.append(j)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            remove_nested(item)\n    return tuple(result)"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as an input and returns the number of lists in it.\n    '''\n    count = 0\n    for sublist in input_list:\n        count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as an input and returns the number of lists in it.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists in that list.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function will take a list of lists as input and return the count of lists in that list.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists present in the input list.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted list of integers.\n    x (int): The element to search for.\n\n    Returns:\n    int: The last position of x in arr. If x is not found, return -1.\n\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            # Search for the last occurrence of x in the left subarray.\n            last_left = mid - 1\n            while last_left >= 0 and arr[last_left] == x:\n                last_left -= 1\n\n            # Search for the last occurrence of x in the right subarray.\n            last_right = mid + 1\n            while last_right <= len(arr) - 1 and arr[last_right] == x:\n                last_right += 1\n\n            return max(last_left, last_right)\n\n        elif arr[mid] < x:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    # If x is not found, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in arr, assuming arr is sorted.\n    If x is not in arr, returns -1.\n    \"\"\"\n    if x not in arr:\n        return -1\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid < right and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array `arr` and an integer `x` as input and returns\n    the index of the last occurrence of `x` in the array. If `x` is not found,\n    the function returns -1.\n    '''\n\n    # Initialize variables for the left and right indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Use binary search to find the last occurrence of x in the array\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If x is found at mid, search for the last occurrence on the left side of mid\n            right = mid - 1\n        elif arr[mid] > x:\n            # If x is not found at mid, search on the left side of mid\n            right = mid - 1\n        else:\n            # If x is not found at mid, search on the right side of mid\n            left = mid + 1\n\n    # If x is not found in the array, return -1\n    if left == len(arr) or arr[left]!= x:\n        return -1\n\n    # Return the index of the last occurrence of x in the array\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the index of the last occurrence of an element in a sorted array.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if x not in arr:\n        return -1\n\n    left, right = 0, len(arr) - 1\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    left = 0\n    right = n - 1\n    \n    # Initialize result variable\n    result = -1\n    \n    # Loop until the left and right pointers meet or cross each other\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the middle element is equal to the target element\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Look for the last occurrence on the right side\n        elif arr[mid] < x:\n            left = mid + 1  # Look for the last occurrence in the right half\n        else:\n            right = mid - 1  # Look for the last occurrence in the left half\n            \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0 or arr[-1] < x:\n        return len(arr)\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function returns a string that matches a string that has an 'a' followed by anything,\n    ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through all key-value pairs in the dictionary\n    for key, value in dictionary.items():\n        # Add the value of each item to the sum\n        sum += value\n    \n    # Return the total sum\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.items():\n        total += item[1]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add the odd number to the total sum\n            total += i\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l > r:\n        return 0\n    elif l % 2 == 0:\n        return sum_odd(l+1, r)\n    else:\n        return l + sum_odd(l+2, r)\n\nprint(sum_odd(1, 10)) # Expected output: 25 (1 + 3 + 5 + 7 + 9)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes in two arguments: l and r, which represent the range of natural numbers within which to find the sum of all odd natural numbers.\n    The function returns the sum of all odd natural numbers within the given range.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments l and r, and returns the sum of all odd natural numbers within the range l to r.\n    \"\"\"\n    # Initialize the sum of odd numbers to zero\n    odd_sum = 0\n    \n    # Loop through all the numbers in the range l to r\n    for num in range(l, r+1):\n        # Check if the number is odd\n        if num % 2!= 0:\n            # Add the odd number to the sum\n            odd_sum += num\n    \n    # Return the sum of odd numbers\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function will find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_of_odd = 0\n\n    # Iterate through all odd numbers in range l to r and add to sum\n    for i in range(1, n, 2):\n        sum_of_odd += i\n\n    # Return the sum of all odd numbers\n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments, l and r, which represent the lower and upper limits of the range.\n    It returns the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the range from l to r\n    for i in range(l, r+1):\n        \n        # Check if the current number is odd\n        if i % 2!= 0:\n            \n            # Add the current number to the sum\n            sum += i\n    \n    # Return the sum of all odd natural numbers within the range l and r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments l and r and returns the sum of all odd natural numbers within the range l to r.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    \n    # loop through each number in the range l to r\n    for num in range(l, r+1):\n        # check if the number is odd\n        if num % 2 == 1:\n            # add the number to the sum\n            total += num\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as an input and returns the sum of the elements in the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes in an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes in an array and returns the sum of all the elements in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    result = 0\n    for i in arr:\n        result += i\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    '''\n    This function takes in an array and returns the sum of all the elements in the array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    mask = (2**d - 1) << (32 - d)\n    return ((n << d) & mask) | (n & ~mask)\n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 2**d - 1 # create a mask to select the bits to be rotated\n    shift = 32 - d # calculate the shift value\n    return (n << shift) & mask | (n >> d) # perform left shift and bitwise AND with mask, then perform right shift with d bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    # Convert n and d to binary strings of 32 bits\n    n_binary = bin(n)[2:].zfill(32)\n    d_binary = bin(d)[2:].zfill(5)\n\n    # Pad n_binary with zeros to match the length of d_binary\n    n_binary = n_binary.zfill(len(d_binary) + len(n_binary))\n\n    # Concatenate d_binary and n_binary\n    result = d_binary + n_binary\n\n    # Get the left rotation by concatenating the last d_binary bits with the remaining bits\n    left_rotation = result[-int(d_binary):]\n\n    # Convert the left rotation back to decimal\n    left_rotation = int(left_rotation, 2)\n\n    # Return the left rotation\n    return left_rotation"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the left d bits of n by d bits.\n    '''\n    # Get the binary representation of n.\n    n_bin = bin(n)[2:].zfill(32)\n    \n    # Extract the d most significant bits.\n    bits_to_rotate = n_bin[:d]\n    \n    # Extract the remaining bits.\n    remaining_bits = n_bin[d:]\n    \n    # Concatenate the remaining bits with the rotated bits.\n    rotated_bits = remaining_bits + bits_to_rotate\n    \n    # Convert the concatenated bits back to an integer.\n    rotated_n = int(rotated_bits, 2)\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    This function takes a number n and rotates left d bits of it\n    '''\n    mask = (1 << 32) - 1 # get the 32-bit mask\n    n = n & mask # apply the mask to the number\n    d = d % 32 # make sure d is between 0 and 31\n    rotated = (n << d) | (n >> (32 - d)) # rotate the number left by d bits\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # convert the number to binary and add zeroes to the left for padding\n    binary = bin(n)[2:].zfill(32)\n    # print the original binary number\n    print(\"Original binary number: \", binary)\n    # convert the number to list of bits\n    bits = [int(i) for i in binary]\n    # rotate the bits left by d positions\n    rotated_bits = bits[d:] + bits[:d]\n    # print the rotated binary number\n    print(\"Rotated binary number: \", \"\".join(str(i) for i in rotated_bits))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments, n and d.\n    n: The number to be rotated left.\n    d: The number of bits to be rotated left.\n    '''\n    # Convert d to binary and pad with zeros to make it 5 bits.\n    d_bin = bin(d)[2:].zfill(5)\n\n    # Convert n to binary and pad with zeros to make it 32 bits.\n    n_bin = bin(n)[2:].zfill(32)\n\n    # Extract the last 5 bits of d_bin and reverse them.\n    rev_d_bin = d_bin[::-1]\n\n    # Extract the first 27 bits of n_bin, shift them d bits to the left, and add the last 5 bits of d_bin.\n    result_bin = n_bin[:27] + ((n_bin[27:] + d_bin) << rev_d_bin.index('1'))\n\n    # Convert the result binary back to decimal and return it.\n    return int(result_bin, 2)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    mask = (2**d - 1) << (32 - d)\n    return (n << d) & mask | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1 # create a mask to clear the rightmost d bits\n    shifted = (n << d) & 0xffffffff # shift left by d bits and mask the result\n    rotated = (shifted >> d) | (n & mask) # shift right by d bits and add the masked rightmost bits\n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y and z == x:\n        count += 1\n    elif y == z and x == z:\n        count += 1\n    elif y == z and x == y:\n        count += 1\n    elif x == z and y == z:\n        count += 1\n    elif x == z and y == x:\n        count += 1\n    else:\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal integers in the input.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    else:\n        pass\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = 3\n    elif x == y or y == z or z == x:\n        count = 2\n    elif x == z:\n        count = 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal integers in the same order.\n    \"\"\"\n    if x == y and y == z:\n        return 3\n    elif x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    elif x == y == z:\n        return 1\n    else:\n        return 0\n\nprint(test_three_equal(1, 1, 1))\nprint(test_three_equal(1, 2, 1))\nprint(test_three_equal(1, 2, 3))\nprint(test_three_equal(1, 2, 2))\nprint(test_three_equal(1, 3, 2))\nprint(test_three_equal(2, 3, 2))"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y == z:\n        print(\"All three numbers are equal\")\n        return 3\n    elif x == y or x == z or y == z:\n        print(\"Two numbers are equal\")\n        return 2\n    else:\n        print(\"No two numbers are equal\")\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the pivot point\n    pivot = 0\n    for i in range(n):\n        if arr[i] > arr[n-1]:\n            pivot = i\n            break\n\n    # Check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # Count the number of rotations\n    count = 1\n    if pivot!= 0:\n        temp = arr[pivot:] + arr[:pivot]\n        count += count_rotation(temp)\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n    # now `left` is the index of the first element in the sorted subarray\n    if arr[left] >= arr[0]:\n        return left\n    else:\n        return left + 1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    if low == 0:\n        return 0\n\n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    start, end = 0, n - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] < arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n    if start == 0:\n        return n - 1\n    for i in range(start, n):\n        if arr[i] < arr[start]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse the array from 0 to n-1\n    for i in range(n):\n        # Check if the element is greater than the next element\n        if arr[i] > arr[i+1]:\n            # Check if the element is greater than the last element\n            if arr[i] > arr[-1]:\n                return -1\n            else:\n                break\n    # If the loop completes, it means no rotation has been required to generate a sorted array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    # To count the number of rotations, we need to find the minimum element and\n    # check how many rotations it takes to sort it.\n    min_index = 0\n    for i in range(n):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    # Now, we need to count the number of rotations required to make the minimum\n    # element as the first element of the array.\n    count = 0\n    for i in range(min_index):\n        if arr[i] > arr[min_index]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # initialize left and right pointers\n    left, right = 0, n-1\n    \n    # loop until the pointers meet\n    while left < right:\n        # check if left pointer points to a smaller element\n        if arr[left] < arr[right]:\n            return left\n        # move the pointers towards the center\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # if the pointers meet, the array is already sorted\n    return left"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == arr[right]:\n            count = len(arr) - mid\n            break\n            \n        if arr[mid] >= arr[left]:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    # Base case\n    if arr == sorted(arr):\n        return 0\n\n    # Finding the pivot element\n    mid = n // 2\n    pivot = arr[mid]\n\n    # Partitioning the array around the pivot element\n    i = 0\n    j = n - 1\n    while i <= j:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # Recursively applying the same logic on the left and right partitions\n    left_rotations = count_rotation(arr[:i])\n    right_rotations = count_rotation(arr[j + 1:])\n\n    # Returning the total number of rotations\n    return left_rotations + right_rotations + 1"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if it is a perfect square, else False.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and checks whether it is a perfect square or not.\n    \"\"\"\n    # If n is less than 0, return False as it is not a perfect square\n    if n < 0:\n        return False\n\n    # Find the square root of n and round it up to the nearest integer\n    root = int(n ** 0.5) + 1\n\n    # Check whether the square root is an integer\n    if root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt = int(math.sqrt(n))\n    return sqrt*sqrt == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if the number is a perfect square, otherwise it returns False.\n    '''\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is a perfect square, False otherwise.\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n\n    # check if n is a perfect square\n    x = n // 2\n    while x * x > n:\n        x = (x + (n // x)) // 2\n\n    return x * x == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # using the math library to get the square root of the number\n    import math\n    sqrt_n = int(math.sqrt(n))\n    \n    # checking if the square root is an integer\n    if sqrt_n*sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    :param n: int\n    :return: bool\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list as input and returns True if the product of all numbers in the list is even, else returns False.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of integers as input and checks whether the product of the integers is even or not.\n\n    :param arr: a list of integers\n    :return: True if the product of the integers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list as input and returns True if the product of numbers in the list is even, otherwise False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the product of all the numbers is even. Otherwise, it returns False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = [l]\n        elif sum(l) == max_sum:\n            max_list.append(l)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_sum_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_sum_list = [lst]\n        elif lst_sum == max_sum:\n            max_sum_list.append(lst)\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = [lst]\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        \n        if lst_sum > max_sum:\n            max_list = lst\n            max_sum = lst_sum\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = -1\n    result = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            result = l\n    return result"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    count = 1\n    max_count = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 1\n    \n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in a given string.\n    \"\"\"\n    # Initialize the variables to keep track of the current run\n    current_run = 0\n    max_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character is not,\n        # then start a new run\n        if test_str[i].isupper() and i > 0 and not test_str[i-1].isupper():\n            current_run = 1\n        # If the current character is uppercase and the previous character is also uppercase,\n        # then add to the current run\n        elif test_str[i].isupper():\n            current_run += 1\n        # If the current character is not uppercase and the previous character was,\n        # then check if the current run is greater than the max run and update accordingly\n        elif i > 0 and test_str[i-1].isupper():\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # Check if the last run is greater than the max run and update if necessary\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the current run counter\n            current_run += 1\n        else:\n            # If it is not, check if the current run is greater than the max run\n            if current_run > max_run:\n                # If it is, update the max run counter\n                max_run = current_run\n            \n            # Reset the current run counter to 0\n            current_run = 0\n    \n    # Check if the last run is greater than the max run\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > uppercase_run:\n            uppercase_run = current_run\n\n    return uppercase_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    \n    return max_count"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # no odd number found"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found in the list, it returns None.\n    '''\n\n    # Loop through the list of numbers\n    for num in nums:\n\n        # Check if the number is odd\n        if num % 2!= 0:\n\n            # If it is, return the number\n            return num\n\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Find the first odd number in a list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # if no odd number is found"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the index of the first odd number in the given list of numbers.\n    If no odd number is found, returns -1.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return i\n    return -1"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n\n    Parameters:\n    test_tup (tuple): A tuple of integers\n    K (integer): An integer value\n\n    Returns:\n    boolean: True if the tuple contains the k, False otherwise\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K as input and returns True if the tuple contains the value K, otherwise False.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes a tuple of tuples and a value K and returns True if the given tuples contain the value K,\n    otherwise, it returns False.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input, and checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n    If all elements of the second tuple are smaller than their corresponding elements in the first tuple, the function returns True, otherwise it returns False.\n    '''\n    # Check if the number of elements in the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same number of elements.\")\n        return False\n    \n    # Iterate over the tuples and check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            print(f\"Element {i} of the second tuple is not smaller than its corresponding element in the first tuple.\")\n            return False\n    \n    # If all elements of the second tuple are smaller than their corresponding elements in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                print(\"Tuple 2 element {} is not smaller than its corresponding element in Tuple 1.\".format(test_tup2[i]))\n                return False\n        print(\"All elements of Tuple 2 are smaller than their corresponding elements in Tuple 1.\")\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result"
    }
]