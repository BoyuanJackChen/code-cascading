[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in shared_elements:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to sets to find the intersection of the elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    \n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the common elements of the two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in result:\n            result.append(i)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to sets to use set intersection method\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find shared elements and return as list\n    return list(set1.intersection(set2))"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is not a prime number, False otherwise.\n    '''\n    if n < 2: # 1 is not a prime number\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns True if it is not a prime number, otherwise False.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Identifies non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        max_divisor = int(math.sqrt(n))\n        for i in range(3, max_divisor+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Identify if a number is not prime.\n\n    Args:\n        n (int): An integer.\n\n    Returns:\n        bool: True if the number is not prime, False otherwise.\n    '''\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any number from 2 to the square root of n, it is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not prime,\n    otherwise False.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identifies non-prime numbers.\n\n    Parameters:\n    n (int): The number to be tested for primality.\n\n    Returns:\n    bool: True if n is not prime, False otherwise.\n    \"\"\"\n\n    # 1 is not a prime number.\n    if n == 1:\n        return False\n\n    # Check if n is divisible by any number from 2 to sqrt(n).\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Identify non-prime numbers.\n\n    Args:\n    n: An integer.\n\n    Returns:\n    True if n is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        max_divisor = int(math.sqrt(n))\n        for i in range(3, max_divisor+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, else False.\n    '''\n\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(heap))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n    \n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # negate the number so that it gets popped from the heap in descending order\n        if len(heap) > n:\n            hq.heappop(heap) # remove the smallest number from the heap if it's greater than n\n    return [abs(num) for num in heap] # return the largest n numbers in descending order\n"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max-heap using heapify\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n\n    # Get the n largest numbers from the heap\n    largest_nums = [-hq.heappop(heap) for _ in range(n)]\n\n    # Reverse the order of the largest numbers and return them\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # Convert the list to a heap\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    largest_nums.reverse()  # Return the largest n numbers in descending order\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(heap))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a max heap from the given list of numbers\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # iterate through the remaining elements of the list and add each to the heap if it's larger than the smallest element in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            hq.heappushpop(heap, nums[i])\n    \n    # return the n largest elements in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # convert the list to a heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums)) # pop the largest element from the heap\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest[::-1]"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if it is a power of two, False otherwise.\n    '''\n    \n    # If x is negative, it cannot be a power of two\n    if x < 0:\n        return False\n    \n    # Check if the binary representation of x has only one '1' bit\n    # If there is more than one '1' bit, x cannot be a power of two\n    if bin(x).count('1')!= 1:\n        return False\n    \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the number is power of 2 or not\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the given number is a power of 2 or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x /= 2\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of 2 or not\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    # Check if the number is 0 or negative\n    if x <= 0:\n        return False\n\n    # Get the binary representation of x\n    binary = bin(x)\n\n    # Remove the '0b' prefix from the binary string\n    binary = binary[2:]\n\n    # Check if there are more than one bit set to 1\n    if binary.count('1') > 1:\n        return False\n\n    # Check if there is a bit set to 1 and all the other bits set to 0\n    if binary.count('1') == 1 and binary.count('0') == len(binary) - 1:\n        return True\n\n    # If none of the above conditions are met, the number is not a power of 2\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check if x is a power of two.\n    \"\"\"\n    if x <= 0:\n        return False\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if the number is a power of two\n    and False otherwise.\n    '''\n    # If x is zero, then it's not a power of two\n    if x == 0:\n        return False\n    \n    # Loop through all the bits of the number and check if they differ at only one bit position\n    # If they do, return False.\n    # If they don't differ at only one bit position, return True.\n    while x!= 0:\n        if x & 1 == 0:\n            # If the rightmost bit is 0, then the number is not a power of two\n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    # check if x is a power of 2\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes a number as input and returns True if the number is a power of 2 and False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x //= 2\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function takes a string as input and returns all words that are at least 4 characters long.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to match all words with length greater than or equal to 4\n    pattern = r'\\b\\w{4,}\\b'\n    result = re.findall(pattern, text)\n\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n\nprint(square_nums([1, 2, 3, 4, 5]))"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    This function takes in a list of numbers and returns a list of squares of individual elements in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    if str_len == 1:\n        return 1\n    \n    # Count the frequency of each character in the string\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the maximum frequency of any character\n    max_freq = max(char_freq.values())\n    \n    # If the maximum frequency is more than 1, we need to rotate the string\n    if max_freq > 1:\n        return max_freq\n    \n    # If the maximum frequency is 1, we need to rotate the string until all the characters have been rotated\n    else:\n        count = 1\n        new_str = str\n        while True:\n            # Count the frequency of each character in the new string\n            new_char_freq = {}\n            for char in new_str:\n                if char in new_char_freq:\n                    new_char_freq[char] += 1\n                else:\n                    new_char_freq[char] = 1\n            \n            # Check if all the characters have been rotated\n            if max(new_char_freq.values()) == 1:\n                return count\n            \n            # Rotate the string and increment the count\n            new_str = new_str[1:] + new_str[0]\n            count += 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Convert the string to a list and append it with itself\n    str_list = list(str)\n    str_list += str_list\n\n    # Find the index of the first occurrence of the string in the concatenated string\n    index = str_list.index(str)\n\n    # Return the number of rotations required to get the same string\n    return index // len(str)"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 1\n    while(count < n):\n        temp = str[count:] + str[:count]\n        if temp == str:\n            return count\n        count += 1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as an input and returns the minimum number of rotations\n    required to get the same string.\n    '''\n    n = len(str)\n    if n == 1:\n        return 0\n    \n    mid = n // 2\n    if str[0:mid] == str[mid:n]:\n        return 0\n    \n    min_rotations = min(find_Rotations(str[mid:n]), find_Rotations(str[0:mid])) + 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    rotations = 2 * n\n    for i in range(n):\n        if s[i] == s[n-i-1]:\n            continue\n        else:\n            rotations = min(rotations, 1 + find_Rotations(s[i:n-i]))\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # First, we need to find the length of the string\n    n = len(str)\n    \n    # If the length of the string is 0 or 1, no rotations are required\n    if n <= 1:\n        return 0\n    \n    # If the first and last characters of the string are the same, we can reduce the problem to find the minimum number of\n    # rotations for the substring between the first and last characters\n    if str[0] == str[n-1]:\n        return 1 + find_Rotations(str[1:n-1])\n    \n    # Otherwise, we need to find the minimum number of rotations for the substring between the first and last characters\n    # and the substring between the second and second-to-last characters\n    min_rotations = float('inf')\n    for i in range(1, n-1):\n        if str[i] == str[n-1] and str[0] == str[i-1]:\n            min_rotations = min(min_rotations, 1 + find_Rotations(str[i:]) + find_Rotations(str[:i]))\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Finding the rotation point\n    for i in range(n):\n        if str[i:n] == str[i:n][::-1]:\n            break\n    # If rotation point is not found, then string is already in its sorted form\n    if i == n-1:\n        return 0\n    # Finding the rotation count\n    count = 0\n    for j in range(i+1, n):\n        if str[j] < str[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    # Convert the string to a list of characters\n    s_list = list(s)\n    # Initialize variables\n    start = 0\n    end = len(s_list) - 1\n    min_rotations = float('inf')\n    \n    # Perform binary search to find the minimum number of rotations\n    while start <= end:\n        mid = (start + end) // 2\n        # If the rotation is even, adjust the middle index to the left side\n        if s_list[mid:] + s_list[:mid] == s_list:\n            min_rotations = min(min_rotations, mid)\n            end = mid - 1\n        # If the rotation is odd, adjust the middle index to the right side\n        else:\n            min_rotations = min(min_rotations, len(s_list) - mid)\n            start = mid + 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(s):\n    # Convert the string to a list of characters\n    s_list = list(s)\n    \n    # Find the index of the middle character\n    mid_index = len(s_list) // 2\n    \n    # Initialize the count of rotations\n    rotations = 0\n    \n    # Check if the string is already a palindrome\n    if s_list == s_list[::-1]:\n        return 0\n    \n    # Check if the string is already rotated\n    for i in range(mid_index):\n        if s_list[i]!= s_list[-i-1]:\n            break\n    else:\n        return len(s) // 2\n    \n    # Rotate the string until it becomes a palindrome\n    while s_list!= s_list[::-1]:\n        s_list.insert(0, s_list.pop())\n        rotations += 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            break\n    else:\n        return 0\n    return min(n-i, i+1)"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    # Initialize variables\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    \n    # Remove first occurrence of character\n    if first_occ!= -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    \n    # Remove last occurrence of character\n    if last_occ!= -1:\n        s = s[:last_occ] + s[last_occ+1:]\n        \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # check if character is not present in the string\n    if ch not in s:\n        return s\n\n    # find the index of the first occurrence of the character in the string\n    first_index = s.index(ch)\n\n    # find the index of the last occurrence of the character in the string\n    last_index = s.rindex(ch)\n\n    # slice the string to remove the first and last occurrence of the character\n    new_s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n\n    return new_s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        if s.index(ch) == len(s)-1:\n            return s[:s.index(ch)]\n        elif s.index(ch) == 0:\n            return s[s.index(ch)+1:]\n        else:\n            return s[:s.index(ch)] + s[s.index(ch)+1:s.rindex(ch)] + s[s.rindex(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    This function takes in a string s and a character ch and returns the modified string \n    where the first and last occurrence of the character ch are removed.\n    \"\"\"\n    \n    # Removing the first occurrence of the character ch from the string s\n    if s.startswith(ch):\n        s = s[1:]\n        \n    # Removing the last occurrence of the character ch from the string s\n    if s.endswith(ch):\n        s = s[:-1]\n        \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    # check if string is empty or only contains the character to be removed\n    if s == '' or s.count(ch) == len(s):\n        return ''\n\n    # find first occurrence of character and remove it from string\n    idx = s.find(ch)\n    if idx!= -1:\n        s = s[:idx] + s[idx+1:]\n\n    # find last occurrence of character and remove it from string\n    idx = s.rfind(ch)\n    if idx!= -1:\n        s = s[:idx] + s[idx+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    else:\n        return s[:first_index] + s[last_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        if s.find(ch) == 0 and s.rfind(ch) == len(s)-1:\n            return s[1:-1]\n        elif s.find(ch) == 0:\n            return s[1:s.rfind(ch)] + s[s.rfind(ch)+1:]\n        elif s.rfind(ch) == len(s)-1:\n            return s[:s.find(ch)] + s[s.find(ch)+1:-1]\n        else:\n            return s[:s.find(ch)] + s[s.find(ch)+1:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        # Split the string into two parts, before and after the first and last occurrence of the character.\n        parts = s.split(ch)\n        # Remove the first occurrence of the character and join the parts to form the new string.\n        s = parts[0] + parts[-1]\n        # Remove the last occurrence of the character and join the parts to form the new string.\n        s = s.split(ch)[0] + parts[-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from a string.\n    '''\n\n    # check if character is present in the string\n    if ch in s:\n        # find the index of the character in the string\n        index = s.index(ch)\n\n        # check if character is first or last occurrence\n        if index == 0:\n            s = s[1:]\n        elif index == len(s) - 1:\n            s = s[:-1]\n        else:\n            # if character is present in the string but not first or last occurrence, remove it\n            s = s[:index] + s[index + 1:]\n\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    M (list of lists): A matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n    \"\"\"\n    # Create a list of tuples (row_sum, row_index)\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    # Sort the list of tuples by row_sum in ascending order\n    row_sums.sort()\n    # Sort the matrix rows according to their indices in the sorted list\n    sorted_matrix = [M[row_index] for row_sum, row_index in row_sums]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples in ascending order of row sum\n    row_sums.sort()\n\n    # Extract the sorted rows from the list of tuples\n    sorted_rows = [row for _, row in row_sums]\n\n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a list of tuples containing the sum of each row and its index\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n\n    # Sort the list of tuples in ascending order based on the sum of each row\n    row_sums.sort()\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[0 for j in range(cols)] for i in range(rows)]\n    for i in range(rows):\n        row_index = row_sums[i][1]\n        for j in range(cols):\n            sorted_matrix[i][j] = M[row_index][j]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x: sum(x))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # find the sum of each row in the matrix\n    sums = [sum(row) for row in M]\n\n    # sort the rows based on their sum in ascending order\n    sorted_indices = sorted(range(len(M)), key=lambda i: sums[i])\n\n    # sort the matrix based on the sorted indices\n    sorted_matrix = [[M[i][j] for i in sorted_indices] for j in range(len(M[0]))]\n\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = (l * b * h) / 3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism and returns the volume of the prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    \"\"\"\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth, and height of a triangular prism as input and returns its volume.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function takes a string as input and checks if it contains sequences of lowercase letters joined with an underscore.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Regular expression to match lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n\n    # If there is at least one match, return True, otherwise return False\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[a-z]+_[a-z]+\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'\\b[a-z]+_\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes the side length of a square as input and returns the perimeter of the square.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    char_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if chr(i) in string:\n            char_list.remove(chr(i))\n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = list(string)\n    remove_chars_list = list(remove_chars)\n    for i in range(len(list_str)):\n        if list_str[i] in remove_chars_list:\n            list_str[i] = ''\n    return ''.join(list_str)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    # Convert the string to a list of characters\n    string_list = list(string)\n\n    # Create a boolean list to keep track of characters to be removed\n    remove_chars = [False] * NO_OF_CHARS\n\n    # Iterate over the characters in the second string and mark them for removal\n    for char in string:\n        remove_chars[ord(char)] = True\n\n    # Iterate over the characters in the list and remove those marked for removal\n    i = 0\n    while i < len(string_list):\n        if remove_chars[ord(string_list[i])]:\n            string_list.pop(i)\n        else:\n            i += 1\n\n    # Convert the list of remaining characters back to a string\n    new_string = ''.join(string_list)\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_chars(string, remove):\n    '''\n    Removes all the characters in the remove string from the given string.\n    '''\n    if not string or not remove:\n        return string\n    \n    # Initialize a boolean list of size NO_OF_CHARS\n    present = [False] * NO_OF_CHARS\n    \n    # Mark all the characters in the remove string as present\n    for i in remove:\n        present[ord(i)] = True\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate over the string and add all characters that are not present\n    for i in string:\n        if not present[ord(i)]:\n            result += i\n    \n    return result\n\n\ndef str_to_list(string):\n    '''\n    Removes all the duplicate characters from the given string.\n    '''\n    if not string:\n        return string\n    \n    # Convert the string to a list of characters\n    string_list = list(string)\n    \n    # Sort the list\n    string_list.sort()\n    \n    # Remove duplicates\n    i = 1\n    while i < len(string_list):\n        if string_list[i] == string_list[i-1]:\n            string_list.pop(i)\n        else:\n            i += 1\n    \n    # Convert the list back to a string\n    result = ''.join(string_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Check if the second string is empty\n    if not string:\n        return \"\"\n\n    # Create a boolean array of size NO_OF_CHARS, initially set all elements to False\n    char_set = [False] * NO_OF_CHARS\n\n    # Traverse through the second string and set the corresponding boolean value to True\n    for char in string:\n        char_set[ord(char)] = True\n\n    # Traverse through the first string and remove the characters present in the second string\n    result = \"\"\n    for char in string:\n        if not char_set[ord(char)]:\n            result += char\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def str_to_list(string, remove): \n    '''\n    This function takes two arguments - string and remove. \n    The first string is the original string which needs to be modified, \n    and the second string is the string containing the characters which need to be removed. \n\n    The function removes all the characters present in the second string from the first string and returns the modified string. \n    '''\n    char_list = [False] * NO_OF_CHARS  # Initialize a boolean list of size 256 with False values. \n\n    # Mark the positions of the characters to be removed in the char_list array. \n    for char in remove: \n        char_list[ord(char)] = True\n\n    # Create a new string by iterating over the first string and adding only those characters which are not marked as to be removed. \n    new_string = \"\"\n    for char in string: \n        if not char_list[ord(char)]: \n            new_string += char\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string) # create a set of characters from the string\n    for i in range(NO_OF_CHARS): \n        if chr(i) not in char_set: \n            string = string.replace(chr(i), '') # remove characters from the string which are not in the char_set\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def str_to_list(string, characters_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    set_characters_to_remove = set(characters_to_remove)\n    for i in range(len(list_string)):\n        if list_string[i] in set_characters_to_remove:\n            list_string[i] = ''\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array to check if a character is present in the remove_chars string\n    remove_chars_bool = [False] * NO_OF_CHARS\n    for char in remove_chars:\n        remove_chars_bool[ord(char)] = True\n    \n    # Create a new string with characters from the first string that are not in the remove_chars string\n    result = \"\"\n    for char in string:\n        if not remove_chars_bool[ord(char)]:\n            result += char\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def str_to_list(string, blacklist):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Args:\n    string: str, the input string to remove characters from\n    blacklist: str, the characters to remove from the input string\n\n    Returns:\n    str, the input string with the characters removed\n    '''\n\n    # Convert the blacklist string to a list of characters\n    blacklist = list(blacklist)\n\n    # Convert the input string to a list of characters\n    string_list = list(string)\n\n    # Iterate over the string and remove characters that are in the blacklist\n    for char in blacklist:\n        while char in string_list:\n            string_list.remove(char)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create an empty dictionary to store the count of each integer in the array\n    count_dict = {}\n\n    # loop through each integer in the array and update the count in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # loop through the count dictionary and check if any integer has a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # if no duplicate element found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to keep track of the elements in the array\n    seen = {}\n    \n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in seen:\n            return True\n        # Otherwise, add the element to the dictionary\n        else:\n            seen[num] = True\n    \n    # If the loop completes without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function checks whether a given array of integers contains any duplicate element.\n    :param arraynums: list of integers\n    :return: True if duplicate element is present, False otherwise.\n    \"\"\"\n    # create an empty set to store unique elements in the array\n    unique_set = set()\n    # iterate over the array and add each element to the set if it's not already present\n    for num in arraynums:\n        if num in unique_set:\n            return True\n        else:\n            unique_set.add(num)\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 1 and x < 1000:\n        if x % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a woodall number.\n\n    A number is a woodall number if the sum of its digits raised to the power of their position (starting from 1) is equal to the number itself.\n    \"\"\"\n    if n < 10:\n        # The number is a single digit, so it's always woodall\n        return True\n    else:\n        # Calculate the sum of digits raised to their positions\n        sum_of_powers = sum(int(digit) ** (pos+1) for pos, digit in enumerate(str(n)))\n        return sum_of_powers == n"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 10:\n        return False\n    digits = [int(digit) for digit in str(x)]\n    digits.sort()\n    return digits == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0 or (x % 10!= 0 and x % 4 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes a number as an argument and returns True if it is woodball else False.\n\n    :param x: number to be checked\n    :return: True if the number is woodball else False.\n    \"\"\"\n    if x % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(num):\n    if num == 1:\n        return True\n    if num == 4 or num == 6 or num == 8:\n        return True\n    if num % 4 == 0:\n        return True\n    if num % 4 == 1 or num % 4 == 3:\n        return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 4 == 0 and x % 6 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    This function takes a number as input and returns True if the number is a Woodall number, otherwise False.\n    A number is a Woodall number if it is equal to the sum of its divisors excluding the number itself.\n    '''\n    divisors = []\n    for i in range(1, x):\n        if x % i == 0:\n            divisors.append(i)\n    divisors.remove(x)\n    return x == sum(divisors)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is negative\n    if x < 0:\n        return False\n    \n    # Check if the number is divisible by 4 or 7\n    if x % 4 == 0 or x % 7 == 0:\n        return True\n    \n    # Check if the number is divisible by 4 and 7\n    if x % 4 == 0 and x % 7 == 0:\n        return False\n    \n    # If none of the above conditions are met, the number is not woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    sum = 0\n    for i in range(1, x+1):\n        sum += i*i\n    return sum == x"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reverse = reverse * 10 + remainder\n        temp //= 10\n    if reverse * 2 + 1 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and checks if it is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Check if the number is one less than twice its reverse\n    if int(rev_num) == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n\n    # convert the reversed number back to an integer and add 1\n    rev_num = int(rev_num) + 1\n\n    # check if the original number is equal to twice the reversed number\n    if num == rev_num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    num_str = str(num)\n    num_str = num_str[::-1]\n    # convert the reversed number back to an integer\n    num_rev = int(num_str)\n    # check if the difference between the original number and its reverse is 2\n    return num - num_rev == 2"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the given number is one less than twice its reverse, else False.\n    \"\"\"\n    if num == 0:\n        return True\n    else:\n        rev_num = int(str(num)[::-1])\n        if num == rev_num + 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_num_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_num_str)\n    # check if the original number is one less than twice the reversed number\n    if num == rev_num + 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_str = num_str[::-1]\n    if int(num_str) == int(reverse_str) * 2 - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reverse = (reverse * 10) + remainder\n        temp = temp // 10\n    if num == (reverse + 1) and (str(num) == str(reverse) or str(num) == str(reverse)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = (reverse * 10) + (temp % 10)\n        temp = temp // 10\n    if num == reverse + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    str_num = str(num)\n    rev_num = str_num[::-1]\n    \n    # convert the reversed string back to an integer and add 1\n    double_rev = int(rev_num) * 2 + 1\n    \n    # check if the input number is equal to the double of the reversed number\n    if num == double_rev:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Sort the given list of digits\n    arr.sort()\n    # Reverse the sorted list\n    arr.reverse()\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate through the sorted and reversed list\n    for i in arr:\n        # Multiply each digit with the corresponding power of 10 and add to the result\n        result += i * (10 ** (len(arr) - 1))\n        # Decrement the length of the list to get the next digit\n        len(arr) -= 1\n    # Return the result\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    \n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i]*(10**(len(arr)-i-1)))\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    arr = sorted(arr, reverse=True)\n    result = 0\n    for i in range(n):\n        result += arr[i] * (10 ** i)\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    n = len(arr)\n\n    # Generate all possible combinations of numbers from the given list of digits\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if (i & (1 << j)):\n                combo.append(arr[j])\n\n        # Convert the list of digits to a number\n        num = 0\n        for digit in combo:\n            num = num * 10 + digit\n\n        # Update the maximum number if we find a larger one\n        if num > max_num:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(map(str, arr[i:j])))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        for j in range(i+1, len(arr)):\n            num = num * 10 + arr[j]\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n\n    Args:\n    arr (list): A list of digits\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        max_num = 0\n        for i in range(1, n+1):\n            temp_arr = arr[:i]\n            temp_arr.sort(reverse=True)\n            temp_num = int(''.join(map(str, temp_arr)))\n            if temp_num > max_num:\n                max_num = temp_num\n        return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        largest_num = max(arr)\n        arr.remove(largest_num)\n        return largest_num * 10 + find_Max_Num(arr)"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign and False otherwise.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite sign, otherwise False.\n    \"\"\"\n    if x >= 0 and y < 0 or x < 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    octagonal = 0\n    while count <= n:\n        octagonal += count\n        count += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        octagon = i*(3*i-1)/2\n        if octagon == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Determines if a given number is an octagonal number.\n    \"\"\"\n    count = 1\n    while count <= n:\n        # Calculate the nth octagonal number\n        oct_num = 8 * count * (count + 1)\n        \n        # Check if the current number is equal to the nth octagonal number\n        if oct_num == n:\n            return True\n        \n        # Increment the counter\n        count += 1\n    \n    # If the loop completes without finding a match, the number is not octagonal\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_number = 0\n    while True:\n        octagonal_number = i * (2 * i - 1)\n        if octagonal_number == n:\n            return True\n        elif octagonal_number > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 1\n    while i <= n:\n        octagonal += 8 * i\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 0\n    i = 1\n    while octagonal < n:\n        octagonal = i*(3*i-1)\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 0\n    while octagonal < n:\n        octagonal = i * (2 * i - 1)\n        i += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_num = 1\n    while i <= n:\n        octagonal_num += 8 * i\n        i += 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #initialize the counter to 1\n    count = 1\n    #initialize the current octagonal number to 1\n    octagonal = 1\n    #loop until we find the nth octagonal number\n    while count < n:\n        #add 8 to the current octagonal number and increment the counter\n        octagonal += 8\n        count += 1\n    #return the nth octagonal number\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        temp = num * (2*num - 1)\n        if is_prime(temp):\n            count += 1\n    return temp\n\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = defaultdict(int)\n    count[0] = 1\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            sum_digits = sum(int(d) for d in sub)\n            count[sum_digits] += 1\n            \n    return sum(count[i] for i in range(1, n+1))"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    digit_count = defaultdict(int)\n\n    for i in range(n):\n        digit_count[s[i]] += 1\n        if i >= 1 and s[i] == s[i-1]:\n            continue\n        curr_sum = sum(digit_count.values())\n        if curr_sum == i+1:\n            count += 1\n        elif curr_sum > i+1:\n            digit_count[s[i-1]] -= 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            total = sum(int(digit) for digit in substring)\n            if total == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = 0\n    freq = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n        if sum(digit_count.values()) == len(s):\n            count += 1\n        digit_count[s[i-1]] -= 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the counts of each digit\n    digit_count = defaultdict(int)\n\n    # Loop through each character in the string\n    for char in s:\n        # If the character is a digit, add its value to the digit count dictionary\n        if char.isdigit():\n            digit_count[int(char)] += 1\n\n    # Initialize a variable to store the count of substrings\n    count = 0\n\n    # Loop through each substring of the string (starting from length 1 and going up)\n    for i in range(1, len(s) + 1):\n        # Loop through each possible starting index of the substring (starting from 0 and going up)\n        for j in range(len(s) - i + 1):\n            # Calculate the sum of the digits in the substring\n            substring_sum = sum(digit_count[int(s[k])] for k in range(j, j + i))\n\n            # If the sum is equal to the length of the substring, increment the count variable\n            if substring_sum == i:\n                count += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[int(s[i])] += 1\n        if i > 0 and d[int(s[i])] == 1:\n            del d[int(s[i])]\n        if i >= 1 and int(s[i]) == int(s[i-1]) + int(s[i]):\n            count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function counts the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes in a list of numbers and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    \n    test_list = sorted(test_list)\n    max_diff = abs(test_list[1][1] - test_list[0][1])\n    \n    for i in range(1, len(test_list)-1):\n        diff = abs(test_list[i+1][1] - test_list[i][1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    \n    # sort the list in ascending order\n    sorted_list = sorted(test_list)\n    \n    # find the maximum difference\n    for i in range(len(sorted_list) - 1):\n        diff = sorted_list[i+1] - sorted_list[i]\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            difference_list.append(test_list[j][1] - test_list[i][1])\n    return max(difference_list)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] - test_list[i][1] > max_diff:\n                max_diff = test_list[j][0] - test_list[i][1]\n            elif test_list[j][1] - test_list[i][0] > max_diff:\n                max_diff = test_list[j][1] - test_list[i][0]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list = sorted(test_list)\n    # Find the maximum difference between available pairs\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subject_marks):\n    '''\n    Sort a list of tuples based on the second value of each tuple.\n    '''\n    return sorted(subject_marks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    \n    total = 0\n    for item in data_list:\n        total += recursive_list_sum(item)\n    \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n\n    if len(data_list) == 0:\n        return 0\n\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function will count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers present in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in it.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    bell_nums = [1]\n    for i in range(1, n+1):\n        bell_nums.append(sum(bell_nums))\n    return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    bell_numbers = [0, 1]\n    for i in range(2, n + 1):\n        bell_numbers.append(bell_numbers[i - 1] + bell_numbers[i - 2])\n    return bell_numbers[n]\n\nprint(bell_number(5)) # Output: 5"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = 0\n        for k in range(n):\n            bell += bell_number(k) * bell_number(n-1-k)\n        return bell\n\ndef partition_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of n Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        partitions = 0\n        for k in range(n):\n            partitions += bell_number(k) * partition_number(n-1-k)\n        return partitions\n\nprint(partition_number(4))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    This function calculates the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[-1]\n\nn = int(input(\"Enter the number of Bell numbers: \"))\nprint(f\"The number of ways to partition {n} Bell numbers is {bell_number(n)}\")"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Returns the number of ways to partition a set of Bell numbers up to n.\n    '''\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append(sum(bell[j] for j in range(i)))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        bell_n_minus_1 = bell_number(n - 1)\n        bell_n = 0\n        for i in range(n):\n            bell_n += bell_n_minus_1\n        return bell_n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell = [1]\n        for i in range(1, n+1):\n            bell.append(sum(bell[-i-1:i]))\n        return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    \n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic\n    and False otherwise. An array is considered to be monotonic if it is either increasing\n    or decreasing.\n\n    Parameters:\n    A (list): A list of integers\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # Check if the array is strictly increasing or decreasing\n    if all(A[i] < A[i+1] for i in range(len(A)-1)) or all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n\n    # Otherwise, the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    else:\n        return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    A list is said to be monotonic if it is either non-decreasing or non-increasing.\n    Non-decreasing list: A[i] < A[i+1]\n    Non-increasing list: A[i] > A[i+1]\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    for i in range(n-1):\n        if A[i] == A[i+1]:\n            continue\n        elif A[i] < A[i+1]:\n            for j in range(i+1, n):\n                if A[j] < A[j-1]:\n                    return False\n        else:\n            for j in range(i+1, n):\n                if A[j] > A[j-1]:\n                    return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    # Base case\n    if len(A) <= 2:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    if A[0] < A[1] and A[-1] > A[-2]:\n        return True\n    \n    # Check if the array is increasing\n    if A[0] < A[1] and all(A[i] < A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # Check if the array is decreasing\n    if A[0] > A[1] and all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # If none of the above conditions are met, the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    inc = True\n    dec = True\n    \n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            dec = False\n        elif A[i] < A[i-1]:\n            inc = False\n    \n    return inc or dec"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic, otherwise, it returns False.\n    An array is said to be monotonic if it is either strictly increasing or strictly decreasing. \n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if A[i] == A[i-1]:\n            continue\n        elif A[i] > A[i-1]:\n            if all(A[j] > A[j-1] for j in range(i, n)):\n                return True\n            else:\n                return False\n        else:\n            if all(A[j] < A[j-1] for j in range(i, n)):\n                return True\n            else:\n                return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] == A[i-1]:\n            continue\n        if A[i] < A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # To check if the array is increasing\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return \"Increasing\"\n    \n    # To check if the array is decreasing\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return \"Decreasing\"\n    \n    # If the array is neither increasing nor decreasing, then it is neither monotonic nor decreasing\n    else:\n        return \"Neither monotonic nor decreasing\""
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    Args:\n    l (list): The list in which the function is to check for sublist.\n    s (list): The sublist to be checked.\n\n    Returns:\n    bool: True if the list contains the given sublist, else False.\n    \"\"\"\n\n    if s == []:\n        return True\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the length of the sublist is greater than the length of the list\n    if len(s) > len(l):\n        return False\n    \n    # Check if the sublist is present in the list\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If the sublist is not present in the list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two arguments, a list 'l' and a sublist's'.\n    It checks whether's' is a sublist of 'l' or not.\n    \"\"\"\n    if s == []:  # Base case: if s is an empty list, then it is always a sublist\n        return True\n    if s == l[:len(s)]:  # If s is the first len(s) elements of l, then it is a sublist\n        return True\n    return is_sublist(l[1:], s)  # Recursively check the rest of l for a sublist of s\n"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    \n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n        \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists as input and checks whether the second list is a sublist of the first list or not.\n    \"\"\"\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if the sublist is found, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list `l` contains the sublist `s`.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = True\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                result = False\n                break\n        if not result:\n            break\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # initialize a variable to keep track of the length of the first tuple\n    length = len(Input[0])\n    # loop through each tuple in the input list\n    for tup in Input:\n        # if the length of the tuple is not equal to the length of the first tuple, return False\n        if len(tup)!= length:\n            return False\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and checks whether all the tuples have equal length or not.\n    Returns True if all the tuples have equal length, otherwise returns False.\n    '''\n    # Get the length of the first tuple in the list\n    length = len(Input[0])\n    \n    # Check if all the tuples in the list have the same length as the first tuple\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to hold the length of the first tuple\n    length = len(Input[0])\n\n    # loop through the tuples and check if the length is equal to the first tuple length\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n\n    # if all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_list = []\n    for i in Input:\n        length_list.append(len(i))\n    return all(elem == length_list[0] for elem in length_list)"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_set = set()\n    for tup in Input:\n        length_set.add(len(tup))\n    if len(length_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of the Comb Sort algorithm.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted_flag = False\n    \n    while not sorted_flag:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted_flag = False\n        else:\n            gap = 1\n            sorted_flag = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted_flag = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        \n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        \n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            \n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        \n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted_flag = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted_flag = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    This function takes a list of numbers as input and sorts them using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_diff_square(n):\n    # Check if n is a perfect square\n    root = int(n ** 0.5)\n    if root ** 2 == n:\n        return True\n    \n    # Check if n can be written as the difference of two squares\n    for i in range(2, int(root ** 0.5) + 1):\n        if n == i ** 2 - (root - i) ** 2:\n            return True\n        \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Find the square root of the number and check if it is an integer\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 2: #if the number is less than 2, it cannot be represented as the difference of two squares.\n        return False\n    for i in range(1, int(n**0.5)+1): #iterate over all possible values of i from 1 to the square root of n\n        if n == i*i - (i-1)*(i-1) or n == i*i + (i-1)*(i-1): #check if n can be represented as the difference of two squares using i\n            return True\n    return False #if the loop completes without finding a suitable value of i, n cannot be represented as the difference of two squares."
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Write a Python function to check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n    n: An integer representing the number to be checked.\n\n    Returns:\n    True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int((n ** 0.5) + 1)):\n        if i * i == n or (n - i * i) % (2 * i + 1) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_square(n):\n    '''\n    Check whether the given number is a perfect square or not.\n    '''\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if is_square(n) and is_square(int(n/2)+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number can be represented as the difference of two squares or False otherwise.\n    \"\"\"\n    # initialize two variables to store the square roots of the given number\n    a = int(n**0.5)\n    b = int((n**0.5)+1)\n    \n    # check if the given number can be represented as the difference of two squares\n    if (a*a == n) or (b*b == n):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    \n    # Calculate the square root of n\n    root_n = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if root_n.is_integer():\n        # Check if the square of the integer value is equal to n\n        if int(root_n)**2 == n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            diff_sq = int((n/i)**0.5)\n            if (i-diff_sq)**2 + (diff_sq)**2 == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_diff_square(n):\n    # Find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the given number is a perfect square\n    if sqrt_n ** 2 == n:\n        return True\n    \n    # Check if the difference between the given number and the square of the square root is a perfect square\n    if (n - sqrt_n ** 2) ** 0.5 == int((n - sqrt_n ** 2) ** 0.5):\n        return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_difference_of_squares(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if (n - i**2) % (i+1) == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == len(patterns) - 1:\n            break\n        if patterns[i] not in ['R', 'G', 'B'] or patterns[i+1] not in ['R', 'G', 'B']:\n            return False\n        if patterns[i] == 'R' and patterns[i+1] == 'G':\n            return False\n        if patterns[i] == 'G' and patterns[i+1] == 'B':\n            return False\n        if patterns[i] == 'B' and patterns[i+1] == 'R':\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether the given colors follow the given pattern sequence.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    \n    for i in range(n-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n        \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[count]:\n            count += 1\n            if count == len(patterns):\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_set = set(patterns)\n    for color in colors:\n        if color not in patterns_set:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes in two arrays, colors and patterns, and returns True if the colors follow the sequence of patterns.\n    '''\n    # Check if the lengths of the arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the colors follow the sequence of patterns\n    for i in range(len(colors)):\n        if patterns[i] == \"R\" and colors[i]!= \"red\":\n            return False\n        elif patterns[i] == \"G\" and colors[i]!= \"green\":\n            return False\n        elif patterns[i] == \"B\" and colors[i]!= \"blue\":\n            return False\n        \n    # If the function hasn't returned False by now, the colors follow the sequence of patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of colors is equal to the length of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the first color is the same as the first pattern\n    if colors[0]!= patterns[0]:\n        return False\n    \n    # Check if the remaining colors follow the sequence in the patterns array\n    for i in range(1, len(colors)):\n        if colors[i]!= patterns[patterns[i-1]]:\n            return False\n    \n    # If all checks passed, then the colors follow the sequence in the patterns array\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i%K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result_list.append(t)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns a list of tuples which have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tpl in test_list:\n        divisible = True\n        for num in tpl:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input.\n    It returns all the tuples from the given list that have all elements divisible by K.\n\n    Example:\n    test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\n    K = 3\n\n    The function should return [(1, 2, 3), (4, 5, 6), (7, 8, 9), (13, 14, 15)]\n    \"\"\"\n    # Create an empty list to store the tuples that have all elements divisible by K\n    result = []\n    # Iterate over the tuples in the list\n    for t in test_list:\n        # Check if all the elements of the tuple are divisible by K\n        if all(i % K == 0 for i in t):\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(t)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    This function takes in a number as input and returns True if the number is divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    This function takes a number as input and checks whether it is divisible by 11 or not.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Length of the word is even\"\n    else:\n        return \"Length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    If the length of the word is odd, it returns True, otherwise, it returns False.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    tet_num = n * (n + 1) * (n + 2) // 6\n    return tet_num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    a, b, c, d = 1, 1, 1, 1\n\n    # Calculate nth tetrahedral number\n    for i in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        count += len([i for i in range(1, num+1) if num % i == 0])\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    number = 0\n    \n    # Loop until count reaches n\n    while count < n:\n        # Increment count and update number\n        count += 1\n        number += count\n        \n        # Print the nth tetrahedral number\n        if count == n:\n            print(f\"The {n}th tetrahedral number is {number}\")"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function will find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(n):\n        t += 4 * (i+1)**3\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n\nn = int(input(\"Enter a positive integer: \"))\nif n < 1:\n    print(\"Invalid input. Please enter a positive integer.\")\nelse:\n    print(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1)) / 2)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius of a sphere and returns its volume.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(radius):\n    '''\n    This function takes a radius as input and returns the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*radius**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes in a radius r of a sphere and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its volume.\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize a variable to hold the sum of ASCII values\n    ascii_sum = 0\n    \n    # Iterate over the characters in the string and add their ASCII values to the sum\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # Calculate the character by adding the sum modulo 26\n    char_ascii = (ascii_sum % 26) + 65\n    \n    # Convert the ASCII value back to a character and return it\n    return chr(char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize sum of ASCII values of all characters\n    sum_ascii = 0\n    \n    # iterate over all characters in the string\n    for char in strr:\n        # add ASCII value of current character to sum_ascii\n        sum_ascii += ord(char)\n    \n    # find the character made by adding the sum of ASCII values modulo 26\n    char_made = chr((sum_ascii % 26) + ord('a'))\n    \n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Convert all characters to ASCII value\n    ascii_vals = [ord(char) for char in strr]\n    # Add up all the ASCII values\n    total_ascii = sum(ascii_vals)\n    # Find the character made by adding the ASCII value modulo 26\n    char_made = chr((total_ascii % 26) + 97)\n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values to 0\n    sum = 0\n    \n    # Loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n        \n    # Find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    char_num = sum % 26\n    \n    # Convert the character number to its corresponding character\n    char = chr(ord('a') + char_num)\n    \n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    \n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Convert the string to uppercase to ignore case sensitivity\n    strr = strr.upper()\n    # Initialize a variable to store the sum of ASCII values of characters\n    sum_ascii = 0\n    # Iterate over each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum_ascii += ord(char) - 64 # Subtracting 64 to ignore non-alphabetic characters like spaces and punctuation marks\n    # Return the character made by adding the sum modulo 26\n    return chr((sum_ascii % 26) + 65) # Adding 65 to convert the ASCII value to its corresponding character"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values to 0\n    sum_ASCII = 0\n    \n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the current character to the sum\n        sum_ASCII += ord(char)\n        \n    # Return the character made by adding the sum modulo 26\n    return chr(sum_ASCII % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate over each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the result variable\n        result += ord(char)\n    # Return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr(result % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # initialize sum of ASCII values\n    ascii_sum = 0\n    \n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    ascii_sum %= 26\n    \n    # convert the ASCII value to a character and return it\n    return chr(ascii_sum + 64)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Please enter a positive integer greater than 0\"\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            next_num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(next_num)\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 0\n        prev = 1\n        curr = 1\n        for i in range(3, n+1):\n            curr = prev + prev_prev\n            prev_prev = prev\n            prev = curr\n        return curr"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(2, n):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    This function finds the nth number in the Newman Conway Sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        seq = [0, 1, 1]\n        for i in range(3, n+1): \n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Invalid input, n cannot be 0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        seq = \"1 1\"\n        for i in range(3, n+1):\n            temp = seq.split()\n            num1 = int(temp[i-1])\n            num2 = int(temp[i-2])\n            total = num1 + num2\n            seq += \" \" + str(total)\n        return seq"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as an argument and returns the surface area of the sphere.\n    '''\n    surfacearea = 4 * math.pi * r ** 2\n    return surfacearea"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula A = 4 * pi * r^2\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its surface area.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    '''\n\n    # Calculate the surface area of the sphere using the formula A = 4*pi*r^2\n    A = 4 * math.pi * r ** 2\n\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Find the nth centered hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1\n    hexagonal_number = 1\n    while count <= n:\n        hexagonal_number += 6 * count\n        count += 1\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    A centered hexagonal number is a hexagonal number that is centered at the center of a hexagon. \n    For example, 16 (14 + 2) and 20 (16 + 4) are centered hexagonal numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        total_sum = 0\n        for i in range(1, n+1):\n            hexagonal_num = (2*i - 1)*(2*i - 1)\n            total_sum += hexagonal_num\n        return total_sum"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = (n*(2*n - 1)) // 2  # calculate the nth hexagonal number\n    h_center = h - (n//2)  # find the center of the nth hexagon\n    return h_center"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = n * (2 * n - 1)\n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [i*(2*i - 1) for i in range(1, n+1)]\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i * (2*i - 1)\n        if hex_num % 2 == 0:\n            count += 1\n        i += 1\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Centered hexagonal numbers are formed by adding the row number to the triangular number of the same number.\n    # For example, the 12th centered hexagonal number is (12*12 + 12)/2 = 138.\n    # We can use this formula to find the nth centered hexagonal number.\n    # We can also use this formula to find the row number of the nth centered hexagonal number.\n\n    # First, we find the row number of the nth centered hexagonal number using integer division.\n    row = n // 12\n\n    # Next, we find the triangular number of the row number using the formula (row * (row + 1)) // 2.\n    triangular = (row * (row + 1)) // 2\n\n    # Finally, we add the row number to the triangular number to get the nth centered hexagonal number.\n    centered_hexagonal = triangular + row\n\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \"\"\"\n    hex_nums = []\n    for i in range(1, n + 1):\n        hex_num = (i * (2 * i - 1))\n        hex_nums.append(hex_num)\n    return hex_nums[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 1  # start with 1\n    num = 1    # center of first centered hexagonal number is 1\n    while count < n:\n        num += 6 * count  # add 6 times count to get next centered hexagonal number\n        count += 1\n    return num"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for d in [dict1, dict2, dict3]:\n        for key, value in d.items():\n            if key in merged_dict:\n                if isinstance(merged_dict[key], list):\n                    merged_dict[key].append(value)\n                else:\n                    merged_dict[key] = [merged_dict[key], value]\n            else:\n                merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n\n    # Merge dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as arguments and merges them into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dictionary in [dict1, dict2, dict3]:\n        for key, value in dictionary.items():\n            if key in merged_dict:\n                if isinstance(value, list):\n                    merged_dict[key].extend(value)\n                else:\n                    merged_dict[key] = [merged_dict[key], value]\n            else:\n                merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create a new dictionary\n    merged_dict = {}\n    \n    # Merge dictionaries into the new dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n\n    # loop through the list and count the frequency of each element\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function returns a dictionary containing the frequency of all the elements in a list.\n    '''\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through the list and count the frequency of each element\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(freq_count(lst))"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return None\n    if N == 1:\n        return 0\n    smaller = [x for x in range(1, N) if x!= N - 1]\n    return min(smaller, key=lambda x: abs(x - N))"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    closest = None\n    for num in range(n-1, 0, -1):\n        if abs(num - n) < abs(closest - n) or closest is None:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = N\n    while True:\n        if n > 1:\n            n -= 1\n        else:\n            return n"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(N):\n    \"\"\"\n    This function takes an integer as input and returns the closest smaller number than it.\n    \"\"\"\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        closest = float('inf')\n        for i in range(N-1, -1, -1):\n            if i < N:\n                closest = i\n                break\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for num in range(N-1, 0, -1):\n        if num < closest:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    closest = None\n    for i in range(n-1, 0, -1):\n        if i < n:\n            closest = i\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    \n    smaller_nums = [x for x in range(N) if x < N]\n    return smaller_nums[-1]"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    This function takes a number N as input and returns the closest smaller number than N.\n    '''\n    # Create a list of numbers to compare with N\n    numbers = [2, 4, 6, 8, 10]\n    \n    # Initialize a variable to store the closest number\n    closest_num = None\n    \n    # Loop through the numbers in the list\n    for num in numbers:\n        # If the current number is smaller than N and (N - current number) is smaller than (N - closest number), update closest_num\n        if num < N and (N - num) < (N - closest_num if closest_num else float('inf')):\n            closest_num = num\n            \n    # Return the closest number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if N-i > i:\n            return i\n    return 0"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    This function finds the length of the longest word in the given list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    Check if a substring is present in a list of strings.\n    \"\"\"\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n    str1: A list of string values.\n    sub_str: A string value that needs to be searched in the str1 list.\n    \n    The function returns True if sub_str is present in any of the string values in str1, otherwise it returns False.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n    1. str1: a list of string values\n    2. sub_str: the string value to be checked for in str1\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(strings, substring):\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the given number is undulating,\n    and False otherwise. A number is said to be undulating if the difference between consecutive digits is\n    either 1 or n-1.\n    \"\"\"\n    # Convert the integer to a string and store it in a list\n    digits = [int(d) for d in str(n)]\n    # Check if the difference between consecutive digits is either 1 or n-1\n    for i in range(len(digits)-1):\n        if abs(digits[i] - digits[i+1]) not in [1, n-1]:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return False\n    \n    # Calculate the sum of the first n odd numbers\n    odd_sum = n * (n+1)\n    \n    # Check if the sum is divisible by n\n    if odd_sum % n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the given number to a string for manipulation\n    num_str = str(n)\n\n    # Check if the number has repeated digits\n    for i in range(len(num_str)):\n        if num_str.count(num_str[i]) > 1:\n            return True\n\n    # Check if the number has an increasing or decreasing sequence\n    for i in range(len(num_str)-1):\n        if num_str[i] > num_str[i+1]:\n            return True\n        elif num_str[i] < num_str[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    # Convert the number to a string so we can iterate over its digits\n    digits = list(str(n))\n    \n    # Iterate over the digits and check if each consecutive pair is equal\n    for i in range(len(digits)-1):\n        if digits[i] == digits[i+1]:\n            return True\n    \n    # If we didn't find any consecutive equal digits, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Check whether a given number is undulating or not.\n    '''\n    # Check if n is divisible by 3 or 5\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n\n    # Initialize variables for checking undulation\n    prev_digit = n % 10\n    num_digits = 1\n    last_digit = n % 10\n\n    # Iterate through the digits of n\n    while n > 0:\n        n //= 10\n        digit = n % 10\n        \n        # Check for undulation\n        if digit > prev_digit:\n            return False\n\n        # Update variables for checking undulation\n        prev_digit = digit\n        num_digits += 1\n        last_digit = digit\n\n    # Check if the last digit is repeated in the sequence\n    if num_digits % 2 == 0 and last_digit == n % 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    s = str(n)\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if the number is undulating,\n    otherwise it returns False.\n    \n    A number is said to be undulating if its digits are repeating indefinitely with a fixed interval.\n    For example, 123456789123456789 is an undulating number with a fixed interval of 10.\n    '''\n    \n    # Convert the number to a string to simplify the task of checking the digits\n    num_str = str(n)\n    \n    # Check if the number has only digits\n    if not num_str.isdigit():\n        return False\n    \n    # Check if the number has only one digit\n    if len(num_str) == 1:\n        return True\n    \n    # Check if the number is an undulating number\n    for i in range(len(num_str)-1):\n        if num_str[i] == num_str[i+1]:\n            if num_str[i+1]!= num_str[i+2]:\n                return False\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    A number is said to be undulating if the difference between the absolute values of consecutive digits in it is always the same.\n\n    :param n: the given number\n    :return: True if the number is undulating, False otherwise\n    \"\"\"\n\n    # Convert the number to a string and store it in a list\n    num_list = list(str(n))\n\n    # Check if the length of the list is less than 2\n    if len(num_list) < 2:\n        return True\n\n    # Calculate the difference between the absolute values of consecutive digits in the list\n    diff = abs(int(num_list[1]) - int(num_list[0]))\n\n    # Check if the difference is the same for all consecutive pairs of digits\n    for i in range(1, len(num_list) - 1):\n        if abs(int(num_list[i + 1]) - int(num_list[i]))!= diff:\n            return False\n\n    # If the difference is the same for all consecutive pairs of digits, the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if n is an integer greater than or equal to 1.\n    if type(n)!= int or n < 1:\n        return False\n    \n    # Check if n is odd.\n    if n % 2 == 0:\n        return False\n    \n    # Check if n is divisible by 3.\n    if n % 3 == 0:\n        return True\n    \n    # Check if n can be written as a product of two consecutive primes.\n    for i in range(2, n - 1):\n        if n % i == 0 and is_prime(i) and is_prime(n // i):\n            return True\n    \n    # If none of the above conditions are met, n is not undulating.\n    return False\n\ndef is_prime(n):\n    '''\n    A helper function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string and split it into a list of digits\n    digits = [int(d) for d in str(n)]\n    # Iterate through the digits and check if the difference between consecutive digits is constant\n    for i in range(len(digits)-1):\n        if digits[i+1] - digits[i]!= digits[i+2] - digits[i+1]:\n            return False\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters a and b and returns the value of a to the power of b.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a,b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n\nprint(power(2, 3))  # Output: 8\nprint(power(5, 2))  # Output: 25"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments - the base and the exponent.\n    It returns the value of the base to the power of the exponent.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value using itemgetter\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by the second value in ascending order using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  # set the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)  # update the minimum length if a smaller sublist is found\n    return min_len  # return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')  # initialize the minimum length to infinity\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for lst_item in lst:\n        if len(lst_item) < min_length:\n            min_length = len(lst_item)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as an input and returns the number of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    # Check if the input is a positive integer\n    if n <= 0:\n        print(\"Invalid input! Please enter a positive integer.\")\n    else:\n        # Iterate from 1 to n/2 and check if n is divisible by i\n        for i in range(1, n//2+1):\n            if n % i == 0:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    '''\n    A function to flatten a list of lists.\n    '''\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\ndef frequency_lists(lst):\n    '''\n    A function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = flatten_list(lst)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in flatten_list(list1):\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\ndef flatten_list(list1):\n    '''\n    A recursive function to flatten a list of lists.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for element in item:\n                if element in frequency_dict:\n                    frequency_dict[element] += 1\n                else:\n                    frequency_dict[element] = 1\n        else:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary where the keys are elements of the flattened list and the values are their frequencies.\n    \"\"\"\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for element in flattened_list:\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    flattened_list = [item for sublist in list1 for item in sublist]\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Returns a flattened list of lists.\n    \"\"\"\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n\n\ndef frequency_lists(list1):\n    \"\"\"\n    Returns a dictionary of element frequencies in a flattened list of lists.\n    \"\"\"\n    flat_list = flatten_list(list1)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if isinstance(elem, list):\n            for subelem in elem:\n                if subelem in freq_dict:\n                    freq_dict[subelem] += 1\n                else:\n                    freq_dict[subelem] = 1\n        else:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides the result with the length of the list.\n\n    Parameters:\n        numbers (list): A list of numbers to be multiplied.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides with the length of the list.\n\n    :param numbers: a list of numbers\n    :return: the result of the multiplication and division\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    else: \n        binary = \"\"\n        while n > 0: \n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    This function converts the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)[2:] # remove the '0b' prefix from the binary string\n    return binary.zfill(len(binary)) # add leading zeros to match the length of the binary string"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to hold the binary representation of the decimal number\n    binary = ''\n    \n    # loop through each bit of the binary representation of the decimal number\n    while n > 0:\n        # check if the remainder of the decimal number divided by 2 is equal to 1\n        if n % 2 == 1:\n            # if yes, add a 1 to the binary representation string\n            binary = '1' + binary\n        else:\n            # if no, add a 0 to the binary representation string\n            binary = '0' + binary\n        # divide the decimal number by 2 to get the next bit of the binary representation\n        n = n // 2\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the given decimal number to binary using the bin() function\n    binary = bin(n)[2:]\n    \n    # Return the binary string without leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        return num + 1\n    else:\n        while True:\n            num += 1\n            if is_palindrome(num):\n                return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Invalid input\"\n    elif str(num) == str(num)[::-1]:\n        return num + 1\n    else:\n        palindrome = str(num) + str(num)[::-1]\n        while int(palindrome) < num:\n            palindrome = str(int(palindrome) + 1) + str(int(palindrome) + 1)[::-1]\n        return int(palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and remove any leading zeros\n    num_str = str(num).lstrip('0')\n    # Check if the integer is a palindrome\n    if num_str == num_str[::-1]:\n        # If the integer is already a palindrome, add 1 to the integer and return the next smallest palindrome\n        return int(str(int(num_str) + 1) + '1' + '0'*(len(num_str)-1))\n    else:\n        # If the integer is not a palindrome, find the length of the largest palindrome that is less than the integer\n        for i in range(len(num_str)-1, 0, -1):\n            if num_str[:i] == num_str[:i][::-1]:\n                break\n        # Replace the largest palindrome with the next smallest palindrome of the original integer\n        return int(num_str[:i] + str(int(num_str[:i])+1) + num_str[i+1:][::-1])"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Get the number of digits in the number\n    digits = len(str(num))\n    \n    # Increase the last digit by 1 and check if the number is still a palindrome\n    last_digit = num % 10\n    for i in range(last_digit + 1, 10):\n        if str(num * 10 + i) == str(num * 10 + i)[::-1]:\n            return num * 10 + i\n    \n    # Increase the last two digits by 1 and check if the number is still a palindrome\n    last_two_digits = num // 10 % 100\n    for i in range(last_two_digits + 1, 100):\n        if str(num + i) == str(num + i)[::-1]:\n            return num + i\n    \n    # Increase the last three digits by 1 and check if the number is still a palindrome\n    last_three_digits = num // 1000\n    for i in range(last_three_digits + 1, 1000):\n        if str(num + i) == str(num + i)[::-1]:\n            return num + i\n    \n    # If we've reached here, the number is larger than 999999, so there is no next smallest palindrome\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    A helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    A function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while not is_palindrome(num):\n        num += 1\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # convert the integer to string and check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # find the length of the number\n    n = len(num_str)\n    \n    # find the smallest palindrome greater than num\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, i-1, -1):\n            temp_num = int(num_str[:i] + num_str[i:j+1][::-1] + num_str[j+1:])\n            if temp_num > num and str(temp_num) == str(temp_num)[::-1]:\n                return temp_num\n    \n    # if no palindrome greater than num is found, return -1\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # If the input number is already a palindrome, we increment the number by 1 and return it as the smallest palindrome\n        return int(str(num+1))\n    else:\n        # If the input number is not a palindrome, we find the largest palindrome that is smaller than the input number\n        largest_palindrome = int(num_str[:-1][::-1])\n        # We then increment this largest palindrome and return it as the smallest palindrome\n        return int(str(largest_palindrome+1))\n"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to a string for easier manipulation\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If the number is already a palindrome, we just add 1 and return the result\n        return num + 1\n\n    # If the number is not a palindrome, we need to find the next smallest palindrome\n    # We start by checking if the last digit is 9, in which case we need to check the second-to-last digit\n    if num_str[-1] == '9':\n        # If the last digit is 9, we add a 9 to the end of the number and check if the new number is a palindrome\n        new_num = num_str[:-1] + '99'\n        if new_num == new_num[::-1]:\n            # If the new number is a palindrome, we return the original number plus 1\n            return num + 1\n        else:\n            # If the new number is not a palindrome, we need to find the next smallest palindrome\n            # We loop through all the possible pairs of digits that can be swapped to find the next smallest palindrome\n            for i in range(len(num_str) - 1):\n                for j in range(i + 1, len(num_str)):\n                    if num_str[i]!= num_str[j] and int(num_str[:i] + num_str[i+1:j+1] + num_str[j+1:]) > int(num_str):\n                        return int(num_str[:i] + num_str[i+1:j+1] + num_str[j+1:])\n            # If we've gone through all possible pairs and haven't found a new palindrome, we just add 1 to the original number\n            return num + 1\n    else:\n        # If the last digit is not 9, we just add 1 to the original number and return the result\n        return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # Check if the number has an odd number of digits\n    if len(str(num)) % 2 == 0:\n        num += 1\n        \n    # Check if the number is already a palindrome with an even number of digits\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    \n    # If the number is not a palindrome, get the next smallest even palindrome\n    while True:\n        num += 2\n        if str(num) == str(num)[::-1]:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and reverse it\n    str_num = str(num)\n    reversed_str_num = str_num[::-1]\n    \n    # Find the first digit that can be incremented without affecting the palindrome property\n    for i in range(len(str_num)):\n        if str_num[i]!= '9':\n            break\n    \n    # If all digits can be incremented, we need to add a leading zero to the reversed string\n    if i == 0:\n        reversed_str_num = '0' + reversed_str_num\n    \n    # Increment the digit at index i and convert it back to an integer\n    incremented_digit = int(str(int(reversed_str_num[i]) + 1))\n    reversed_str_num = reversed_str_num[:i] + str(incremented_digit) + reversed_str_num[i+1:]\n    \n    # Convert the reversed string back to an integer and return it\n    return int(reversed_str_num[::-1])"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and an integer k as inputs and returns the kth element of the array.\n    The input array is expected to be 1-indexed.\n    '''\n    if k > len(arr):\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None  # k is out of range\n    return sorted(arr)[k-1]  # use sorted() to sort the array, and then return the k-th element"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0].lower()\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Converts a snake case string to camel case string.\n    '''\n    camel_case = ''\n    words = word.split('_')\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word\n        else:\n            camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Example:\n    >>> snake_to_camel(\"hello_world\")\n    \"helloWorld\"\n    \"\"\"\n    camel_word = \"\"\n    for i in range(len(word)):\n        if word[i] == \"_\" and i + 1 < len(word):\n            camel_word += word[i + 1].upper()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using the underscore as separator\n    words = word.split('_')\n    # Create an empty string to store the camel case version of the word\n    camel_case_word = ''\n    # Loop over the words and capitalize the first letter of each word, except the first one\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i]\n        else:\n            camel_case_word += words[i].capitalize()\n    # Return the camel case version of the word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    This function takes a snake case string as input and returns the camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    This function converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake_case string to camelCase string.\n    \"\"\"\n    return ''.join(word.split('_')).title()"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return (n + m) % 2"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return (n * m) + 1"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    eulerian_number = n**2 - m**2\n    return eulerian_number"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n    \"\"\"\n    # calculate the Eulerian period of the grid\n    period = 2*n + 2*m - 4\n    # initialize the result to 1\n    result = 1\n    # iterate over the period\n    for i in range(period):\n        # if the current iteration is even, add n and m to the result\n        if i % 2 == 0:\n            result += n\n            result += m\n        # if the current iteration is odd, subtract n and m from the result\n        else:\n            result -= n\n            result -= m\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > 0 and m > 0:\n        return n**2 + m**2\n    else:\n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function returns the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return m*n + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        raise ValueError('n and m must be non-negative integers.')\n    if m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n * eulerian_num(n-1, m) + m * eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0 or n == 0:\n        return 1\n    return (n+1)*(m+1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative integers.\")\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    \n    # Calculate a(n-1, m) and a(n, m-1) recursively\n    a_n_1_m = eulerian_num(n-1, m)\n    a_n_m_1 = eulerian_num(n, m-1)\n    \n    # Calculate a(n, m)\n    if n > m:\n        a_n_m = a_n_1_m + a_n_m_1 + 1\n    else:\n        a_n_m = a_n_1_m + a_n_m_1\n    \n    return a_n_m"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (n * (n - 1) * (2 * n - 1)) // 6\n    b = (m * (m - 1) * (2 * m - 1)) // 6\n    c = (n + m - 1) * (n + m - 2) // 2\n    return a + b - c"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sorts each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of true booleans in a given list.\n\n    Parameters:\n        lst (list): The list of booleans to count.\n\n    Returns:\n        int: The number of true booleans in the list.\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the number of True values in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the number of True values in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuple.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function takes a list and a tuple as input parameters and appends the list to the tuple.\n    \"\"\"\n    new_tup = test_tup + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the list to the tuple\n    test_tup = test_tup + tuple(test_list)\n    \n    # return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)  # Convert num1 into a heap\n    heapq.heapify(num2)  # Convert num2 into a heap\n    heapq.heapify(num3)  # Convert num3 into a heap\n    \n    while num1 and num2 and num3:\n        # Get the smallest element from each list and append to merged_list\n        smallest = min(num1[0], num2[0], num3[0])\n        merged_list.append(smallest)\n        \n        # Remove the smallest element from the list where it came from\n        if smallest == num1[0]:\n            num1.pop(0)\n        elif smallest == num2[0]:\n            num2.pop(0)\n        else:\n            num3.pop(0)\n    \n    # Append any remaining elements from num1, num2, or num3 to merged_list\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            if num1[0] < num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            else:\n                merged_list.append(heapq.heappop(num3))\n        else:\n            if num2[0] < num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n                \n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            num1.pop(0)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            num2.pop(0)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            num3.pop(0)\n\n    # Add remaining elements in num1, num2, and num3 to merged_list\n    while num1:\n        heapq.heappush(merged_list, num1[0])\n        num1.pop(0)\n    while num2:\n        heapq.heappush(merged_list, num2[0])\n        num2.pop(0)\n    while num3:\n        heapq.heappush(merged_list, num3[0])\n        num3.pop(0)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    # insert elements from num1, num2, and num3 into heap\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n\n    # create new list to store sorted elements\n    merged_list = []\n\n    # extract elements from heap and add them to merged_list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            num1.pop(0)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            num2.pop(0)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            num3.pop(0)\n\n    while num1:\n        heapq.heappush(merged_list, num1[0])\n        num1.pop(0)\n\n    while num2:\n        heapq.heappush(merged_list, num2[0])\n        num2.pop(0)\n\n    while num3:\n        heapq.heappush(merged_list, num3[0])\n        num3.pop(0)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three sorted lists into a single sorted list.\n    '''\n    merged = []\n    heapq.heappush(merged, num1.pop(0))\n    heapq.heappush(merged, num2.pop(0))\n    heapq.heappush(merged, num3.pop(0))\n\n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            heapq.heappush(merged, num1.pop(0))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            heapq.heappush(merged, num2.pop(0))\n        else:\n            heapq.heappush(merged, num3.pop(0))\n\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(merged_list, num1[0])\n            heapq.heappop(num1)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            heapq.heappush(merged_list, num2[0])\n            heapq.heappop(num2)\n        else:\n            heapq.heappush(merged_list, num3[0])\n            heapq.heappop(num3)\n\n    while num1:\n        heapq.heappush(merged_list, num1[0])\n        heapq.heappop(num1)\n\n    while num2:\n        heapq.heappush(merged_list, num2[0])\n        heapq.heappop(num2)\n\n    while num3:\n        heapq.heappush(merged_list, num3[0])\n        heapq.heappop(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and merges them into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(num2.pop(0))\n        elif not num2:\n            merged_list.append(num1.pop(0))\n        elif num1[0] < num2[0]:\n            merged_list.append(num1.pop(0))\n        else:\n            merged_list.append(num2.pop(0))\n        if num3:\n            if num1[-1] < num3[0]:\n                merged_list.append(num3.pop(0))\n            else:\n                merged_list.append(num1.pop(-1))\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0] # rotate the string\n        for j in range(len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = bin(int(s,2))[2:].zfill(len(s))  # Convert the binary string to list of bits and pad with zeros if necessary.\n    count = 0\n    for i in range(n):\n        count += s.count('1')\n        s = s[1:] + s[0]  # Rotate the binary string to the right by one position.\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # convert string to list of integers\n    binary_list = [int(i) for i in s]\n\n    # rotate the list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n\n    # count the number of odd numbers\n    odd_count = sum(1 for i in rotated_list if i % 2 == 1)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a number n, and returns the number of numbers in the resulting binary string\n    with an odd value when the binary string is rotated the given number of times.\n    \"\"\"\n    # Convert the binary string into a list of integers\n    s_list = [int(x) for x in s]\n\n    # Rotate the list n times\n    rotated_s = s_list[-n:] + s_list[:-n]\n\n    # Count the number of odd values\n    odd_count = 0\n    for digit in rotated_s:\n        if digit % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:]+s[0]\n        if s.count('1')%2!=0:\n            count+=1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers that appear when rotating the binary string n times.\n    \"\"\"\n    count = 0\n    s = s.lstrip(\"0\")\n    for i in range(n):\n        s = s + s[0]\n        if s[0] == \"1\":\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    This function takes two arguments:\n        s (str): A binary string\n        n (int): The number of times the string is to be rotated\n\n    It returns the number of numbers with an odd value when the given binary string is rotated the given number of times.\n    \"\"\"\n    # convert the string into a list of integers\n    s = [int(i) for i in s]\n\n    # perform rotation n times\n    for i in range(n):\n        s.insert(0, s[-1])\n        s.pop()\n\n    # count the number of odd numbers in the rotated string\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    This function takes a binary string `s` and a positive integer `n`, and returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    \n    # Rotate the list n times to the right\n    s = s[n:] + s[:n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string n times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(d) for d in s]\n\n    # Rotate the list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n\n    # Count the number of odd numbers in the rotated list\n    odd_count = sum(1 for d in rotated_list if d % 2!= 0)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers after rotating the binary string n times.\n    \"\"\"\n    # First, we convert the string to a list of integers.\n    digits = [int(digit) for digit in s]\n    \n    # Then, we compute the length of the binary string.\n    length = len(digits)\n    \n    # We rotate the string n times.\n    for i in range(n):\n        # We save the first digit in a temporary variable.\n        first_digit = digits[0]\n        \n        # We shift all the digits one position to the right.\n        for j in range(length-1):\n            digits[j] = digits[j+1]\n        \n        # We add the first digit to the end of the list.\n        digits[length-1] = first_digit\n    \n    # We count the number of odd digits in the rotated string.\n    count = sum(digits)\n    \n    # We return the count.\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns the common elements in all the sublists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns the common elements in the nested list.\n    '''\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist:\n        common_elements = common_elements.intersection(sublist)\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes in a list of nested lists and returns a list of common elements.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n            else:\n                continue\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        if len(common_elements) == 0:\n            common_elements = set(lst)\n        else:\n            common_elements = common_elements.intersection(lst)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0]).intersection(*nestedlist)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements and element!= []:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                if i!= j and lst[i] == lst[j]:\n                    common_elements.append(lst[i])\n                    break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for list1 in nestedlist:\n        for list2 in nestedlist:\n            if list1!= list2:\n                common = set(list1).intersection(list2)\n                if common:\n                    result.append(common)\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n    text (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n    text (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dict(dict_list):\n    \"\"\"\n    This function takes a list of dictionaries as an input and checks whether all dictionaries are empty or not.\n    \"\"\"\n    for d in dict_list:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return True\n        else:\n            return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dict_list(dict_list):\n    \"\"\"\n    Returns True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    for d in dict_list:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dict(dict_list):\n    \"\"\"\n    This function checks if all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in dict_list:\n        if dictionary == {}:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dict(list1):\n    '''\n    Check if all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function converts a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Converts all elements of a list of lists that can be converted to float to float.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        float_sublist = []\n        for item in sublist:\n            try:\n                float_item = float(item)\n                float_sublist.append(float_item)\n            except ValueError:\n                pass\n        result.append(float_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, item in enumerate(test_list):\n        if isinstance(item, list):\n            test_list[i] = list_to_float(item)\n        elif isinstance(item, str):\n            try:\n                test_list[i] = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                result.append(float(test_list[i][j]))\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as an input and converts all possible convertible elements in the list to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return None\n    \n    i = 0\n    j = len(arr) - 1\n    \n    while i < j:\n        mid = (i + j) // 2\n        \n        if arr[mid] == arr[mid+1]:\n            i = mid + 1\n        elif arr[mid] == arr[mid-1]:\n            j = mid - 1\n        else:\n            return arr[mid]\n        \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    else:\n        left = arr[0]\n        right = arr[-1]\n        mid = arr[len(arr)//2]\n\n        if left == mid:\n            return search(arr[1:])\n        elif right == mid:\n            return search(arr[:-1])\n        else:\n            return mid\n"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n    \n    # Initialize two pointers, one at the beginning and one at the end of the array.\n    left = 0\n    right = n - 1\n    \n    # Loop until the left and right pointers meet or cross each other.\n    while left < right:\n        # Calculate the sum of the left and right elements.\n        current_sum = arr[left] + arr[right]\n        \n        # If the sum is zero, it means that the element appears only once.\n        if current_sum == 0:\n            return arr[left]\n        \n        # If the sum is positive, move the left pointer to the right.\n        elif current_sum > 0:\n            right -= 1\n        \n        # If the sum is negative, move the right pointer to the left.\n        else:\n            left += 1\n    \n    # If we reach here, it means that no element appears only once.\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    :param arr: A sorted array of integers.\n    :return: The element that appears only once in the array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element in the array.\n    freq = {}\n\n    # Loop through the array and count the frequency of each element.\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Loop through the dictionary and find the element that appears only once.\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None.\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    n = len(arr)\n    # If the array has odd number of elements\n    if n % 2!= 0:\n        return arr[n//2]\n    # If the array has even number of elements\n    else:\n        return arr[n//2 - 1]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n % 2 == 0:\n        # If array has even length, search for two elements that have the same value\n        i = 0\n        while arr[i] == arr[i+1]:\n            i += 1\n        j = n - 1\n        while arr[j] == arr[j-1]:\n            j -= 1\n        return arr[i]\n    else:\n        # If array has odd length, search for an element that appears only once\n        for i in range(n):\n            if arr[i] == arr[i+1]:\n                continue\n            elif arr[i] == arr[i-1]:\n                continue\n            else:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    n = len(arr)\n    # Initialize variables for the first and second elements of the array\n    first = arr[0]\n    second = arr[1]\n    # Loop through the array\n    for i in range(2, n):\n        # If the first and second elements are the same, update the second element to the current element\n        if arr[i] == first:\n            second = arr[i]\n        # If the first and second elements are not the same, check if the current element is the only occurrence of its value\n        elif arr[i] == second:\n            # If the current element is the only occurrence of its value, return it\n            return arr[i]\n        # If the current element is not the only occurrence of its value, update the first and second elements to the current element and the next element\n        else:\n            first = second\n            second = arr[i]\n    # If no element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If array has even length and all elements are different, there is no element that appears only once\n    if n % 2 == 0 and arr[0]!= arr[n-1]:\n        return None\n    # If array has odd length and all elements are different, there is no element that appears only once\n    elif n % 2 == 1 and arr[0] == arr[n-1]:\n        return None\n    # If array has even length and all elements are the same, there is no element that appears only once\n    elif n % 2 == 0 and arr[0] == arr[n-1]:\n        return None\n    # If array has odd length and all elements are the same, there is no element that appears only once\n    else:\n        # Initialize variables\n        count = 0\n        prev_num = arr[0]\n        # Iterate through the array and count the number of occurrences of each element\n        for i in range(1, n):\n            if arr[i] == prev_num:\n                count += 1\n            else:\n                count -= 1\n            prev_num = arr[i]\n        # Iterate through the array again and find the element that appears only once\n        for i in range(n):\n            if arr[i] == i + 1:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element\n    count_dict = {}\n\n    # Loop through the array and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Loop through the array again and find the element that appears only once\n    for num in arr:\n        if count_dict[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    # Initialize variables to keep track of the element and its frequency\n    prev_num = arr[0]\n    freq = 1\n    # Iterate through the array\n    for num in arr[1:]:\n        # If the current element is the same as the previous element, increment the frequency\n        if num == prev_num:\n            freq += 1\n        # If the current element is different from the previous element, decrement the frequency\n        else:\n            freq -= 1\n        # If the frequency becomes 0, return the previous element\n        if freq == 0:\n            return prev_num\n        # Otherwise, update the previous element and its frequency\n        prev_num = num\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n            product = abs(list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0] * list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1]) * abs(list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Returns True if the given number is amicable, False otherwise.\n    '''\n    divisors = set()\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            divisors.add(i)\n    return sum(divisors) == num and sum(amicable_numbers_divisors(num)) > num\n\ndef amicable_numbers_divisors(num):\n    '''\n    Returns a list of the amicable numbers that divide the given number.\n    '''\n    divisors = []\n    for i in range(2, num // 2 + 1):\n        if num % i == 0:\n            if is_amicable(i):\n                divisors.append(i)\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        if sum_divisors(i) == i and i!= sum_divisors(sum_divisors(i)):\n            total += i\n    return total\n\ndef sum_divisors(num):\n    '''\n    Write a function to sum all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, num//2+1):\n        if num%i == 0:\n            total += i\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    total = 0\n    for n in range(1, limit+1):\n        d = sum(divisors(n))\n        if d!= n and d < limit and d!= sum(divisors(d)):\n            total += n + d\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisors(n):\n    \"\"\"Return the list of all divisors of n, including 1 and n itself.\"\"\"\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    divisors.append(n)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers from 1 to limit.\"\"\"\n    amicables = []\n    for n in range(1, limit + 1):\n        m = sum(divisors(n)) - n\n        if m!= n and m < limit and m not in amicables:\n            if sum(divisors(m)) - m == n and m not in amicables:\n                amicables.append(n)\n    return sum(amicables)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n    \n    # create a dictionary to store the amicable numbers and their sum\n    amicable_dict = {}\n    \n    # iterate over all numbers in the list\n    for num in numbers:\n        # check if the number is already in the dictionary\n        if num in amicable_dict:\n            continue # if it is, skip it\n        \n        # calculate the divisors of the number\n        divisors = []\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n                \n        # check if the sum of the divisors is in the list and not the original number itself\n        if sum(divisors) in numbers and sum(divisors)!= num:\n            # if it is, add it to the dictionary\n            amicable_dict[num] = sum(divisors)\n    \n    # calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_dict.values())\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit+1):\n        divisor_sum = sum_of_divisors(num)\n        if num!= divisor_sum and divisor_sum < limit:\n            if num == sum_of_divisors(divisor_sum):\n                sum += num\n    return sum\n\ndef sum_of_divisors(num):\n    '''\n    Calculate the sum of divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num//2+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable or not.\n    '''\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    if is_amicable_sum(divisor_sum, n):\n        return True\n    return False\n\ndef is_amicable_sum(n1, n2):\n    '''\n    Check if the sum of divisors of n1 and n2 is equal.\n    '''\n    if n1 == n2:\n        return True\n    if n1 > n2:\n        n1, n2 = n2, n1\n    for i in range(n1 + 1, n2):\n        if n2 % i == 0:\n            if is_amicable_sum(n1, i):\n                return True\n    return False"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisors(n):\n    divs = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n // i:\n                divs.append(n // i)\n    return divs\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for n in range(2, limit+1):\n        div_sum = sum(divisors(n))\n        if n!= div_sum and div_sum < limit and n == sum(divisors(div_sum)):\n            total += n + div_sum\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_amicable(num):\n    '''\n    Returns True if the given number is amicable, else False.\n    '''\n    divisors = []\n    for i in range(1, num//2 + 1):\n        if num % i == 0:\n            divisors.append(i)\n    sum_of_divisors = sum(divisors)\n    if sum_of_divisors == num:\n        return True\n    elif num == 1:\n        return False\n    else:\n        return is_amicable(sum_of_divisors)\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the sum of each number's divisors\n    sums = {}\n    \n    # Loop over all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if i is already in the sums dictionary\n        if i in sums:\n            continue\n        \n        # Find the sum of i's divisors\n        divisor_sum = 0\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                divisor_sum += j\n                if i!= j and j!= i // j:\n                    divisor_sum += i // j\n        \n        # Store the sum of i's divisors in the sums dictionary\n        sums[i] = divisor_sum\n    \n    # Initialize a variable to store the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Loop over all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if i is already in the sums dictionary\n        if i in sums:\n            # Check if i is an amicable number\n            if sums[i]!= i and sums[sums[i]] == i:\n                amicable_sum += i\n    \n    # Return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return round(cmath.phase(complex(a, b)), 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the first number in degrees.\n    '''\n    return cmath.phase(a) * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers and returns the angle between them.\n    '''\n    # Calculate the absolute value of the complex number using the cmath.polar() function\n    r, phi = cmath.polar(complex(a, b))\n    \n    # Calculate the angle using the cmath.phase() function\n    angle = cmath.phase(complex(a, b))\n    \n    # Return the angle in degrees\n    return round(angle*180/cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_len:\n                max_len = diff\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            zero_count = sub_str.count('0')\n            one_count = sub_str.count('1')\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    # Initialize the maximum difference variable to 0\n    max_diff = 0\n    # Loop through all possible substrings of the binary string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Extract the current substring from the binary string\n            substr = string[i:j]\n            # Count the number of 0s and 1s in the current substring\n            count_0s = substr.count('0')\n            count_1s = substr.count('1')\n            # Calculate the difference between the number of 0s and number of 1s in the current substring\n            diff = abs(count_0s - count_1s)\n            # Update the maximum difference if the difference in the current substring is greater than the current maximum difference\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    max_length = 0\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n            max_length = max(max_length, length)\n        else:\n            length = 0\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count('0')\n            one_count = sub_string.count('1')\n            if abs(zero_count - one_count) > max_len:\n                max_len = abs(zero_count - one_count)\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            if sub_string.count('0') == sub_string.count('1'):\n                length = j - i\n                max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_length = 0\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n            max_length = max(max_length, length)\n        else:\n            length -= 1\n            max_length = max(max_length, length)\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = string[i:j]\n            count_0 = substring.count('0')\n            count_1 = substring.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_length:\n                max_length = diff\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            length = abs(count_0 - count_1)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the maximum number from the given numbers\n    max_num = max(a, b)\n    \n    # Finding the minimum number from the given numbers\n    min_num = min(a, b)\n    \n    # Finding the common divisors of the given numbers\n    common_divisors = []\n    for i in range(1, min_num+1):\n        if a%i == 0 and b%i == 0:\n            common_divisors.append(i)\n    \n    # Finding the sum of common divisors\n    sum_of_divisors = sum(common_divisors)\n    \n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Find the larger number and the smaller number\n    if a > b:\n        large_num = a\n        small_num = b\n    else:\n        large_num = b\n        small_num = a\n\n    # Initialize a variable to store the sum of common divisors\n    sum_common_divisors = 0\n\n    # Loop through all the numbers from 1 to the smaller number\n    for i in range(1, small_num+1):\n        # Check if the number is a divisor of both the numbers\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the maximum number between a and b\n    max_num = max(a, b)\n    \n    # Find the minimum number between a and b\n    min_num = min(a, b)\n    \n    # Initialize the sum of common divisors to 0\n    sum_of_divisors = 0\n    \n    # Iterate from 1 to the maximum number\n    for i in range(1, max_num+1):\n        \n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            \n            # Check if i is also a divisor of min_num\n            if min_num % i == 0:\n                \n                # Add i to the sum of common divisors\n                sum_of_divisors += i\n    \n    # Return the sum of common divisors\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize a list to store the common divisors\n    divisors = []\n    \n    # Find the maximum number to check for common divisors\n    max_num = max(a,b)\n    \n    # Loop through numbers from 1 to the maximum number\n    for i in range(1, max_num+1):\n        \n        # Check if both numbers have a common divisor\n        if a % i == 0 and b % i == 0:\n            \n            # If so, add the divisor to the list of common divisors\n            divisors.append(i)\n    \n    # Return the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n\n    :param a: The first number.\n    :param b: The second number.\n    :return: The sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the set of divisors for both numbers\n    divisors_a = set(i for i in range(1, a+1) if a % i == 0)\n    divisors_b = set(i for i in range(1, b+1) if b % i == 0)\n\n    # Find the intersection of the sets of divisors\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, smaller + 1):\n        if a % i == 0 and b % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their sum of common divisors.\n    \"\"\"\n    # Finding the smaller number\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n\n    # Finding the sum of common divisors\n    sum_divisors = 0\n    for i in range(1, smaller+1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function will find the sum of common divisors of two given numbers.\n    \"\"\"\n    a_divisors = set()\n    for i in range(1, a+1):\n        if a % i == 0:\n            a_divisors.add(i)\n\n    b_divisors = set()\n    for i in range(1, b+1):\n        if b % i == 0:\n            b_divisors.add(i)\n\n    common_divisors = a_divisors.intersection(b_divisors)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers a and b.\n    \"\"\"\n    # Finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # Finding the sum of common divisors\n    sum = 0\n    for i in range(1, smaller+1):\n        if (a % i == 0) and (b % i == 0):\n            sum += i\n\n    # Returning the sum of common divisors\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Find the common divisors of two given numbers and return their sum.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(common_divisors(12, 18)) # Output: 6"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(5, 10)) # Output: 50"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(3, 4)) # Output: 12"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n\nprint(multiply_int(5, 10)) # Output: 50"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    This function takes two arguments:\n    - n: an integer, the maximum number of characters for a word to be considered long\n    - words: a list of strings, the words to be checked for length\n\n    The function returns a list of strings containing all the words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    \n    # Calculate the sum of each row and each column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each row and each column is equal to the magic constant\n    if row_sums!= col_sums:\n        return False\n\n    # Calculate the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # Check if the sum of the diagonals is equal to the magic constant\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # If the matrix satisfies all the conditions, it is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n\n    # calculate the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    # check if all sums are equal\n    if sum(row_sums) == sum(col_sums) == diag_sum1 == diag_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes in a matrix as input and checks if it is a magic square or not.\n    A magic square is a square matrix with numbers from 1 to n^2 such that the sum of each row, column and diagonal is the same.\n    The function returns True if the matrix is a magic square and False otherwise.\n    \"\"\"\n\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Check if the size of the matrix is odd\n    if n % 2!= 1:\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # Check if all sums are equal\n    if row_sums == col_sums and diag_sum1 == diag_sum2 == n*(n**2 + 1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # calculate the size of the matrix\n    n = len(my_matrix)\n\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # calculate the sum of each row, column, and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # check if the sums are all the same\n    if len(set(row_sums))!= 1 or len(set(col_sums))!= 1 or diag_sum1!= diag_sum2:\n        return False\n\n    # check if the sum of the squares of each number is equal to the sum of the row/column sums\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= sum(range(1, n*n+1)) // n**2 + (i if i < j else j):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Check if the sum of each row and column is the same\n    for i in range(len(my_matrix)):\n        col_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if col_sum!= row_sum:\n            return False\n    \n    # Calculate the sum of the diagonal\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if the sums are the same\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # If all conditions are met, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # calculate the sum of the diagonals\n    diag_sum1 = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag_sum2 = sum([my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))])\n    \n    # check if the sum of the diagonals is equal\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # calculate the sum of the rows and columns\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum([my_matrix[i][j] for i in range(len(my_matrix))]) for j in range(len(my_matrix[0]))]\n    \n    # check if the sum of the rows and columns are equal\n    if row_sums!= col_sums:\n        return False\n    \n    # if all conditions are met, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the sum of each row, column, and diagonal equals 15\n    magic_sum = 15\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(len(my_matrix)):\n        col_sum = 0\n        for i in range(len(my_matrix)):\n            col_sum += my_matrix[i][j]\n        if col_sum!= magic_sum:\n            return False\n    \n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(len(my_matrix)):\n        diag_sum1 += my_matrix[i][i]\n        diag_sum2 += my_matrix[i][len(my_matrix)-1-i]\n    if diag_sum1!= magic_sum or diag_sum2!= magic_sum:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if sum of each row and column is equal to the magic number\n    magic_number = len(my_matrix) * (len(my_matrix) ** 2 + 1) / 2\n    if row_sums!= col_sums or row_sums!= [magic_number] * len(my_matrix):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = (n*(n*n + 1))/2\n\n    # calculate the sum of each row and column\n    row_sums = [sum(matrix[i]) for i in range(n)]\n    col_sums = [sum([matrix[j][i] for j in range(n)]) for i in range(n)]\n\n    # check if the sum of each row and column is equal to the magic sum\n    if row_sums == col_sums == [magic_sum]*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if the sum of each row and column is the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if the sums of the diagonals are the same\n    if diag_sum1!= diag_sum2:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)  # create a dictionary with default value of 0\n    for num in nums:\n        freq[num] += 1  # increment the frequency of each element in the list\n    \n    max_freq = 0\n    max_num = None\n    \n    for num, count in freq.items():  # iterate over the dictionary and find the item with maximum frequency\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq_item in freq.items():\n        if freq_item > max_freq:\n            max_freq = freq_item\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n        \n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)  # create a dictionary to store item frequencies\n    for num in nums:\n        freq[num] += 1  # increment the frequency count for each item\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)  # create a dictionary with default value 0 for each key\n    for num in nums:\n        freq[num] += 1  # increment the frequency count for each item in the list\n    max_freq = max(freq.values())  # find the maximum frequency\n    max_items = [k for k, v in freq.items() if v == max_freq]  # find the items with maximum frequency\n    return max_items[0]  # return the item with maximum frequency"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function finds the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)  # initializing an empty dictionary\n    \n    for num in nums:\n        freq_dict[num] += 1  # incrementing the count of each element in the dictionary\n    \n    max_freq = max(freq_dict.values())  # finding the maximum frequency\n    \n    for item, count in freq_dict.items():  # iterating through the dictionary\n        if count == max_freq:\n            return item  # returning the item with maximum frequency\n"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_num = max(freq_dict, key=freq_dict.get)\n    return max_num, freq_dict[max_num]"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1 = list(str1) # convert string to list of characters\n    \n    i, j = 0, len(str1)-1 # set two pointers i and j at the beginning and end of the list\n    \n    while i < j: # iterate until the pointers meet\n        if str1[i] in vowels and str1[j] in vowels: # if both characters are vowels\n            str1[i], str1[j] = str1[j], str1[i] # swap the characters\n            i += 1 # move the pointer to the right\n            j -= 1 # move the pointer to the left\n        elif str1[i] in vowels: # if the character at the beginning is a vowel\n            j -= 1 # move the pointer to the left\n        elif str1[j] in vowels: # if the character at the end is a vowel\n            i += 1 # move the pointer to the right\n        else: # if neither character is a vowel\n            i += 1 # move the pointer to the right\n            j -= 1 # move the pointer to the left\n    \n    return ''.join(str1) # convert the list of characters back to a string and return it"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the vowels of the input string reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_in_str = []\n    vowels_not_in_str = []\n\n    # Separate the vowels and non-vowels in the string\n    for char in str1:\n        if char in vowels:\n            vowels_in_str.append(char)\n        else:\n            vowels_not_in_str.append(char)\n\n    # Reverse the vowels in the string\n    vowels_in_str.reverse()\n\n    # Combine the reversed vowels with the non-vowels\n    new_str = \"\".join(vowels_not_in_str) + \"\".join(vowels_in_str)\n\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the string with only the vowels reversed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    # create a list of vowels\n    vowel_list = []\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a vowel\n        if char in vowels:\n            # append the vowel to the vowel_list\n            vowel_list.append(char)\n    # reverse the vowel_list and join it to a string\n    reversed_vowels = ''.join(vowel_list[::-1])\n    # create a new string with the non-vowel characters\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    # concatenate the reversed vowels and non-vowel characters\n    result = reversed_vowels + new_str\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    vowel_indices = [i for i, c in enumerate(str1) if c in vowels]\n    for i, j in zip(vowel_indices[::-1], vowel_indices[::-1][1:] + vowel_indices[-1:1]):\n        str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list.reverse()\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_list.pop()\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with the vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_indices = [i for i in range(len(str1)) if str1[i] in vowels]\n    vowel_indices.reverse()\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i in vowel_indices:\n            new_str += str1[i]\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n\n    result = \"\"\n    for i in range(len(str1)):\n        if i in vowel_indices:\n            result += str1[i]\n        else:\n            result += str1[i]\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].lower() in vowels and str1[j].lower() in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i].lower() in vowels:\n            j -= 1\n        elif str1[j].lower() in vowels:\n            i += 1\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    for i in range(len(vowel_indices) // 2):\n        j = len(vowel_indices) - 1 - i\n        str1 = str1[:vowel_indices[i]] + str1[vowel_indices[j]][::-1] + str1[vowel_indices[i]+1:vowel_indices[j]] + str1[vowel_indices[i]] + str1[vowel_indices[j]+1:]\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for i in tup1:\n        result += str(i) + \",\"\n    return result[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as input and returns a string of the elements of the tuple.\n    '''\n    tup_str = \"\"\n    for i in range(len(tup1)):\n        tup_str += str(tup1[i]) + \" \"\n    return tup_str.strip()"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    This function takes a tuple as input and returns a string.\n\n    Parameters:\n    tup1 (tuple): A tuple of integers or floats.\n\n    Returns:\n    str: A string representation of the tuple.\n\n    Example:\n    >>> tup_string((1,2,3))\n    '(1, 2, 3)'\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Join the elements of the tuple with a comma and a space\n    tup_str = ', '.join(tup1)\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an argument and returns a string\n    of the elements in the tuple separated by a space.\n    '''\n    return''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return ''.join(str(i) for i in tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of negative numbers in the list.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the negative numbers in the list.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculates the sum of the negative numbers in a given list of numbers.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        count += 1\n        num += 6*count\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        hex_num = num * (2*num - 1)\n        count += 1\n        num += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    This function takes an integer n as input and returns the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)  # formula for nth hexagonal number\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    This function returns the nth hexagonal number.\n    '''\n    count = 1\n    num = 1\n    \n    while count < n:\n        num += 6\n        count += 1\n    \n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    This function returns the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = len(nums)\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    return zeroes / count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return \"Error: No non-zeroes found in array\"\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return \"None of the numbers are zero.\"\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n            \n    if count_non_zero == 0:\n        return \"Cannot divide by zero\"\n    else:\n        return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count > 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    powers = [2**i for i in range(32)] # List of all powers of 2 from 2^0 to 2^31\n    for i in range(len(powers)):\n        if n == powers[i]:\n            return True\n        elif n < powers[i]:\n            return False\n        else:\n            n -= powers[i]\n    return n == 0 # If n is 0, then it is a sum of powers of 2"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    for i in range(31,-1,-1):\n        if (n >> i) & 1:\n            if (n >> (i-1)) & 1:\n                return False\n            else:\n                return is_Sum_Of_Powers_Of_Two(n - (1 << i))\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_set = set()\n    i = 1\n    while i <= n:\n        if n & i == i:\n            power_set.add(i)\n            n -= i\n        else:\n            i *= 2\n    return len(power_set) > 0 and n == 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a boolean variable to store the result\n    result = True\n    \n    # Loop through all possible powers of 2 upto n\n    for i in range(31):\n        # Check if i is a power of 2\n        if (1 << i) == n:\n            break\n        \n        # Check if n can be represented as a sum of i and n-i\n        if (1 << i) > n:\n            result = False\n            break\n        \n        # Check if n can be represented as a sum of i and n-i\n        if (1 << i) + (n - (1 << i)) == n:\n            result = True\n            break\n        \n    return result"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        for i in range(32):\n            if (n & (1 << i))!= 0:\n                n -= (1 << i)\n                if not is_Sum_Of_Powers_Of_Two(n):\n                    return False\n                break\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Base case \n    if n == 0: \n        return True\n    # Check if the number is a power of 2 \n    elif n & (n - 1) == 0: \n        return is_Sum_Of_Powers_Of_Two(n >> 1) \n    # Check if the number can be represented as sum of powers of 2 \n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer as input and returns True if the number can be represented as sum of non-zero powers of 2.\n    Returns False otherwise.\n    '''\n    sum_of_powers = 0\n    i = 0\n    while i < 32:\n        if (2**i) <= n:\n            sum_of_powers += 2**i\n            i += 1\n        else:\n            break\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes an integer 'n' as input and returns True if it can be represented as sum of non-zero powers of 2, False otherwise.\n    '''\n    # Check if the given number is a power of 2\n    if n == 0 or (n & (n - 1)) == 0:\n        return True\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    for i in range(31, -1, -1):\n        power = 2**i\n        if power <= n:\n            if n - power >= 0:\n                n -= power\n            else:\n                break\n    return n == 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    This function takes a number n as input and returns True if n can be represented as sum of non-zero powers of 2,\n    otherwise, it returns False.\n    '''\n\n    # Initialize a boolean variable to keep track of whether n can be represented as sum of non-zero powers of 2 or not\n    is_representable = True\n\n    # Check whether n is a power of 2 or not\n    if n == 0 or (n & (n-1))!= 0:\n        is_representable = False\n\n    # If n is not a power of 2, check whether it can be represented as sum of non-zero powers of 2 or not\n    if is_representable:\n        power = 1\n        while n > 0:\n            if n & 1:\n                if power == 1:\n                    n -= 1\n                else:\n                    is_representable = False\n                    break\n            n >>= 1\n            power <<= 1\n\n    return is_representable"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns the circumference of the circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    This function takes the radius of a circle as input and returns the circumference of the circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for elem in test_list:\n        if isinstance(elem, list):\n            result += extract_singly(elem)\n        else:\n            result.append(elem)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for number in sublist:\n            flat_list.append(number)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        for num in sub_list:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists and returns a flattened set of numbers.\n    \"\"\"\n    flattened_list = []\n    for i in test_list:\n        if type(i) == list:\n            flattened_list.extend(i)\n        else:\n            flattened_list.append(i)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            for item in sublist:\n                flat_list.append(item)\n        else:\n            flat_list.append(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.append(num)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    singly = set()\n    for sublist in test_list:\n        if type(sublist) == list:\n            for item in sublist:\n                singly.add(item)\n        else:\n            singly.add(sublist)\n    return singly"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sorted list using pancake sort algorithm.\n    \"\"\"\n\n    n = len(nums)\n\n    # Start from the complete list and one by one reduce current size by one\n    for curr_size in range(n, 1, -1):\n        # Find index of the maximum element in the current sub-list\n        max_index = nums.index(max(nums[:curr_size]))\n\n        # Move the maximum element to the end of the list if it's not already at the end\n        if max_index!= curr_size-1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n\n        # Move the current maximum element to its correct position at the end of the list\n        nums = nums[:curr_size-1:-1] + nums[curr_size-1:]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n    '''\n    # Initialize the length of the list\n    n = len(nums)\n\n    # Iterate through the list, starting from the largest number\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:i+1]))\n\n        # If the maximum element is not at the end of the list, flip it to the end\n        if max_index!= i:\n            # Flip the maximum element to the end of the list\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            \n            # Flip the entire list\n            nums[:i+1] = reversed(nums[:i+1])\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the complete list and one by one reduce the size\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the remaining unsorted list\n        max_index = nums.index(max(nums[:i]))\n        # Move the maximum element to the end of the list\n        nums[i-1], nums[max_index] = nums[max_index], nums[i-1]\n        # Reverse the list\n        nums[:i-1] = nums[:i-1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # One by one move the maximum element to the end of the list\n    for i in range(n):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:n-i]))\n        # Move the maximum element to the end of the list\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        # Reverse the list from 0 to i\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = reverse(nums, max_index)\n        nums = reverse(nums, i)\n    return nums\n\ndef reverse(nums, i):\n    \"\"\"\n    Reverses the sublist starting at index 0 and ending at index i.\n    \"\"\"\n    left, right = 0, i\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function implements the pancake sort algorithm to sort a list of elements.\n    \"\"\"\n    # Create a list to store the maximum value and its index for each pass\n    max_values = [(nums[0], 0)]\n    \n    # Iterate through the list, comparing each element to the maximum value from the previous pass\n    for i in range(1, len(nums)):\n        if nums[i] > max_values[-1][0]:\n            max_values.append((nums[i], i))\n    \n    # Sort the list using pancakes\n    sorted_nums = []\n    for i in range(len(nums), 0, -1):\n        max_index = max_values[i-1][1]\n        sorted_nums.append(nums.pop(max_index))\n        if max_index!= i-1:\n            nums.insert(0, sorted_nums[-1])\n            max_values[i-1] = (sorted_nums[-1], 0)\n    \n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        max_index = nums.index(max(nums[:i+1]))\n        if max_index!= i:\n            nums[:max_index+1] = nums[:max_index+1][::-1]\n            nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Pancake Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # One by one move the maximum element to the end of the list\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted list\n        max_idx = nums.index(max(nums[:i+1]))\n        # Swap the maximum element with the last element in the sorted list\n        nums[max_idx], nums[i] = nums[i], nums[max_idx]\n        # Reverse the sorted list from 0 to i\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start from the maximum value and move upwards\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n        # Reverse the maximum element and the entire unsorted part\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        nums[:i+1] = nums[:i+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n\n    :param nums: The list of elements to be sorted.\n    :return: The sorted list of elements.\n    '''\n\n    n = len(nums)\n    # One pass through the array\n    for i in range(n):\n        # Find the maximum element index in the unsorted part of the array\n        max_index = nums.index(max(nums[i:]))\n        # Flip the maximum element to the end of the array\n        nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        # Flip the whole array to reverse the order of the maximum element\n        nums = nums[::-1]\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nlist3 = [1, 2, 3, 4, 5]\n\nprint(count_samepair(list1, list2, list3)) # Output: 5"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) <= 1:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[j] - arr[i]) > max_diff:\n                max_diff = abs(arr[j] - arr[i])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    arr.sort()\n    diff = 0\n    \n    for i in range(len(arr)-1):\n        diff = max(diff, arr[i+1] - arr[i])\n    \n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0 # Initialize max_diff to 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Find the absolute difference between arr[i] and arr[j] and update max_diff if it is greater than max_diff\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    arr_sorted = sorted(arr)\n    max_diff = arr_sorted[-1] - arr_sorted[0]\n    for i in range(len(arr_sorted)-1):\n        diff = arr_sorted[i+1] - arr_sorted[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        diff = arr[i] - min_val\n        if diff > max_diff:\n            max_diff = diff\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()  # Sort the array in ascending order\n    max_diff = 0  # Initialize max difference to 0\n\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])  # Find the absolute difference between consecutive elements\n        if diff > max_diff:\n            max_diff = diff  # Update max difference if necessary\n\n    return max_diff  # Return the maximum absolute difference"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a or b is zero\n    if a == 0 or b == 0:\n        # If a or b is zero, the equation has no solution\n        return None\n    else:\n        # Compute the discriminant\n        disc = n**2 - 4*a*b\n        # Check if the discriminant is negative\n        if disc < 0:\n            # If the discriminant is negative, there are no real solutions\n            return None\n        else:\n            # Compute the x and y values\n            x1 = (-n + disc**0.5)/(2*a)\n            x2 = (-n - disc**0.5)/(2*a)\n            y1 = (-b*x1)/a\n            y2 = (-b*x2)/a\n            # Return the tuple of solutions\n            return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if n % x == 0:\n            y = n // x\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b!= 0:\n        if n % b == 0:\n            return (0, n//b)\n        else:\n            return None\n    elif b == 0 and a!= 0:\n        if n % a == 0:\n            return (n//a, 0)\n        else:\n            return None\n    elif a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    else:\n        if a > b:\n            a, b = b, a\n            n = -n\n        d = a\n        e = b\n        if n % d == 0:\n            x = 0\n            y = n//d\n        else:\n            x = 1\n            y = n % d\n        while x!= 0 and y!= 0 and d!= 1 and e!= 1:\n            q = n // d - x * a // d\n            r = n % d - y * b // d\n            if r >= 0:\n                x, y = y, r\n                d, e = e, a % b\n            else:\n                x, y = x, n % d\n                a, b = b, a\n                d, e = e, d\n        if d == 1:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function takes in three parameters:\n    a, b, n (integers)\n\n    It returns a tuple containing two integers x and y, if a*x + b*y equals n.\n    If no solution exists, it returns None.\n    \"\"\"\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n//b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n//a, 0)\n        else:\n            return None\n    else:\n        x = n // a\n        y = n % b\n        if x * a + y * b == n:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0 and n!= 0:\n        return None  # no solution for ax + by = n when a = b = 0 and n!= 0\n    elif a == 0:\n        x = n // b\n        y = 0\n    elif b == 0:\n        x = 0\n        y = n // a\n    else:\n        d = a*b - n\n        if d < 0:\n            return None  # no solution for ax + by = n when d < 0\n        elif d == 0:\n            x = n // a\n            y = n // b\n        else:\n            x = n // d\n            y = (n - x*a) // b\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n+1):\n        if n % x == 0 and n // x <= b:\n            if a*x + b*(n//x) == n:\n                return (x, n//x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if x*a + y*b == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return list(set(list1) - set(list2))"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the elements not present in list2\n    result_list = []\n    \n    # Iterate over the elements of list1\n    for element in list1:\n        # Check if the element is not present in list2\n        if element not in list2:\n            # If the element is not present, append it to the result list\n            result_list.append(element)\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with all elements from list2 removed from list1.\n    \"\"\"\n    return list(set(list1)-set(list2))"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from the first list\n    that are present in the second list.\n    \n    Parameters:\n    list1: list, the list from which elements will be removed\n    list2: list, the list containing elements to be removed\n    \n    Returns:\n    new_list: list, the new list after removing elements from list1\n    \n    '''\n    new_list = [elem for elem in list1 if elem not in list2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all the elements of list2 which are present in list1.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list2.remove(element)\n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and returns a new list after removing all the elements present in the second list from the first list.\n    '''\n    # creating an empty list to store the elements of the first list after removing those present in the second list.\n    result_list = []\n    \n    # iterating over the elements of the first list\n    for i in list1:\n        # checking if the current element is not present in the second list.\n        if i not in list2:\n            # if the current element is not present in the second list, then adding it to the result list.\n            result_list.append(i)\n    \n    return result_list"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 that are present in list2.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input and removes all elements from the first list that are present in the second list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return (n*(n-1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of a series of numbers starting from 0 to n//2.\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of the series n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of a series given the value of n.\n\n    Args:\n    n (int): The upper limit of the sum series.\n    \n    Returns:\n    int: The sum of the series from i=0 to n // 2.\n    \"\"\"\n\n    sum = 0\n    \n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l**2 * tan(pi / s)) / s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return \"Number of sides must be at least 3.\"\n    else:\n        return 0.5 * l * s * tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of sides.\n\n    Args:\n    s (int): The number of sides of the polygon.\n    l (float): The length of each side of the polygon.\n\n    Returns:\n    float: The area of the polygon.\n    '''\n    # Calculate the apothem of the polygon\n    ap = l / (2 * tan(pi / s))\n    # Calculate the area of the polygon using the formula A = (n/2) * (s^2 / (4 * tan^2(pi/n)))\n    A = (s / 2) * (l ** 2 / (4 * tan(pi / s) ** 2))\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        return \"Invalid input\"\n    else:\n        return (0.5 * l * s) / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * l / tan(pi / s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    return 0.5 * s * apothem * apothem\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem using the cosine rule\n    apothem = l/2 / tan(pi/s)\n    \n    # Calculate the area using the formula for the area of a regular polygon\n    area = (s*(l/2)**2) / (tan(pi/s) * apothem)\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n // i:\n                div_sum += n // i\n    return div_sum\n\nn = int(input(\"Enter a number: \"))\nprint(div_sum(n))"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum1 = i \n            break \n    for i in range(1, n+1):\n        if n % i == 0:\n            sum2 = n // i \n    if sum1 == sum2:\n        return True \n    else:\n        return False "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1): \n        if n%i == 0: \n            sum1 = sum1 + i \n    for i in range(1, n+1): \n        if n%i == 0: \n            sum2 = sum2 + i \n    return sum1 == sum2 "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum_div += i \n            if n//i!= i: \n                sum_div += n//i \n    return sum_div == n "
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the sum of divisors of two integers are equal, False otherwise.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            div_sum += i \n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if i!= n // i:\n                divisors.add(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Get all divisors of n\n    divs = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.add(i)\n            if n // i!= i:\n                divs.add(n//i)\n    # Check if any two pairs of divisors have the same sum\n    for i in range(len(divs)):\n        for j in range(i+1, len(divs)):\n            if sum(divs[i], divs[j]) == n:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n\nprint(div_sum(12)) # Output: 28"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\na = int(input(\"Enter first integer: \"))\nb = int(input(\"Enter second integer: \"))\nif div_sum(a) == div_sum(b):\n    print(\"The sum of the divisors of\", a, \"and\", b, \"are the same.\")\nelse:\n    print(\"The sum of the divisors of\", a, \"and\", b, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_sum += i\n            if n//i!= i:\n                divisor_sum += n//i\n    return divisor_sum"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = [0] * 26  # Create a list of 26 zeros to store the count of each character in the English alphabet\n    \n    # Convert both the string and the English alphabet to lowercase to make it case insensitive\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = alphabet.lower()\n    \n    # Loop through each character in the string and increment the count for the corresponding character in the English alphabet\n    for char in str1:\n        if char in alphabet:\n            index = alphabet.index(char)\n            char_count[index] += 1\n    \n    # Count the number of characters that occur at the same position in the string as in the English alphabet\n    same_position_count = 0\n    for count in char_count:\n        if count > 0:\n            same_position_count += 1\n    \n    return same_position_count\n"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the counts of characters at each position\n    char_counts = {}\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character is a letter in the alphabet, add it to the dictionary with a count of 1\n        if str1[i].isalpha():\n            if i in char_counts:\n                char_counts[i] += 1\n            else:\n                char_counts[i] = 1\n\n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the character counts\n    char_counts = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # Convert the character to its position in the alphabet\n            position = ord(char) - ord('a') + 1\n            # Check if the position is already in the dictionary\n            if position in char_counts:\n                # Increment the count for the character at the current position\n                char_counts[position] += 1\n            else:\n                # Add the character and its count to the dictionary\n                char_counts[position] = 1\n    \n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize an empty dictionary to store character counts\n    char_count = {}\n\n    # Loop through each character in the string and increment its count in the dictionary\n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            char_count[i] = char_count.get(i, 0) + 1\n\n    # Print the dictionary\n    print(char_count)"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create an empty dictionary to store the character counts\n    char_counts = {}\n    # Loop through each character in the string\n    for i, char in enumerate(str1):\n        # If the character is an alphabetic character (case insensitive)\n        if char.isalpha():\n            # Convert the character to lowercase\n            char = char.lower()\n            # If the character is in the English alphabet\n            if 'a' <= char <= 'z':\n                # If the character is not already in the dictionary, set the count to 1\n                if char not in char_counts:\n                    char_counts[char] = 1\n                # If the character is already in the dictionary, increment the count by 1\n                else:\n                    char_counts[char] += 1\n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the count of characters in each position\n    position_count = {}\n    for i in range(len(str1)):\n        # convert the character to lowercase to ignore case sensitivity\n        char = str1[i].lower()\n        # check if the character is a letter and if it is in the English alphabet\n        if char.isalpha() and char.isascii():\n            # check if the character is already in the dictionary\n            if char in position_count:\n                position_count[char] += 1\n            else:\n                position_count[char] = 1\n    # count the number of characters in the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        char = str1[i].lower()\n        if char.isalpha() and char.isascii():\n            if char in position_count and position_count[char] == i:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * 26\n    \n    # Convert both the strings to lowercase\n    str1 = str1.lower()\n    alpha = alpha.lower()\n    \n    # Iterate over each character in the string and increment the count\n    for i in range(len(str1)):\n        if str1[i] in alpha:\n            index = alpha.index(str1[i])\n            count[index] += 1\n            \n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = [0]*26\n    for i in str1:\n        if i.isalpha():\n            count[ord(i.lower())-97] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = [0] * len(alphabet)\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count[alphabet.index(str1[i].lower())] += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        A (list of int): the input list of integers\n\n    Returns:\n        int: the number of pairs of integers in the list that xor to an even number\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i * 2\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(len(bin(n-1))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** ((n - 1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    \n    while (power < n):\n        power *= 2\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters:\n    a: a list of numbers\n    x: a number to be counted in the list\n\n    It returns the number of occurrences of x in a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n\n    Parameters:\n    a (list): A list of integers.\n    x (int): An integer to be searched in the list.\n\n    Returns:\n    int: The number of occurrences of x in a.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list `a` and a number `x`.\n    It returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return 'Invalid range.'\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes a list and two indices m and n as inputs and returns the sum of numbers in the range [m, n] from the list.\n    \"\"\"\n    # initialize the sum variable to zero\n    total_sum = 0\n    \n    # loop through the list and add the numbers in the range [m, n] to the total_sum variable\n    for i in range(m, n+1):\n        total_sum += list1[i]\n        \n    # return the total_sum\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes in a list and two indices m and n and returns the sum of the numbers in the list that fall within the range [m, n]\n    \"\"\"\n    sum_list = sum(lst[m:n+1])\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list as input and two indices m and n (0-based) that specify a range within the list.\n    It returns the sum of all numbers in the range specified.\n    \"\"\"\n    if m < 0 or n >= len(lst):\n        return \"Invalid range\"\n    else:\n        return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Return the sum of the elements of lst between indices m and n (inclusive).\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    \n    # iterate over the range of indices from m to n\n    for i in range(m, n+1):\n        # add the element at index i to the sum\n        sum += list1[i]\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes a list and two indices, m and n, and returns the sum of all the numbers in the list within the range [m, n].\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum to zero\n    total_sum = 0\n    # iterate through the range of indices specified by m and n\n    for i in range(m, n+1):\n        # add the value at the current index to the total sum\n        total_sum += list1[i]\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of one side of a regular pentagon as input and returns the perimeter of the pentagon.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of one side of a pentagon as input and returns the perimeter of the pentagon.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of one side of the pentagon: \"))\n\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = float(input(\"Enter the length of one side of the pentagon: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times'std' occurs in the string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        index = s.find('std', start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if s.find('std')!= -1:\n        count += 1\n    while s.find('std')!= -1:\n        s = s[s.find('std')+3:]\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as an argument and checks if all the elements in the tuple have the same data type or not.\n    '''\n    # Initialize a variable to store the data type of the first element in the tuple\n    dtype = type(test_tuple[0])\n\n    # Loop through the elements in the tuple and compare their data type with the first element's data type\n    for i in test_tuple:\n        if type(i)!= dtype:\n            return False\n\n    # If all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as an argument and returns True if all the elements in the tuple have the same data type, False otherwise.\n    '''\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    if n == 0:\n        return False\n    count = 1\n    i = 1\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return False\n        i += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if x == arr[0]:\n        return True\n    if x == arr[n-1]:\n        return True\n    count = 1\n    i = 1\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        elif arr[i]!= x:\n            count -= 1\n        if count == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if arr[n//2] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > arr[-1]:\n        return False\n    count = 1\n    i = 1\n    while i < n and arr[i] == arr[i-1]:\n        count += 1\n        i += 1\n    if count > n//2:\n        return True\n    if arr[i] == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x <= arr[n//2]:\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n            if count > n//2:\n                return True\n        return False\n    else:\n        count = 0\n        for i in range(n-1, -1, -1):\n            if arr[i] == x:\n                count += 1\n            if count > n//2:\n                return True\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        count = 1\n        for i in range(1, n):\n            if arr[i] == x:\n                count += 1\n        if count > n//2:\n            return True\n        else:\n            return False\n    elif arr[n-1] == x:\n        count = 1\n        for i in range(n-2, -1, -1):\n            if arr[i] == x:\n                count += 1\n        if count > n//2:\n            return True\n        else:\n            return False\n    else:\n        left = 0\n        right = n-1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                count = 1\n                i = mid + 1\n                while i < n and arr[i] == x:\n                    count += 1\n                    i += 1\n                if count > n//2:\n                    return True\n                left = i\n            else:\n                right = mid\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if there are more than n/2 elements, x must be the majority element\n    if n > len(arr) // 2:\n        return True\n\n    # initialize variables for counting the occurrences of x\n    count = 0\n    i = 0\n\n    # loop through the array and count the occurrences of x\n    while i < n and arr[i] <= x:\n        if arr[i] == x:\n            count += 1\n        i += 1\n\n    # if the count is greater than n/2, x is the majority element\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[0] == x:\n        count = 1\n    elif arr[n-1] == x:\n        count = 1\n    else:\n        count = 0\n    \n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n        else:\n            count -= 1\n            if count < n//2:\n                return False\n    \n    return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    # Loop through each bit of the number and count the number of set bits\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function returns the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an argument and removes the characters which have odd index values.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters with odd index values of a given string.\n    \"\"\"\n    # convert the string to a list of characters\n    char_list = list(str)\n    \n    # loop through the list and remove the characters with odd index values\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list[i] = ''\n    \n    # join the list of characters back into a string\n    new_str = ''.join(char_list)\n    \n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    This function takes a string as input and returns a new string with the characters that have odd index values removed.\n    \"\"\"\n    new_s = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_s += s[i]\n    return new_s"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove characters with odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Loop through the list and remove characters with odd index values\n    for i in range(1, len(char_list), 2):\n        char_list.pop(i)\n\n    # Convert the list back to a string and return it\n    return \"\".join(char_list)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as arguments and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function returns the minimum of three numbers a, b, and c.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Args:\n        a: First number\n        b: Second number\n        c: Third number\n\n    Returns:\n        The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Returns the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters - n (an integer), l (an integer), and r (an integer).\n    n is the number whose bits we need to check.\n    l is the lower limit of the range of bits we want to check.\n    r is the upper limit of the range of bits we want to check.\n    The function returns True if all the bits in the range [l, r] are set in n, else False.\n    '''\n    # Convert n to binary string\n    binary_string = bin(n)[2:]\n\n    # Check if l is negative\n    if l < 0:\n        # Convert l to its equivalent positive value\n        l = 32 + l\n\n    # Check if r is negative\n    if r < 0:\n        # Convert r to its equivalent positive value\n        r = 32 + r\n\n    # Check if r is greater than 31\n    if r > 31:\n        # If r is greater than 31, set r to 31\n        r = 31\n\n    # Check if all bits in range [l, r] are set in n\n    for i in range(l, r+1):\n        if binary_string[i] == '0':\n            # If the bit at position i is not set, return False\n            return False\n\n    # If all bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    mask = ((1 << r) - 1) ^ ((1 << l) - 1)\n    return (n & mask) == mask"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1<<r) - (1<<l)\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l:\n        return False\n    mask = ((1 << r) - 1) ^ ((1 << l) - 1)\n    return ((n & mask) == 0)"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << r) - (1 << l)  # creates a mask with all bits set to 1 from l to r\n    return (n & mask) == mask  # checks if all bits set in the range are unset\n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the input values to binary strings\n    n_binary = bin(n)[2:]\n    l_binary = bin(l)[2:]\n    r_binary = bin(r)[2:]\n    \n    # Pad the binary strings with zeros to ensure they have the same length\n    n_binary = n_binary.zfill(r - l + 1)\n    l_binary = l_binary.zfill(r - l + 1)\n    r_binary = r_binary.zfill(r - l + 1)\n    \n    # Iterate over each bit in the range and check if it's set or not\n    for i in range(l, r + 1):\n        if (n_binary[i - l] == '1'):\n            return False\n        \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << r) - (1 << l)  # creating a mask to unset all bits in the given range\n    return ((n & mask) == 0)  # checking if the masked bits are all unset or not"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function returns True if all the bits in the range [l, r] are set,\n    else returns False.\n    \"\"\"\n    # To check if all the bits are set in the range [l, r], we need to\n    # check if the corresponding bits in the binary representation of n\n    # are set or not.\n    # We can use bitwise AND operator (&) to check if a bit is set or not.\n\n    # First, we need to get the binary representation of n.\n    bin_n = bin(n)[2:]  # Remove the '0b' prefix.\n\n    # Then, we can check if all the bits in the range [l, r] are set or not.\n    for i in range(l, r+1):\n        if bin_n[i] == '0':\n            return False\n\n    # If we reach here, all the bits are set in the range [l, r].\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n        n: An integer denoting the integer whose bits are to be checked.\n        l: An integer denoting the left end of the range of the bits.\n        r: An integer denoting the right end of the range of the bits.\n\n    Returns:\n        A boolean value denoting whether all the bits are unset in the given range or not.\n        True if all the bits are unset, False otherwise.\n    \"\"\"\n\n    # Find the number of bits set in the given range using bitwise AND operation.\n    bits_set = (n >> l) & ((2 ** (r - l + 1)) - 1)\n\n    # Check if all the bits are set or not.\n    if bits_set == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r > n:\n        r = n\n    if l < 0:\n        l = 0\n    mask = ((1 << r) - 1) - ((1 << l) - 1) # mask to unset bits in the given range\n    if mask == 0: # all bits are set in the given range\n        return False\n    elif mask == (1 << n) - 1: # all bits are unset in the given range\n        return True\n    else: # some bits are set in the given range\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    negatives = sorted([x for x in arr[:n] if x < 0])\n    positives = sorted([x for x in arr[:n] if x >= 0])\n    arr[:n] = negatives + positives\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Iterate over the first n elements of the array and append them to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Sort the negative and positive lists in descending and ascending order respectively\n    negative.sort(reverse=True)\n    positive.sort()\n\n    # Re-arrange the elements of the array by concatenating the two sorted lists\n    arr[:n] = negative + positive\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two empty lists to store negative and positive elements\n    negatives = []\n    positives = []\n\n    # Iterate through the array and separate negative and positive elements into two separate lists\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    # Re-arrange the array by appending the negative and positive elements in the order they were separated\n    arr = []\n    for i in range(len(negatives)):\n        arr.append(negatives[i])\n    for i in range(len(positives)):\n        arr.append(positives[i])\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the index of the first positive element\n    first_positive_index = 0\n    for i in range(n):\n        if arr[i] >= 0:\n            first_positive_index = i\n            break\n    \n    # Move all negative elements to the beginning of the array\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[first_positive_index + j] = arr[first_positive_index + j], arr[i]\n            j += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    arr[:n] = negatives + positives\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # Find the indices of the first n negative and positive elements\n    neg_indices = [i for i in range(n) if arr[i] < 0]\n    pos_indices = [i for i in range(n) if arr[i] >= 0]\n    \n    # Re-arrange the array so that negative elements appear before positive ones\n    for i in range(n // 2):\n        j = i + n // 2\n        arr[neg_indices[i]], arr[pos_indices[j]] = arr[pos_indices[j]], arr[neg_indices[i]]"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    arr = neg_arr + pos_arr\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # separate negative and positive elements into two arrays\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # re-arrange the first n elements of the array\n    sorted_arr = neg_arr + pos_arr\n    for i in range(n):\n        arr[i] = sorted_arr[i]\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    \n    # Separating negative and positive elements into two different lists\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n            \n    # Sorting the negative and positive elements separately\n    negatives = sorted(negatives)\n    positives = sorted(positives)\n    \n    # Rearranging the array\n    arr[:n] = negatives + positives\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    zero = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        elif arr[i] > 0:\n            pos.append(arr[i])\n        else:\n            zero.append(arr[i])\n    arr = neg + zero + pos\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function replaces blank spaces in a given string with a specified character.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"char\")"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n\n    Args:\n    str1 (str): the input string\n    char (str): the character to replace blank spaces with\n\n    Returns:\n    str: the modified string\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character and returns the modified string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes a string and a character as input, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list of the n largest elements in lst.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    '''\n    This function takes a list and an integer n as input and returns a list containing the n largest numbers from the list.\n    '''\n    # Create a max heap of size n and initialize it with the first n elements of the list.\n    max_heap = lst[:n]\n    heapq.heapify(max_heap)\n\n    # Iterate over the remaining elements of the list and compare each element with the root of the heap.\n    # If the element is larger than the root, remove the root and add the element to the heap.\n    for i in range(n, len(lst)):\n        if lst[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, lst[i])\n\n    # Return the heap in a list.\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    \"\"\"\n    This function takes a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = lst[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(lst)):\n        if lst[i] > heap[0]:\n            heapq.heapreplace(heap, lst[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for num in list1[n:]:\n        if num > heap[0]:\n            heapq.heappushpop(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    heap = lst[:n]\n    heapq.heapify(heap)\n\n    for i in lst[n:]:\n        if i > heap[0]:\n            heapq.heappushpop(heap, i)\n\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes a list and an integer n as inputs and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, -list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef largest_n_numbers(lst, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(lst):\n        return lst\n    else:\n        largest_nums = []\n        heapq.heapify(lst)\n        for i in range(n):\n            largest_nums.append(heapq.heappop(lst))\n        return largest_nums"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder and returns the lateral surface area of the cylinder.\n    '''\n    lateral_surface_area = 2 * 3.14 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder with radius r and height h.\n    '''\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r**2"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius of a cylinder and its height as input and returns the lateral surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14159 * r * h + 2 * 3.14159 * r ** 2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns its lateral surface area.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * (r + h)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateral_area = 2 * 3.14159 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    This function takes a side length of a cube and returns its volume.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Returns the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n\nprint(volume_cube(3)) # output: 27\nprint(volume_cube(5)) # output: 125"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes an integer n as input and returns the number with even bits set to 1.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through all the bits of the input number\n    for i in range(32):\n        # Check if the bit is even\n        if n & (1 << i):\n            # If it is even, set the corresponding bit in the result to 1\n            result |= (1 << i)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    This function takes an integer as input and sets all even bits of the number to 1.\n    '''\n    mask = 0b1010101010101010\n    return (n & ~mask) | ((n & mask) << 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number.\n    \"\"\"\n    even_bits = 0b11111110\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as an argument and returns the number with all even bits set to 1.\n    \"\"\"\n    while n % 2 == 0:\n        n = n | (n - 2)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as input and returns a number with all even bits set to 1.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit in the result to 1\n            result |= (1 << i)\n            \n    # Return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number to 1.\n    \"\"\"\n    even_bits_set = n | (n >> 1)\n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    # first, get the binary representation of the number\n    bin_str = bin(n)[2:]\n    # initialize a new binary string to store the result\n    new_bin_str = ''\n    # iterate through each bit in the binary string\n    for bit in bin_str:\n        # if the bit is even, add 1 to the new binary string\n        if int(bit) % 2 == 0:\n            new_bin_str += '1'\n        # if the bit is odd, add 0 to the new binary string\n        else:\n            new_bin_str += '0'\n    # convert the new binary string back to an integer\n    new_num = int(new_bin_str, 2)\n    # return the new number\n    return new_num"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number to 1.\n    \"\"\"\n    mask = 0x5555555555555555 # binary 1010101010101010101010101010101010101010101010101010101010101010\n    return n & ~mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n    \"\"\"\n    # XOR with 0xAAAAAAAA to set all even bits\n    n = n ^ 0xAAAAAAAA\n    \n    # XOR with 0x55555555 to clear all odd bits\n    n = n ^ 0x55555555\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and sets all even bits of the number to 1.\n    '''\n    even_bit_set = 0\n    # Loop through all even bits of the number and set them to 1\n    for i in range(0, 32, 2):\n        if (n >> i) & 1:\n            even_bit_set |= (1 << i)\n    return even_bit_set"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    # Use the Counter class from the collections module to count the occurrences of each tuple\n    counts = Counter(test_list)\n    \n    # Convert the Counter object to a regular dictionary and return it\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as an input and returns the number of non-empty substrings in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function returns the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function takes a string as an argument and returns the number of non-empty substrings of that string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if len(string[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables to store the number of sequences and the previous element\n    count = 0\n    prev = 0\n    \n    # Loop through all possible values for the first element of the sequence\n    for i in range(2, m+1):\n        # Initialize a variable to store the number of possible sequences for the current first element\n        num_sequences = 0\n        \n        # Loop through all possible values for the second element of the sequence\n        for j in range(i, m+1):\n            # Check if the second element is greater than or equal to twice the previous element but less than or equal to m\n            if j >= prev*2 and j <= m:\n                # If the second element is valid, add 1 to the number of sequences for the current first element\n                num_sequences += 1\n            # If the second element is greater than or equal to m, break out of the loop\n            else:\n                break\n        \n        # Add the number of possible sequences for the current first element to the total number of sequences\n        count += num_sequences\n        \n        # Update the previous element for the next sequence\n        prev = i\n    \n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of sequences to 0\n    num_sequences = 0\n    \n    # Initialize the list of previous elements to empty\n    prev_elements = []\n    \n    # Loop over all possible starting points (i.e., the first element in each sequence)\n    for i in range(1, m+1):\n        # Check if the first element is valid\n        if i >= 2*prev_elements[-1]:\n            # Check if the sequence has length n\n            if len(prev_elements) == n-1:\n                # Add 1 to the total number of sequences\n                num_sequences += 1\n            # Otherwise, extend the sequence by appending the next valid element\n            else:\n                # Loop over all possible elements for the next position in the sequence\n                for j in range(i+1, m+1):\n                    # Check if the element is valid\n                    if j >= 2*prev_elements[-1]:\n                        # Append the element to the list of previous elements\n                        prev_elements.append(j)\n                        # If the sequence has length n, add 1 to the total number of sequences\n                        if len(prev_elements) == n-1:\n                            num_sequences += 1\n                        # Otherwise, continue looping\n                        else:\n                            continue\n                        # After the first valid element is found, break out of the loop\n                        break\n    \n    # Return the total number of sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but\n    less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(m // 2, m):\n            count += get_total_number_of_sequences(i, n - 1)\n        return count\n"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    if n == 1: # base case\n        return m\n    \n    count = 0 # counter to keep track of number of sequences\n    \n    for i in range(m//2, m+1): # iterate over all possible first elements in sequence\n        count += get_total_number_of_sequences(i, n-1) # add number of sequences with first element i and remaining length n-1\n    \n    return count # return total number of sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        prev = 1\n        curr = 1\n        count = 0\n        for i in range(2, n+1):\n            prev = curr\n            curr = prev * 2 + 1\n            if curr > m:\n                curr = m\n            count += m - curr + 1\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(1, m+1):\n            total += get_total_number_of_sequences(m, n-1)\n            if i >= 2*n:\n                break\n        return total\n\nprint(get_total_number_of_sequences(5, 3)) # Output: 7"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        total_sequences = 0\n        for i in range(m, 2*m+1):\n            total_sequences += get_total_number_of_sequences(i, n-1)\n        return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less\n    than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    elif n == 2:\n        return (m*(m+1))//2\n    else:\n        total = 0\n        for i in range(1, m):\n            total += get_total_number_of_sequences(m, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        num_seqs = 0\n        for i in range(2*m//(2*n)-1, m//2+1):\n            num_seqs += get_total_number_of_sequences(i, n-1)\n        return num_seqs"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(1, m):\n            count += get_total_number_of_sequences(i, n-1)\n        return count"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError('List 1 must have at least as many elements as list 2.')\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if both lists have at least one element\n    if len(list1) > 0 and len(list2) > 0:\n        # Get the last element of the first list\n        last_element = list1[-1]\n        # Replace the last element with the elements of the second list\n        list1[-1:] = list2\n        # Add the last element back to the list\n        list1.append(last_element)\n        # Return the modified list\n        return list1\n    else:\n        # If either list is empty, return None\n        return None"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of the given number\n    root = math.sqrt(N)\n\n    # round up the square root to the nearest integer\n    root = math.ceil(root)\n\n    # calculate the next perfect square\n    next_square = root**2\n\n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Round up to the nearest integer\n    sqrt_N = math.ceil(sqrt_N)\n\n    # Calculate the next perfect square\n    next_square = sqrt_N**2\n\n    # Return the result\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # Check if the square root is an integer\n    if sqrt_N.is_integer():\n        # Return the next integer greater than sqrt_N\n        return int(sqrt_N) + 1\n    \n    # If the square root is not an integer, round it up to the nearest integer\n    else:\n        # Calculate the next integer greater than sqrt_N\n        next_sqrt = math.ceil(sqrt_N)\n        # Calculate the next perfect square by multiplying next_sqrt by next_sqrt\n        next_square = next_sqrt * next_sqrt\n        \n        # Return the next perfect square\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_square = math.ceil(math.sqrt(N))**2\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N == int(sqrt_N):\n        return int(sqrt_N) + 1\n    else:\n        return int(math.ceil(sqrt_N))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of N and round it up to the nearest integer\n    sqrt_N = math.ceil(math.sqrt(N))\n    # Find the next perfect square greater than sqrt_N\n    result = sqrt_N**2\n    return result"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.sqrt(N) == int(math.sqrt(N)):\n        return (int(math.sqrt(N))+1)**2\n    else:\n        return int(math.sqrt(N))+1\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # function to find the next perfect square greater than a given number.\n    root = math.sqrt(N)  \n    return int(math.ceil(root))**2  \n  \n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return \"Invalid input\"\n    else: \n        next_square = int(math.sqrt(N))+1\n        while True: \n            if int(math.sqrt(next_square))**2 == next_square: \n                return next_square\n            next_square += 1"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    root = root + 1\n    return root**2"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    \n    # find the maximum sum of increasing subsequence\n    inc_sum = [0] * n\n    inc_sum[0] = arr[0]\n    for i in range(1, n):\n        inc_sum[i] = max(inc_sum[i-1] + arr[i], arr[i])\n    \n    # find the maximum sum of decreasing subsequence\n    dec_sum = [0] * n\n    dec_sum[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec_sum[i] = max(dec_sum[i+1] + arr[i], arr[i])\n    \n    # find the maximum sum of bitonic subsequence\n    bit_sum = 0\n    for i in range(n):\n        bit_sum = max(bit_sum, inc_sum[i] + dec_sum[i])\n    \n    return bit_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # initialize the maximum sum of a bitonic subsequence to the first element of the array\n    max_sum = arr[0]\n    # initialize the indices of the minimum and maximum elements of the bitonic subsequence\n    min_idx, max_idx = 0, n-1\n    \n    # loop through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        # if the current element is greater than the previous element,\n        # it means that the bitonic subsequence continues to increase\n        if arr[i] > arr[i-1]:\n            # update the maximum sum if the current element adds to it\n            if arr[i] + arr[max_idx] > arr[min_idx] + arr[i-1]:\n                max_sum = arr[i] + arr[max_idx]\n        # if the current element is less than the previous element,\n        # it means that the bitonic subsequence continues to decrease\n        elif arr[i] < arr[i-1]:\n            # update the minimum and maximum indices if the current element is smaller than the minimum element\n            if arr[i] < arr[min_idx]:\n                min_idx = i\n            # update the maximum sum if the current element adds to it\n            if arr[i] + arr[max_idx] > arr[min_idx] + arr[max_idx-1]:\n                max_sum = arr[i] + arr[max_idx]\n        # if the current element is equal to the previous element,\n        # it means that the bitonic subsequence ends here\n        else:\n            # update the minimum and maximum indices if the current element is smaller than the minimum element\n            if arr[i] < arr[min_idx]:\n                min_idx = i\n            # update the maximum sum if the current element adds to it\n            if arr[i] + arr[max_idx] > arr[min_idx] + arr[max_idx-1]:\n                max_sum = arr[i] + arr[max_idx]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n    \n    # Initialize the variables\n    max_sum = float('-inf')\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    \n    # Find the increasing sum\n    for i in range(1, n):\n        inc_sum[i] = inc_sum[i-1] + arr[i]\n        max_sum = max(max_sum, inc_sum[i])\n        \n    # Find the decreasing sum\n    for i in range(n-2, -1, -1):\n        dec_sum[i] = dec_sum[i+1] + arr[i]\n        max_sum = max(max_sum, dec_sum[i])\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables\n    max_sum = 0\n    prev_max = 0\n    dp = [0] * n\n\n    # Iterate over the array\n    for i in range(n):\n        # Update dp[i] if it can be incremented without exceeding the previous maximum\n        if i > 0 and arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n        # Update the maximum sum if the current element is greater than the previous maximum\n        if dp[i] > prev_max:\n            prev_max = dp[i]\n            max_sum = dp[i]\n        # If the current element is less than the previous maximum, add it to the maximum sum\n        elif dp[i] < prev_max:\n            max_sum += dp[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Create a table to store the maximum sum of bitonic subsequence ending at each index.\n    # Initialize the first row with the first element of the array.\n    table = [[0 for j in range(n)] for i in range(n)]\n    table[0][0] = arr[0]\n    # Fill the table in a bottom-up manner.\n    for i in range(1, n):\n        for j in range(i+1):\n            # If the previous element is less than the current element, then the maximum sum of the bitonic subsequence ending at i is the sum of the previous element and the current element.\n            if j == 0 or arr[j] < arr[i]:\n                table[i][j] = arr[i] + table[i-1][j]\n            # If the previous element is greater than the current element, then the maximum sum of the bitonic subsequence ending at i is the sum of the current element and the maximum sum of the bitonic subsequence ending at the previous index.\n            else:\n                table[i][j] = arr[i] + table[i-1][j-1]\n    # The maximum sum of a bitonic subsequence is stored in the last row of the table.\n    max_sum = max(table[i][-1] for i in range(n))\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Create two arrays to store the increasing and decreasing subsequences separately\n    inc_seq = [0] * n\n    dec_seq = [0] * n\n    # Initialize the first element of both arrays\n    inc_seq[0] = arr[0]\n    dec_seq[0] = arr[0]\n    # Fill in the arrays using dynamic programming\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_seq[i] = arr[i] + max(inc_seq[i-1], dec_seq[i-1])\n            dec_seq[i] = dec_seq[i-1]\n        else:\n            dec_seq[i] = arr[i] + max(inc_seq[i-1], dec_seq[i-1])\n            inc_seq[i] = inc_seq[i-1]\n    # The maximum sum of a bitonic subsequence is the maximum of the two arrays\n    return max(inc_seq[-1], dec_seq[-1])"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]  # dp[i][j] = maximum sum of a bitonic subsequence from i to j\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for s in range(2, n + 1):\n        for i in range(n - s + 1):\n            j = i + s - 1\n            dp[i][j] = arr[i]\n            for k in range(i + 1, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Create a max_sum array with all elements as 0\n    max_sum = [0] * n\n\n    # Initialize first element as the maximum sum\n    max_sum[0] = arr[0]\n\n    # Fill the max_sum array for the given array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_sum[i] = max_sum[i-1] + arr[i]\n        else:\n            max_sum[i] = arr[i]\n\n    # Find the maximum sum of the bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        if max_sum[i] > max_bitonic_sum:\n            max_bitonic_sum = max_sum[i]\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    \n    # Initialize base cases\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    # Fill the dp table\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], arr[i] + dp[i-2])\n    \n    return dp[n-1]"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Parameters:\n    number (float): The number for which to compute the square root.\n\n    Returns:\n    float: The square root of the number.\n    \"\"\"\n    # Set the initial guess to the square root of the number\n    guess = number ** 0.5\n\n    # Iterate until the difference between the guess and the actual square root is less than 0.001\n    while abs(guess ** 2 - number) > 0.001:\n        # Calculate the next guess as the average of the guess and the number divided by the guess\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize guess to be equal to the number\n    guess = number\n    \n    # Keep iterating until the difference between the guess and the actual square root is less than 0.001\n    while abs(guess*guess - number) > 0.001:\n        # Update the guess by averaging the guess and the number divided by the guess\n        guess = (guess + number/guess) / 2\n    \n    # Return the computed square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while True:\n        y = (x + (number/x))/2\n        if abs(x - y) < 0.0001:\n            break\n        x = y\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    # Set an initial estimate of the square root to 1\n    estimate = 1\n    \n    # Set a tolerance level for the difference between successive estimates\n    tolerance = 0.0001\n    \n    # Keep iterating until the difference between successive estimates is less than the tolerance level\n    while abs(estimate*estimate - number) > tolerance:\n        # Update the estimate using the Babylonian method\n        estimate = (estimate + number/estimate) / 2\n        \n    return estimate"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a number using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number/guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while abs(approx**2 - number) > 0.0001:\n        approx = (approx + number / approx) / 2\n    return approx\n"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.001:\n            break\n        guess = new_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        guess = number/2\n        while abs(guess*guess - number) > 0.00001:\n            guess = (guess + number/guess)/2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the Babylonian method.\n    '''\n    # initialize the guess to the square root of the number\n    guess = number ** 0.5\n    # initialize the precision to 0.0001\n    precision = 0.0001\n    # initialize the loop counter to 0\n    count = 0\n    \n    while abs(guess ** 2 - number) > precision:\n        # update the guess using the Babylonian method\n        guess = (guess + number / guess) / 2\n        # increment the loop counter\n        count += 1\n    \n    return guess, count"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if str[i] == str[j] and l == 2:\n                # All substrings of length 2 are palindromes\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i+len-1\n            if str[i] == str[j] and len == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store lengths of palindromic subsequences\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for substrings of length 2\n    start = 0\n    for end in range(n):\n        if str[start] == str[end]:\n            table[start][end] = 2\n        else:\n            table[start][end] = 1\n        start += 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for start in range(n-k+1):\n            end = start + k - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store lengths of palindromic subsequences\n    dp = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n): \n        dp[i][i] = 1\n  \n    # Check for substrings of length greater than 1.\n    # There are two cases for every character in the string.\n    # 1. The current character is not part of the palindrome.\n    # In this case, the value is same as the previous substring.\n    # 2. The current character is part of the palindrome.\n    # In this case, the value is one more than the minimum of the values \n    # obtained by removing the last character of the palindrome and the last but one character of the palindrome. \n    for k in range(2, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) \n  \n    return dp[0][n-1] \n  \n"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n): \n        dp[i][i] = 1\n\n    for l in range(2, n+1): \n        for i in range(n-l+1): \n            j = i+l-1\n            if str[i] == str[j] and l == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store results of subproblems \n    L = [[0 for i in range(n)] for j in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(2, n): \n        for i in range(n-k): \n            j = i + k \n            if str[i] == str[j] and k == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    # Return length of Longest palindromic subsequence \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store lengths of LPS\n    table = [[0 for x in range(n)] for y in range(n)]\n    # all substrings of length 1 are palindromes\n    for i in range(n):\n        table[i][i] = 1\n    # check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n    # check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n    # return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = 0\n    for i in range(1, n):\n        h += 1/i\n    return h"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = sum([1/i for i in range(1,n+1)])\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert both arrays to sets to get the intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Get the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection back to a list and return\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n\n    # loop through the first array and check if each element is in the second array\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to find the intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets and convert it back to a list\n    return list(set_nums1.intersection(set_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from the first array\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection\n    intersection = []\n    # Iterate over the second array\n    for num in array_nums2:\n        # Check if the number is in the set\n        if num in set_nums1:\n            # Add the number to the intersection list\n            intersection.append(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from the first array for faster lookups\n    set_nums1 = set(array_nums1)\n    # create an empty list to store the intersection\n    intersection = []\n    # iterate over the second array and check if each element is in the set\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return set_nums1.intersection(set_nums2)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    common_nums = set_nums1.intersection(set_nums2)\n    return list(common_nums)"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the number of times the element occurs in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    \"\"\"\n    This function takes in a tuple and an element and returns the number of times the element appears in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as inputs and returns a new list with the element inserted before each element in the original list.\n    \"\"\"\n    return [elem] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in the list and return the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, ele):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(ele)\n        result.append(i)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function inserts an element before each element in a given list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n\n    Args:\n    lst: A list of elements.\n    element: The element to insert before each element in the list.\n\n    Returns:\n    The list with the inserted element before each element.\n\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element as input and returns a new list in which the element is inserted before each element in the original list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result[1:]  # Return the list without the first element (which is the element we inserted)"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"Polar coordinates of {num}: {polar}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of tuples,\n    where each tuple contains the magnitude and the angle of each complex number in polar form.\n    '''\n    polar_nums = []\n    for num in numbers:\n        polar_num = cmath.polar(num)\n        polar_nums.append(polar_num)\n    return polar_nums"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        print(\"Polar coordinates of {}: {}\".format(number, cmath.polar(number)))"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n\n    Args:\n        numbers (list): A list of complex numbers\n\n    Returns:\n        list: A list of tuples containing the radius and angle of each complex number.\n    \"\"\"\n\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        polar_coords.append((r, phi))\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    results = []\n    for number in numbers:\n        polar = cmath.polar(number)\n        results.append((polar[0], polar[1]))\n    return results"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list): A list of complex numbers in the format [a+bi, a-bi, c+di, c-di,...]\n\n    Returns:\n    list: A list of tuples containing the polar coordinates of each complex number in the format [(magnitude, angle), (magnitude, angle),...]\n    \"\"\"\n    result = []\n    for num in numbers:\n        mag = abs(num)\n        arg = cmath.phase(num)\n        result.append((mag, arg))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(f\"{num} = {polar[0]} + {polar[1]}j\")"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [combination for combination in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    # Initialize variables\n    count = 0\n    i = 2\n    \n    # Loop until i is less than or equal to n\n    while i <= n:\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # If i is prime, increment count\n        if is_prime:\n            count += 1\n        \n        # Increment i\n        i += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, otherwise False.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    # Count the number of prime numbers less than n\n    count = 0\n    for p in range(2, n):\n        if prime[p]:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple that contains the maximum value for each index.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    else:\n        max_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_tup += (test_tup1[i],)\n            else:\n                max_tup += (test_tup2[i],)\n        return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if sum(test_tup1) > sum(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for tup in [test_tup1, test_tup2]:\n        if sum(tup) > sum(max_tup):\n            max_tup = tup\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # Create a new tuple with the maximum value for each position\n        result_tup = tuple(max(t1, t2) for t1, t2 in zip(test_tup1, test_tup2))\n    else:\n        print(\"Error: both tuples must have the same length.\")\n        result_tup = None\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup2[0] > test_tup1[0]:\n        max_tup = test_tup2\n    else:\n        max_tup = test_tup1 if test_tup1[1] > test_tup2[1] else test_tup2\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    i = 20\n    while count < n:\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime and i not in primes:\n            primes.append(i)\n            count += 1\n        i += 1\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i-1) and is_prime(i+1):\n            count += 1\n        i += 1\n    return i-2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    if n == 3:\n        return 7\n    if n == 4:\n        return 11\n    if n == 5:\n        return 13\n    if n == 6:\n        return 17\n    if n == 7:\n        return 19\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n\n    # Use the following recursive function to find the nth prime number\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_nth_prime(n):\n        if n == 1:\n            return 2\n        i = 2\n        count = 0\n        while count < n:\n            if is_prime(i):\n                count += 1\n            if count == n:\n                return i\n            i += 1\n\n    nth_prime = find_nth_prime(n)\n\n    # Check if the nth prime number is a newman\u2013shanks\u2013williams prime number\n    i = 1\n    j = nth_prime - 1\n    k = 1\n    while k <= int(j ** 0.5):\n        i += 2\n        j -= 2\n        k += 1\n    if j == 0:\n        return nth_prime\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i-1) and is_prime(i+1):\n            count += 1\n        i += 1\n    return i-2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 3\n    while count < n:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    i = 1\n    count = 0\n    prime = 2\n\n    # Iterate until count reaches n\n    while count < n:\n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, int(prime**0.5)+1):\n            if prime % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            if count == n:\n                return prime\n        i += 1\n        prime = i * (i-1) + 1\n"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 2\n    else:\n        count = 1\n        while True:\n            p = 2 * count**2 + 1\n            for i in range(5):\n                if is_prime(p):\n                    count += 1\n                    p = 2 * count**2 + 1\n                    if count == n:\n                        return p\n                else:\n                    p += 2 * count + 1\n            count += 1\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    if n == 1:\n        return 2\n\n    if n == 2:\n        return 3\n\n    if n == 3:\n        return 5\n\n    if n == 4:\n        return 7\n\n    if n == 5:\n        return 11\n\n    if n == 6:\n        return 13\n\n    if n == 7:\n        return 17\n\n    if n == 8:\n        return 19\n\n    if n == 9:\n        return 23\n\n    if n == 10:\n        return 29\n\n    if n == 11:\n        return 31\n\n    if n == 12:\n        return 37\n\n    if n == 13:\n        return 41\n\n    if n == 14:\n        return 43\n\n    if n == 15:\n        return 47\n\n    if n == 16:\n        return 53\n\n    if n == 17:\n        return 59\n\n    if n == 18:\n        return 61\n\n    if n == 19:\n        return 67\n\n    if n == 20:\n        return 71\n\n    if n == 21:\n        return 73\n\n    if n == 22:\n        return 79\n\n    if n == 23:\n        return 83\n\n    if n == 24:\n        return 89\n\n    if n == 25:\n        return 97\n\n    if n == 26:\n        return 101\n\n    if n == 27:\n        return 103\n\n    if n == 28:\n        return 107\n\n    if n == 29:\n        return 109\n\n    if n == 30:\n        return 113\n\n    if n == 31:\n        return 127\n\n    if n == 32:\n        return 131\n\n    if n == 33:\n        return 137\n\n    if n == 34:\n        return 139\n\n    if n == 35:\n        return 149\n\n    if n == 36:\n        return 151\n\n    if n == 37:\n        return 157\n\n    if n == 38:\n        return 163\n\n    if n == 39:\n        return 167\n\n    if n == 40:\n        return 173\n\n    if n == 41:\n        return 179\n\n    if n == 42:\n        return 181\n\n    if n == 43:\n        return 191\n\n    if n == 44:\n        return 193\n\n    if n == 45:\n        return 197\n\n    if n == 46:\n        return 199\n\n    if n == 47:\n        return 211\n\n    if n == 48:\n        return 223\n\n    if n == 49:\n        return 227\n\n    if n == 50:\n        return 229\n\n    if n == 51:\n        return 233\n\n    if n == 52:\n        return 239\n\n    if n == 53:\n        return 241\n\n    if n == 54:\n        return 251\n\n    if n == 55:\n        return 257\n\n    if n == 56:\n        return 263\n\n    if n == 57:\n        return 269\n\n    if n == 58:\n        return 271\n\n    if n == 59:\n        return 277\n\n    if n == 60:\n        return 281\n\n    if n == 61:\n        return 283\n\n    if n == 62:\n        return 293\n\n    if n == 63:\n        return 307\n\n    if n == 64:\n        return 311\n\n    if n == 65:\n        return 313\n\n    if n == 66:\n        return 317\n\n    if n == 67:\n        return 331\n\n    if n == 68:\n        return 337\n\n    if n == 69:\n        return 347\n\n    if n == 70:\n        return 349\n\n    if n == 71:\n        return 353\n\n    if n == 72:\n        return 359\n\n    if n == 73"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p1, p2 = 2, 3\n        count = 2\n        while count < n:\n            p3 = p1 + p2\n            if all(p3 % i!= 0 for i in range(2, int(p3**0.5) + 1)):\n                p1, p2 = p2, p3\n                count += 1\n        return p3"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    count = 0\n    i = 3\n    while count < n:\n        if is_prime(i - 2) and is_prime(i - 1) and is_prime(i + 1):\n            count += 1\n            if count == n:\n                return i\n        i += 2"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples should be of equal length\"\n    else:\n        result = ()\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] / test_tup2[i],)\n        return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]/test_tup2[i],)\n    return result"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"Error: Length of list cannot be less than L\")\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"List is too small to be split into two parts of length L\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: Length of list is less than L\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n\n    # Check if L is a valid input\n    if L <= 0 or L > len(list1):\n        print(\"Invalid input: L should be a positive integer less than or equal to the length of the list.\")\n        return\n\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) <= L:\n        raise ValueError(\"Length of list1 should be greater than L\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= len(list1):\n        return (list1[:L], list1[L:])\n    else:\n        return \"L should be less than or equal to the length of the given list\""
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    return (list1[:L], list2)"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    d_age = h_age / 7\n\n    # Return the dog's age in dog's years\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age / 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_dog = h_age * 7\n    return years_dog"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in human years\n    dog_years = h_age / 7\n    \n    # Return dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age / 7)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age / 7\n    print(f\"Your dog is {d_age} years old in dog's years.\")\n"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_area = 6 * l ** 2\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n\nprint(lateralsurface_cube(5))"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l**2\n    return lateralsurface"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**2\n    return total_sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum of squares to 0\n    sum_of_squares = 0\n\n    # loop through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # add the square of the current number to the sum of squares\n        sum_of_squares += i**2\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Loop through first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    # Return the final sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum of the squares to zero\n    square_sum = 0\n    # loop over the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # add the square of the current number to the sum\n        square_sum += i**2\n    return square_sum"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    while count <= n:\n        print('*' * count)\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    while True:\n        if count * 26**(n-1) > n:\n            return count * 26**(n-1)\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the counter and result\n    count = 1\n    result = 1\n    \n    # loop until we reach then'th star number\n    while count < n:\n        # add the previous result to the current result\n        result += result\n        # increment the counter\n        count += 1\n    \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        print(num)\n        num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    count = 0\n    current_num = 1\n    \n    # loop until we reach then'th star number\n    while count < n:\n        # count the number of stars in the current number\n        num_stars = 0\n        while current_num % 2 == 0:\n            num_stars += 1\n            current_num //= 2\n        while current_num % 3 == 0:\n            num_stars += 1\n            current_num //= 3\n        while current_num % 5 == 0:\n            num_stars += 1\n            current_num //= 5\n        \n        # if we have found then'th star number, return it\n        if num_stars == n:\n            return current_num\n        \n        # otherwise, increment the count and try the next number\n        count += 1\n        current_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        prev_num = 1\n        current_num = 2\n        for i in range(2, n):\n            next_num = prev_num + current_num\n            prev_num = current_num\n            current_num = next_num\n        return current_num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the number to 1\n    num = 1\n\n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # Multiply the number by 2 for each iteration\n        num *= 2\n\n    # Return the final number\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    This function finds then'th star number.\n    '''\n\n    # Initialize variables\n    count = 0\n    star = 1\n\n    # Loop through the numbers from 1 to infinity\n    while True:\n\n        # Check if the current number is a star number\n        if is_star_number(star):\n\n            # Increment the count if the current number is then'th star number\n            count += 1\n\n            # If the count is equal to n, return the current number as then'th star number\n            if count == n:\n                return star\n\n        # Increment the current star number by 1\n        star += 1\n\ndef is_star_number(num):\n    '''\n    This function checks if a number is a star number.\n    '''\n\n    # Initialize variables\n    digit_sum = 0\n    digits = [int(d) for d in str(num)]\n\n    # Check if the number has only 2 digits\n    if len(digits) == 2:\n\n        # Check if the digits add up to 5\n        if digits[0] + digits[1] == 5:\n            return True\n\n    # Check if the number has only 3 digits\n    if len(digits) == 3:\n\n        # Check if the first digit is 5\n        if digits[0] == 5:\n\n            # Check if the digits from the second digit to the end add up to 10\n            for i in range(1, len(digits)):\n                digit_sum += digits[i]\n                if digit_sum > 10:\n                    return False\n            if digit_sum == 10:\n                return True\n\n    # If none of the above conditions are met, the number is not a star number\n    return False"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    result = 0\n    for i in range(0, len(arr), 2):  # iterate over even positions\n        if arr[i] % 2 == 0:  # check if the number at the current position is even\n            result += arr[i]  # add it to the result if it is\n    return result"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize variables\n    even_sum = 0\n    even_index_sum = 0\n    # Loop over the list\n    for i in range(0, len(arr), 2):\n        # Check if the element is even\n        if arr[i] % 2 == 0:\n            # Add it to the even sum\n            even_sum += arr[i]\n            # Check if it's at an even index\n            if i % 2 == 0:\n                # Add it to the even index sum\n                even_index_sum += arr[i]\n    # Return the sum of even numbers at even positions\n    return even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            result += arr[i]\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(2, n*2, 2):\n        # Raise the even number to the fifth power and add to the sum\n        sum += i**5\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += (2*i+1)**5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2 == 0:\n            sum += count ** 5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count**5\n        count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**5\n        count += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through first n even numbers\n    for i in range(2, n*2, 2):\n        # raise even number to the fifth power and add to sum\n        sum += i**5\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 5\n            count += 1\n        else:\n            count += 1\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        sum += math.comb(n, 2*i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"Sum of even index binomial coefficients is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through even indices from 0 to n/2\n    for i in range(0, n//2+1):\n        # Calculate binomial coefficient\n        binomial_coeff = math.comb(n, i)\n        # Check if index is even\n        if i % 2 == 0:\n            # Add even binomial coefficient to sum\n            sum += binomial_coeff\n            \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through all even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Use the formula for binomial coefficients to calculate the coefficient\n        coeff = math.factorial(n)//(math.factorial(i)*math.factorial(n-i))\n        \n        # Add the coefficient to the sum variable\n        sum += coeff\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns the sum of even index binomial coefficients for n.\n    \"\"\"\n    return sum([math.comb(n, 2*i) for i in range(n//2+1)])\n"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(2, n+1, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize the sum of even binomial coefficients to 0\n    even_sum = 0\n    # iterate through all even indices from 0 to n/2\n    for i in range(0, n//2+1, 2):\n        # calculate the binomial coefficient using the math.comb() function\n        binomial_coeff = math.comb(n, i)\n        # add the binomial coefficient to the sum of even binomial coefficients\n        even_sum += binomial_coeff\n    # return the sum of even binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    s = 0\n    for i in range(0, n, 2):\n        s += math.comb(n, i)\n    return s"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \"\"\"\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (3.14 * r ** 2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    This function takes in a dictionary and an integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Returns a new dictionary with entries whose value is greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[test_tup.index(i)+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            return count\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    This function finds the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        num = 10*n*(n-1) + n\n        return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the count of decagonal numbers found\n    count = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # compute the nth decagonal number\n        decagonal = 10*i**2 - 9*i + 1\n        \n        # check if the current number is a decagonal number\n        if decagonal == n:\n            count += 1\n    \n    # return True if the nth decagonal number was found\n    return count == 1"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 10 * n * n + 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    decagonal_count = 1\n\n    while decagonal_count <= n:\n        num += 1\n        decagonal_count += 1\n        if num % 10 == 0:\n            decagonal_count -= 1\n\n    return num - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 10 * n * (n - 1) + 1\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if the nth decagonal number is found, else False.\n    '''\n    count = 0\n    decagonal = 0\n    while count < n:\n        decagonal += 1\n        decagonal_sum = sum(int(digit) for digit in str(decagonal))\n        if decagonal_sum % 10 == 0:\n            count += 1\n    return count == n\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while True:\n        decagonal += i\n        if decagonal == n:\n            return True\n        if decagonal > n:\n            return False\n        i += 1"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth decagonal number.\n    \"\"\"\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        count += sum(range(1, num+1))\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number,\n    else False. A decagonal number is a number that can be formed by concatenating the decimal\n    representation of the numbers 1 to 10 with itself. For example, the 10th decagonal number\n    is 1111111111.\n    '''\n    # Convert n to string and reverse it\n    n_str = str(n)[::-1]\n    # Check if the string is divisible by 10\n    if int(n_str) % 10!= 0:\n        return False\n    # Check if the sum of digits in n_str is divisible by 10\n    n_sum = sum(int(i) for i in n_str)\n    if n_sum % 10!= 0:\n        return False\n    return True"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 10 * n * (n - 1) + 1\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    is_found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            is_found = True\n            index = i\n            break\n    return (is_found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an input and returns True if all the elements of the list are unique, otherwise, it returns False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, False otherwise.\n    \"\"\"\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique,\n    otherwise it returns False.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function returns True if all elements of the given list are unique, otherwise False.\n    \"\"\"\n    # Using a set to store unique elements\n    unique_set = set(test_list)\n    # Checking if the length of the set is same as the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements of the list\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # If the length of the set is equal to the length of the list, then all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n    :param test_list: The list to be checked.\n    :return: True if all the elements of the list are unique, False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise and return the result.\n\n    :param nums1: the first list\n    :param nums2: the second list\n    :return: a new list with the element-wise differences\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    :param nums1: list of numbers to subtract from\n    :param nums2: list of numbers to subtract\n    :return: list of element-wise differences\n    \"\"\"\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    \"\"\"\n    This function takes two lists of integers as input and subtracts them element-wise.\n\n    :param nums1: The first list of integers.\n    :param nums2: The second list of integers.\n    :return: A list of integers containing the element-wise subtraction of the two input lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Length of input lists should be same.\")\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of equal length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and subtracts each element of the first list with the corresponding element of the second list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns the element-wise subtraction of the two lists as a new list.\n    \"\"\"\n    # initialize an empty list to store the element-wise subtraction of the two lists\n    subtraction_list = []\n    \n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # iterate over the elements of the two lists and subtract them element-wise\n    for i in range(len(nums1)):\n        subtraction_list.append(nums1[i] - nums2[i])\n    \n    return subtraction_list"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    for digit in digits:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # convert n to string to iterate over its characters\n    n = str(n)\n\n    # iterate over each digit in n\n    for digit in n:\n        # check if the frequency of digit in n is less than or equal to the digit itself\n        if n.count(digit) > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    # Iterate over each digit and check if its frequency is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    # convert the integer to string\n    n_str = str(n)\n    # create a dictionary to store frequency of each digit\n    freq = {}\n    # loop through each digit in the string\n    for digit in n_str:\n        # if the digit is already present in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # otherwise, add the digit to the dictionary with frequency 1\n        else:\n            freq[digit] = 1\n    # loop through each key-value pair in the dictionary\n    for digit, freq in freq.items():\n        # if the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq >= int(digit):\n            return False\n    # if all digits have frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    freq = [0] * 10  # creating an array to store frequency of each digit\n    while n:\n        freq[n % 10] += 1  # incrementing the frequency of the rightmost digit\n        n //= 10  # removing the rightmost digit\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True\n\nn = int(input(\"Enter an integer: \"))\n\nif validate(n):\n    print(\"Valid\")\nelse:\n    print(\"Invalid\")"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    # Convert the integer to a string and append each digit to the digits list\n    for digit in str(n):\n        digits.append(int(digit))\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    max_freq = max(digits)\n    for d in digits:\n        if d > max_freq:\n            return False\n        elif d == max_freq:\n            max_freq -= 1\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string to iterate through its digits\n    num = str(n)\n\n    # Loop through each digit in the integer and check its frequency\n    for digit in num:\n        # Convert the digit back to an integer and check if its frequency is less than or equal to the digit itself\n        if num.count(digit) > int(digit):\n            return False\n\n    # If all the digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to string\n    n = str(n)\n    \n    # Initialize an empty dictionary\n    freq = {}\n    \n    # Loop through each digit in the string\n    for digit in n:\n        \n        # If the digit is not in the dictionary, add it with a value of 1\n        if digit not in freq:\n            freq[digit] = 1\n            \n        # If the digit is in the dictionary, increment its value by 1\n        else:\n            freq[digit] += 1\n    \n    # Loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n        \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == element for elem in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(lst)) == 1 and elem in lst:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element as inputs and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    \n    return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    This function takes in a list and an element as input and checks whether all the items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes a list and an element as input and checks whether all the items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element as input and returns True if all items in the list are equal to the given element, else False.\n    \"\"\"\n    return all(i == elem for i in lst)"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a\\bb{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\bb{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function finds the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    \n    Args:\n    a: list of integers, input array\n    n: integer, length of input array\n    k: integer, number of times to repeat the input array\n    \n    Returns:\n    largest_sum: integer, maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    \n    '''\n\n    # Create a new array of length n*k and copy the input array k times\n    a_new = a * k\n    n_new = n * k\n\n    # Find the largest sum of a contiguous subarray using Kadane's algorithm\n    largest_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n_new):\n        curr_sum += a_new[i]\n        largest_sum = max(largest_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if k <= 1:\n        return max_sub_array_sum(a, n)\n    else:\n        max_sum = float('-inf')\n        for i in range(k):\n            new_a = a * k\n            new_n = n * k\n            sub_max_sum = max_sub_array_sum(new_a, new_n)\n            if sub_max_sum > max_sum:\n                max_sum = sub_max_sum\n        return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a modified array by repeating the given array k times\n    modified_a = a * k\n\n    # Initialize variables for max_sum and current_sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array and keep track of the current sum and max sum\n    for i in range(n*k):\n        current_sum += modified_a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the max sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the total sum of the array\n    total_sum = sum(a)\n    \n    # Calculate the maximum sum of a contiguous subarray that can be formed\n    max_sum = total_sum\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Calculate the current sum of the array\n        current_sum = sum(a)\n        \n        # Update the maximum sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array `a` of size `n` and an integer `k`, and returns the maximum sum of a contiguous subarray that can be formed by repeating the given array `k` times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k - 1:\n            current_sum -= a[i - (k - 1)]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # calculate the sum of the original array\n    original_sum = sum(a)\n\n    # repeat the original array k times and calculate the sum of each new array\n    new_array_sum = [sum(a * k) for a in a]\n\n    # calculate the maximum sum of the contiguous array in the modified array\n    max_subarray_sum = max(new_array_sum)\n\n    # subtract the sum of the original array to get the maximum sum of the contiguous array in the original array\n    max_subarray_sum -= original_sum\n\n    return max_subarray_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, n):\n        current_sum += a[i]\n        \n        if i % k == 0:\n            current_sum -= a[i - k]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array of size k times the length of the given array\n    b = []\n    for i in range(k):\n        b.extend(a)\n        \n    # Calculate the maximum subarray sum of the modified array\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(b)):\n        curr_sum += b[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the given array k times\n    a = a * k\n    \n    # Sort the modified array in non-decreasing order\n    a.sort()\n    \n    # Initialize variables for maximum sum and current sum\n    max_sum = sum(a[:n])\n    curr_sum = max_sum\n    \n    # Iterate through the sorted array from index n to 1\n    for i in range(n-1, 0, -1):\n        # Add the current element to the current sum and update the maximum sum if necessary\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = a + a # double the array \n    k = k - 1 # decrement k since we are taking the sum of repeated arrays \n    curr_sum = sum(a[0:k+1]) # initialize current sum with the first k elements of the doubled array\n    max_sum = curr_sum # initialize max_sum with current sum \n    for i in range(k+1, 2*n): # iterate through the remaining elements of the doubled array \n        curr_sum += a[i] - a[i-k] # add the current element to the current sum and subtract the previous element to get the sum of the previous k elements \n        max_sum = max(max_sum, curr_sum) # update max_sum if the current sum is greater than the previous max_sum \n    return max_sum # return the max_sum "
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize the sum of squares to zero\n    sum_of_squares = 0\n\n    # Loop through first n even natural numbers and add their squares to the sum\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += (2*i + 1)**2\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop from 0 to n-1\n    for i in range(n):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Add the square of the current number to the sum\n            sum += i**2\n    \n    # Return the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    i = 0\n    sum_of_squares = 0\n    while i < n:\n        sum_of_squares += (2*i + 1)**2\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    \n    # iterate from 0 to n-1\n    for i in range(0, n):\n        # check if i is even\n        if i % 2 == 0:\n            # add i^2 to sum\n            sum += i**2\n            \n    # return sum\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list with the maximum length in the list.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(lst):\n    max_len = 0\n    max_lst = []\n    for lst_elem in lst:\n        if len(lst_elem) > max_len:\n            max_lst = [lst_elem]\n            max_len = len(lst_elem)\n        elif len(lst_elem) == max_len:\n            max_lst.append(lst_elem)\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    max_lst = []\n    for lst in list1:\n        if len(lst) == max_len:\n            max_lst.append(lst)\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) == max(len(lst) for lst in list1):\n            max_lengths.append(lst)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(max(list1, key=len))\n    result = []\n    for lst in list1:\n        if len(lst) == max_len:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns a list with the maximum length.\n    \"\"\"\n    max_len = 0\n    result = []\n\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return (k * k) + (k * count_no_of_ways(n-1, k-1))"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    This function finds out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Args:\n    n (int): number of posts in the fence\n    k (int): number of colors available for painting the fence\n\n    Returns:\n    int: number of ways to paint the fence\n\n    \"\"\"\n\n    # Base cases\n    if n == 1:\n        return k\n    elif n == 2:\n        return k - 1\n\n    # Initialize dp list with 0's\n    dp = [0] * k\n\n    # Fill the dp list\n    for i in range(k):\n        dp[i] = (count_no_of_ways(n-1, k) * (k - 1)) + (count_no_of_ways(n-2, k) * (k - 2))\n\n    return dp[-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for i in range(k)] for j in range(n)]\n\n    for i in range(n):\n        dp[i][0] = 1\n\n    for j in range(1, k):\n        dp[0][j] = 1\n\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k)] for i in range(n)]\n\n    # base case\n    dp[0][0] = 1\n    dp[0][1] = k-1\n\n    # fill the DP table\n    for i in range(1, n):\n        for j in range(k):\n            for l in range(j+1):\n                dp[i][j] += dp[i-1][l]\n\n    # return the final answer\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    if n < 2:\n        return k\n    if k == 1:\n        return 1\n    \n    dp = [0]*(k+1)\n    dp[0] = 1\n    dp[1] = k\n    \n    for i in range(2, n+1):\n        for j in range(k):\n            dp[j+1] += dp[j]\n            \n    return dp[-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count of ways to 0\n    count = 0\n    \n    # Base case\n    if n == 1:\n        count = k\n        \n    # Recursive case\n    else:\n        # Iterate over all possible colors for the first post\n        for i in range(1, k+1):\n            # Recursively count the number of ways for the remaining posts\n            count += count_no_of_ways(n-1, k)\n            \n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * k\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n):\n        temp = [0] * k\n        for j in range(k):\n            temp[j] = dp[j]\n            if j > 0:\n                temp[j] += dp[j-1]\n            if j < k-1:\n                temp[j] += dp[j+1]\n        dp = temp\n\n    return dp[0]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0]*k for i in range(n)]\n    \n    # Initialize the first row\n    for j in range(k):\n        dp[0][j] = 1\n        \n    # Fill the remaining rows\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-2][j-1]\n    \n    # Return the last element of the last row\n    return dp[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, k+1):\n        dp[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + (j-1) * dp[i-2][j-1]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    if n == 1: \n        return k\n    if k == 1: \n        return 1\n    if k == 2: \n        return 2\n    dp = [0] * (k+1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1): \n        for j in range(1, k+1): \n            dp[j] = (dp[j-1] + dp[j]) % 1000000007\n    return dp[k]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns the quotient of the two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers, n and m, and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    This function takes two arguments, n and m, and returns the quotient of n and m, rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of n and m, rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n / m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero is not allowed.\"\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers, n and m, as input and returns the quotient of the two rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square of the hypotenuse\n    c_squared = w**2 + h**2\n    \n    # Calculate the square of the other side\n    a_squared = c_squared - h**2\n    \n    # Calculate the length of the other side\n    a = math.sqrt(a_squared)\n    \n    return a"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function finds the third side of a right angled triangle\n    given the lengths of the two shorter sides.\n    '''\n    s = (w**2 + h**2)**0.5 # Calculate the semi-perimeter\n    A = w*h # Calculate the area of the rectangle\n    c = 2*A/w # Calculate the third side\n    b = s - a # Calculate the length of the middle side\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square of the missing side\n    missing_side_squared = (w**2 + h**2) / 2\n\n    # Use the Pythagorean theorem to find the missing side\n    missing_side = math.sqrt(missing_side_squared)\n\n    return missing_side"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the length of the first and second sides of a right angled triangle as arguments\n    and returns the length of the third side.\n    '''\n    if w**2 + h**2 > h**2 + w**2:\n        return math.sqrt(w**2 + h**2)\n    else:\n        return math.sqrt(h**2 + w**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    if w**2 + h**2 == 0:\n        return \"Triangle cannot exist.\"\n    else:\n        c = math.sqrt(w**2 + h**2)\n        return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the missing side\n    s = math.sqrt(w**2 + h**2)\n    # Return the third side\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the width and height of a right angled triangle and returns the third side of the triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): A list of heterogeneous values.\n\n    Returns:\n        The maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as an input and returns the maximum value in the list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    \n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(lst):\n    '''\n    This function returns the maximum value in a list of heterogeneous values.\n    '''\n    if not lst:\n        return None\n    \n    max_val = lst[0]\n    \n    for val in lst[1:]:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(lst):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value in it.\n    '''\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(lst):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    \n    # loop through all numbers from 1 to the given number\n    for i in range(1, number+1):\n        # check if the number is a divisor of the given number\n        if number % i == 0:\n            # add the divisor to the sum of divisors\n            sum_div += i\n            \n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as an input and returns the sum of all its divisors.\n    \"\"\"\n    sum_div = 0  # initializing the sum to zero\n    for i in range(1, number+1):\n        if number % i == 0:  # checking if i is a divisor of number\n            sum_div += i  # adding i to the sum if it is a divisor\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_inv_count(arr):\n    \"\"\"\n    This function returns the number of inversions in an array.\n    \"\"\"\n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n                inv_count += (len(left_half) - i)\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    global inv_count\n    inv_count = 0\n    merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as an input and returns the number of inversions in the array.\n    '''\n    n = len(arr) \n    inv_count = 0\n    \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n                inv_count += len(left_half) - i\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_inv_count(arr):\n    inv_count = 0\n    merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is defined as a pair of indices (i, j) where i < j and arr[i] > arr[j].\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    An inversion is defined as a pair of elements in the array that are in the wrong order relative to each other.\n    '''\n    n = len(arr)\n    # Base case\n    if n == 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Recursively count the inversions in each half\n    left_inv = get_Inv_Count(left)\n    right_inv = get_Inv_Count(right)\n    \n    # Merge the two halves and count the number of inversions in the merged array\n    merged = []\n    left_idx, right_idx = 0, 0\n    for i in range(n):\n        if left_idx < mid and (right_idx >= mid or left[left_idx] <= right[right_idx]):\n            merged.append(left[left_idx])\n            left_idx += 1\n        else:\n            merged.append(right[right_idx])\n            right_idx += 1\n    \n    merged_inv = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                merged_inv += 1\n    \n    return left_inv + right_inv + merged_inv"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    mid = len(arr) // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    left_inv_count = get_Inv_Count(left_arr)\n    right_inv_count = get_Inv_Count(right_arr)\n    cross_inv_count = 0\n\n    i = j = k = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            j += 1\n            cross_inv_count += len(left_arr[i:])\n            \n        k += 1\n\n    while i < len(left_arr):\n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n\n    return left_inv_count + right_inv_count + cross_inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(left, right):\n    \"\"\"\n    Helper function to merge two sorted arrays into one sorted array.\n    \"\"\"\n    i = 0\n    j = 0\n    result = []\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\n\ndef merge_sort(arr):\n    \"\"\"\n    Recursive function to sort an array using merge sort algorithm.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    Function to count the number of inversions in an array using merge sort algorithm.\n    \"\"\"\n    sorted_arr = merge_sort(arr)\n    inversions = 0\n\n    for i in range(len(sorted_arr) - 1):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inversions += j - i\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion is a pair of indices i and j such that i < j and arr[i] > arr[j]\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flattens a nested list structure.\n\n    Args:\n        list1: A nested list.\n\n    Returns:\n        A flattened list.\n    \"\"\"\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list and flattens it into a single list.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list structure as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes in a nested list and flattens it into a single list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for x, y in stdata:\n        freq[x] += y\n\n    # create a dictionary to store the prefix sum of elements\n    prefix_sum = defaultdict(int)\n    for x, y in stdata:\n        prefix_sum[x] += y\n\n    # iterate over the prefix sum dictionary and find the maximum aggregate\n    max_agg = 0\n    for x, y in prefix_sum.items():\n        if prefix_sum[x] > max_agg:\n            max_agg = prefix_sum[x]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for item, price in stdata:\n        freq_dict[item] += price\n    \n    # create a dictionary to store the aggregate of each item\n    agg_dict = defaultdict(int)\n    for item, price in stdata:\n        agg_dict[item] += price * freq_dict[item]\n    \n    # find the maximum aggregate\n    max_agg = 0\n    for item, price in stdata:\n        if agg_dict[item] > max_agg:\n            max_agg = agg_dict[item]\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n    \n    # Create a dictionary to store the frequency of each value in the list\n    freq = defaultdict(int)\n    for num, agg in stdata:\n        freq[num] += agg\n        \n    # Create a dictionary to store the maximum aggregate for each prefix sum\n    prefix_agg = defaultdict(int)\n    for num, agg in stdata:\n        prefix_agg[num] += agg * freq[num]\n        \n    # Find the maximum aggregate in the list\n    max_agg = 0\n    for i in range(len(stdata)):\n        num, agg = stdata[i]\n        prefix = sum(stdata[:i+1])\n        max_agg = max(max_agg, prefix_agg[prefix] + (num * agg))\n        \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    d = defaultdict(int)\n    for i in range(n):\n        d[stdata[i][0]] += stdata[i][1]\n    max_agg = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if d[stdata[i][0]] > d[stdata[j][0]]:\n                d[stdata[i][0]] -= stdata[j][1]\n                d[stdata[j][0]] += stdata[j][1]\n            else:\n                d[stdata[j][0]] -= stdata[i][1]\n                d[stdata[i][0]] += stdata[i][1]\n            max_agg = max(max_agg, sum(d.values()))\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each stock in the list.\n    stock_freq = defaultdict(int)\n    for stock, price in stdata:\n        stock_freq[stock] += 1\n\n    # Create a dictionary to store the maximum aggregate for each number of shares held.\n    max_aggregate = defaultdict(int)\n    for num_shares in range(1, len(stdata) + 1):\n        # Calculate the aggregate for each possible number of shares held.\n        for i in range(len(stdata) - num_shares + 1):\n            aggregate = sum(price for _, price in stdata[i:i+num_shares])\n            max_aggregate[num_shares] = max(max_aggregate[num_shares], aggregate)\n\n    # Find the maximum aggregate across all possible number of shares held.\n    max_aggregate_total = max(max_aggregate.values())\n\n    return max_aggregate_total"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for i in range(len(stdata)):\n        if i == 0:\n            max_agg[i] = stdata[i][0]\n        else:\n            max_agg[i] = max(max_agg[i-1] + stdata[i][0], stdata[i][1])\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a dictionary to store the frequency of each student's scores\n    freq = defaultdict(int)\n    for s, t in stdata:\n        freq[s] += t\n    \n    # Create a dictionary to store the maximum aggregate of each student's scores\n    max_agg = defaultdict(int)\n    for s, t in stdata:\n        max_agg[s] = max(max_agg[s], freq[s] - max_agg.get(s, 0) + t)\n    \n    # Return the maximum aggregate of all students\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each value in the list\n    freqs = defaultdict(int)\n    for x, y in stdata:\n        freqs[x] += y\n\n    # Initialize the maximum aggregate to 0\n    max_agg = 0\n\n    # Iterate over the list of tuples\n    for i in range(len(stdata)):\n        x, y = stdata[i]\n        # Calculate the aggregate excluding the current element\n        agg = sum(freqs[z] for z in stdata if z!= x)\n        # Update the maximum aggregate if necessary\n        max_agg = max(max_agg, agg)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for data in stdata:\n        for element in data:\n            freq[element] += 1\n    \n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            aggregate = 1\n            for k in range(len(stdata[i])):\n                if stdata[i][k] == stdata[j][k]:\n                    aggregate *= freq[stdata[i][k]]\n            max_agg = max(max_agg, aggregate)\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the frequency of each stock symbol\n    freq_dict = defaultdict(int)\n\n    # Loop through each tuple in the list\n    for stock, share, price in stdata:\n\n        # Increment the frequency of the stock symbol\n        freq_dict[stock] += share\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for key, value in freq_dict.items():\n        max_agg += value * max(price for stock, share, price in stdata if stock == key)\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bin_i = bin(i)[2:]\n        if len(bin_i) == n:\n            sum_first_n = sum(int(bin_i[j]) for j in range(n))\n            sum_last_n = sum(int(bin_i[-j-1]) for j in range(n))\n            if sum_first_n == sum_last_n:\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    # Initialize a list to store the count of binary sequences\n    count = [0] * (2 ** n)\n\n    # Loop through all binary sequences of length 2n\n    for i in range(2 ** n):\n        # Convert the binary sequence to a string\n        binary_seq = bin(i)[2:].zfill(2 * n)\n\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum(map(int, binary_seq[:n])) == sum(map(int, binary_seq[n:])):\n            count[i] = 1\n\n    # Return the total count of binary sequences\n    return sum(count)"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        # check if the first n bits are equal to the last n bits\n        if bin(i).count('1') == n:\n            # convert binary number to list of bits\n            bits = [int(d) for d in bin(i)[2:]]\n            # check if sum of first n bits is equal to sum of last n bits\n            if sum(bits[:n]) == sum(bits[-n:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if len(binary) < n:\n            binary = '0'*(n-len(binary)) + binary\n        if int(binary[:n], 2) == int(binary[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        binary = bin(i)[2:].zfill(n)\n        sum1 = sum(int(binary[:n]))\n        sum2 = sum(int(binary[-n:]))\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[0:n] == bits[n:2*n]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    # Initialize a list to store the count of all binary sequences\n    count = []\n    \n    # Loop over all possible values of the first n bits\n    for first_bits in range(2 ** n):\n        # Convert the first n bits to a binary string\n        first_seq = bin(first_bits)[2:].zfill(n)\n        \n        # Calculate the sum of the first n bits\n        first_sum = sum(int(digit) for digit in first_seq)\n        \n        # Loop over all possible values of the last n bits\n        for last_bits in range(2 ** n):\n            # Convert the last n bits to a binary string\n            last_seq = bin(last_bits)[2:].zfill(n)\n            \n            # Calculate the sum of the last n bits\n            last_sum = sum(int(digit) for digit in last_seq)\n            \n            # Check if the sums are equal and the length of the sequences is 2n\n            if first_sum == last_sum and len(first_seq) == 2 * n:\n                # Add 1 to the count of all binary sequences\n                count.append(1)\n    \n    # Return the total count of all binary sequences\n    return sum(count)"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # convert i to binary string and pad with zeros if necessary\n        binary_str = bin(i)[2:].zfill(n)\n        # check if sum of first n bits is equal to sum of last n bits\n        if int(binary_str[:n], 2) == int(binary_str[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n], 2) == int(binary[n:], 2):\n            count += 1\n    return count\n\nprint(count_binary_seq(3))  # Output: 5"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        bin_str = bin(i)[2:]\n        if len(bin_str) == 2*n and bin_str[:n] == bin_str[-n:]: \n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    This function finds the depth of a dictionary.\n\n    :param d: A dictionary\n    :param depth: A parameter to keep track of the depth.\n    :return: The depth of the dictionary.\n    '''\n    if not isinstance(d, dict):\n        return depth - 1\n    if not d:\n        return depth\n    max_depth = depth\n    for k, v in d.items():\n        if isinstance(v, dict):\n            max_depth = max(max_depth, dict_depth(v, depth+1))\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n    \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if not d:\n            return depth\n        return max([dict_depth(v, depth+1) for v in d.values()])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for v in d.values():\n        depth = dict_depth(v)\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                depth = max(depth, dict_depth(value) + 1)\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d, depth=1):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    :param d: A dictionary to find the depth of.\n    :param depth: An optional parameter to keep track of the current depth.\n    :return: An integer representing the depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return depth - 1\n    return max(dict_depth(value, depth + 1) for value in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize the starting and ending indices of the range to search in\n    start = 0\n    end = len(arr) - 1\n    \n    # Calculate the actual index after rotations\n    actual_index = index - rotations\n    \n    # Handle edge cases where actual_index is out of range\n    if actual_index < 0 or actual_index >= len(arr):\n        return None\n    \n    # Perform binary search on the range to find the element\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # Check if the actual index is at the midpoint\n        if arr[mid] == actual_index:\n            return mid\n        \n        # If the actual index is greater than the midpoint, search in the right half\n        elif arr[mid] < actual_index:\n            start = mid + 1\n            \n        # If the actual index is less than the midpoint, search in the left half\n        else:\n            end = mid - 1\n    \n    # If the function reaches here, the element was not found\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    arr = arr[rotations:] + arr[:rotations]\n    for i in range(ranges):\n        mid = i + (ranges//2)\n        if index >= arr[mid] and index < arr[mid+1]:\n            return arr[mid]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Calculate the number of times the array needs to be rotated\n    rotations = rotations % len(arr)\n    # Rotate the array\n    arr = arr[-rotations:] + arr[:-rotations]\n    # Get the range of indices that includes the index to find\n    start = index - ranges\n    end = index + ranges + 1\n    if start < 0:\n        start = 0\n    if end > len(arr):\n        end = len(arr)\n    # Find the element at the given index\n    element = arr[index]\n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    start = ranges[0]\n    end = ranges[1]\n\n    # Rotating the array based on the number of rotations\n    for i in range(rotations):\n        temp = arr[start]\n        for j in range(start, end):\n            arr[j] = arr[j+1]\n        arr[end] = temp\n\n    # Finding the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Rotate the array by specified number of times\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Get the range of the array that contains the index\n    start = index - ranges[0]\n    end = start + ranges[1]\n\n    # Get the element at the given index\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # Calculate the number of rotations to be done\n    total_rotations = (index + ranges) // n\n    # Calculate the new index after rotations\n    new_index = (index + ranges) % n\n    # Apply the rotations to the array\n    for i in range(rotations):\n        arr.insert(new_index, arr.pop(0))\n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Convert ranges and rotations to integers\n    ranges = int(ranges)\n    rotations = int(rotations)\n    # Calculate the total number of elements in the array\n    total_elements = ranges * len(arr)\n    # Calculate the total number of rotations\n    total_rotations = total_elements // ranges\n    # Calculate the final index after rotations\n    final_index = (index - 1 + rotations) % total_elements\n    # Calculate the actual element index\n    actual_index = final_index % ranges\n    # Return the actual element\n    return arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    This function takes in an array, range of elements to consider, number of rotations, and index of element to find.\n    It finds the element at given index after number of rotations and returns it.\n    '''\n\n    # Initialize variables\n    start = ranges[0]\n    end = ranges[1]\n    size = end - start + 1\n    \n    # Rotate the array if number of rotations is greater than zero\n    if rotations > 0:\n        arr = arr[rotations:]+arr[:rotations]\n\n    # Return the element at given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    '''\n    Finds the element at a given index after a certain number of rotations in a given range.\n    '''\n    # Find the middle index of the range\n    middle = (ranges[1] - ranges[0]) // 2 + ranges[0]\n    \n    # Calculate the number of rotations needed to reach the middle index\n    rotations_to_middle = index - middle\n    \n    # Calculate the number of rotations needed to reach the given index\n    total_rotations = rotations + rotations_to_middle\n    \n    # Find the index of the element after the total number of rotations\n    after_rotations_index = (index + total_rotations) % len(arr)\n    \n    # Return the element at the index after the total number of rotations\n    return arr[after_rotations_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    # find the index of the first element in the given range\n    start = sum(ranges[:index])\n    # find the number of elements in the given range\n    length = ranges[index]\n    # find the index of the element to find\n    k = index + rotations\n    # find the index of the element in the range\n    j = k % length\n    # calculate the index of the element in the original array\n    i = start + j\n    # return the element\n    return arr[i]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w+')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r\"p\\w\\w\")\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list starting with the letter 'p'.\n    \"\"\"\n\n    # initialize an empty list to store the words starting with 'p'\n    p_words = []\n\n    # iterate through the list of words\n    for word in words:\n        # check if the word starts with 'p'\n        if re.match(r'^p', word):\n            p_words.append(word)\n\n    # return the first two words from the list of 'p' words\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Create a regular expression that matches words starting with 'p'\n    pattern = re.compile(r'^p\\w*\\b')\n    \n    # Use list comprehension to select the two words that match the pattern\n    selected_words = [word for word in words if pattern.match(word)]\n    \n    # If there are less than two words starting with 'p', return None\n    if len(selected_words) < 2:\n        return None\n    \n    # Otherwise, return the two words\n    return selected_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p')\n    filtered_words = [word for word in words if pattern.match(word)]\n    if len(filtered_words) < 2:\n        return None\n    return filtered_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*')\n    matches = []\n    for word in words:\n        if pattern.match(word):\n            matches.append(word)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list starting with letter 'p'.\n    \"\"\"\n    pattern = r'\\bp\\w+\\b'\n    matches = []\n    for word in words:\n        if re.match(pattern, word):\n            matches.append(word)\n            if len(matches) == 2:\n                return matches\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match(r'^p', word):\n            result.append(word)\n    return result[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r\"p\\w+\"\n    result = [word for word in words if re.match(pattern, word)]\n    return result[:2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        k = index\n    prefix = a[:index+1]\n    for i in range(index+1, n):\n        if a[i] > prefix[-1]:\n            prefix.append(a[i])\n        else:\n            prefix[bisect_left(prefix, a[i]):] = [a[i]]\n    if k == index+1:\n        return max(prefix)\n    else:\n        prefix = prefix[:k-index]\n        for i in range(len(prefix)-1):\n            if prefix[i] < prefix[i+1]:\n                prefix[i+1] = prefix[i]\n        return sum(prefix)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > n:\n        return -1 # Invalid kth element\n\n    # Initialize the dp array\n    dp = [0]*n\n\n    # Initialize the first element of dp\n    if k >= 2:\n        dp[0] = a[1]\n    else:\n        dp[0] = a[0]\n\n    # Fill the dp array\n    for i in range(1, n):\n        if k == i+1:\n            dp[i] = a[k]\n        else:\n            dp[i] = max(dp[i-1], a[i])\n\n    # Find the maximum sum of increasing subsequence\n    max_sum = dp[index-1]\n    for i in range(index-2, -1, -1):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Create a list to store the maximum sum of increasing subsequence up to i and including k\n    prefix_sum = [0] * n\n\n    # Initialize the first element of prefix_sum as the value of 1st element of array\n    prefix_sum[0] = 1\n\n    # Initialize the maximum sum of increasing subsequence up to i and including k to 0\n    max_sum = 0\n\n    # Loop through the array\n    for i in range(1, n):\n\n        # Initialize the maximum sum of increasing subsequence up to i and including k to 0\n        max_sum_temp = 0\n\n        # Loop through the prefix sum from 0 to i-1\n        for j in range(i):\n\n            # If the current element of array is greater than or equal to k and is greater than or equal to the previous element of prefix sum\n            if a[j] < a[i] and prefix_sum[j] + 1 > max_sum_temp:\n\n                # Update the maximum sum of increasing subsequence up to i and including k\n                max_sum_temp = prefix_sum[j] + 1\n\n        # Update the maximum sum of increasing subsequence up to i and including k\n        prefix_sum[i] = max_sum_temp\n\n        # Update the maximum sum of increasing subsequence up to index and including k if the current element is greater than or equal to k\n        if a[i] >= k and i >= index:\n\n            # Add the maximum sum of increasing subsequence up to index and including k to the maximum sum\n            max_sum += max_sum_temp\n\n    # Return the maximum sum of increasing subsequence up to index and including k\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = 0\n    k_sum = 0\n    dp = [0] * n\n\n    # Traverse the array from right to left\n    for i in range(n - 1, -1, -1):\n        if i > index:\n            # If current element is less than the kth element, add it to the subsequence\n            if a[i] < a[k]:\n                dp[i] = dp[k] + a[i]\n\n                # If the sum of the subsequence including the current element is greater than the max sum found so far\n                if dp[i] > max_sum:\n                    max_sum = dp[i]\n                    k_sum = a[i]\n\n        else:\n            # If current element is greater than or equal to the kth element, add it to the subsequence\n            if a[i] >= a[k]:\n                dp[i] = dp[k] + a[i]\n\n                # If the sum of the subsequence including the current element is greater than the max sum found so far\n                if dp[i] > max_sum:\n                    max_sum = dp[i]\n                    k_sum = a[i]\n\n    return max_sum, k_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (n+1)\n    prev = [0] * (n+1)\n\n    for i in range(n):\n        if a[i] > a[index]:\n            dp[i+1] = max(dp[j] + a[i] for j in range(i+1))\n            prev[i+1] = i\n        elif a[i] < a[index]:\n            dp[i+1] = dp[i]\n\n    # Find maximum sum including kth element after index i\n    for i in range(k, n):\n        if dp[i] + a[i] > dp[k]:\n            dp[k] = dp[i] + a[i]\n\n    return dp[k]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = dp[0]\n    for i in range(1, n):\n        if i < k:\n            dp[i] = max(dp[i-1], a[i])\n        else:\n            dp[i] = max(dp[j] + a[i] for j in range(i))\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp array with zeros\n    dp = [0]*(n+1)\n    \n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Traverse from 1 to n\n    for i in range(1, n+1):\n        # Check if the ith element is greater than kth element after index\n        if a[i-1] > a[k-1]:\n            # If yes, add it to the sum and update the maximum sum\n            dp[i] = max(dp[i-1], dp[k-1]+a[i-1])\n        else:\n            # If not, take the maximum value from prefix until kth element after index\n            dp[i] = dp[k-1]\n        \n        # Update the maximum sum if the current value of dp[i] is greater\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_sum to zero\n    max_sum = 0\n    \n    # Initialize dp array to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n    \n    # Traverse through the array from 0 to index\n    for i in range(index):\n        # Check if the element at ith index is greater than the current maximum sum of increasing subsequence ending at ith index\n        if a[i] > max_sum:\n            max_sum = a[i]\n            \n        # Add the current element to the maximum sum of increasing subsequence ending at (i+1)th index and store it in dp[i]\n        dp[i] = max_sum\n    \n    # Traverse through the array from index to n-1\n    for i in range(index, n):\n        # Check if the element at ith index is greater than the current maximum sum of increasing subsequence ending at ith index\n        if a[i] > max_sum:\n            max_sum = a[i]\n            \n        # Add the current element to the maximum sum of increasing subsequence ending at (i+1)th index and store it in dp[i]\n        dp[i] = max_sum\n    \n    # Traverse through the array from 0 to n-1\n    for i in range(n):\n        # Check if the element at ith index is equal to the kth element after i\n        if a[i] == a[k-1] and i < k-1:\n            # Check if the sum of increasing subsequence from prefix until ith index and kth element after i is greater than the current maximum sum of increasing subsequence\n            if dp[k-2] + a[i] > dp[i]:\n                dp[i] = dp[k-2] + a[i]\n    \n    # Return the maximum sum of increasing subsequence from prefix until index and also including kth element\n    return dp[index-1]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index):\n        if a[i] < a[index] and dp[i] + a[index] > dp[index]:\n            dp[index] = dp[i] + a[index]\n\n    max_sum = 0\n    for i in range(index):\n        if a[i] < a[index] and dp[i] > max_sum:\n            max_sum = dp[i]\n\n    if k > index:\n        return dp[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n    \n    if k == index:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index])\n    \n    return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    return deepcopy(tuplex[m-1:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    newtuplex = deepcopy(tuplex)\n    # Get the number of elements in the tuple\n    length = len(tuplex)\n    # Get the number of elements to be returned in the colon\n    colon_length = n - m + 1\n    # If the number of elements in the colon is greater than the length of the tuple, return the entire tuple\n    if colon_length > length:\n        return tuplex\n    # If the colon is a slice of the tuple, return the slice\n    elif colon_length <= length:\n        return tuplex[m-1:n]\n    # If the colon is not possible, return an empty tuple\n    else:\n        return ()"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n+1]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple `tuplex` with the given indices `m` to `n`.\n    '''\n    # Create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Slice the tuple using the colon notation and store it in a new tuple\n    new_tuplex = new_tuplex[m:n+1]\n    \n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    tuplex = deepcopy(tuplex)\n    return tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m-1:n]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the tuple to prevent modification of original\n    tuplex_copy = deepcopy(tuplex)\n    # Get the slice of the tuple that corresponds to the colon\n    colon_slice = tuplex_copy[m-1:n]\n    # Return the colon slice as a new tuple\n    return colon_slice"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Given a tuple `tuplex` of length `n`, return a tuple `tuplex_colon`\n    representing the colon of `tuplex` from index `m` to index `n-1`.\n    \"\"\"\n    tuplex_colon = deepcopy(tuplex[m:n])\n    return tuplex_colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m-1:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0 or n == 0:\n        return ()\n    elif m == 1 and n == 1:\n        return (tuplex[0],)\n    else:\n        colon_tuplex = deepcopy(tuplex)\n        colon_tuplex = colon_tuplex[m - 1:n]\n        return colon_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create two lists to hold the products and the indices of the selected factors\n    products = []\n    indices = []\n    \n    # Loop through the two lists and calculate the product for each combination of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            products.append(product)\n            indices.append((i, j))\n    \n    # Sort the products in descending order and select the top N\n    sorted_products = sorted(products, reverse=True)\n    top_products = sorted_products[:N]\n    \n    # Create a list to hold the selected factors\n    selected_factors = []\n    \n    # Loop through the selected products and add the corresponding factors to the list\n    for product in top_products:\n        index = products.index(product)\n        i, j = indices[index]\n        selected_factors.append((nums1[i], nums2[j]))\n        \n    return selected_factors"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables\n    largest_products = []\n    largest_factors = []\n    \n    # Loop through each combination of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product and factor combination\n            product = nums1[i] * nums2[j]\n            factors = [nums1[i], nums2[j]]\n            \n            # Check if the product is larger than the current largest products\n            if len(largest_products) < N or product > largest_products[-1]:\n                # Update the largest products and factors\n                largest_products = largest_products[-(N-1):] + [product]\n                largest_factors = largest_factors[-(N-1):] + [factors]\n    \n    # Return the largest products and factors\n    return largest_products, largest_factors"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        max1 = -float('inf')\n        max2 = -float('inf')\n        for j in range(len(nums1)):\n            if nums1[j] > max1:\n                max1 = nums1[j]\n        for k in range(len(nums2)):\n            if nums2[k] > max2:\n                max2 = nums2[k]\n        result.append(max1 * max2)\n        nums1.remove(max1)\n        nums2.remove(max2)\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    # Find the minimum value in each list\n    min1 = min(nums1)\n    min2 = min(nums2)\n    \n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n    \n    # Initialize the list of results\n    results = []\n    \n    # Find all possible products of factors in both lists\n    for i in range(min1, max1 + 1):\n        for j in range(min2, max2 + 1):\n            results.append(i * j)\n    \n    # Sort the results in descending order\n    results.sort(reverse=True)\n    \n    # Return the specified number of largest products\n    return results[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Ensure that both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    # Initialize variables\n    largest_products = []\n    largest_factors1 = [1] * len(nums1)\n    largest_factors2 = [1] * len(nums2)\n\n    # Loop through the lists and update the largest factors\n    for i in range(N):\n        # Find the largest factor in nums1\n        for j in range(len(nums1)):\n            if nums1[j] > largest_factors1[j] and nums1[j] % largest_factors2[j] == 0:\n                largest_factors1[j] = nums1[j]\n        \n        # Find the largest factor in nums2\n        for j in range(len(nums2)):\n            if nums2[j] > largest_factors2[j] and nums2[j] % largest_factors1[j] == 0:\n                largest_factors2[j] = nums2[j]\n        \n        # Calculate the product of the largest factors\n        product = 1\n        for j in range(len(nums1)):\n            product *= largest_factors1[j]\n        for j in range(len(nums2)):\n            product *= largest_factors2[j]\n        \n        # Add the product to the list of largest products\n        largest_products.append(product)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1*num2 > 0: #only consider products greater than zero\n                products.append(num1*num2)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # combine the two lists and sort them in descending order\n    combined = sorted(nums1 + nums2, reverse=True)\n    # initialize the maximum product and the result list\n    max_product = 0\n    result = []\n    # iterate over the first N elements of the sorted list\n    for i in range(N):\n        # multiply the first element with each element from the second list\n        for j in range(len(nums2)):\n            product = combined[i] * nums2[j]\n            # if the product is greater than the current maximum, update the maximum and add the product to the result list\n            if product > max_product:\n                max_product = product\n                result = [product]\n            # if the product is equal to the current maximum, add the product to the result list\n            elif product == max_product:\n                result.append(product)\n    # return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    return products"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns their maximum.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n\nprint(maximum(5,10))\nprint(maximum(10,5))"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a number.\n    \"\"\"\n    # Find the right most bit that is set to 0\n    right_most_unset_bit = n & -n\n\n    # Set the bit to 1\n    n |= right_most_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function returns the number with the left most unset bit set to 1.\n    '''\n    # Find the left most unset bit using bitwise AND operator with n-1.\n    # For example, if n=5 (101 in binary), then (n-1) = 4 (100 in binary)\n    # & 4 = 0 (000 in binary)\n    # So the left most unset bit is 2 (010 in binary).\n    left_unset_bit = n & (n-1)\n    \n    # Set the left most unset bit to 1 using bitwise OR operator with n.\n    # For example, if n=5 (101 in binary), then n | 2 = 7 (111 in binary).\n    return n | left_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of an integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    # count the number of set bits to the left of the first set bit\n    count = 0\n    while n & 1 == 0:\n        count += 1\n        n >>= 1\n    # set the left most unset bit\n    return 2**(count) - 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    # Count the number of set bits in the binary representation of n\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    # Set the left most unset bit\n    return (1 << count) - 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function will set the left most unset bit in a number.\n    \"\"\"\n    # Using bitwise AND to check if the number is odd or even\n    if n & 1:\n        # If the number is odd, left shift the number by one bit and add 1\n        return n >> 1 | 1\n    else:\n        # If the number is even, simply return the number\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (n-1)) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit in a binary representation of a positive integer.\n    \"\"\"\n    mask = 1\n    while n & mask!= 0:\n        mask <<= 1\n    return mask"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the left most unset bit of a number.\n    '''\n    mask = n >> 1\n    mask |= mask >> 1\n    mask |= mask >> 2\n    mask |= mask >> 4\n    mask |= mask >> 8\n    mask |= mask >> 16\n    \n    return n | mask + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost 1 bit in the binary representation of n\n    rightmost_1_bit = n & -n\n    \n    # Set the rightmost 0 bit in the binary representation of n\n    left_most_unset_bit = n | rightmost_1_bit\n    \n    return left_most_unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function finds the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Returns the volume of a cone with the given radius and height.\n    '''\n    volume = math.pi * r**2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1.0 / 3.0) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius, height))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    volume = 1/3 * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    \"\"\"\n    This function takes in the radius (r) and height (h) of a cone and returns its volume.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        highest_power_of_2 = 1\n        while 2**highest_power_of_2 <= n:\n            highest_power_of_2 += 1\n        return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    # Initialize the variable to keep track of the highest power of 2\n    highest = 1\n    # Loop through all the values from 2 to n (inclusive)\n    for i in range(2, n+1):\n        # Check if i is a power of 2\n        if i & (i-1) == 0:\n            # If it is, update the highest variable if i is greater than the current value of highest\n            highest = i\n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to be 0\n    highest_power_of_2 = 0\n    \n    # Loop through all powers of 2 from 1 to 31 (since we are looking for highest power of 2)\n    for i in range(1, 32):\n        \n        # Calculate the current power of 2\n        power_of_2 = 2 ** i\n        \n        # If the current power of 2 is less than or equal to n, update the highest power of 2\n        if power_of_2 <= n:\n            highest_power_of_2 = power_of_2\n            \n    # Return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer 'n' as input and returns the highest power of 2 that is less than or equal to 'n'.\n    '''\n    if n == 0:\n        return 0\n    \n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n        \n    return 2 ** (power - 1)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    i = 1\n    while i < n:\n        i = i << 1\n    return i >> 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n -= power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n: \n        power_of_2 = power_of_2 * 2\n    power_of_2 = power_of_2 / 2\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2 // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while (power*2) <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while (2**i) <= n:\n        i += 1\n    return 2**(i-1)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_num = 2\n        current_num = 1\n        for i in range(2, n+1):\n            next_num = prev_num + current_num\n            prev_num = current_num\n            current_num = next_num\n        return current_num"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds then'th lucas number using the iterative approach.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        l1 = 2\n        l2 = 1\n        for i in range(2, n+1):\n            l = l1 + l2\n            l1 = l2\n            l2 = l\n        return l"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n and returns then'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        l1, l2 = 2, 1\n        for i in range(2, n+1):\n            l = l1 + l2\n            l1, l2 = l2, l\n        return l"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) "
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        lucas_num = [2, 1]\n        for i in range(2, n):\n            lucas_num.append(lucas_num[i-1] + lucas_num[i-2])\n        return lucas_num[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(f\"The {n}'th Lucas number is {find_lucas(n)}\")"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, (k1, v1) in enumerate(zip(l1, l2)):\n        sub_dict = {}\n        for j, (k2, v2) in enumerate(zip(l3, v1)):\n            sub_dict[k2] = v2\n        result[k1] = sub_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['key1'] = l1[i]\n        inner_dict['key2'] = l2[i]\n        inner_dict['key3'] = l3[i]\n        dictionary[i] = inner_dict\n    return dictionary"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {'name': l2[i], 'age': l3[i]}\n        result[key] = value\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    return {l1[i]: {l2[i]: l3[i] for i in range(len(l1))}}"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                result[l1[i]][l2[j]][l3[k]] = i + j + k\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary with keys from l1 and values from l2\n    d1 = dict(zip(l1, l2))\n    # create a dictionary with keys from l1 and values from l3\n    d2 = dict(zip(l1, l3))\n    # create a list of dictionaries with keys from l1 and values from d1 and d2\n    l_dict = [{'key': k, 'value1': v1, 'value2': v2} for k, v1, v2 in zip(l1, d1.values(), d2.values())]\n    # convert the list of dictionaries to a nested dictionary using key and value1 as keys for the inner dictionaries\n    nested_dict = {d['key']: {'value1': d['value1'], 'value2': d['value2']} for d in l_dict}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and converts them into nested dictionary.\n    \"\"\"\n    result_dict = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['key1'] = l1[i]\n        inner_dict['key2'] = l2[i]\n        inner_dict['key3'] = l3[i]\n        result_dict[i] = inner_dict\n    \n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 5:\n        return n\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(n + get_max_sum(n//2), get_max_sum(n//2))\n    elif n % 3 == 0:\n        return max(n + get_max_sum(n//3), get_max_sum(n//3))\n    elif n % 4 == 0:\n        return max(n + get_max_sum(n//4), get_max_sum(n//4))\n    elif n % 5 == 0:\n        return max(n + get_max_sum(n//5), get_max_sum(n//5))\n    else:\n        return n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Returns the maximum sum possible by using the given equation f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n % 2 == 0:\n        max_sum = get_max_sum(n/2) + n\n    elif n % 3 == 0:\n        max_sum = get_max_sum(n/3) + n\n    elif n % 4 == 0:\n        max_sum = get_max_sum(n/4) + n\n    elif n % 5 == 0:\n        max_sum = get_max_sum(n/5) + n\n    else:\n        max_sum = n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        f = max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n        return f"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    max_sum = float('-inf')\n    \n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            max_sum = max(max_sum, i + get_max_sum(n//i))\n            \n    return max_sum\n\nprint(get_max_sum(100))"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            result = input_list[i]\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function finds the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function returns the list with maximum length from a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the original tuple is the same as the length of the unique set\n    if len(test_tup) == len(unique_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # check if length of tuple is equal to length of set\n    if len(test_tup) == len(test_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function checks if the given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    return None # if no non-repeated character is found"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    # Create a dictionary to store character counts\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string again to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If there are no non-repeating characters in the string, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    # Traverse through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Traverse through the string again and return the first character whose frequency is 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # If no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to keep track of the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # loop through the string again and find the first character with frequency 1\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower() # convert the string to lowercase\n    char_count = {} # create an empty dictionary to store character counts\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1 # increment the count if character is already in the dictionary\n        else:\n            char_count[char] = 1 # add the character to the dictionary with count 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char # return the first non-repeating character\n    \n    return None # return None if there are no non-repeating characters"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    count_dict = {}\n\n    # Loop through each character in the string and update the count_dict accordingly\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # Loop through the string again to find the first character with count 1\n    for char in str1:\n        if count_dict[char] == 1:\n            return char\n\n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the string again to find the first non-repeating character\n    for char in str1:\n        # if the character is not in the dictionary or its count is 1, return it as the first non-repeating character\n        if char not in char_count or char_count[char] == 1:\n            return char\n    \n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first character\n    in the string that is not repeated. If all characters are repeated,\n    it returns None.\n    \"\"\"\n    # Create a dictionary to keep track of the character counts\n    char_counts = {}\n    # Loop over each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with count 1\n        if char not in char_counts:\n            char_counts[char] = 1\n        # If the character is already in the dictionary, increment its count\n        else:\n            char_counts[char] += 1\n    # Loop over each character in the string again\n    for char in str1:\n        # If the character has a count of 1, return it as the first non-repeating character\n        if char_counts[char] == 1:\n            return char\n    # If we haven't returned by now, all characters are repeated\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    char_count = {}\n    # Traverse through each character of the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Traverse through the string again to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # If all characters are repeated, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Args:\n        a (float): First number.\n        b (float): Second number.\n        c (float): Third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # Even number of elements, take the average of the middle two\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] +\n                  sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # Odd number of elements, take the middle one\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as arguments and returns the median value.\n    '''\n\n    # sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # check if the median value is a single number or an average of two numbers\n    if numbers[1] == numbers[2]:\n        return numbers[1]\n    else:\n        return (numbers[1] + numbers[2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median of the three numbers\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted numbers is even, take the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        # If the length of the sorted numbers is odd, take the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median of the three numbers\n    if len(sorted_numbers) % 2 == 0:\n        # If the number of elements is even, the median is the average of the middle two elements\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        # If the number of elements is odd, the median is the middle element\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    median = (a + b + c) / 3\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Returns the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the index of the median number\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        # Even number of numbers, take the average of the middle two\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    else:\n        # Odd number of numbers, take the middle one\n        median = sorted_numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Check if the median is even or odd\n    if len(set(sorted_numbers)) == 1:\n        # If all three numbers are equal, the median is the same\n        return sorted_numbers[1]\n    else:\n        # If the median is odd, return the middle number\n        if len(sorted_numbers) % 2 == 1:\n            return sorted_numbers[1]\n        # If the median is even, return the average of the two middle numbers\n        else:\n            return (sorted_numbers[1] + sorted_numbers[2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b<=c or c<=b<=a:\n        return b\n    elif a<=c<=b or b<=c<=a:\n        return c\n    else:\n        return (a+b+c)/3"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = []\n    for num in nums:\n        sum_digit = 0\n        for digit in str(num):\n            sum_digit += int(digit)\n        sum_digits.append(sum_digit)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        sum_list.append(sum_digits)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        while num > 0:\n            sum += num % 10\n            num //= 10\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a list of the sum of digits of each integer in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # Convert each number to a string and then iterate over its characters\n        for char in str(num):\n            total_sum += int(char)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    \n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] ^ test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(i ^ j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the set, add it\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    \n    # Return the size of the set, which is the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function will extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return len(freq.keys())"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n        else:\n            raise ValueError(\"List should contain only tuples.\")\n\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for t in test_list:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index-wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create an empty list to store the sum of corresponding elements in the two tuples\n    result_list = []\n    # Loop through each tuple\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # Loop through each element in the tuples\n        for i in range(len(tup1)):\n            # Add the corresponding elements of the tuples and append to the result_list\n            result_list.append(tup1[i] + tup2[i])\n    # Return the result as a nested tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]),)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (inner_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        inner_tup = ()\n        for i in range(len(tup1)):\n            inner_tup += (tup1[i] + tup2[i], )\n        result_tup += (inner_tup, )\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum value among them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function returns the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(elem == tuplex for elem in tuple1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two arguments, a tuple and an element. \n    It returns True if the element exists within the tuple, else False.\n    '''\n    if element in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1.count(tuplex) > 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (any): The element to check for.\n    tuple1 (tuple): The tuple to search in.\n\n    Returns:\n    bool: True if tuplex is in tuple1, False otherwise.\n    \"\"\"\n\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_parity(x):\n    '''\n    This function takes an integer as input and returns True if the parity of the number is odd, and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"The parity of {x} is even.\")\n    else:\n        print(f\"The parity of {x} is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n\n    :param x: the number whose parity we want to check\n    :return: True if the parity is odd, False otherwise\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return \"Odd\"\n    else:\n        return \"Even\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(\"Odd\")\n    else:\n        print(\"Even\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the number is odd and False if it is even.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_list = list(n_str)\n    n_len = len(n_list)\n    i = n_len - 1\n    \n    # Find the first digit that needs to be swapped\n    while i > 0 and n_list[i-1] >= n_list[i]:\n        i -= 1\n    \n    if i == 0:\n        # If all digits are in descending order, there is no bigger number\n        return -1\n    \n    # Find the digit to swap with\n    j = n_len - 1\n    while n_list[j] <= n_list[i-1]:\n        j -= 1\n    \n    # Swap the digits\n    n_list[i-1], n_list[j] = n_list[j], n_list[i-1]\n    \n    # Sort the remaining digits\n    n_list[i:] = sorted(n_list[i:])\n    \n    # Convert the list back to an integer\n    new_n = int(''.join(n_list))\n    \n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits_len = len(digits)\n    for i in range(digits_len-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            j = i+1\n            for k in range(digits_len-1, j, -1):\n                if digits[k] > digits[i]:\n                    digits[i], digits[k] = digits[k], digits[i]\n                    digits[j:k+1] = sorted(digits[j:k+1])\n                    return int(\"\".join(digits))\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    n_str = str(n)\n    n_list = list(n_str)\n    for i in range(len(n_list)-2, -1, -1):\n        if n_list[i] < n_list[i+1]:\n            j = i+1\n            while j < len(n_list) and n_list[j] < n_list[i]:\n                j += 1\n            n_list[i], n_list[j-1] = n_list[j-1], n_list[i]\n            n_list[i+1:] = sorted(n_list[i+1:])\n            return int(''.join(n_list))\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string and split it into a list of digits\n    digits = list(str(n))\n    # Initialize a dictionary to store the digit positions\n    digit_positions = {}\n    # Loop through the digits and store their positions in a dictionary\n    for i in range(len(digits)):\n        digit_positions[digits[i]] = i\n    # Loop through the digits again and find the digit that needs to be swapped with the current digit\n    for i in range(len(digits)-1, -1, -1):\n        # If the current digit is not the highest digit, swap it with the digit that is one position higher\n        if i!= len(digits)-1 and digit_positions[digits[i]] < digit_positions[digits[i+1]]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            # Update the digit positions in the dictionary\n            digit_positions[digits[i]] = i\n            digit_positions[digits[i+1]] = i+1\n    # Convert the list of digits back to a number and return it as a string\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_list = list(n)\n    max_num = -1\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if int(n_list[i]) < int(n_list[j]) and int(n_list[i]) > max_num:\n                max_num = int(n_list[i])\n            elif int(n_list[j]) > max_num:\n                max_num = int(n_list[j])\n    n_list.sort(reverse=True)\n    for i in range(len(n_list)):\n        if n_list[i] < max_num:\n            n_list[i] = str(max_num)\n            break\n    n_str = ''.join(n_list)\n    return int(n_str)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(n)\n    for i in range(len(num_str)-1):\n        for j in range(i+1, len(num_str)):\n            if num_str[i] < num_str[j]:\n                num_str[i], num_str[j] = num_str[j], num_str[i]\n                num_str = ''.join(num_str)\n                if int(num_str) > n:\n                    return int(num_str)\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    n = str(n)\n    \n    # Find the index of the rightmost digit that is not in its correct position\n    index = -1\n    for i in range(len(n)-1):\n        if int(n[i]) < int(n[i+1]):\n            index = i\n    \n    # If no such digit exists, return -1\n    if index == -1:\n        return -1\n    \n    # Find the digit that is just greater than n[index]\n    for i in range(int(n[index])+1, 10):\n        if str(i) in n:\n            return int(n[:index] + str(i) + n[index+1:])\n    \n    # If no such digit exists, return -1\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    \n    # Initialize variables for the maximum and second maximum numbers\n    max_num = n\n    second_max = -1\n    \n    # Loop through all the possible permutations of the digits of the number\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            # Create two new strings with the digits in the two permutations\n            new_n1 = n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:]\n            new_n2 = n[:j] + n[i] + n[j+1:i] + n[j] + n[i+1:]\n            \n            # Convert the new strings back to integers and check if they are greater than the current maximum\n            new_num1 = int(new_n1)\n            new_num2 = int(new_n2)\n            if new_num1 > int(max_num) and new_num2 > int(max_num) and new_num1 > int(second_max) and new_num2 > int(second_max):\n                # Update the maximum and second maximum if a new permutation is greater\n                max_num = new_n1\n                second_max = new_n2\n    \n    # Return the maximum and second maximum as a tuple\n    return int(max_num), int(second_max)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n.sort(reverse=True)\n    i = len(n) - 1\n    while i > 0 and n[i] == '9':\n        i -= 1\n    if i == 0:\n        return -1\n    else:\n        n[i] = str(int(n[i]) + 1)\n        for j in range(i + 1, len(n)):\n            n[j] = '0'\n        return int(''.join(n))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    n_str = str(n)\n    \n    # find the index of the rightmost digit that is smaller than its digit next to it\n    for i in range(len(n_str)-2, -1, -1):\n        if n_str[i] < n_str[i+1]:\n            break\n            \n    # if no such digit is found, the number is already the largest possible\n    if i == -1:\n        return -1\n        \n    # find the smallest digit to the right of i that is greater than n_str[i]\n    smallest_digit = None\n    for j in range(i+1, len(n_str)):\n        if n_str[j] > n_str[i]:\n            smallest_digit = n_str[j]\n            break\n            \n    # if no such digit is found, the number is already the largest possible\n    if smallest_digit is None:\n        return -1\n        \n    # swap the two digits\n    n_str = n_str[:i] + smallest_digit + n_str[i+1:j] + n_str[i] + n_str[j+1:]\n    \n    # convert the modified string back to an integer\n    next_bigger = int(n_str)\n    \n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for pair in heapq.nsmallest(k, [(num + nums2[i], i) for i in range(len(nums2))]):\n            pairs.append(pair)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1 + num2, num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                heapq.heappushpop(pairs, pair)\n    return sorted([pair[1:] for pair in pairs])[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heapq.heapify(pairs)\n    for i in nums1:\n        for j in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (i+j, i, j))\n            else:\n                if i+j < pairs[0][0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, (i+j, i, j))\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs)[1:])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1+num2, num1, num2))\n            else:\n                if num1+num2 < pairs[0][0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, (num1+num2, num1, num2))\n    return [(p[1], p[2]) for p in sorted(pairs, key=lambda x: x[0])]\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, num1, num2))\n            \n    return [heapq.heappop(heap)[1:] for _ in range(k)]\n    "
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for t1 in list1:\n        for t2 in list1:\n            if t1!= t2:\n                product = t1[0] * t1[1] * t2[0] * t2[1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Parameters:\n    lst (list): A list of tuples of integers.\n\n    Returns:\n    int: The minimum product from the pairs of tuples within the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    if len(lst) < 2:\n        raise ValueError(\"List must have at least 2 elements\")\n\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    '''\n    Find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as an argument and returns the minimum value in the list.\n    '''\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the minimum value in the list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Converts a snake_case string to camelCase.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string using underscores as separators\n    words = word.split(\"_\")\n    \n    # Capitalize the first letter of each word except the first one\n    words = [words[0]] + [word.capitalize() for word in words[1:]]\n    \n    # Join the words back to form the camel case string\n    camel_case_string = \"\".join(words)\n    \n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function converts the given snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0].lower() + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words\n    words = word.split('_')\n    \n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    \n    # Join the words to form camel case string\n    camel_case = ''.join(words)\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as an input and removes all the odd numbers from it.\n    \"\"\"\n    for i in range(len(l)-1, -1, -1):\n        if l[i] % 2 == 1:\n            l.pop(i)\n    return l"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list of integers as input and returns a new list containing only the even numbers from the input list.\n    '''\n    return list(filter(lambda x: x % 2 == 0, l))"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes all odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a list of tuples.\n    '''\n    return list(zip(*list1))[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n-1] for i in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as arguments.\n    It returns the nth element of each tuple in the list.\n    \"\"\"\n    return [t[n] for t in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes in a list of tuples and a number 'n',\n    and returns the n-th element of each tuple in the list.\n    '''\n    return [elem[n-1] for elem in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of each tuple in the list.\n    '''\n    return [i[n-1] for i in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and returns the nth element of each tuple.\n    '''\n    return [t[n] for t in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list2:  \n        if item in list1:  \n            return True  \n    return False  "
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    If there is an overlap, it returns True, else it returns False.\n    \"\"\"\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in one sequence exists in the other sequence and False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in list1 exists in list2, else returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 is also in list2.\n    \"\"\"\n    return any(val in list2 for val in list1)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a pair of integers with the highest product.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize variables to keep track of the maximum and second maximum products\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n    \n    # Iterate through the array and update the maximum and second maximum products as necessary\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n            elif product > second_max_product:\n                second_max_product = product\n    \n    # Return the maximum product and the corresponding pair of elements\n    return max_product, (arr[arr.index(max_product//second_max_product)//2], arr[arr.index(max_product//second_max_product)%2])"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    if len(arr) < 2:\n        return \"Array must contain at least two elements\"\n    \n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        current_product = arr[i] * arr[i-1] * arr[i-2]\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n        if current_product < min_product:\n            min_product = current_product\n            \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and finds a pair with highest product from the array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0], arr[0]\n    else:\n        max1 = arr[0]\n        max2 = arr[1]\n        min1 = arr[0]\n        min2 = arr[1]\n\n        # Find the maximum and minimum numbers in the array\n        for i in range(2, n):\n            if arr[i] > max1:\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max2 = arr[i]\n            if arr[i] < min1:\n                min2 = min1\n                min1 = arr[i]\n            elif arr[i] < min2:\n                min2 = arr[i]\n\n        # Find the product of the maximum and minimum numbers in the array\n        product = max1 * max2\n\n        # Check if the product is negative, if yes then return the product of the minimum and maximum numbers instead\n        if product < 0:\n            product = max(max1 * min1, max2 * min2)\n\n        return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = set([t[0] for t in Input])\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for tup in Input:\n        if tup[0] not in result:\n            result[tup[0]] = []\n        result[tup[0]].append(tup)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        if not result:\n            result.append(i)\n        elif i[0] == result[0][0]:\n            result.append(i)\n        else:\n            yield result\n            result = [i]\n    yield result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuple = ()\n    for i in Input:\n        if not common_tuple:\n            common_tuple = i\n        else:\n            if i[0]!= common_tuple[0]:\n                return common_tuple[0]\n            else:\n                common_tuple = i\n    return common_tuple[0]"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples with the common first element.\n    '''\n    result = []\n    first_elements = set()\n    \n    for tpl in Input:\n        if tpl[0] not in first_elements:\n            first_elements.add(tpl[0])\n            result.append(tpl)\n            \n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Find the common first element in the list of tuples\n    common = None\n    for tup in Input:\n        if common is None:\n            common = tup[0]\n        elif common!= tup[0]:\n            return None\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    \n    result = []\n    group = []\n    for t in Input:\n        if t[0] == group[0][0]:\n            group.append(t)\n        else:\n            if len(group) > 1:\n                result.append(group)\n            group = [t]\n    \n    if len(group) > 1:\n        result.append(group)\n    \n    return result"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list with the maximum length.\n    '''\n    max_length = len(lst[0]) # assume that the first element has maximum length\n    max_element = lst[0] # assume that the first element is the maximum element\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list that has maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    return [x for x in lst if len(x) == max_len]"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    return [x for x in lst if len(x) == max_len][0]"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_len = max([len(x) for x in lst])\n    for element in lst:\n        if len(element) == max_len:\n            return element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list of strings as input and returns the element \n    of the list that has maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for num in list1:\n        rounded_num = round(num)\n        rounded_list.append(rounded_num)\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as an argument and returns the sum of the cubes of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count ** 3\n        count += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    # initialize sum to zero\n    sum = 0\n    # loop through first n even numbers\n    for i in range(2, n*2, 2):\n        # add the cube of the number to the sum\n        sum += i**3\n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for i in test_tup:\n        result.append(str(i) + delimiter)\n    return ''.join(result[:-1])"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]  # remove the last delimiter"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): The tuple to concatenate.\n    delimiter (str): The delimiter to use for concatenation.\n\n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    \"\"\"\n    This function concatenates each element of tuple by the delimiter.\n    \"\"\"\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_average_of_cubes(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as an input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg_of_cubes = sum_of_cubes / n\n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes a natural number n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    return sum_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average = sum_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes in an integer n and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    # Initialize sum variable to zero\n    sum_of_cubes = 0\n    \n    # Loop through first n natural numbers and add the cube of each number to sum variable\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # Calculate and return the average of cubes\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate cube of the number\n        cube = i**3\n        # add cube to sum\n        sum += cube\n        # increment count\n        count += 1\n\n    # calculate average by dividing sum by count\n    avg = sum / count\n\n    # return the average\n    return avg"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[rear_index],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for string in test_tuple:\n        rear_indices.append(string[-1])\n    return tuple(rear_indices)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    rear_index = len(test_tuple[0]) - 1\n    return tuple(string[rear_index] for string in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[::-1][0],)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    \n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n        \n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        rear = string[-1]\n        result += (rear,)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return tuple(rear_list)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for word in test_tuple:\n        rear_tuple += (word[-1],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes a list and an element as input and returns the number of sublists containing the element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(lst, elem):\n    \"\"\"\n    Returns the number of sublists in lst that contain the element elem.\n    \"\"\"\n    count = 0\n    for sublst in lst:\n        if elem in sublst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count += count_element_in_list(list1[i], x)\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, elem):\n    \"\"\"\n    Returns the number of sublists in lst containing elem.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list and an element as input and returns the number of sublists in the list containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Returns a new list with only the odd numbers from the input list.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as an argument and returns a new list with only the odd numbers from the original list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match date in yyyy-mm-dd format\n    pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    \n    # Check if date matches pattern\n    if pattern.match(dt):\n        # Split date into year, month, and day\n        year, month, day = map(int, dt.split('-'))\n        \n        # Convert date to dd-mm-yyyy format\n        new_date = f'{day:02d}-{month:02d}-{year}'\n        return new_date\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        return '{}-{}-{}'.format(match.group(3), match.group(2), match.group(1))\n    else:\n        return ''"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    This function takes a date in the format of yyyy-mm-dd and returns the date in the format of dd-mm-yyyy.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    date = re.match(pattern, dt)\n    if date:\n        year, month, day = date.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = map(int, match.groups())\n        return f'{day:02d}-{month:02d}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        return 'Invalid date format. Please enter date in yyyy-mm-dd format.'\n    else:\n        date_list = dt.split('-')\n        return f'{date_list[2]}-{date_list[1]}-{date_list[0]}'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Decrease the gap for the next pass\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    This function takes in a list and sorts it using shell sort algorithm.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    # sorting the list using shell sort algorithm\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Sort the given array using shell sort algorithm.\n    '''\n    # Get the length of the list and the gap value\n    n = len(my_list)\n    gap = n // 2\n    \n    # Iterate through the gap values and sort the list using insertion sort\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    # Return the sorted list\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the element-wise and tuples from the given two tuples.\n\n    Args:\n    test_tup1 (tuple): First input tuple.\n    test_tup2 (tuple): Second input tuple.\n\n    Returns:\n    tuple: Tuple of element-wise and tuples.\n    \"\"\"\n\n    # Initialize an empty tuple to store the and-tuples.\n    and_tup = ()\n\n    # Loop through each element of the two tuples.\n    for i in range(len(test_tup1)):\n        # Extract the ith elements of both tuples.\n        a = test_tup1[i]\n        b = test_tup2[i]\n\n        # Create a new tuple containing the ith elements and their and value.\n        and_tup += ((a, b, a & b),)\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extracts the elementwise AND tuples from two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola must have a non-zero coefficient of curvature.\")\n    else:\n        directrix = -b/(2*a)\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is at x =\", x)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        print(\"The directrix of the parabola is at x =\", x)\n    else:\n        print(\"The parabola has complex roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2 - 4*a*c\n    if D < 0:\n        return None\n    else:\n        x = (-b + math.sqrt(D)) / (2*a)\n        return x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        print(\"There are no real roots.\")\n    else:\n        x1 = (-b + math.sqrt(d)) / (2*a)\n        x2 = (-b - math.sqrt(d)) / (2*a)\n        print(\"The directrix of the parabola is located at x = \", x1)\n        print(\"The other root is located at x = \", x2)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        x_1 = (-b + delta**0.5)/(2*a)\n        x_2 = (-b - delta**0.5)/(2*a)\n        print(\"The two roots are:\", x_1, \"and\", x_2)\n    else:\n        print(\"The roots are complex and cannot be found.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"The coefficient of x^2 must not be zero.\")\n    elif a > 0:\n        x = -b / (2 * a)\n        return x\n    elif a < 0:\n        x1 = (-b + (b**2 - 4*a*c)**0.5) / (2 * a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5) / (2 * a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Using the quadratic formula to find the discriminant\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        # Real and different roots\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    elif discriminant == 0:\n        # Real and equal roots\n        x = -b/(2*a)\n        return x\n    else:\n        # Complex roots (not implemented)\n        raise ValueError(\"Complex roots are not implemented\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient 'a' cannot be zero.\")\n    else:\n        directrix = -b / (2 * a)\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x = (-b + delta**0.5)/(2*a)\n        return x\n    else:\n        return \"No directrix exists\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return (x1, x2)\n    elif delta == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return \"No real solutions\""
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Check if any element in list1 is also in list2\n    for element in list1:\n        if element in list2:\n            return True\n    \n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(elem in list2 for elem in list1)"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median\n    median = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the median length of the trapezium\n    median_length = 2 * area / (base1 + base2)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the semi-perimeter of the trapezium\n    s = (base1 + base2) / 2\n    \n    # Calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n    \n    # Calculate the median length of the trapezium\n    median = area / s\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    total_width = base1 + base2\n    median_height = height / 2\n    median_width = (total_width / 2) * median_height\n    return median_width"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes the base1, base2, and height of a trapezium as inputs and returns the median length of the trapezium.\n    '''\n    # Find the semi-perimeter of the trapezium\n    s = (base1 + base2) / 2\n    # Find the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    # Find the median length of the trapezium\n    median = 2 * s * height / (base1 + base2)\n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in three arguments:\n    base1: the length of the first base of the trapezium\n    base2: the length of the second base of the trapezium\n    height: the height of the trapezium\n    The function returns the median length of the trapezium.\n    '''\n    # Calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the median height of the trapezium\n    median_height = height / 2\n    # Calculate the length of the median line\n    median_line = median * median_height\n    # Calculate the length of the perpendicular line\n    perpendicular_line = 2 * median * median_height\n    # Calculate the length of the left leg\n    left_leg = 0.5 * height * (median + base1)\n    # Calculate the length of the right leg\n    right_leg = 0.5 * height * (median + base2)\n    # Calculate the length of the base of the trapezium\n    base = base1 + base2\n    # Calculate the length of the diagonal line\n    diagonal_line = 0.5 * base * median_height\n    # Calculate the length of the apothem\n    apothem = (0.5 * base) / median\n    # Calculate the length of the radius of the circumcircle\n    radius = median / apothem\n    # Calculate the length of the diameter of the circumcircle\n    diameter = 2 * radius\n    # Calculate the length of the incircle\n    incircle = (1/3) * area\n    # Calculate the length of the excircle\n    excircle = (1/2) * diameter * height\n    \n    # Return the median length of the trapezium\n    return median\n    "
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes the length of the two bases and the height of the trapezium as input parameters\n    and returns the median length of the trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in the length of two bases and the height of the trapezium and returns the median length of the trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function checks whether a given number is greater than the elements of an array.\n\n    Parameters:\n    arr (list): A list of numbers\n    number (int): A number to compare to the elements of the array\n\n    Returns:\n    bool: True if the given number is greater than the elements of the array, False otherwise.\n    \"\"\"\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    This function checks whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The entered number is greater than the elements of the array.\")\n            break\n    else:\n        print(\"The entered number is not greater than the elements of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    if n < 0:\n        n = n * -1\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number n as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    # To get the last digit of a number, we need to divide it by 10 and get the remainder.\n    # We can use the modulus operator (%) to get the remainder.\n    remainder = n % 10\n    return remainder"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    if n < 0:\n        n *= -1\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number n.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for i in list1:\n        if i < 0:\n            negative_list.append(i)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Returns a new list containing only the negative numbers in list1.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns a list of negative numbers from a given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list of negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Return a new list with only the negative numbers of the original list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers in the input list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove all characters in a string that have an odd index.\n\n    :param str1: A string\n    :return: A string with all odd characters removed.\n    \"\"\"\n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for i, char in enumerate(str1) if i % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes all odd characters from a given string.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n    '''\n    return ''.join(filter(lambda x: x % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    This function takes a list of tuples and counts the number of bidirectional pairs.\n    A bidirectional pair is defined as two tuples where the first element of both tuples\n    matches, but the second element of one tuple matches the first element of the other tuple.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) == (test_list[j], test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] > test_list[j][0] and test_list[j][1] > test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j] and test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n            elif test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and (test_list[i], test_list[j]) not in test_list[:i] and (test_list[j], test_list[i]) not in test_list[:i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                count += 1\n            elif test_list[i][0] < test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for i in L:\n        result *= 10\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of integers as input and returns a single integer\n    that is the result of joining the integers in the list.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of multiple integers as input and returns a single integer\n    '''\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    This function takes a list of integers as input and returns a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Joins a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    This function takes a list of integers as input and returns a single integer that is the result of joining the integers in the list.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find the first adverb in the sentence\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    \n    # Check if adverb was found\n    if match:\n        # Find the position of the adverb\n        position = match.start()\n        # Return the adverb and its position\n        return match.group(), position\n    else:\n        # Return None if adverb was not found\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s+(?:very|extremely|quite)\\b\\s+\\b[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|extremely|really|quite|really|fairly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start())\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|extremely|quite|really|absolutely|insanely|really|very|totally)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.start(), match.end()"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r'\\b(very|extremely|quite|really|really quite|really really|really really quite)\\b'\n    matches = re.search(pattern, text)\n    if matches:\n        return f\"The first adverb is '{matches.group(1)}' and its position is {matches.start(1)}.\"\n    else:\n        return \"No adverb found in the given sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find the first adverb\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        # Return the adverb and its position in the sentence\n        adverb = match.group()\n        position = match.start()\n        return f\"The first adverb is '{adverb}' at position {position}.\"\n    else:\n        return \"There is no adverb in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(very|quite|extremely|really)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return f\"Adverb: {match.group()}\\tPosition: {match.start()}\"\n    else:\n        return \"Adverb not found in the text.\"\n\ntext = \"The text contains quite a bit of adverbial language.\"\nprint(find_adverb_position(text))"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to match adverbs in the text\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if matches:\n        # Find the position of the first match\n        position = text.index(matches[0])\n        \n        # Return the first match and its position\n        return matches[0], position\n    else:\n        # Return None if there are no matches\n        return None"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function calculates the surface area of a cube of given size.\n    Parameters:\n    l (float): The length of the cube.\n    Returns:\n    float: The surface area of the cube.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    ratio = count / len(nums)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    count_total = len(nums)\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    if count_total == 0:\n        return 0.0\n    return count_positive / count_total"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of positive integers to the total number of integers.\n    '''\n    total_count = len(nums)\n    positive_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Returns the ratio of positive integers in the given array.\n    \"\"\"\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = max(list1)\n    if max_num < 0:\n        return max_num\n    else:\n        return None"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for i in list1:\n        if i < largest and i < 0:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from a given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Returns the largest negative number in the list.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function finds the largest negative number from a list of numbers.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for elem in tup:\n            if elem < K:\n                trimmed_tup += (elem,)\n        if len(trimmed_tup) > 0:\n            trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        result_list.append(trimmed_tup)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple in the given tuple list by k.\n    '''\n    return [(a[0], a[1], a[2][K:]) for a in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(j for j in test_list[i][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(x[0], x[1][:K], x[2][:K]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(K, len(tup)))\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tpl in test_list:\n        trimmed_tpl = tpl[K:]\n        trimmed_list.append(trimmed_tpl)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(elem[K:] for elem in tup)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs index-wise multiplication of their elements.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst: \n        count_dict[i] = lst.count(i)\n    return count_dict\n\ntup = (1, 2, 3, 4, 4, 3, 2, 1, 5, 5)\nlst = [1, 2, 3, 4, 5]\nprint(count_Occurrence(tup, lst))"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments:\n    - tup: a tuple containing elements to be counted.\n    - lst: a list containing elements to be searched for in the tuple.\n    \n    This function returns a dictionary containing the counts of each element in lst\n    in the order of lst.\n    '''\n    \n    # Count the occurrence of all elements in lst in the tuple.\n    count_dict = Counter(lst)\n    \n    # Initialize an empty dictionary to store the counts of elements in the tuple.\n    result_dict = {}\n    \n    # Iterate through the elements in the tuple and count their occurrence.\n    for elem in tup:\n        if elem in count_dict:\n            result_dict[elem] = count_dict[elem]\n        else:\n            result_dict[elem] = 0\n    \n    # Return the dictionary containing the counts of each element in lst in the order of lst.\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    for elem in tup:\n        if elem in count:\n            result.append(count[elem])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns the count of each element in the list in the tuple.\n    '''\n    # Count the occurrence of each element in the list in the tuple\n    count = Counter(lst)\n    # Iterate over the elements in the tuple and count their occurrence in the list\n    for elem in tup:\n        if elem in count:\n            print(f\"{elem}: {count[elem]}\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments, a tuple and a list.\n    It counts the occurrences of all elements of the list in the tuple.\n    '''\n    # convert tuple to list\n    lst = list(tup) \n    # create a Counter object for the list\n    count_obj = Counter(lst) \n    # create an empty dictionary to store the counts\n    counts = {} \n    # loop through the elements of the list\n    for elem in lst: \n        # if the element is in the tuple, get its count and store it in the dictionary\n        if elem in count_obj: \n            counts[elem] = count_obj[elem] \n        # if the element is not in the tuple, set its count to 0 and store it in the dictionary\n        else: \n            counts[elem] = 0 \n    # return the dictionary of counts\n    return counts "
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element in the list in the tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of occurrence of all the elements of the list in the tuple.\n    '''\n\n    # create a dictionary to store the count of occurrence of each element\n    count_dict = Counter(lst)\n\n    # loop through the tuple and update the count for each element in the dictionary\n    for i in tup:\n        if i in count_dict:\n            count_dict[i] += 1\n\n    # return the final dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in two arguments - tuple tup and list lst.\n    It returns a dictionary with keys as elements of lst and values as the number of times they occur in tup.\n    '''\n    count_dict = Counter(tup)\n    result_dict = {}\n    for element in lst:\n        if element in count_dict:\n            result_dict[element] = count_dict[element]\n        else:\n            result_dict[element] = 0\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_list = []\n    for i in tup:\n        count_list.append(count_dict[i])\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_lst = []\n    for elem in tup:\n        count = count_dict.get(elem, 0)\n        count_lst.append(count)\n    return count_lst"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of individual elements in the input list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing the cubes of each element in the input list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num ** 3\n        cube_list.append(cube)\n    return cube_list"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the cubes of the input numbers.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers upto n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p_sum = 0\n    for i in range(n):\n        p_sum += i * i * (i + 1) // 2\n    return p_sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perrin_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to a given value n.\n    \"\"\"\n    perrin_numbers = [2]\n    current_perrin = 2\n    while current_perrin <= n:\n        next_perrin = 4*current_perrin + 2\n        perrin_numbers.append(next_perrin)\n        current_perrin = next_perrin\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            total += i\n    return total\n\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i == 1:\n            sum += 1\n        elif i == 2:\n            sum += 2\n        else:\n            sum += 4 * (i - 2)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculates the sum of perrin numbers up to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return 2 + 2 * cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [0] * (n+1)\n    p[0] = 0\n    p[1] = 1\n    for i in range(2, n+1):\n        p[i] = p[i-1] + 2*p[i-2]\n    return p[n]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    \n    for i in range(1, n+1):\n        result += i * (i+1)\n        \n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*cal_sum(n-1)\n\nprint(cal_sum(5)) # Output: 291"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of the first n Perrin numbers.\n    '''\n    perrin_sum = 0  # initialize sum to zero\n    \n    # calculate the sum of first n Perrin numbers\n    for i in range(1, n+1): \n        perrin_sum += 1/i**2\n        \n    return perrin_sum"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result\n\nmy_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nprint(extract_string(5, my_list))"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts the specified size of strings from the given list of string values.\n    \"\"\"\n    result = []\n    for s in lst:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size of strings from a given list of string values.\n\n    Args:\n    str_list: A list of string values.\n    size: An integer value representing the size of the strings to be extracted.\n\n    Returns:\n    A list of extracted strings.\n    \"\"\"\n\n    # Initialize an empty list to store the extracted strings.\n    extracted_strings = []\n\n    # Loop through the given list of string values.\n    for s in str_list:\n        # Check if the length of the string is greater than or equal to the specified size.\n        if len(s) >= size:\n            # If it is, append the string to the extracted_strings list.\n            extracted_strings.append(s[:size])\n\n    # Return the list of extracted strings.\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < 1:\n        raise ValueError(\"String cannot be empty\")\n\n    if len(l) < 1:\n        raise ValueError(\"List cannot be empty\")\n\n    if isinstance(str, str)!= True:\n        raise TypeError(\"String should be a string\")\n\n    if isinstance(l, list)!= True:\n        raise TypeError(\"List should be a list\")\n\n    if isinstance(l[0], str)!= True:\n        raise TypeError(\"List should contain strings only\")\n\n    if len(str) > len(l[0]):\n        raise ValueError(\"String size should not be greater than the first element of the list\")\n\n    result = []\n    i = 0\n    j = 0\n\n    while j < len(l[0]):\n        if l[0][j:j+len(str)] == str:\n            result.append(l[i])\n            i += 1\n            j += len(str)\n        else:\n            j += 1\n\n    if len(result) == 0:\n        raise ValueError(\"String not found in list\")\n\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(str_list[i:i+size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), str):\n        result.append(l[i:i+str])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > len(l):\n        print(\"Error: string is longer than the list of values\")\n        return []\n    else:\n        return [l[i:i+len(str)] for i in range(len(l)-len(str)+1)]"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == str:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss else return 0.\n\n    Parameters:\n    actual_cost (float): the actual cost of the item.\n    sale_amount (float): the amount obtained after the sale.\n\n    Returns:\n    float: the loss amount on the sale.\n    \"\"\"\n    loss = sale_amount - actual_cost\n\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes two parameters: actual_cost and sale_amount.\n    actual_cost is the actual cost of the item before sale and sale_amount is the amount of item sold.\n    It calculates and returns the loss amount on the sale, if the given sale_amount has loss else it returns 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        return -loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the loss amount on a sale if the sale amount is less than or equal to the actual cost,\n    otherwise returns 0.\n\n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The amount of the item sold.\n\n    Returns:\n    float: The loss amount on the sale if there is any loss, otherwise 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two parameters - actual_cost and sale_amount.\n    It returns the loss amount on a sale if the sale amount has loss, otherwise it returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function calculates the loss amount on a sale if the sale_amount is greater than actual_cost else returns 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if n//i % 2 == 0:\n                    sum += n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n//i!= i:\n                sum += n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            factors.append(i)\n            if n//i!= i : \n                factors.append(n//i)\n    even_factors = [x for x in factors if x % 2 == 0]\n    return sum(even_factors)\n\nprint(sumofFactors(12))  # Output: 6 (2+2)\nprint(sumofFactors(28))  # Output: 18 (2+4+7)\nprint(sumofFactors(496)) # Output: 120 (2+4+8+16)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function returns the sum of all even factors of a given number.\n    \"\"\"\n    # Initialize a variable to store the sum of even factors.\n    sum_even_factors = 0\n    \n    # Iterate through all numbers from 2 to n (inclusive).\n    for i in range(2, n+1):\n        \n        # Check if i is a factor of n.\n        if n % i == 0:\n            \n            # Check if i is an even number.\n            if i % 2 == 0:\n                \n                # Add i to the sum_even_factors variable.\n                sum_even_factors += i\n    \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes in a number n and returns the sum of all even factors of n.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through all factors of n\n    for i in range(1, n+1):\n        \n        # Check if i is a factor of n and is even\n        if n % i == 0 and i % 2 == 0:\n            \n            # Add i to sum\n            sum += i\n    \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\bz\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function returns a list of all words in the given text that contain 'z'.\n    '''\n    word_list = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return word_list"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"The month contains 30 days\")\n    elif monthnum == 2:\n        print(\"The month of February contains 28 or 29 days\")\n    else:\n        print(\"The month contains 31 days\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number and returns True if it contains 31 days and False otherwise.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number\"\n\nprint(check_monthnumb_number(2)) # Output: True\nprint(check_monthnumb_number(1)) # Output: False\nprint(check_monthnumb_number(13)) # Output: Invalid month number"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum == 2:\n        print(\"The given month number contains 28 or 29 days.\")\n    else:\n        print(\"The given month number contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as an input and returns True if the month contains 31 days,\n    otherwise it returns False.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result_list = []\n    for string in stringlist:\n        result_list.append(string[::-1])\n    return result_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n\nstringlist = [\"hello\", \"world\", \"python\"]\nreversed_stringlist = reverse_string_list(stringlist)\nprint(reversed_stringlist)"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    This function takes a list of strings as an argument and reverses each string in the list.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for sub_lst in lst[1:]:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n            min_lst = sub_lst\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n            min_lst = sub_lst\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    This function finds the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list of lists as an input and returns the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_lst = lst[i]\n\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = len(lst[0])\n    min_lst = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(length, breadth):\n    \"\"\"\n    This function calculates the area of a rectangle.\n    \"\"\"\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(length, width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as inputs and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle given its length and width.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    Compute the area of a rectangle given its length and width.\n    \"\"\"\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(length, width):\n    '''\n    Returns the area of a rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression to match uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Replace all matches with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all substrings of uppercase letters\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Use a set to remove duplicates\n    uppercase_substrings = set(uppercase_substrings)\n    \n    # Use a list comprehension to remove all uppercase substrings from the original string\n    filtered_str = ''.join([c for i, c in enumerate(str1) if all(c.lower()!= sub.lower() for sub in uppercase_substrings) or i in [0, len(str1) - 1]])\n    \n    return filtered_str"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regex to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Replace each uppercase substring with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Use regular expression to match all uppercase substrings\n    uppercase_subs = re.findall(r'[A-Z]+', str1)\n    # Replace each uppercase substring with an empty string\n    for sub in uppercase_subs:\n        str1 = str1.replace(sub, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings using regex\n    uppercase_regex = re.compile('[A-Z]+')\n    uppercase_substrings = uppercase_regex.findall(str1)\n\n    # Remove all uppercase substrings from the original string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst): \n    return [sub[0] for sub in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function will extract the first element of each sublist and return a new list.\n    '''\n    return [sub_lst[0] for sub_lst in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Extract the first element of each sublist.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    This function will count the number of uppercase characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    This function takes a string as input and returns the count of upper case characters in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Counts the number of upper case characters in a given string.\n\n    Parameters:\n    str (string): The input string to be processed.\n\n    Returns:\n    int: The number of upper case characters in the input string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(list1[i] + list1[j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(1, len(list1)+1):\n        for j in itertools.combinations(list1, i):\n            comb_list.append(list(j))\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for combo in itertools.combinations(list1, i):\n            result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function finds all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    comb = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1<<j):\n                combo.append(lst[j])\n        comb.append(combo)\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            comb_list.append(list1[i]+list1[j])\n    return comb_list"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combos = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if (i >> j) & 1:\n                combo.append(list1[j])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for r in range(1, len(list1)+1):\n        combinations += list(itertools.combinations(list1, r))\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product subarray.\n\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = max(arr[i], current_product * arr[i])\n        \n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    end = 0\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            start = i\n            end = i\n        \n        if current_product < 0:\n            current_product = 1\n            \n    return arr[start:end+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    max_product_so_far = 1\n\n    for num in arr:\n        max_product_so_far *= num\n        max_product = max(max_product, max_product_so_far)\n\n        if max_product_so_far == 0:\n            max_product_so_far = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        min_so_far = min(arr[i], min_so_far * arr[i])\n        \n        max_product = max(max_product, max_so_far)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update current product\n        curr_product *= num\n\n        # Update maximum product if necessary\n        if curr_product > max_product:\n            max_product = curr_product\n\n        # Handle negative numbers\n        if num < 0:\n            curr_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum product subarray of the array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables for maximum product subarray and current product subarray\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array and update the current product and maximum product subarray\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_product_subarray = [arr[0]]\n    min_product_subarray = [arr[0]]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        else:\n            max_product = max(arr[i], min_product * arr[i])\n            min_product = min(arr[i], max_product * arr[i])\n        \n        if max_product > max_product_subarray[-1]:\n            max_product_subarray.append(max_product)\n        if min_product < min_product_subarray[-1]:\n            min_product_subarray.append(min_product)\n    \n    if len(max_product_subarray) > len(min_product_subarray):\n        return max(max_product_subarray)\n    else:\n        return max(min_product_subarray)"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[1], arr[0])\n    max_product = arr[0]\n    temp_product = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            temp_product = max(temp_product, arr[i])\n            max_product = max(max_product, temp_product)\n        else:\n            temp_product *= arr[i]\n            max_product = max(max_product, temp_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 1\n        elif max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in the dictionary are the same.\n\n    :param d: Dictionary to check\n    :param n: Number of values expected to be the same\n    :return: True if all values are the same, False otherwise\n    \"\"\"\n    if len(d) == 0:\n        return True\n    values = set(d.values())\n    if len(values) == 1:\n        return True\n    if len(values) > n:\n        return False\n    return all(val == values.pop() for val in d.values())"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Parameters:\n    d (dict): the dictionary to check\n    n (object): the value to check against\n\n    Returns:\n    bool: True if all values in the dictionary are the same, False otherwise\n    \"\"\"\n    for val in d.values():\n        if val!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n    \n    Args:\n        d: dictionary\n        n: value to check against\n    \n    Returns:\n        True if all values are n, False otherwise\n    \"\"\"\n    for value in d.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in the dictionary are the same.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    elif len(values) > 1:\n        return False\n    else:\n        raise ValueError('Dictionary has no values')"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values in a dictionary are the same.\n    '''\n    value = None\n    for i in dict.values():\n        if value is None:\n            value = i\n        elif i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes in a dictionary and a value n.\n    It checks if all values in the dictionary are the same.\n    If they are, it returns True. Otherwise, it returns False.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a number n as input,\n    and returns True if all the values in the dictionary are the same.\n    If not, it returns False.\n    '''\n    values = list(dict.values())\n    if len(values) == 0:\n        return False\n    for i in range(len(values)-1):\n        if values[i]!= values[i+1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n\n    Args:\n        dict (dict): The dictionary to check.\n        n (int): The length of the dictionary.\n\n    Returns:\n        bool: True if all values are the same, False otherwise.\n    '''\n\n    # Check if dictionary is empty or has only one element\n    if n < 2:\n        return True\n\n    # Get the first value in the dictionary\n    first_value = next(iter(dict.values()))\n\n    # Check if all values in the dictionary are the same as the first value\n    return all(value == first_value for value in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function takes a dictionary and an integer n as input. \n    It checks if all the values in the dictionary are the same.\n    If all the values are the same, it returns True. Otherwise, it returns False.\n    '''\n    # Initialize a variable to store the first value of the dictionary\n    value = list(dictionary.values())[0]\n    \n    # Check if all values are the same\n    for val in dictionary.values():\n        if val!= value:\n            return False\n    \n    # If all values are the same, return True\n    if len(dictionary) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as an input and returns a new dictionary with empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drops empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= \"\" and v!= [] and v!= {}}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and drops all the empty items from it.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize variables\n        max_so_far = arr[0]\n        min_so_far = arr[0]\n        max_ending_here = arr[0]\n        max_product_subseq = arr[0]\n        \n        # Traverse through the array\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n                min_so_far = arr[i]\n            elif arr[i] < min_so_far:\n                min_so_far = arr[i]\n            \n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n                max_product_subseq = arr[i]\n            elif min_so_far * max_ending_here > max_product_subseq:\n                max_product_subseq = min_so_far * max_ending_here\n        \n        return max_product_subseq"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_so_far = max_product_ending_here = arr[0]\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_product_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        # Find the maximum increasing subsequence\n        inc_seq = [arr[0]]\n        for i in range(1, n):\n            if arr[i] > inc_seq[-1]:\n                inc_seq.append(arr[i])\n            else:\n                j = bisect_left(inc_seq, arr[i])\n                inc_seq[j] = arr[i]\n        # Calculate the maximum product\n        max_prod = inc_seq[0]\n        for i in range(1, len(inc_seq)):\n            if inc_seq[i] > max_prod / inc_seq[i - 1]:\n                max_prod = inc_seq[i] * max_prod\n            else:\n                max_prod = inc_seq[i]\n        return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n\n    dp_max = [0] * n\n    dp_min = [0] * n\n\n    dp_max[0] = arr[0]\n    dp_max[1] = max(arr[0], arr[1])\n    dp_min[1] = min(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp_max[i] = max(dp_max[i-1], dp_max[i-2] * arr[i], dp_min[i-1] * arr[i])\n        dp_min[i] = min(dp_min[i-1], dp_min[i-2] * arr[i], dp_max[i-1] * arr[i])\n\n    return dp_max[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for i in range(1, n):\n            temp = max_ending_here\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            max_ending_here = max(max_ending_here, temp * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            temp = max_ending_here\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = temp\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_so_far = arr[0]\n        min_so_far = arr[0]\n        max_ending_here = arr[0]\n        max_product_ending_here = arr[0]\n\n        for i in range(1, n):\n            max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n            min_so_far = min(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if max_ending_here > max_product_ending_here:\n                max_product_ending_here = max_ending_here\n\n        return max_product_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = float('-inf')\n\n    for num in arr:\n        temp = max_ending_here * num\n        max_ending_here = min(max_ending_here * num, min_ending_here * num, num)\n        min_ending_here = min(temp, min_ending_here * num, num)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize the maximum product to the first element of the array\n    max_product = arr[0]\n\n    # Initialize the minimum product to the first element of the array\n    min_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, n):\n        if arr[i] >= 0:\n            # If the element is positive, update the maximum product\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n        else:\n            # If the element is negative, update the maximum product\n            temp = max_product\n            max_product = max(min_product * arr[i], arr[i])\n            min_product = min(temp * arr[i], arr[i])\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return (test_tup[0] + test_tup[1], test_tup[-2] + test_tup[-1])"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a tuple containing the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result_tup = ()\n    for i in range(n-1):\n        result_tup += (test_tup[i] + test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    mod = 1\n    for i in arr:\n        mod = (mod * i) % n\n    return mod"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n\narr = [1, 2, 3, 4]\nn = 5\nprint(\"Product of array multiplication modulo n is:\", find_remainder(arr, n))"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers or else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if it contains consecutive numbers, else returns False.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether a given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers,\n    otherwise it returns False.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and checks whether the list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_consecutive(l):\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1 or l[i+1] == l[i] - 1:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from the first list and another set from the second list\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets using the & operator\n    intersection = set1 & set2\n    # Convert the intersection set back to a list of tuples and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection between the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function returns a set of tuples that are common to both the given lists irrespective of their order.\n    '''\n    set1 = set(tuple(sorted(x)) for x in test_list1)\n    set2 = set(tuple(sorted(x)) for x in test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create sets of tuples to eliminate duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets and convert it back to a list of tuples\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert lists to sets of tuples to remove duplicates and then back to lists for comparison\n    set1 = list(set(tuple(t) for t in test_list1))\n    set2 = list(set(tuple(t) for t in test_list2))\n\n    # Use set intersection to find common tuples between sets\n    intersection = set1 & set2\n\n    # Convert set back to list of tuples for output\n    result = list(tuple(t) for t in intersection)\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the list to a set of tuples to remove duplicates\n    set1 = set(tuple(x) for x in test_list1)\n    set2 = set(tuple(x) for x in test_list2)\n    \n    # Find the intersection between the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a list of tuples\n    result = [list(x) for x in intersection]\n    \n    # Sort the result by the first element of each tuple\n    result.sort(key=lambda x: x[0])\n    \n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the given lists to sets to remove duplicates and then convert them back to tuples\n    test_set1 = set(tuple(x) for x in test_list1)\n    test_set2 = set(tuple(x) for x in test_list2)\n\n    # Find the intersection of the two sets\n    intersection = test_set1.intersection(test_set2)\n\n    # Convert the intersection set back to a list of tuples\n    result_list = [list(x) for x in intersection]\n\n    # Return the list of tuples\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    :param str1: The input string.\n    :param ch: The character to be replaced.\n    :param newch: The new character to replace the old character.\n    :return: The modified string with the replaced characters.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of character 'ch' in string'str1' with 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string, a character to be replaced, and the new character,\n    and returns a new string with the old character replaced by the new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character in a given string with a new character.\n\n    Parameters:\n    str1 (str): The string in which the character needs to be replaced.\n    ch (str): The character that needs to be replaced.\n    newch (str): The new character that will replace the old character.\n\n    Returns:\n    str: The modified string with the new character in place of the old character.\n    \"\"\"\n    # Create an empty string to store the modified string\n    new_str = \"\"\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character matches the old character, replace it with the new character\n        if char == ch:\n            new_str += newch\n        # Otherwise, add the character to the new string\n        else:\n            new_str += char\n\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of ch in str1 with newch.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n\n    Args:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n\n    Returns:\n    str: The modified string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and sorts it by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    count = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_count = count.most_common()\n\n    # Convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_count)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and returns a sorted list of tuples, \n    where the tuples consist of the key-value pairs in the dictionary sorted by their values.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    nums.sort()  # Sort the array in ascending order\n    return nums[0] + nums[-1]  # Return the sum of the first and last elements of the sorted array\n"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array as an input and returns the sum of the largest and smallest value in the array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the sum of the first and last element of the sorted array\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((max(nums), min(nums)))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    smallest = nums[0]\n    largest = nums[0]\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an input and returns True if all the characters in the string are lowercase, otherwise it returns False.\n    '''\n    for char in string:\n        if not char.islower():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lowercase, otherwise False.\n    '''\n    return string.lower() == string"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function will convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b\\w*[a-z]\\w*\\b', re.IGNORECASE)\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes all lowercase substrings from the given string.\n    '''\n    # Use regular expression to match any sequence of lowercase letters\n    pattern = r'\\b[a-z]+\\b'\n    # Use re.sub() function to replace all matches with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    lowercase_pattern = r'\\b[a-z]+\\b'\n    return re.sub(lowercase_pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Use a regular expression to find all lowercase substrings in the string\n    regex = re.compile(r'\\b[a-z]+\\b')\n    matches = regex.findall(str1)\n    \n    # Remove the lowercase substrings from the original string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    \n    # find all the matches in the string using the pattern\n    matches = re.findall(pattern, str1)\n    \n    # remove the matches from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # Converting negative number to positive for finding the first digit.\n    return n // 10**(len(str(n))-1)  # Using integer division to find the first digit.\n"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    if n == 0:\n        return 0\n    return abs(n) // 10**(int(str(abs(n))[0])-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n *= -1\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an argument and returns the first digit of that number.\n    '''\n    if n < 0:  # If the number is negative, convert it to positive and get the first digit of that positive number\n        return first_Digit(abs(n))\n    elif n == 0:  # If the number is 0, return 0\n        return 0\n    else:\n        return int(str(n)[0])  # If the number is positive, return the first digit of the number"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    # convert the number to string and get the first digit\n    first_digit = int(str(n)[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string (which is the first digit)\n    first_digit = num_str[0]\n    # convert the first character back to an integer\n    first_digit_int = int(first_digit)\n    # return the integer value of the first digit\n    return first_digit_int"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number n as input and returns the first digit of n.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(lst):\n    odd = []\n    even = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list containing only the odd integers in the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [i for i in lst if i % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Takes a list of integers and returns only the odd ones.\n\n    Args:\n    lst (list): List of integers.\n\n    Returns:\n    list: List of odd integers.\n\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd numbers.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_odd_numbers(lst):\n    \"\"\"\n    Takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Returns a new list with only the odd numbers of the input list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_odd(nums):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # sum of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n    \n    # difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    diff = sum_of_cubes - sum_of_n\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n\n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n    \n    # Calculate and return the difference\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Finding the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Finding the sum of first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n    \n    # Calculating the difference\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    This function takes an integer 'n' as an argument and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of first n natural numbers\n    cube_sum = n * (n+1) * (2*n+1) // 6\n    \n    # Calculate the sum of first n natural numbers\n    num_sum = n * (n+1) // 2\n    \n    # Calculate the difference\n    diff = cube_sum - num_sum\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to store the sum of the first n natural numbers and the sum of cubes of the first n natural numbers\n    sum_n = 0\n    sum_cubes_n = 0\n    \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_n += i\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for j in range(1, n+1):\n        sum_cubes_n += i**3\n    \n    # Return the difference between the two sums\n    return sum_n**3 - sum_cubes_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n        \n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j])%2!=0:\n                count+=1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    This function counts the number of pairs whose xor value is odd in the array A.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] % 2!= 0 : \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable to zero\n    count = 0\n    \n    # Iterate through the array and count the number of pairs whose xor value is odd\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    \n    # Return the count of pairs whose xor value is odd\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N-1) : \n        for j in range(i+1, N) : \n            if (A[i] ^ A[j]) & 1 == 1 : \n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    This function takes a string as input and toggles the case of all characters in the string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of all characters toggled.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    digit_distance = 0\n    for i in range(len(n1_str)):\n        digit_distance += abs(int(n1_str[i]) - int(n2_str[i]))\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and extract the digits\n    str1 = str(n1)\n    str2 = str(n2)\n    digits1 = [int(d) for d in str1]\n    digits2 = [int(d) for d in str2]\n\n    # Calculate the per-digit difference and return the sum\n    distance_sum = sum([abs(d1 - d2) for d1, d2 in zip(digits1, digits2)])\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings so we can easily access each digit\n    n1 = str(n1)\n    n2 = str(n2)\n\n    # Initialize the sum of differences\n    diff_sum = 0\n\n    # Iterate over the digits of the two numbers\n    for i in range(len(n1)):\n        # Calculate the absolute difference between the digits\n        diff = abs(int(n1[i]) - int(n2[i]))\n\n        # Add the difference to the sum\n        diff_sum += diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to strings to easily extract the digits\n    n1 = str(n1)\n    n2 = str(n2)\n    \n    # initialize the sum of the per-digit difference\n    digit_sum = 0\n    \n    # iterate over the digits of the two integers and calculate the difference\n    for i in range(len(n1)):\n        digit_sum += abs(int(n1[i]) - int(n2[i]))\n    \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert integers to strings to make it easier to find per-digit difference\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # initialize variables to store sum of per-digit difference and length of the integers\n    digit_distance_sum = 0\n    length = min(len(n1_str), len(n2_str))\n    \n    # loop through the integers and add the difference of each digit to the sum\n    for i in range(length):\n        digit_distance_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    # return the sum of per-digit difference\n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    if n1 < n2:\n        n1, n2 = n2, n1\n    digit_sum = 0\n    while n1 > 0:\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings and get the length of the strings\n    str1 = str(n1)\n    str2 = str(n2)\n    length = len(str1)\n    \n    # Initialize the sum of digit differences to 0\n    digit_diff_sum = 0\n    \n    # Loop through the digits of the numbers and add the absolute difference to the sum\n    for i in range(length):\n        digit_diff_sum += abs(int(str1[i]) - int(str2[i]))\n    \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # initialize the sum to zero\n    digit_diff_sum = 0\n    \n    # iterate through the digits in the strings\n    for i in range(len(n1_str)):\n        # subtract the current digit from the corresponding digit in n2_str and add the absolute value to digit_diff_sum\n        digit_diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n        \n    # return the sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Calculate the sum of the per-digit difference\n    digit_diff_sum = 0\n    for i in range(len(str1)):\n        digit_diff_sum += abs(int(str1[i]) - int(str2[i]))\n    \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n    digit_diff_sum = 0\n    for i in range(len(n1_digits)):\n        digit_diff_sum += abs(n1_digits[i] - n2_digits[i])\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function returns the maximum sum of a contiguous sublist of a given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]  # initialize max_sum with the first element of the list\n    current_sum = a[0]  # initialize current_sum with the first element of the list\n\n    # iterate through the list from the second element to the last element\n    for i in range(1, size):\n        # add the current element to current_sum\n        current_sum += a[i]\n\n        # if current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if current_sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function returns the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function takes a list and its size as input and returns the sum of the largest contiguous sublist.\n    '''\n    # Initialize the variables max_so_far and max_ending_here\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    # Traverse through the array and update max_ending_here and max_so_far\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to sets to perform set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # perform set union and convert back to list\n    union_list = sorted(list(set1.union(set2)))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(set(test_tup1).union(test_tup2))\n    union_tup = sorted(union_tup)\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the two sets and convert back to a sorted list\n    union = sorted(set1.union(set2))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple and another set from the second tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the union of the two sets and store it in a new set\n    union_set = set1.union(set2)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(union_set))\n\n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set to get only unique elements\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a sorted list\n    sorted_list = sorted(list(unique_set))\n    \n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    # Convert the set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    # Print the resulting tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Converting tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Finding union of sets\n    union_set = set1.union(set2)\n\n    # Converting union set back to tuple and sorting it\n    result = tuple(sorted(union_set))\n\n    # Printing the result\n    print(result)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set of all the elements in test_tup1 and test_tup2\n    unique_elements = set(test_tup1).union(set(test_tup2))\n    \n    # Sort the unique elements in ascending order and return them as a list\n    return sorted(list(unique_elements))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of the elements in test_tup1\n    set1 = set(test_tup1)\n    \n    # create a set of the elements in test_tup2\n    set2 = set(test_tup2)\n    \n    # create a set that contains the union of the two sets\n    union_set = set1.union(set2)\n    \n    # convert the set to a sorted list and return it\n    sorted_list = sorted(list(union_set))\n    \n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of the elements in the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set of the elements in the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the union of the sets by combining them\n    union = set1.union(set2)\n    \n    # Sort the union set and output it\n    sorted_union = sorted(union)\n    return sorted_union"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n            \n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i > max_length:\n                max_length = j-i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a list.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a given list.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    # use regular expression to find all matches of quoted values in the text\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    # return a list of the matched values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expressions to find all occurrences of values between quotation marks\n    pattern = r'\"[^\"]+\"'\n    matches = re.findall(pattern, text)\n    \n    # Remove the quotation marks from each match and return a list of the values\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]+\"'\n    matches = re.findall(pattern, text)\n    values = [match[1:-1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    # Find all matches of the pattern between quotation marks\n    matches = re.findall(r'\"(.*?)\"', text)\n\n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    values = re.findall(r'\"(.*?)\"', text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    pairs = 0\n    \n    # Counting unordered pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    \n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n    :param arr: list of integers\n    :param n: length of the list\n    :return: number of possible unordered pairs\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as an argument and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function splits a string into individual characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    else:\n        return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    # Convert the integer to a string so we can iterate over its characters\n    n_str = str(n)\n    # Initialize the sum to zero\n    total = 0\n    # Iterate over the characters of the string and add their integer values to the sum\n    for digit in n_str:\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be non-negative\"\n    else:\n        digits_sum = 0\n        while n > 0:\n            digits_sum += n % 10\n            n //= 10\n        return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of its digits.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    This function will check whether a given list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a given list is sorted or not.\n    :param lst: A list of integers.\n    :return: True if the list is sorted, False otherwise.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    '''\n    Function to check if a given list is sorted or not.\n    Returns True if the list is sorted, False otherwise.\n    '''\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    return list1 == sorted(list1)"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = []\n    for i in range(length):\n        list_of_dicts.append({})\n    return list_of_dicts"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Args:\n    list1 (list): A list of lists of strings.\n\n    Returns:\n    list: A sorted list of lists of strings.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function takes a list of lists as input and sorts each sublist of strings.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes in a list of lists of numbers and removes the duplicate numbers\n    from each list. It returns two lists, each containing two unique numbers.\n    \"\"\"\n    # Define an empty list to store the unique numbers\n    unique_nums = []\n    \n    # Loop through each list in the input list\n    for lst in nums:\n        # Remove duplicates from the list using set() and append the unique numbers to the unique_nums list\n        unique_nums.append(list(set(lst)))\n    \n    # If the length of the unique_nums list is less than 2, raise an error\n    if len(unique_nums) < 2:\n        raise ValueError(\"The input list must contain at least two lists.\")\n    \n    # Select two unique lists from the unique_nums list\n    result_1 = unique_nums[0]\n    result_2 = unique_nums[1]\n    \n    # If there are more than 2 unique lists, select two more at random\n    if len(unique_nums) > 2:\n        import random\n        for i in range(2, len(unique_nums)):\n            result_1.append(random.choice(unique_nums[i]))\n            result_2.append(random.choice(unique_nums[i]))\n    \n    # If there are less than 2 unique numbers in the first list, raise an error\n    if len(result_1) < 2:\n        raise ValueError(\"The first list must contain at least two unique numbers.\")\n    \n    # If there are less than 2 unique numbers in the second list, raise an error\n    if len(result_2) < 2:\n        raise ValueError(\"The second list must contain at least two unique numbers.\")\n    \n    # Return the two unique lists\n    return result_1, result_2"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if len(num) == len(set(num)):\n            unique_nums.update(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and removes duplicate numbers from each list.\n    '''\n    result = []\n    for i in nums:\n        unique_nums = set(i)\n        result.append(list(unique_nums))\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists of integers as input and removes any duplicate numbers from the list of lists.\n    The function returns a list of two unique numbers that are found in the original list of lists.\n    '''\n    # Flatten the list of lists into a single list\n    flat_list = [num for sublist in nums for num in sublist]\n    \n    # Remove any duplicate numbers from the flat list\n    unique_nums = list(set(flat_list))\n    \n    # Check if there are at least two unique numbers in the list\n    if len(unique_nums) < 2:\n        print(\"Error: There are not at least two unique numbers in the list.\")\n        return None\n    \n    # Return the two unique numbers\n    return [unique_nums[0], unique_nums[1]]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns two unique numbers from each list.\n    If there are less than two unique numbers in a list, it returns None for that list.\n    \"\"\"\n    unique_nums = []\n    for lst in nums:\n        unique_lst = list(set(lst))\n        if len(unique_lst) < 2:\n            unique_nums.append(None)\n        else:\n            unique_nums.append(unique_lst)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return len(unique_nums) == 2"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list with unique numbers.\n    '''\n    # Initialize an empty set to keep track of unique numbers\n    unique_nums = set()\n    # Loop through each sublist in the input list\n    for sublist in nums:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # Add the number to the set if it's not already there\n            unique_nums.add(num)\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for i in nums:\n        unique_nums.update(i)\n    return len(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    unique_nums = list(unique_nums)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # create a set of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num  # multiply the product by each unique number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(filter(lambda x: list_data.count(x) == 1, list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique elements in the list.\n    \"\"\"\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and calculates the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns the surface area of the cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nprint(\"The surface area of the cylinder is:\", surfacearea_cylinder(radius, height))"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function finds the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius of the cylinder and its height as input parameters and returns the surface area of the cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r**2"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    Check whether a list A is a sublist of another list B or not.\n    \"\"\"\n    i = 0  # Initialize the start index of list B\n    for sub_arr in B:\n        if sub_arr == A[0]:  # If the first element of A is found at the start of list B\n            j = 0  # Initialize the start index of A in B\n            while j < len(A) and i < len(B):  # Loop through both lists until they are exhausted\n                if A[j] == B[i]:  # If the elements match\n                    j += 1  # Increment the index of A\n                    i += 1  # Increment the index of B\n                else:  # If the elements don't match\n                    break  # Break out of the loop\n            if j == len(A):  # If all elements of A have been found in B\n                return True  # Return True\n        i += 1  # Increment the index of list B\n    return False  # If all sublists have been checked and none of them match A"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n    \"\"\"\n    # If list A is empty, then it cannot be a sublist of list B\n    if not A:\n        return False\n    \n    # If list A is equal to list B, then it cannot be a sublist of list B\n    if A == B:\n        return False\n    \n    # Initialize two pointers, one at the beginning of list A and one at the beginning of list B\n    i = 0\n    j = 0\n    \n    # Loop through list A and list B, comparing each element at the same index\n    while i < len(A) and j < len(B):\n        # If the elements at the current index match, move both pointers to the next index\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        # If the element in list A is smaller than the element in list B, move the pointer for list A to the next index\n        elif A[i] < B[j]:\n            i += 1\n        # If the element in list B is smaller than the element in list A, move the pointer for list B to the next index\n        else:\n            j += 1\n    \n    # If the loop completes without returning False, then A is a sublist of B\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, otherwise, it returns False.\n    '''\n    if len(A) > len(B): \n        return False\n    \n    for i in range(len(B)-len(A)+1): \n        for j in range(len(A)): \n            if B[i+j]!= A[j]: \n                break\n        else: \n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    start = 0\n    end = len(B) - 1\n    while start <= len(A) - len(B):\n        if A[start:end+1] == B:\n            return True\n        start += 1\n        end += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    This function checks whether list A is a sublist of list B.\n\n    Args:\n    A (list): List A.\n    B (list): List B.\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n\n    \"\"\"\n\n    # Initialize two pointers, one at the start of list B and the other at the start of list A.\n    ptr1, ptr2 = 0, 0\n\n    # Traverse both lists simultaneously.\n    while ptr1 < len(B) and ptr2 < len(A):\n\n        # If the elements at both pointers are equal, move both pointers to the next position.\n        if B[ptr1] == A[ptr2]:\n            ptr1 += 1\n            ptr2 += 1\n\n        # If the element at pointer 2 is greater than the element at pointer 1, move pointer 1 to the next position.\n        elif B[ptr1] < A[ptr2]:\n            ptr1 += 1\n\n        # If the element at pointer 2 is less than the element at pointer 1, list A cannot be a sublist of B.\n        else:\n            return False\n\n    # If all elements of list A have been traversed and they all match with the elements of list B, list A is a sublist of B.\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return set(A) <= set(B)"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists, A and B, and checks whether A is a sublist of B or not.\n    If it is, it returns True, else it returns False.\n    \"\"\"\n    A_len = len(A)\n    B_len = len(B)\n    \n    if A_len > B_len:\n        return False\n    \n    for i in range(B_len - A_len + 1):\n        if B[i:i+A_len] == A:\n            return True\n        \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function returns True if list A is a sublist of list B, and False otherwise.\n    \"\"\"\n    # Check if A is a sublist of B by iterating through B and checking if all elements of A are present in B.\n    for i in range(len(B) - len(A) + 1):\n        if all(B[i+j] == A[j] for j in range(len(A))):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function checks if the list A is a sublist of list B or not.\n    '''\n\n    # If list A is empty, return True\n    if not A:\n        return True\n\n    # Create a copy of list B\n    temp_B = B[:]\n\n    # Loop through list A and check if each element is present in temp_B\n    for i in A:\n        if i not in temp_B:\n            return False\n        temp_B.remove(i)\n\n    # If all elements of list A are present in temp_B, return True\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function checks whether a list is a sublist of another or not.\n    '''\n    if A == B: \n        return True\n    \n    for i in range(len(B)-len(A)+1): \n        for j in range(len(A)): \n            if B[i+j]!= A[j]: \n                break\n        else: \n            return True\n            \n    return False "
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    # Calculate the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    # If n is less than or equal to 1, return n\n    if n <= 1:\n        return n\n    \n    # Find the factorial of n\n    factorial = 1\n    for i in range(2, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= i\n        \n    return result % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        while n > 0:\n            fact *= n\n            n -= 1\n        last_digit = fact % 10\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    # Calculate factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Find last digit of factorial\n    last_digit = fact % 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to hold the interleaved lists\n    interleaved_list = []\n    \n    # Loop through each element of the first list and add it to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves three lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        print(\"Error: all lists must be of the same length.\")\n        return None\n    \n    # Initialize an empty list to store the interleaved values\n    interleaved_list = []\n    \n    # Loop through the lists and add the values to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n\n    # Flatten the input lists into a single list\n    flat_list = [x for pair in zip(list1, list2, list3) for x in pair]\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list3)!= len(list1):\n        return \"Error: All 3 lists must have the same length.\"\n    else:\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list3)!= len(list1):\n        raise ValueError(\"All lists must be of the same length.\")\n    \n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    return [x for pair in zip(list1, list2, list3) for x in pair]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar = []\n    \n    # Loop through the elements in the first tuple\n    for elem in test_tup1:\n        # If the element is not in the second tuple, add it to the dissimilar list\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n            \n    # Loop through the elements in the second tuple\n    for elem in test_tup2:\n        # If the element is not in the first tuple, add it to the dissimilar list\n        if elem not in test_tup1:\n            dissimilar.append(elem)\n    \n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing\n    the dissimilar elements.\n    '''\n    dissimilar_elements = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements += (test_tup1[i],)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_elements = []\n\n    # Iterate over the elements of the first tuple\n    for element in test_tup1:\n        # If the element is not present in the second tuple, append it to the dissimilar_elements list\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append((i, test_tup1[i], test_tup2[i]))\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, int) or isinstance(i, float):\n            if even_fnc(i):\n                new_tuple.append(i)\n        elif isinstance(i, tuple) or isinstance(i, list):\n            new_list = even_ele(i, even_fnc)\n            if new_list:\n                new_tuple.append(new_list)\n    return new_tuple\n\ndef is_even(num):\n    '''\n    A helper function to check if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \n    Parameters:\n    test_tuple (tuple): A tuple containing nested tuples and values.\n    even_fnc (function): A function that returns True if the input is even.\n    \n    Returns:\n    A new tuple with uneven elements removed.\n    \"\"\"\n    new_tuple = ()\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple += (even_ele(item, even_fnc),)\n        elif even_fnc(item):\n            new_tuple += (item,)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == int:\n            new_tuple.append(element)\n        elif type(element) == tuple:\n            new_tuple.append(even_fnc(element))\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested tuple as input and a function to check if an element is even or not.\n    It removes the uneven elements from the nested tuple and returns the modified tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            sub_tuple = []\n            for j in i:\n                if even_fnc(j):\n                    sub_tuple.append(j)\n            result.append(tuple(sub_tuple))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple.append(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                new_tuple.append(element)\n    return tuple(new_tuple)\n\ndef is_even(num):\n    '''\n    Write a function to check if a number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return tuple(result)\n\n\ndef is_even(num):\n    '''\n    A helper function to check if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], int):\n            new_list.append(test_tuple[i])\n        else:\n            new_list.extend(even_fnc(test_tuple[i]))\n    \n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = ()\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple += even_ele(item, even_fnc)\n        else:\n            if even_fnc(item):\n                new_tuple += (item,)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = 2*(b*s) # area of the base\n    lateral_area = b*b + (b/2)*s # area of the lateral faces\n    total_area = base_area + 4*lateral_area # total area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b, h):\n    '''\n    This function takes base edge and height of a square pyramid as inputs and returns the surface area of the pyramid.\n    '''\n    area = 6 * (b ** 2) + 4 * (b * h)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = 2 * b * s\n    \n    # Calculate the area of the side of the square pyramid\n    area_side = (2 * b * b) + (2 * b * s)\n    \n    # Calculate the total surface area of the square pyramid\n    total_area = area_base + area_side\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    area_base = 6 * b * s\n    \n    # Calculate the area of the slant\n    area_slant = 2 * b * s\n    \n    # Calculate the total surface area\n    total_area = area_base + area_slant\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the square base\n    area_base = (b*b)\n    # calculate the area of the square side\n    area_side = (s*s)\n    # calculate the area of the square apex\n    area_apex = (b*s)\n    # calculate the total surface area\n    surface_area = (4*(area_base + area_side + area_apex))\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # calculate the area of the square on top of the pyramid\n    square_area = 2 * (base_edge ** 2)\n    \n    # calculate the area of the triangle on top of the pyramid\n    triangle_area = 0.5 * base_edge * height\n    \n    # add up all the areas\n    total_area = base_area + square_area + triangle_area\n    \n    # return the total area as the surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    '''\n    Returns the surface area of a square pyramid with given base and height.\n    '''\n    return 4 * base * height + 4 * base ** 2  # 4 base areas + 4 lateral areas"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculate the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n        b (float): The base edge of the square pyramid.\n        s (float): The height of the square pyramid.\n\n    Returns:\n        float: The surface area of the square pyramid.\n    '''\n\n    # Calculate the area of the square base\n    area_base = (2 * b ** 2)\n\n    # Calculate the area of the square side faces\n    area_side = 4 * b * s\n\n    # Calculate the area of the square top face\n    area_top = (2 * b * s) + (s ** 2)\n\n    # Calculate the total surface area of the square pyramid\n    total_area = area_base + area_side + area_top\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (2*b*s) + (2*b*b) + (2*b*b)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    This function finds the surface area of a square pyramid with a given base edge and height.\n    Parameters:\n    b (float): The length of the base edge of the square pyramid.\n    s (float): The height of the square pyramid.\n    Returns:\n    float: The surface area of the square pyramid.\n    '''\n    # calculate the area of each face of the pyramid\n    face_area = (b**2 + b**2) / 4\n    # calculate the area of the two triangular bases\n    base_area = b**2\n    # calculate the total surface area\n    total_area = face_area * 4 + base_area\n    # return the total surface area\n    return total_area * s"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    '''\n    return bool(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    catalan = [0] * (num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, num+1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n            \n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n\n    :param n: int - the index of the catalan number to be calculated.\n    :return: int - the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = 1\n        for i in range(2, n+1):\n            c = (2*i) * c // (i+1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (4 * n - 2) * catalan_number(n-1) / (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes an integer num as input and returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan = [0] * (num+1)\n        catalan[0] = 1\n        for i in range(1, num+1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i-j-1]\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function takes an integer n and returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = [0] * (n + 1)\n        c[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                c[i] += c[j] * c[i - j - 1]\n        return c[n]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function calculates the nth catalan number.\n\n    Args:\n    num: An integer which represents the position of the catalan number.\n\n    Returns:\n    An integer which represents the nth catalan number.\n    \"\"\"\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(num):\n            catalan_num += catalan_number(i) * catalan_number(num-i-1)\n        return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        c = [0] * (num+1)\n        c[0] = 1\n        c[1] = 1\n        for i in range(2, num+1):\n            for j in range(i):\n                c[i] += c[j] * c[i-j-1]\n        return c[num]"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    # Regular expression to match adverbs ending with \"ly\"\n    pattern = r\"\\b\\w+ly\\b\"\n    # Find all matches in the text using the regular expression\n    matches = re.findall(pattern, text)\n    # Return the first match and its positions\n    return matches[0], [m.start() for m in re.finditer(pattern, text)]"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverb words ending with \"ly\" in the text\n    pattern = r'\\b\\w*ly\\b'\n    adverbs = re.findall(pattern, text)\n\n    # If there are no adverbs ending with \"ly\", return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb ending with \"ly\"\n    first_ly_adverb = adverbs[0]\n    position = text.index(first_ly_adverb)\n\n    return (first_ly_adverb, position)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.group(), match.start())"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.finditer(pattern, text)\n    adverbs = [(match.group(), match.start(), match.end()) for match in matches]\n    if adverbs:\n        return adverbs[0]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all occurrences of adverbs ending with \"ly\"\n    adverb_matches = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # If no adverbs ending with \"ly\" were found, return None\n    if not adverb_matches:\n        return None\n    \n    # Otherwise, return the first adverb ending with \"ly\" and its positions\n    first_adverb = adverb_matches[0]\n    first_adverb_start = text.find(first_adverb)\n    first_adverb_end = first_adverb_start + len(first_adverb) - 2\n    return first_adverb, (first_adverb_start, first_adverb_end)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    # pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    \n    # find all matches in the text using the pattern\n    matches = re.finditer(pattern, text)\n    \n    # iterate over the matches and return the first one\n    for match in matches:\n        return match.group(), match.start()\n    \n    # if no matches are found, return None\n    return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb = re.search(r'\\w+ly', text)\n    if adverb:\n        return (adverb.group(), adverb.start())\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'  # match any sequence of one or more word characters followed by \"ly\" surrounded by word boundaries\n    matches = re.finditer(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        adverbs.append((adverb, start, end))\n    if adverbs:\n        first_adverb, _, _ = adverbs[0]\n        return first_adverb\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with \"ly\" and returns its position in the string.\n    '''\n    # Find all adverbs ending with \"ly\" in the text using regular expression\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    # If no adverbs ending with \"ly\" are found, return None\n    if not adverbs:\n        return None\n    # Otherwise, return the first adverb's position in the string\n    return text.index(adverbs[0])"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n\n    most_expensive = []\n    for i in range(n):\n        most_expensive.append(heapq.heappop(heap))\n\n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n as inputs.\n    The function returns the n most expensive items in the list.\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heapreplace(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in the given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a priority queue (min heap) to store the items by price\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Pop the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items list into a list of tuples where the first element of each tuple is the price and the second element is the item name\n    prices_items = [(item[1], item[0]) for item in items]\n    # Use the heapq module to build a max heap of the prices_items list\n    heapq.heapify(prices_items)\n    # Create an empty list to store the n most expensive items\n    most_expensive = []\n    # Iterate over the heap of prices_items and add the n most expensive items to the most_expensive list\n    for i in range(n):\n        most_expensive.append(heapq.heappop(prices_items)[1])\n    # Return the list of n most expensive items\n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of tuples (item, price) and returns a list of the n most expensive items.\n    '''\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (-price, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    result = [item for price, item in heapq.nlargest(n, heap)]\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list and an integer n as input.\n    The function splits the list at the nth element and adds the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as an input and returns a tuple.\n    \"\"\"\n    return tuple(lst)\n"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and returns a tuple containing the elements of the list.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns the equivalent tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and returns a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns a tuple.\n\n    Parameters:\n    lst (list): A list to be converted to a tuple.\n\n    Returns:\n    tuple: A tuple containing the elements of the input list.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    # Calculate the difference between the largest and smallest values\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between largest and smallest number in the list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # If a is greater than or equal to b, return an empty list\n    if a >= b:\n        return []\n\n    # Initialize an empty list to store perfect squares\n    squares = []\n\n    # Loop through the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if num == root**2:\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    i = a\n    while i <= b:\n        j = 1\n        while i + j*j <= b:\n            result.append(i + j*j)\n            j += 1\n        i += 1\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root*root == num:\n            result.append(num)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list_of_squares = []\n    for num in range(a, b+1):\n        if num > 0 and num**0.5 == int(num**0.5):\n            list_of_squares.append(num)\n    return list_of_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i > 0 and int(i ** 0.5) ** 2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num > 0 and int(num**0.5)**2 == num:\n            perfect_squares.append(num)\n\n    return perfect_squares"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in polar coordinates as arguments and returns the\n    equivalent rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(y*1j)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius.\n    theta (float): The angle in radians.\n\n    Returns:\n    (float, float): The rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n        r (float): The distance from the origin.\n        theta (float): The angle from the x-axis in radians.\n\n    Returns:\n        A tuple of floats representing the rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    This function takes in two arguments, x and y, which represent the polar coordinates of a point.\n    It returns the rectangular coordinates of that point.\n    \"\"\"\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))[0]\n    theta = cmath.polar(complex(x,y))[1]\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Converts polar coordinates (rho, theta) to rectangular coordinates (x, y).\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements\")\n        return\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n    else:\n        print(\"List should have at least 2 elements\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"Swapped elements:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and swaps the first and last elements of the list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The number of trials\n    k (int): The number of successful trials\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients\n    \"\"\"\n\n    # Initialize the variables\n    sum = 1\n    a = 1\n    b = 1\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k):\n        c = a * b\n        sum += c\n        a = (a * (n - i)) // (i + 1)\n        b = (b * (i + 1)) // (i + 2)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        result = 1\n        for i in range(k):\n            result = result * (n - i) / (i + 1)\n        return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    return ((2*n) + 1)//2 * k\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the result variable\n    result = 1\n    \n    # Calculate the binomial coefficient using a loop\n    for i in range(1,k+1):\n        result *= n-i+1\n        result //= i\n    \n    # Return the result\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_coeff(n, k):\n    \"\"\"\n    Computes the binomial coefficient (n choose k).\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coeff(n-1, k-1) + binomial_coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Compute the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two parameters n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Returns the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all the values of k from 0 to k\n    for i in range(k+1):\n        # Calculate the binomial coefficient using the formula nCr = n!/(k!(n-k)!)\n        C = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        # Add the product of the binomial coefficient and i to the sum\n        sum += C * i\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    numerator = 1\n    denominator = 1\n    for i in range(k):\n        numerator *= n - i\n        denominator *= i + 1\n    return numerator // denominator\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over the range of k to n\n    for i in range(k, n+1):\n        # Calculate the binomial co-efficient for i, k\n        coeff = binomial(i, k)\n        # Multiply the co-efficient with the previous product and add it to the sum\n        sum += coeff * sum_product(i-1, k-1)\n    \n    return sum\n\ndef binomial(n, k):\n    \"\"\"\n    This function returns the binomial co-efficient for n choose k.\n    \"\"\"\n    # Calculate the binomial co-efficient\n    coeff = 1\n    for i in range(k):\n        coeff = coeff * (n-i) / (i+1)\n    \n    return coeff\n\ndef sum_product(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over the range of k to n\n    for i in range(k, n+1):\n        # Calculate the binomial co-efficient for i, k\n        coeff = binomial(i, k)\n        # Multiply the co-efficient with the previous product and add it to the sum\n        sum += coeff * sum_product(i-1, k-1)\n    \n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^0*(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)$')\n    match = pattern.match(ip)\n    if match:\n        return match.group('ip')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0*(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an ip address.\n    '''\n    # Find all the groups of digits separated by a dot\n    groups = re.findall(r'(\\d+\\.)', ip)\n    # Remove the leading zeroes from each group and join them with a dot\n    result = '.'.join([group.lstrip('0') or '0' for group in groups])\n    # Return the result\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0*)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove all instances of leading zeroes using regular expressions\n    ip = re.sub(r'(?<!\\.)0+(\\d+)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^0\\d+\\.0\\d+\\.0\\d+\\.0\\d+$', ip):\n        # if ip address contains leading zeroes\n        ip = ip.replace('00', '0', 1).replace('0', '', 1)\n        return ip\n    else:\n        # if ip address does not contain leading zeroes\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into octets\n    octets = ip.split('.')\n    \n    # Remove leading zeroes from each octet\n    octets = [str(int(octet)) if int(octet) > 0 else octet for octet in octets]\n    \n    # Join the octets back together into an ip address\n    new_ip = '.'.join(octets)\n    \n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0*(?=\\d)', '', ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Find the difference between the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return even - odd\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return odd - even\n    return None  # if list is empty or has only one number, or has only even or odd numbers\n"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += 1\n            if even == 1:\n                first_even = list1[i]\n        else:\n            odd += 1\n            if odd == 1:\n                first_odd = list1[i]\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the difference of the first even and first odd number in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n            \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n            \n    if even_num is None or odd_num is None:\n        return None\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n            \n    for num in lst:\n        if num % 2!= 0:\n            odd_num = num\n            break\n            \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        even_num = None\n        odd_num = None\n        for num in list1:\n            if num % 2 == 0:\n                if even_num is None:\n                    even_num = num\n                else:\n                    break\n            else:\n                if odd_num is None:\n                    odd_num = num\n                else:\n                    break\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    \n    # Return the difference of the first even and first odd number\n    return abs(list1[0] - list1[even_num-1])"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even = None\n    odd = None\n    \n    # Find the first even and odd numbers in the list\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 == 1 and odd is None:\n            odd = num\n    \n    # Return the difference of even and odd numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function finds the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # Initialize the even and odd numbers\n    even = None\n    odd = None\n    \n    # Iterate over the list\n    for num in list1:\n        # If the number is even, update the even variable\n        if num % 2 == 0:\n            even = num\n        # If the number is odd and the odd variable is None, update the odd variable\n        elif num % 2 == 1 and odd is None:\n            odd = num\n    \n    # If there are no even numbers in the list, return None\n    if even is None:\n        return None\n    # Otherwise, return the difference between the first even and first odd numbers\n    else:\n        return even - odd"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    if n1!= n2:\n        return -1 # Incompatible strings\n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[j]!= str2[i]:\n                j += 1\n            count += 1\n            str1, str2 = str1[:j] + str2[i] + str1[j+1:], str2[:i] + str1[j] + str2[i+1:]\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert the strings to lists of integers\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n\n    n = len(arr1)\n    # count the number of 1s in both arrays\n    count1 = arr1.count(1)\n    count2 = arr2.count(1)\n\n    # initialize variables to keep track of the number of swaps and the position of the 1s in both arrays\n    swaps = 0\n    pos1 = 0\n    pos2 = 0\n\n    # loop through both arrays while there are still 1s in both arrays\n    while count1 > 0 and count2 > 0:\n        # if the current positions in both arrays are not equal, swap the values and increment swaps\n        if arr1[pos1]!= arr2[pos2]:\n            arr1[pos1], arr1[pos2] = arr1[pos2], arr1[pos1]\n            arr2[pos2], arr2[pos1] = arr2[pos1], arr2[pos2]\n            swaps += 1\n\n        # increment the positions in both arrays and decrement the count of 1s in each array\n        pos1 += 1\n        pos2 += 1\n        if pos1 >= n:\n            pos1 = 0\n        if pos2 >= n:\n            pos2 = 0\n        count1 -= 1\n        count2 -= 1\n\n    # return the total number of swaps required to convert one binary number represented as a string to another\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Loop through each digit of the strings\n    for i in range(len(str1)):\n        # If the digits are different, find the next digit in str2 that matches str1[i] and swap them\n        if str1[i]!= str2[i]:\n            for j in range(i+1, len(str1)):\n                if str1[j] == str2[i]:\n                    str1[i], str1[j] = str1[j], str1[i]\n                    str2[i], str2[j] = str2[j], str2[i]\n                    count += 1\n                    break\n\n    # Return the count of swaps required to convert str1 to str2\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    This function takes two binary strings and returns the minimum number of swaps required to convert the first string to the second string.\n    \"\"\"\n    # Convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Initialize variables\n    count = 0\n    n = len(list1)\n    \n    # Iterate through the strings and compare corresponding elements\n    for i in range(n):\n        if list1[i]!= list2[i]:\n            # If the elements are not equal, swap them and increment the swap count\n            if i == list1.index(1):\n                list1[i] = list2[i]\n                count += 1\n            else:\n                list1[list1.index(1)] = list1[i]\n                list1[i] = 1\n                count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings into lists of digits\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n\n    # Initialize the count of swaps as 0\n    swaps = 0\n\n    # Loop through the arrays and swap the digits if necessary\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            # Swap the digits\n            arr1[arr1.index(arr2[i])] = arr1[arr1.index(arr2[i])] ^ 1\n            arr1[arr2.index(arr1[i])] = arr1[arr2.index(arr1[i])] ^ 1\n            arr2[arr1.index(arr2[i])] = arr2[arr1.index(arr2[i])] ^ 1\n            arr2[arr2.index(arr1[i])] = arr2[arr2.index(arr1[i])] ^ 1\n            # Increment the count of swaps\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # convert the input strings into lists of integers\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n    \n    # find the length of the numbers\n    n1 = len(num1)\n    n2 = len(num2)\n    \n    # initialize a list to store the indices of the corresponding bits\n    indices = [0] * max(n1,n2)\n    \n    # iterate over the bits of the two numbers\n    for i in range(max(n1,n2)) : \n        # if the ith bit of the first number is 0 and the ith bit of the second number is 1, swap the bits\n        if (i < n1 and num1[i] == 0 and i < n2 and num2[i] == 1) : \n            num1[i], num2[i] = 1, 0\n            \n        # if the ith bit of the first number is 1 and the ith bit of the second number is 0, swap the bits\n        elif (i < n1 and num1[i] == 1 and i < n2 and num2[i] == 0) : \n            num1[i], num2[i] = 0, 1\n            \n        # store the indices of the corresponding bits\n        if (i < n1) : \n            indices[i] = num1[i]\n        else : \n            indices[i] = num2[i]\n            \n    # count the number of swaps required to convert the numbers\n    swaps = 0\n    for i in range(max(n1,n2)) : \n        if (indices[i]!= i+1) : \n            swaps += 1\n            \n    # return the minimum number of swaps required to convert the numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize count of swaps as 0\n    count = 0\n    \n    # Iterate through both strings simultaneously\n    for i in range(len(str1)):\n        \n        # If characters are not same\n        if str1[i]!= str2[i]:\n            \n            # Find the characters in the remaining strings\n            c1 = str1[i+1:].count(str1[i])\n            c2 = str2[i+1:].count(str2[i])\n            \n            # Increment the count by the minimum of the two counts\n            count += min(c1, c2)\n    \n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i+1\n            while j<n and str1[j] == str2[i]:\n                j+=1\n            if j == n:\n                return -1\n            else:\n                str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n                count+=1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    #Create two dictionaries, one for each string, to keep track of the count of 0s and 1s at each index\n    count_0 = {}\n    count_1 = {}\n    for i in range(n):\n        if str1[i] == '0':\n            count_0[i] = count_0.get(i,0) + 1\n        else:\n            count_1[i] = count_1.get(i,0) + 1\n    #Now iterate through the second string and count the number of swaps required to convert it to the first string\n    swaps = 0\n    for i in range(n):\n        if str1[i] == '1' and str2[i] == '0':\n            #If the current position in the second string is a 0 and the corresponding position in the first string is a 1,\n            #then we need to swap the positions in both strings and count the swap as one.\n            if count_1[i] > 0:\n                #If we have at least one 1 to swap with, then we swap the positions and decrement the count of 1s at the swapped position in the first string.\n                swaps += 1\n                count_1[i] -= 1\n            else:\n                #If we don't have any 1s to swap with, then we need to swap with the 0 at the same position in the first string.\n                #So we count the swap as one and decrement the count of 0s at the swapped position in the second string.\n                swaps += 1\n                count_0[i] -= 1\n                str1[i], str2[i] = str2[i], str1[i]\n        elif str1[i] == '0' and str2[i] == '1':\n            #If the current position in the second string is a 1 and the corresponding position in the first string is a 0,\n            #then we need to swap the positions in both strings and count the swap as one.\n            if count_0[i] > 0:\n                #If we have at least one 0 to swap with, then we swap the positions and decrement the count of 0s at the swapped position in the first string.\n                swaps += 1\n                count_0[i] -= 1\n            else:\n                #If we don't have any 0s to swap with, then we need to swap with the 1 at the same position in the first string.\n                #So we count the swap as one and decrement the count of 1s at the swapped position in the second string.\n                swaps += 1\n                count_1[i] -= 1\n                str1[i], str2[i] = str2[i], str1[i]\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of digits\n    digits1 = [int(d) for d in str1]\n    digits2 = [int(d) for d in str2]\n\n    # Initialize the counters for swaps and differences\n    swaps = 0\n    diff = 0\n\n    # Iterate over the digits in both strings\n    for i in range(len(digits1)):\n        # If the digits are different, increment the counter for swaps and find the difference\n        if digits1[i]!= digits2[i]:\n            swaps += 1\n            diff += abs(digits1[i] - digits2[i])\n\n    # Add the remaining difference to the counter for swaps\n    swaps += diff // 2\n\n    # Return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    for item in tuple_list:\n        item_size = sys.getsizeof(item)\n        total_size += item_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    total_size = 0\n    \n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n        \n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a tuple as an input and returns the size of the tuple in bytes.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the total size of all the tuples in bytes.\n    \"\"\"\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    print(\"The size of the tuple is:\", size, \"bytes.\")\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            size += sys.getsizeof(item)\n        else:\n            size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(t) for t in tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    # concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # sort the concatenated array\n    arr.sort()\n    \n    # return the kth element\n    return arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and k as input and returns kth smallest element from both arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    \n    if k > n1 + n2:\n        return None\n    \n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    \n    lo, hi = 0, n1\n    \n    while lo < hi:\n        mid = (lo + hi) // 2\n        \n        if arr1[mid] < arr2[k-1-mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n            \n    return arr1[lo]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize pointers to the beginning of both arrays\n    i = 0\n    j = 0\n\n    # Loop until we find the kth element or one of the arrays is exhausted\n    while i < len(arr1) and j < len(arr2):\n        # If the current element of arr1 is smaller, move to the next element\n        if arr1[i] <= arr2[j]:\n            i += 1\n        # Otherwise, move to the next element of arr2\n        else:\n            j += 1\n\n        # If we found the kth element, return it\n        if i + j == k:\n            return max(arr1[i-1], arr2[j-1])\n\n    # If we reach this point, k is larger than the number of elements in both arrays\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k > n1 + n2:\n        return -1\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if k <= i:\n        return arr1[i-1]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Get the length of both arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # If one of the arrays is empty, return the non-empty one\n    if len1 == 0:\n        return arr2[k-1]\n    elif len2 == 0:\n        return arr1[k-1]\n\n    # Define a variable to store the index of the first element of array 2\n    index2 = 0\n\n    # If the length of array 1 is greater than array 2, then k is greater than the length of array 1\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n\n    # Loop through array 1\n    for i in range(len1):\n        # If the current element of array 1 is greater than the first element of array 2, increment index2\n        if arr1[i] > arr2[index2]:\n            index2 += 1\n        # If the index of array 2 is equal to k-1, return the current element of array 1\n        if index2 == k-1:\n            return arr1[i]\n    # If k is greater than the length of array 1, then k is greater than the length of array 2\n    return arr2[k-1-len1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        return None\n    if k <= len(arr1):\n        return find_kth_arr1(arr1, arr2, k)\n    else:\n        return find_kth_arr2(arr1, arr2, k)\n\ndef find_kth_arr1(arr1, arr2, k):\n    '''\n    Find the kth element from arr1.\n    '''\n    if len(arr1) == 1:\n        return arr1[0]\n    mid = len(arr1) // 2\n    if k > mid:\n        return find_kth_arr1(arr1[mid:], arr2, k - mid)\n    else:\n        return find_kth_arr1(arr1[:mid], arr2, k)\n\ndef find_kth_arr2(arr1, arr2, k):\n    '''\n    Find the kth element from arr2.\n    '''\n    if len(arr2) == 1:\n        return arr2[0]\n    mid = len(arr2) // 2\n    if k > mid + len(arr1):\n        return find_kth_arr2(arr1, arr2[mid:], k - mid - len(arr1))\n    else:\n        return find_kth_arr2(arr1, arr2[:mid], k)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from the given two sorted arrays.\n\n    Parameters:\n        arr1 (list): A sorted array of integers.\n        arr2 (list): A sorted array of integers.\n        k (int): The index of the element to be found.\n\n    Returns:\n        int: The kth element from the two sorted arrays.\n    \"\"\"\n\n    # Create a new list that contains both arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array in ascending order\n    merged_arr.sort()\n\n    # Return the kth element from the merged array\n    return merged_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n    - arr1 (list): A sorted list of integers.\n    - arr2 (list): A sorted list of integers.\n    - k (int): The kth element to find (1-based index).\n\n    Returns:\n    - int: The kth element from the two input arrays.\n    \"\"\"\n\n    # Find the length of the arrays\n    m, n = len(arr1), len(arr2)\n\n    # Calculate the median of the larger array\n    if m > n:\n        median = find_kth(arr1, arr2[-m:], k)\n    elif n > m:\n        median = find_kth(arr1[-n:], arr2, k)\n    else:\n        median = (arr1[0] + arr2[0]) / 2\n\n    # Find the index of the median in the larger array\n    if median < arr1[0]:\n        index1 = -m\n    elif median > arr1[-1]:\n        index1 = n\n    else:\n        index1 = bisect.bisect_left(arr1, median)\n\n    # Find the index of the median in the smaller array\n    if median < arr2[0]:\n        index2 = -n\n    elif median > arr2[-1]:\n        index2 = m\n    else:\n        index2 = bisect.bisect_left(arr2, median)\n\n    # Calculate the number of elements to skip in the larger array\n    if index1 + index2 < k:\n        k -= index1 + index2\n        if index1 >= 0:\n            return find_kth(arr1[index1+1:], arr2, k)\n        elif index2 >= 0:\n            return find_kth(arr1, arr2[index2+1:], k)\n        else:\n            return (arr1[0] + arr2[0]) / 2\n    elif index1 + index2 > k:\n        return find_kth(arr1, arr2, k)\n    else:\n        return median"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m > n:\n        arr1, arr2, m, n = arr2, arr1, n, m\n    left, right = 0, m\n    while left <= right:\n        mid = (left + right) // 2\n        if arr2[k - 1] > arr1[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr1[left]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # merge the two arrays and sort the merged array\n    merged_arr = merge_sort(arr1 + arr2)\n\n    # find the kth element using binary search\n    low = 0\n    high = n1 + n2 - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # count the number of elements on the left side of the mid index\n        count = 0\n        for i in range(n1):\n            if arr1[i] <= merged_arr[mid]:\n                count += 1\n\n        # if the count is less than k, discard the left half\n        if count < k:\n            low = mid + 1\n\n        # if the count is greater than or equal to k, discard the right half\n        else:\n            high = mid - 1\n\n    # return the kth element\n    return merged_arr[low]\n\n\ndef merge_sort(arr):\n    \"\"\"\n    Merge sort algorithm to sort the merged array.\n    \"\"\"\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as input and checks whether it is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to string so that we can perform string operations\n    number = str(number)\n    # Get the length of the number\n    n = len(number)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over each digit of the number\n    for i in range(n):\n        # Multiply the digit with the power of the length of the number and add it to the sum variable\n        sum += int(number[i]) ** n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Find the length of the number\n    n = len(str(number))\n    # Initialize the sum variable\n    sum = 0\n    # Iterate through the digits of the number and add their cubes to the sum variable\n    for digit in str(number):\n        sum += int(digit) ** n\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n    \"\"\"\n    temp = number\n    sum_of_cubes = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        sum_of_cubes += digit ** 3\n        temp //= 10\n        \n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    This function takes an integer as input and returns True if the number is\n    an Armstrong number, False otherwise.\n    '''\n\n    # Convert the number to a string\n    num = str(number)\n\n    # Get the length of the number\n    length = len(num)\n\n    # Initialize the sum\n    sum = 0\n\n    # Loop through each digit in the number\n    for digit in num:\n        # Raise the digit to the power of the length of the number\n        digit_power = int(digit) ** length\n        # Add the result to the sum\n        sum += digit_power\n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number into a string\n    num = str(number)\n    # Find the length of the number\n    length = len(num)\n    # Calculate the sum of the cubed digits\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** length\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Check whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    '''\n    n = number\n    order = len(str(n))\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n\n    An Armstrong number is an integer such that the sum of its digits raised to the power\n    of the number of digits is equal to the original number. For example, 153 is an Armstrong\n    number because 1^3 + 5^3 + 3^3 = 153.\n    \"\"\"\n\n    # Convert the given number into a string and store the length of the string\n    num_str = str(number)\n    num_len = len(num_str)\n\n    # Calculate the sum of the raised digits\n    sum_of_digits = sum([int(digit) ** num_len for digit in num_str])\n\n    # If the sum of the raised digits is equal to the original number, return True\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Convert the number to a string to access its digits\n    num_str = str(number)\n    \n    # Find the length of the number\n    n = len(num_str)\n    \n    # Iterate through each digit in the number and add its square to the sum variable\n    for digit in num_str:\n        sum += int(digit) ** n\n    \n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    sum_of_powers = sum([int(digit) ** order for digit in str(number)])\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number,\n    otherwise it returns False.\n    \"\"\"\n\n    # Convert the number into a string to get its digits\n    digits = str(number)\n\n    # Calculate the number of digits in the number\n    n = len(digits)\n\n    # Calculate the sum of the nth power of each digit of the number\n    sum_of_powers = sum([int(digit) ** n for digit in digits])\n\n    # If the sum of powers is equal to the number itself, then it is an Armstrong number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Calculates the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total/n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize the sum and count variables to zero\n    total = 0\n    count = 0\n    \n    # loop over the first n numbers and add them to the sum\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    \n    # calculate the average by dividing the sum by the count\n    average = total / count\n    \n    # return the sum and average as a tuple\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as an argument and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    total = 0\n    count = 1\n\n    # loop through first n natural numbers and add to sum and increment count\n    while count <= n:\n        total += count\n        count += 1\n\n    # calculate average\n    average = total / n\n\n    # return tuple of sum and average\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    avg = total / n\n    return (total, avg)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    '''\n    Find the sum and average of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether a given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, otherwise, it returns False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Returns True if n is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_even(n):\n    '''\n    Check if a number is even or not.\n    \n    Args:\n    n (int): A number to be checked.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even, and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if it is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Check whether a number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    repeated_char = ''\n    for char in str1:\n        if str1.count(char) > 1 and char not in repeated_char:\n            repeated_char = char\n            break\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return \"No repeated characters found\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store character frequencies\n    freq = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it\n        if char in freq:\n            return char\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n            \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == len(set(str1)):\n        return None # There are no repeated characters in the string\n    \n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i] # First repeated character found\n            \n    return None # No repeated character found"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to list to get index of each character\n    str_list = list(str1)\n    # initialize dictionary to store character frequency\n    char_freq = {}\n    # loop through each character in string\n    for char in str_list:\n        # if character is already in dictionary, return the character\n        if char in char_freq:\n            return char\n        else:\n            # if character is not in dictionary, add it with frequency 1\n            char_freq[char] = 1\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        count = 0\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n        if count == 1:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(1, n+1):\n        if i == sum(int(digit)**2 for digit in str(i)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n+1):\n        if all(i%j!= 0 for j in range(1, i)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        count = 0\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n        if count == 2:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            ludic.append(i)\n        else:\n            is_lucid = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to a given integer n.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Returns True if a given integer n is a lucid number, else False.\n    \"\"\"\n    s = str(n)\n    for i in range(len(s)):\n        if int(s[i:]) % int(s[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lucid(n):\n    '''\n    Check if a number is lucid.\n    '''\n    if n == 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    '''\n    Get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n + 1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(1, int(i/2)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words in the list\n    words.reverse()\n\n    # Join the reversed list of words back into a string\n    reversed_s =''.join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list = [word[::-1] for word in s_list]\n    return''.join(s_list)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into a list of words\n    reversed_words = [word[::-1] for word in words]  # reverse each word\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(word[::-1] for word in s.split())"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as input and returns the string with the words reversed.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words in the list\n    words = words[::-1]\n\n    # Join the words back into a string with spaces in between\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    This function takes a string as an input and returns the string with words reversed.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num():\n    num = int(input(\"Enter an integer: \"))\n    if is_prime(num):\n        print(f\"{num} is a prime number.\")\n    else:\n        print(f\"{num} is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n        \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, else it returns False.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Check if a given number is prime or not.\n    '''\n    if num < 2:  # prime numbers start from 2\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        print(f\"{num} is a prime number.\")\n    else:\n        print(f\"{num} is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    # Check if the given number is less than or equal to 1\n    if num <= 1:\n        return False\n    \n    # Check if the given number is divisible by any number between 2 and num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    # If the given number is not divisible by any number between 2 and num-1, it is a prime number\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = (math.pi / 180) * degree\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees as input and returns the equivalent angle in radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an input degree and returns the equivalent angle in radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # compile regex pattern\n    regex = re.compile(pattern)\n\n    # find all matches in text\n    matches = regex.finditer(text)\n\n    # create list of tuples containing matching substring, start index, and end index\n    results = [(match.group(0), match.start(), match.end()) for match in matches]\n\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.start(), match.end()\n        literal = match.group()\n        print(f\"Found literal '{literal}' starting at index {start} and ending at index {end}.\")"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        yield match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return (match.group(), match.start(), match.end())\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_n_1 = 1\n        bell_n = 1\n        for i in range(2, n + 1):\n            bell_n_2 = bell_n\n            bell_n = bell_n + bell_n_1\n            bell_n_1 = bell_n_2\n        return bell_n"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    for i in range(1, n+1):\n        bell.append(sum(bell[i-j] for j in range(i)))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Computes the nth Bell number.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[-i:]))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n and returns the nth bell number.\n    \"\"\"\n    bell = 1  # Initialize the bell number to 1\n    for i in range(1, n+1):\n        bell = bell * i  # Calculate the nth bell number using a loop\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum(range(n + 1))\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th Bell number is: {bell_Number(n)}\")"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_Number(i) for i in range(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n + 1):\n            bell[i] = bell[i - 1] + bell[i - 2]\n        return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n):\n        bell.append(sum(bell[-i:]))\n    return bell[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(1, n+1):\n            bell_num += bell_Number(i-1)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell))\n    return bell[n]\n\nprint(bell_Number(5))"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Returns a list with the same elements as the input list, but the k'th element removed.\n\n    :param list1: the input list\n    :param k: the index of the element to remove (starting from 0)\n    :return: the new list with the k'th element removed\n    '''\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and a number L as input and returns a list with the same elements as the input list, but with the k'th element removed.\n    \"\"\"\n    k = L\n    if k > len(list1) or k <= 0:\n        return \"Invalid input\"\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and a value k as input, and returns a new list with all the elements of the input list except for the kth element.\n    \"\"\"\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and removes the kth element from it.\n    '''\n    if k > len(list1) or k < 1:\n        return \"Invalid input! k should be between 1 and len(list1)\"\n    else:\n        list1.pop(k-1)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input, removes the k'th element from the list and returns the modified list.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a number L and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list with the same elements as list1\n    new_list = list1.copy()\n    \n    # Remove the k'th element from new_list\n    k = L - 1\n    new_list.pop(k)\n    \n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function removes the k'th element from the list and returns the new list.\n    \"\"\"\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    \"\"\"\n    if k > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a list of lists, returns the maximum of the Nth column.\n    '''\n    column = []\n    for row in test_list:\n        column.append(row[N])\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Create an empty list to store the maximum values of the columns\n    max_values = []\n    \n    # Iterate through each row of the matrix and append the maximum value of the Nth column to the max_values list\n    for row in test_list:\n        max_values.append(max(row[N-1]))\n    \n    # Return the maximum value of the Nth column\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    max_num = float('-inf')\n    for row in test_list:\n        if len(row) >= N:\n            if row[N-1] > max_num:\n                max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes in a list of lists and an integer N, and returns the maximum value in the Nth column of the matrix.\n    '''\n    # Initializing an empty list to store the maximum values in the Nth column of the matrix\n    max_list = []\n    # Looping through the rows of the matrix\n    for row in test_list:\n        # Adding the value in the Nth column of the current row to the max_list\n        max_list.append(row[N-1])\n    # Returning the maximum value in the Nth column of the matrix\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N]\n    for i in range(1, len(test_list)):\n        if test_list[i][N] > max_num:\n            max_num = test_list[i][N]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function takes a list of lists and an integer N as input and returns the maximum of the Nth column.\n    \"\"\"\n    column_max = max([row[N-1] for row in test_list])\n    return column_max"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_list = []\n    for i in range(len(test_list)):\n        col_list.append(test_list[i][N-1])\n    return max(col_list)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N]))\n    return col_max"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [sublist[0] for sublist in lst], [sublist[1] for sublist in lst] ]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    # initialize two empty lists to store the first and second elements of each sublist\n    first = []\n    second = []\n    # iterate over the list of sublists\n    for sublist in lst:\n        # append the first element of the sublist to the first list\n        first.append(sublist[0])\n        # append the second element of the sublist to the second list\n        second.append(sublist[1])\n    # return the two lists\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append(sublist[0])\n        merged_list.append(sublist[1])\n    return merged_list[:2], merged_list[2:]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first = [lst[i][0] for i in range(len(lst))]\n    second = [lst[i][1] for i in range(len(lst))]\n    return [first, second]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = [sublist[0] for sublist in lst]\n    second = [sublist[1] for sublist in lst]\n    return [first, second]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cummulative_sum = 0\n    for item in test_list:\n        cummulative_sum += item[1]\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(sum(test_list[:i+1]))\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initializing the variable for cumulative sum\n    cum_sum = 0\n    \n    # Looping through each tuple in the list\n    for tuple in test_list:\n        # Adding the value of the tuple to the cumulative sum\n        cum_sum += tuple[1]\n    \n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sums\n    cumulative_list = []\n    \n    # Loop through each tuple in the list and calculate the cumulative sum\n    for tup in test_list:\n        cum_sum = 0\n        for val in tup:\n            cum_sum += val\n        cumulative_list.append(cum_sum)\n    \n    # Return the list of cumulative sums\n    return cumulative_list"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            sum_list.append(test_list[i][1])\n        else:\n            sum_list.append(sum_list[i-1] + test_list[i][1])\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the sum variable to zero\n    cummulative_sum = 0\n    \n    # loop through each tuple in the list\n    for i in test_list:\n        # add the value of the tuple to the cummulative sum\n        cummulative_sum += i[1]\n        \n    return cummulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        sum = 0\n        for i in num:\n            sum += i\n        average = sum / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total / count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        result.append(total / count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples are not of the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples are not of the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return None\n    \n    # Create an empty tuple to store the result\n    result_tup = ()\n    \n    # Iterate over the tuples and perform element-wise modulo\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    n = len(steps)\n    while i < n - 1:\n        jumps += 1\n        max_reach = min(i + steps[i], n - 1)\n        if max_reach >= d:\n            return jumps\n        i = max_reach\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0:\n        return 0\n    \n    dp = [[0] * d for i in range(steps)]\n    \n    for i in range(steps):\n        for j in range(d):\n            if i == 0:\n                dp[i][j] = j + 1\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + 1\n    \n    return dp[steps-1][d-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Returns the minimum number of jumps required to reach a point of form (d, 0)\n    from the origin in a 2D plane with a maximum of `steps` steps allowed.\n    \"\"\"\n    dp = [[0] * (steps+1) for _ in range(d+1)]  # initialize the dp table\n\n    # initialize the first row and first column\n    for i in range(d+1):\n        dp[i][0] = float('inf')\n\n    # fill the table\n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            if i == j:\n                dp[i][j] = 1\n            elif j > i:\n                dp[i][j] = float('inf')\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-j][j-1]\n\n    return dp[d][steps]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    current_step = 0\n    reachable_steps = [0]\n    \n    while current_step < steps:\n        reachable_steps.append(reachable_steps[current_step] + d)\n        current_step += 1\n    \n    for i in range(1, steps+1):\n        for j in range(i):\n            if reachable_steps[j] >= i:\n                jumps += 1\n                break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0:\n        return 0\n    \n    if steps < 0 or d < 0:\n        return -1\n    \n    if steps == 1:\n        return 1\n    \n    if steps == d:\n        return 1\n    \n    # array to store the number of jumps required for each step\n    jumps = [0 for i in range(steps + 1)]\n    \n    # initialize the array for the first step\n    jumps[0] = 1\n    \n    # fill the array for the remaining steps\n    for i in range(1, steps + 1):\n        if i <= d:\n            jumps[i] = jumps[i - 1] + 1\n        else:\n            min_jumps = float('inf')\n            \n            for j in range(1, i):\n                if j <= d and jumps[i - j]!= -1:\n                    min_jumps = min(min_jumps, jumps[i - j])\n                    \n            if min_jumps == float('inf'):\n                jumps[i] = -1\n            else:\n                jumps[i] = min_jumps + 1\n    \n    return jumps[steps]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf') for j in range(steps+1)] for i in range(d+1)]\n    dp[0][0] = 0\n    \n    for i in range(d+1):\n        for j in range(steps+1):\n            if dp[i][j]!= float('inf'):\n                if i == d and j == steps:\n                    return dp[i][j]\n                if j+i <= steps:\n                    dp[i+j][j+i] = min(dp[i+j][j+i], dp[i][j]+1)\n                    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if steps == 0: \n        return -1\n    if d < 0: \n        return -1\n    \n    jump = min_Jumps(steps-1, d-1) + 1\n    if jump == -1: \n        return -1\n    \n    return jump"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the jump count and current position\n    count = 0\n    curr_pos = (0, 0)\n\n    # Initialize the visited list with the starting position\n    visited = [curr_pos]\n\n    # Loop through each step in the steps list\n    for step in steps:\n        # Check if the current position is the destination\n        if curr_pos == (d, 0):\n            return count\n\n        # Check the possible directions to move in\n        possible_moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n        # Loop through each possible move and calculate the new position\n        for move in possible_moves:\n            new_pos = (curr_pos[0] + move[0], curr_pos[1] + move[1])\n\n            # Check if the new position is within the steps and not visited\n            if 0 <= new_pos[0] < len(steps) and 0 <= new_pos[1] < len(steps[0]) and new_pos not in visited:\n                # Update the current position and visited list\n                curr_pos = new_pos\n                visited.append(curr_pos)\n                break\n\n        # Increment the jump count\n        count += 1\n\n    # If the destination is not reached, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Initializing the variables\n    jumps = 0\n    steps_left = steps\n    \n    # Initializing the positions of the person at origin\n    i = 0\n    j = 0\n    \n    # Loop to check the number of jumps\n    while i < d:\n        if steps_left == 0:\n            return -1\n        \n        # Checking the number of steps possible from the current position\n        jump_possible = min(steps_left, d-i)\n        \n        # Updating the number of steps left and the number of jumps\n        steps_left -= jump_possible\n        jumps += 1\n        \n        # Updating the positions of the person at each step\n        i += jump_possible\n        j += 1\n        \n        # Checking if the person has reached the destination\n        if i >= d and j == 0:\n            return jumps\n    \n    # If the person has not reached the destination\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    if d == 0: # if the destination is at origin, no jumps required\n        return 0\n    elif d < 0: # if destination is behind the origin, no jumps required\n        return -1\n    \n    # initialize the variables\n    jump_count = 0 # to count the number of jumps required\n    current_jump = d # the current jump size\n    \n    # loop through the array to find the number of jumps required\n    for step in range(steps):\n        if current_jump == 0: # if the current jump size is 0, then destination reached\n            break\n        elif step == steps-1: # if reached the end of array, then no jumps required\n            return -1\n        elif current_jump >= steps-step-1: # if the remaining jump size is greater than or equal to the remaining steps left, then jump all the remaining steps\n            jump_count += steps-step-1\n            current_jump -= steps-step-1\n        else: # if the remaining jump size is less than the remaining steps left, then jump the remaining jump size and continue with the remaining steps\n            jump_count += 1\n            current_jump -= 1\n            \n    return jump_count"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be the same length\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise and returns a new list containing the result.\n    If any element of the divisor list is zero, it raises a ValueError.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divides each element of nums1 by the corresponding element in nums2.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words and store them in a list\n    words = test_str.split()\n\n    # Create a list to store the words with numbers removed\n    new_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word contains a number\n        if any(char.isdigit() for char in word):\n            # If it does, add the word to a new list with numbers removed\n            new_words.append(word.translate(str.maketrans('', '', '0123456789')))\n        else:\n            # If it doesn't, add the word to the new list as is\n            new_words.append(word)\n\n    # Join the words in the new list back into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as an input and moves all the numbers to the end of the string.\n    '''\n    # Create two empty strings to hold the numbers and the non-numbers\n    num_str = \"\"\n    non_num_str = \"\"\n\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a digit, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # If the character is not a digit, add it to the non_num_str\n        else:\n            non_num_str += char\n\n    # Concatenate the non-numbers and numbers in the correct order\n    result_str = non_num_str + num_str\n\n    # Return the final string\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    other_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            other_str += char\n    return other_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize a list to store numbers and alphabets\n    num_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is a number\n        if word.isdigit():\n            # Append the number to the number list\n            num_list.append(word)\n        else:\n            # Append the word to the number list\n            num_list.append(word)\n\n    # Join the number list back into a string and return it\n    return''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    This function takes a string as input and moves all the numbers to the end of the string.\n    '''\n\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Creating two lists, one with numbers and the other with non-numbers\n    num_list = []\n    non_num_list = []\n    for word in words:\n        if word.isdigit():\n            num_list.append(word)\n        else:\n            non_num_list.append(word)\n\n    # Joining the non-numbers list and numbers list to form the final string\n    final_str = \" \".join(non_num_list + num_list)\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    other_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            other_list.append(char)\n    return \"\".join(other_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Create an empty list to hold the non-numeric words\n    non_num_words = []\n    # Create an empty list to hold the numeric words\n    num_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is numeric\n        if word.isnumeric():\n            num_words.append(word)\n        else:\n            non_num_words.append(word)\n    # Join the non-numeric words with a space and return it\n    return''.join(non_num_words + num_words)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function will move all the numbers from the beginning of the given string to the end of the string.\n    \"\"\"\n    # Splitting the string into two parts: digits and non-digits\n    digits = \"\"\n    non_digits = \"\"\n    for char in test_str:\n        if char.isdigit():\n            digits += char\n        else:\n            non_digits += char\n    \n    # Joining the digits and non-digits back into a single string\n    result = non_digits + digits\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    alpha_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            alpha_list.append(i)\n    return \"\".join(alpha_list + num_list)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    n = len(a)\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[j][i] = dp[j][i-1] + 1\n\n    largest_size = 0\n\n    for i in range(n):\n        for j in range(i):\n            if dp[j][i] > largest_size:\n                largest_size = dp[j][i]\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_subset_size = 0\n    n = len(a)\n    \n    # Iterate through all possible subsets of a list\n    for i in range(1, 2**n):\n        subset = [a[j] for j in range(n) if i & (1<<j)] # Get subset of a list\n        \n        # Check if every pair in the subset is divisible\n        for j in range(len(subset)):\n            for k in range(j+1, len(subset)):\n                if subset[j] % subset[k]!= 0 or subset[k] % subset[j]!= 0:\n                    break\n            else:\n                continue\n            break\n        \n        # If every pair is divisible and subset size is greater than current max_subset_size, update max_subset_size\n        if j == len(subset)-1 and len(subset) > max_subset_size:\n            max_subset_size = len(subset)\n    \n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the size of the largest subset and the current pair\n    largest_size = 0\n    current_pair = 1\n\n    # Loop through the list, checking each pair of adjacent numbers\n    for i in range(len(a)-1):\n        if a[i+1] % a[i] == 0:\n            # If the pair is divisible, add 1 to the current pair size and check if it's larger than the previous largest size\n            current_pair += 1\n            if current_pair > largest_size:\n                largest_size = current_pair\n        else:\n            # If the pair is not divisible, reset the current pair size to 1 and move on to the next number in the list\n            current_pair = 1\n\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and dp[i][j-1] + 1 > dp[i][j]:\n                dp[i][j] = dp[i][j-1] + 1\n    return dp[0][n-1]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return dp[n]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n+1)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[j+1] = max(dp[j+1], dp[i]+1)\n    return dp[n]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [False] * n  # dp[i] is True if a[i] and a[j] are divisible\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = True\n                break\n    return sum(dp) + 1  # +1 to include the case where all pairs are divisible"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n\n    n = len(a)\n    if n < 2:\n        return 0\n\n    # dp[i][j] stores the size of the largest subset of a[i:] so that every pair is divisible\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                continue  # at least 2 numbers are required\n\n            # check if a[i] and a[j] are divisible\n            for x in range(i + 1, j):\n                if a[i] % a[x]!= 0 or a[j] % a[x]!= 0:\n                    dp[i][j] = max(dp[i][j], dp[i][x - 1] + dp[x][j])\n\n            # include a[i] and a[j] in the subset if they are not divisible\n            dp[i][j] = max(dp[i][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of the same size.\n    '''\n    i = 0  # index for arr1\n    j = 0  # index for arr2\n    median = 0  # to store the median\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median += arr1[i]\n            i += 1\n        else:\n            median += arr2[j]\n            j += 1\n    \n    if i == n:  # all elements of arr1 have been added\n        median += arr2[j:]\n    else:  # all elements of arr2 have been added\n        median += arr1[i:]\n    \n    return median / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Checking if the length of both lists is even or odd\n    if n % 2 == 0:\n        # If the length of both lists is even, we calculate the median\n        median = (max(arr1[n // 2 - 1], arr2[n // 2 - 1]) + min(arr1[n // 2], arr2[n // 2])) / 2\n    else:\n        # If the length of both lists is odd, we calculate the median\n        median = max(arr1[n // 2], arr2[n // 2])\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    while (i+j)!= (n/2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if (n % 2) == 0:\n        return (max(arr1[i-1], arr2[j-1]) + min(arr1[i], arr2[j])) / 2\n    else:\n        return max(arr1[i-1], arr2[j-1])"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    median = 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            median += arr1[i]\n            i += 1\n            j += 1\n    \n    if i == n:\n        median += arr2[j-1]\n    elif j == n:\n        median += arr1[i-1]\n    \n    return median/2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0  # index for arr1\n    j = 0  # index for arr2\n    k = 0  # index for merged array\n\n    merged_arr = [0] * n\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n        k += 1\n\n    while i < n:\n        merged_arr[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n:\n        merged_arr[k] = arr2[j]\n        j += 1\n        k += 1\n\n    if n % 2!= 0:\n        return merged_arr[n // 2]\n    else:\n        return (merged_arr[n // 2 - 1] + merged_arr[n // 2]) / 2\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\n\nprint(\"Median of arr1 and arr2 is:\", get_median(arr1, arr2, n))"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted arrays of size n and returns their median.\n    \"\"\"\n    # Check if the size of both arrays is the same\n    if n!= len(arr1) or n!= len(arr2):\n        print(\"Both arrays should be of same size.\")\n        return None\n    \n    # Find the median of both arrays\n    median = (sorted(arr1 + arr2)[n // 2] + sorted(arr1 + arr2)[n // 2 - 1]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of the same size and returns their median.\n    '''\n    # Finding the middle index of both lists\n    middle_index = n // 2\n    \n    # Checking if the median is present in both lists\n    if arr1[middle_index] == arr2[middle_index]:\n        return arr1[middle_index]\n    elif arr1[middle_index] < arr2[middle_index]:\n        # If the median is present in the first list, then it is the middle element\n        return arr1[middle_index]\n    else:\n        # If the median is present in the second list, then it is the middle element\n        return arr2[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Given two sorted arrays of equal size, find the median.\n    \"\"\"\n    median = (arr1[n//2] + arr2[n//2]) / 2\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = n // 2\n    if n % 2 == 0:\n        return (max(arr1[i-1], arr2[i-1]) + min(arr1[i], arr2[i])) / 2\n    else:\n        return max(arr1[i-1], arr2[i-1])"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size and returns their median.\n    \"\"\"\n    if n % 2 == 0:\n        # If n is even, find the average of the middle two elements\n        return (arr1[n//2] + arr1[(n//2)-1]) / 2\n    else:\n        # If n is odd, return the middle element\n        return arr1[n//2]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and returns a list of their n-th powers.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function takes a list of numbers and returns a new list where each number is raised to the nth power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, else False.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase and False otherwise.\n    \"\"\"\n    # Convert the input string to uppercase\n    string_upper = string.upper()\n\n    # Check if all the characters in the string are uppercase\n    if string_upper == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters are uppercase, False otherwise.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are uppercase,\n    otherwise it returns False.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an input and returns True if the string is in uppercase, False otherwise.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n        string (str): The string to convert.\n\n    Returns:\n        str: The uppercase string.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    '''\n    for char in string:\n        if ord(char) < 97 or ord(char) > 122:\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # First, let's store the first and last element in two variables\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # Now, let's remove the first and last element from the list\n    newList.pop(0)\n    newList.pop(-1)\n\n    # Finally, let's insert the last element at the beginning of the list and the first element at the end of the list\n    newList.insert(0, last_element)\n    newList.append(first_element)\n\n    # Printing the modified list\n    print(\"Modified List: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    This function interchanges the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and interchanges the first and last element of the list.\n    '''\n    if len(newList) <= 1: \n        return newList \n    else: \n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList[1:-1] + [newList[0]] + [newList[-1]]"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must have at least two elements to swap.\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Swapped list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the length of the semicircle's diameter\n    diameter = 2*r\n    # Calculate the length of the semicircle's inscribed circle's radius\n    inscribed_radius = r/math.sqrt(2)\n    # Calculate the length of the semicircle's circumference\n    circumference = 2*math.pi*r\n    # Calculate the area of the semicircle\n    area = math.pi*r**2\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_triangle_area = (circumference - area/math.pi)*inscribed_radius**2\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.pi * r * r / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes a radius of a semicircle and returns the area of the largest triangle\n    that can be inscribed in the semicircle.\n    \"\"\"\n    # Calculate the length of the hypotenuse of the largest triangle\n    h = 2 * r * math.sin(math.pi/3)\n    # Calculate the area of the triangle\n    area = (math.sqrt(3)/4) * h * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the radius of the inscribed circle\n    inscribed_r = r / (2 * math.tan(math.pi/5))\n    # Calculate the area of the inscribed circle\n    inscribed_area = math.pi * inscribed_r ** 2\n    # Calculate the area of the triangle\n    area = (5/2) * inscribed_area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    # The length of the longest side of the triangle is given by the formula:\n    #   c = 2 * sqrt(r^2 - (r - a)^2), where a is the length of the semicircle's diameter.\n    # We want to find the value of a that maximizes the triangle's area.\n    # We can start with a = r and then try smaller values until the area is maximized.\n    a = r\n    max_area = 0.0\n    while True:\n        c = 2 * math.sqrt(r**2 - (r - a)**2)\n        s = (a + c) / 2\n        area = math.sqrt(s * (s - a) * (s - c) * (s - r))\n        if area > max_area:\n            max_area = area\n            best_a = a\n        if c < a / 2:\n            break\n        a -= 0.1\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the length of the diameter of the semicircle\n    d = 2 * r\n    \n    # Calculate the length of the height of the largest triangle\n    h = r * math.sqrt(3) / 2\n    \n    # Calculate the area of the largest triangle\n    area = (d * h) / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n    # Find the length of the triangle's hypotenuse\n    h = math.sqrt(r**2 - (r/2)**2)\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(r**2 - h**2) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    :param r: the radius of the semicircle\n    :return: the area of the largest triangle\n    \"\"\"\n    # The area of the semicircle is pi * r^2 / 2, so we need to find the length of the longest side of the triangle\n    # The length of the longest side is sqrt(2 * r^2 * (1 - cos(pi/3)))\n    # We can use the math.acos function to find the angle between the two legs of the triangle, which is pi/3\n    # Therefore, the length of the side opposite to the angle pi/3 is sqrt(2 * r^2 * (1 - cos(pi/3)))\n    # The length of the side adjacent to the angle pi/3 is r * tan(pi/3)\n    side_opposite = math.sqrt(2 * r**2 * (1 - math.cos(math.pi/3)))\n    side_adjacent = r * math.tan(math.pi/3)\n\n    # The area of the triangle is half the product of its sides\n    area = 0.5 * side_opposite * side_adjacent\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    area = pi * r ** 2 / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the length of the hypotenuse of the triangle\n    h = r / math.sin(math.pi/3)\n    # Calculate the area of the triangle\n    area = 0.5 * h * r\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n\n    Args:\n    array: A sorted list of natural numbers.\n    start (optional): The starting index of the search.\n    end (optional): The ending index of the search.\n\n    Returns:\n    The smallest missing number in the array.\n\n    Example:\n    >>> find_First_Missing([1, 2, 3, 5, 6, 7, 9])\n    4\n    \"\"\"\n\n    # If end is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Set the initial missing number to start\n    missing = start\n\n    # Iterate through the array and find the smallest missing number\n    for i in range(start, end):\n        if array[i] > 0 and array[i] <= end:\n            # If the current element is a valid index and is not missing, mark it as missing\n            if array[i] == array[array[i]-1]:\n                continue\n            else:\n                missing = array[i]\n                break\n\n    # Iterate through the array again and find the first missing number\n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n        elif array[i] > missing:\n            return missing\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i+1 < array[i]:\n            return i\n    if array[end]!= end+1:\n        return end+1\n    else:\n        return end+2"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n\n    :param array: a sorted list of natural numbers\n    :param start: the starting index of the array (default is 0)\n    :param end: the ending index of the array (default is None which means the end of the array)\n    :return: the smallest missing number\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the variables\n    n = end - start + 1\n    first_missing = n + 1\n\n    # Traverse through the array\n    for i in range(n):\n        # Check if the current element is missing\n        if array[i] > start + i:\n            # If the missing element is less than the first missing number\n            if array[i] < first_missing:\n                first_missing = array[i]\n\n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If end is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Initialize a variable to keep track of the expected number\n    expected_num = start\n\n    # Iterate through the array and check if the expected number is present in the array\n    for num in array[start:end]:\n        if expected_num == num:\n            expected_num += 1\n\n    # If the expected number is not found in the array, it is the first missing number\n    return expected_num"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] == i + 1:\n            continue\n        elif array[i] == i - 1:\n            array[i] = i\n        elif array[i] == i + 2:\n            array[i], array[i + 1] = array[i + 1], array[i]\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Returns the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if end < start:\n        return start\n    mid = (start + end) // 2\n    left_missing = find_First_Missing(array, start, mid)\n    right_missing = find_First_Missing(array, mid + 1, end)\n    if array[mid] == mid + start:\n        return right_missing\n    elif array[mid] == mid + start + 1:\n        return left_missing\n    else:\n        return mid + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # Find the range of the array\n    max_num = array[end]\n    min_num = array[start]\n    range_of_array = max_num - min_num + 1\n\n    # Initialize the count array\n    count_array = [0] * range_of_array\n\n    # Count the frequency of each number in the array\n    for i in range(start, end + 1):\n        count_array[array[i] - min_num] += 1\n\n    # Find the first missing number\n    first_missing = min_num\n    for i in range(len(count_array)):\n        if count_array[i] == 0:\n            return first_missing\n        first_missing += 1\n\n    # If all numbers are present, return the next number after max_num\n    return max_num + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number from the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Find the smallest number in the list\n    min_num = array[start]\n\n    # Traverse the list to find the smallest missing number\n    for i in range(start, end+1):\n        if array[i] < min_num:\n            min_num = array[i]\n\n    # Check if the missing number is less than the smallest number in the list\n    if min_num > 1:\n        return 1\n\n    # Initialize the missing number to be the smallest missing number\n    missing = min_num\n\n    # Traverse the list again to find the smallest missing number\n    for i in range(start, end+1):\n        if array[i] > 0:\n            # If the number is present in the list, update the missing number\n            missing = max(missing, array[i])\n\n    # Add 1 to the missing number and return it\n    return missing + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Traverse the array and mark the visited elements as negative\n    for i in range(start, end+1):\n        if array[i] < 0:\n            continue\n        if array[i]!= i + start:\n            array[array[i]-start] = -array[array[i]-start]\n    \n    # Traverse the array again to find the first missing positive number\n    for i in range(start, end+1):\n        if array[i-start] >= 0:\n            return i\n    \n    # If all the numbers are present in the array, return the next number\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end == None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i] == i+1:\n            continue\n        elif array[i] == array[array[i]-1]:\n            return array[i]\n        else:\n            array[array[i]-1], array[i] = array[i], array[array[i]-1]\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+1+1"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += i\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    This function takes a string as input and replaces all spaces with '%20'\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a list containing only the even numbers from the original list.\n    \"\"\"\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the original list.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_even(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_even(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the original list.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n    \"\"\"\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of coordinates and returns a list of all the adjacent coordinates.\n    '''\n    adj_coords = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if not (i==0 and j==0):\n                if isinstance(ele, tuple) and isinstance(i, int) and isinstance(j, int):\n                    adj_coords.append((ele[0]+i, ele[1]+j))\n                elif isinstance(ele, list) and isinstance(i, int) and isinstance(j, int):\n                    adj_coords.append([ele[0]+i, ele[1]+j])\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    if sub:\n        return [coord for coord in adj_coords if coord not in sub]\n    else:\n        return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes a tuple of coordinates as input and returns a list of all the adjacent coordinates\n    in all directions (up, down, left, right).\n    '''\n    # Define the adjacent coordinates for each direction\n    adj = [(1,0), (-1,0), (0,1), (0,-1)]\n    \n    # Extract the row and column indices of the given coordinate\n    row, col = ele\n    \n    # Extract the adjacent coordinates for each direction\n    for dx, dy in adj:\n        new_row, new_col = row + dx, col + dy\n        if (new_row, new_col) not in sub:\n            sub.append((new_row, new_col))\n            \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # Define the possible adjacent coordinates for the given coordinate tuple\n    adjacent = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    \n    # Add the given coordinate tuple to the sublist\n    sub.append(ele)\n    \n    # If the adjacent coordinates are not already in the sublist, add them recursively\n    for adj in adjacent:\n        if adj not in sub:\n            adjac(adj, sub)\n            \n    # Return the sublist containing all the adjacent coordinates of the given coordinate tuple\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function returns the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    rows, cols = len(sub), len(sub[0])\n    adj = []\n    for i in range(ele[0]-1, ele[0]+2):\n        for j in range(ele[1]-1, ele[1]+2):\n            if (i >= 0 and i < rows and j >= 0 and j < cols and (i, j)!= ele):\n                adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes in an element (a tuple containing the coordinates of a point),\n    and a list of sub-elements (tuples containing coordinates of the points in the sub-square).\n    The function returns a list of all the adjacent coordinates to the given element.\n    If the sub-list is not provided, the function will calculate it by itself using the given element.\n    '''\n    if not sub:\n        # If sub-list is not provided, calculate it using the given element.\n        sub = [\n            (ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1),\n            (ele[0], ele[1]-1), (ele[0], ele[1]+1),\n            (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)\n        ]\n    \n    adj_list = []\n    for i in range(len(sub)):\n        if sub[i][0] >= 0 and sub[i][0] < 8 and sub[i][1] >= 0 and sub[i][1] < 8:\n            # Check if the adjacent element is within the bounds of the square.\n            adj_list.append(sub[i])\n            \n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes in a tuple representing a coordinate and returns a list of tuples representing the adjacent coordinates.\n    '''\n    adj_coords = []\n    \n    # append the adjacent coordinates to the list\n    if ele[0]+1 < 8:\n        adj_coords.append((ele[0]+1, ele[1]))\n    if ele[0]-1 >= 0:\n        adj_coords.append((ele[0]-1, ele[1]))\n    if ele[1]+1 < 8:\n        adj_coords.append((ele[0], ele[1]+1))\n    if ele[1]-1 >= 0:\n        adj_coords.append((ele[0], ele[1]-1))\n    \n    # append the diagonal coordinates to the list\n    if ele[0]+1 < 8 and ele[1]+1 < 8:\n        adj_coords.append((ele[0]+1, ele[1]+1))\n    if ele[0]-1 >= 0 and ele[1]+1 < 8:\n        adj_coords.append((ele[0]-1, ele[1]+1))\n    if ele[0]+1 < 8 and ele[1]-1 >= 0:\n        adj_coords.append((ele[0]+1, ele[1]-1))\n    if ele[0]-1 >= 0 and ele[1]-1 >= 0:\n        adj_coords.append((ele[0]-1, ele[1]-1))\n    \n    # remove the original coordinate from the list\n    if ele in adj_coords:\n        adj_coords.remove(ele)\n    \n    # append the sublist to the original list\n    if sub:\n        sub.extend(adj_coords)\n        return sub\n    else:\n        return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(coord, sub=[]):\n    '''\n    Extract all adjacent coordinates of a given coordinate tuple.\n\n    :param coord: Tuple representing a coordinate (x, y)\n    :param sub: List of adjacent coordinates to the given coordinate\n    :return: List of adjacent coordinates\n    '''\n    x, y = coord\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adj.append((i, j))\n    return sub + adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the adjacent coordinates\n    adj = [(ele[0]+1,ele[1]),(ele[0]-1,ele[1]),(ele[0],ele[1]+1),(ele[0],ele[1]-1)]\n\n    # Add the coordinates in the sublist to the adjacent coordinates list\n    for s in sub:\n        if s in adj:\n            adj.remove(s)\n\n    # Return the adjacent coordinates list\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        return text.replace(\" \", \"_\")\n    else:\n        return text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with underscores and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        new_text = text.replace(\" \", \"_\")\n        return new_text\n    elif \"_\" in text:\n        new_text = text.replace(\"_\", \" \")\n        return new_text\n    else:\n        return \"The text does not contain any spaces or underscores.\""
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n        return text\n    elif '_' in text:\n        text = text.replace('_','')\n        return text\n    else:\n        return text"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n\n    :param num_list: list of integers\n    :return: list of integers\n    \"\"\"\n    # initialize two pointers, one pointing to the start of the list and the other to the end\n    left = 0\n    right = len(num_list) - 1\n\n    # iterate through the list using two pointers\n    while left < right:\n        # if the value at the left pointer is non-zero, move it to the right pointer position\n        if num_list[left]!= 0:\n            left += 1\n        # if the value at the right pointer is zero, move it to the left pointer position\n        elif num_list[right] == 0:\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            left += 1\n            right -= 1\n        # if the value at the right pointer is non-zero, move it to the left pointer position\n        else:\n            right -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Initialize two pointers, one at the beginning of the list and the other at the end.\n    left_ptr = 0\n    right_ptr = len(num_list) - 1\n\n    # Traverse the list using two pointers and swap the elements at the left and right pointers\n    # as long as the left pointer is less than the right pointer.\n    while left_ptr < right_ptr:\n        if num_list[left_ptr] == 0:\n            num_list[left_ptr], num_list[right_ptr] = num_list[right_ptr], num_list[left_ptr]\n            right_ptr -= 1\n        else:\n            left_ptr += 1\n\n    # Return the modified list.\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zero_indices = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n    for i in range(len(zero_indices)):\n        num_list.append(0)\n        num_list.pop(zero_indices[i])\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create two lists, one for non-zero elements and one for zero elements\n    non_zero_list = []\n    zero_list = []\n\n    # Iterate through the input list\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n\n    # Return the concatenated list of non-zero elements and zero elements\n    return non_zero_list + zero_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = [x for x in num_list if x == 0]\n    non_zeros = [x for x in num_list if x!= 0]\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers and moves all the zeroes to the end of the list.\n    \"\"\"\n    # Find the index of the first non-zero number\n    index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            index = i\n            break\n    # Move all zeroes to the end of the list\n    for i in range(len(num_list)-1, index-1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[index] = num_list[index], num_list[i]\n            index -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n            \n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes in a list to the end of the list and returns the modified list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    sum = 0\n    \n    # loop through all possible pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate xor of the pair and add to sum\n            sum += arr[i] ^ arr[j]\n            \n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    result = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(\"The sum of xor of all pairs of numbers in the given list is:\", pair_xor_Sum(arr,n))"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    \n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    # initialize sum to 0\n    total_sum = 0\n    \n    # loop through each element in the list\n    for i in range(n):\n        # loop through the remaining elements in the list\n        for j in range(i+1,n):\n            # calculate the xor of the two elements and add to sum\n            total_sum += arr[i] ^ arr[j]\n    \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable (list, tuple, set, etc.) and returns a sorted list using heap sort algorithm.\n    '''\n    # Convert the iterable to a max heap\n    heap = iterable\n    hq.heapify(heap)\n\n    # Extract elements from the heap one by one and append to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given iterable using heap sort algorithm.\n    \"\"\"\n    heap = iterable[:]\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n\n    # Convert the iterable to a max-heap\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    # Extract elements from the heap one by one\n    for i in range(len(heap) - 1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap[:i])\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n\n    Args:\n        iterable: List to be sorted.\n\n    Returns:\n        List sorted in ascending order.\n    '''\n\n    n = len(iterable)\n\n    # Convert the list into a max heap\n    hq.heapify(iterable)\n\n    # Extract the maximum element and add it to the sorted list\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heap sort algorithm.\n    '''\n    # Convert the iterable to a max heap\n    hq.heapify(iterable)\n    \n    # Extract the maximum element and put it in a list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy() # make a copy of the iterable to avoid modifying it\n    hq.heapify(heap) # make the heap from the iterable\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap)) # pop the smallest element and add it to the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using the heap sort algorithm.\n    '''\n    # Convert the iterable into a max-heap.\n    heap = iterable[:]\n    hq.heapify(heap)\n\n    # Sort the heap in-place using pop and insert.\n    for i in range(len(heap)-1, 0, -1):\n        hq.heappop(heap)\n        hq.heappush(heap, heap[0])\n\n    # Convert the heap back into a sorted list.\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given iterable using heapsort algorithm.\n    '''\n    # Convert the iterable to a heap\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    # Sort the heap using pop and append\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts a list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        print(\"No profit and no loss\")\n    elif sale_amount == actual_cost:\n        print(\"No profit or loss\")\n    else:\n        print(\"Loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments - actual_cost and sale_amount\n    Returns True if sale_amount has no profit and no loss\n    Returns False if sale_amount has a profit or loss\n    '''\n\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        print(\"No profit no loss\")\n    else:\n        profit = sale_amount - actual_cost\n        if profit == 0:\n            print(\"No profit no loss\")\n        else:\n            print(\"Profit\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two parameters, actual_cost and sale_amount.\n    It checks whether the sale amount has no profit and no loss.\n    '''\n    if sale_amount >= actual_cost:\n        print(\"Sale amount has profit and no loss\")\n    elif sale_amount < actual_cost:\n        print(\"Sale amount has no profit and loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two parameters:\n    - actual_cost: the actual cost of the item\n    - sale_amount: the amount sold\n\n    The function returns True if the sale has no profit and no loss. Otherwise, it returns False.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit >= 0 and actual_cost > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount. \n    It checks whether the given sale amount has no profit and no loss.\n    If the sale amount has no profit and no loss, it returns True.\n    If the sale amount has profit or loss, it returns False.\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False\n    elif profit == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in two parameters: the actual cost of the product and the amount of the sale.\n    It checks whether the sale had any profit or loss and returns a boolean value indicating whether the sale had no profit and no loss or not.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert velocity to m/s\n    v = v / 3.6\n    \n    # Calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity from km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate the wind chill index\n    wc_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms,0.16) + 0.3965 * t * math.pow(v_ms,0.16)\n    \n    # round the wind chill index to the next integer\n    wc_index = round(wc_index)\n    \n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert the wind velocity and temperature to SI units\n    v_mps = v / 3.6  # km/h to m/s\n    t_kelvin = t + 273.15  # Celsius to Kelvin\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * v_mps ** 0.16 + 0.3965 * t_kelvin ** 0.16\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    t += 273.15\n    \n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity from km/h to m/s\n    v_ms = v / 3.6\n    # calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t * math.pow(v_ms, 0.16)\n    # round to the next integer\n    wind_chill_index_rounded = round(wind_chill_index)\n    return wind_chill_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # convert velocity from km/h to m/s\n    v = v / 3.6\n    \n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    \n    # round the wind chill index to the next integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed = v * 1.60934  # convert km/h to m/s\n    temperature = t + 273.15  # convert celsius to kelvin\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (math.pow(wind_speed, 0.16)) + 0.3965 * temperature * (math.pow(wind_speed, 0.16))\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    temp_f = (t * 9/5) + 32\n    wind_chill_index = 35.74 + 0.6215 * temp_f - 35.75 * math.pow(v, 0.16) + 0.4275 * temp_f * math.pow(v, 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    This function takes a list of names as input and returns the sum of the length of the names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of lengths of all the names that do not start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    This function takes a list of names and returns the sum of the length of names in the list that do not start with a lowercase letter.\n    \"\"\"\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing\n    the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them from it.\n    '''\n    # Use regular expressions to remove the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\(.*?\\)')\n    new_items = re.sub(pattern, '', items)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string using regular expressions.\n    \"\"\"\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)')\n    new_items = []\n    for item in items:\n        new_item = pattern.sub('', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    num = 1\n    den = 1\n    \n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the nth nonagonal number\n        nonagonal = (num + den) * i\n        \n        # update the numerator and denominator for the next nonagonal number\n        num, den = den, num + den\n        \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"n must be a positive integer\"\n    else:\n        return (n*(n+1))//2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = (n * (n + 1)) // 2\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = n * (3 * n - 1) // 2\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    k = (n * (3 * n - 1)) // 2\n    return k"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        count += num\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\b)(?=.*z)(?=[^z]*[A-Za-z])(?=[^z]*[A-Za-z])[^z]*[A-Za-z][^z]*z[^z]*[A-Za-z][^z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz(?!\\w)|(?<!\\w)z\\B'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[^z]\\b.*\\b[^z]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*\\bz)(\\w*\\bz\\w*\\b)'\n    result = re.search(pattern, text, re.IGNORECASE)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*(?:^|\\s)z(?!.*(?:^|\\s)z)).*z.*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!\\w*z\\w*(\\W|$))(?=.{1,}\\w*z\\w*(\\W|$))\\w*\\w*\\b'\n    result = bool(re.search(pattern, text))\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz\\w*\\b'\n    result = re.findall(pattern, text)\n    return len(result) > 0"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # iterate over each word and check if 'z' is present except at the start and end of the word\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\w(?=z)\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a pattern to match the words containing 'z', except at the start and end\n    pattern = re.compile(r'\\b(?![^ ])z(?! [^ ])\\w*\\b')\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    # If there are any matches, return True, else False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes two arguments:\n    input: An array of integers\n    k: An integer\n\n    It returns a new array that is the reverse of the input array upto position k.\n    '''\n    # Initialize variables\n    reversed_array = []\n    i = 0\n    \n    # Loop through input array and add elements to reversed_array\n    while i < k:\n        reversed_array.append(input[i])\n        i += 1\n    \n    # Reverse the reversed_array using slicing\n    reversed_array = reversed_array[::-1]\n    \n    # Loop through input array from position k and add elements to reversed_array\n    while i < len(input):\n        reversed_array.append(input[i])\n        i += 1\n    \n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and an integer k as input and returns the reversed array up to position k.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    # Reverse the first k elements of the reversed array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the reversed array\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and reverses all elements up to the kth position.\n    :param input: The input array\n    :param k: The position up to which the array elements should be reversed\n    :return: The reversed array\n    '''\n\n    # Reverse the first k elements of the array\n    for i in range(k//2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_array_upto_k(input_list, k):\n    \"\"\"\n    This function takes in a list and a value k and reverses the list up to kth position.\n    \"\"\"\n    # reverse the entire list\n    input_list.reverse()\n    # reverse the list up to kth position\n    input_list = input_list[:k][::-1] + input_list[k:]\n    return input_list"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an input array and a position (k) as inputs, and returns the input array reversed upto the position k.\n    '''\n    return input[0:k+1][::-1] + input[k+1:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an input array and a position k as inputs and returns a reversed array upto the position k.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    # Reverse the array upto the position k\n    reversed_array = input[:k+1][::-1]\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    Parameters:\n    input (list): the array to reverse\n    k (int): the position up to which to reverse the array\n\n    Returns:\n    list: the reversed array\n    \"\"\"\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes in a tuple and a dictionary as input. It then adds the dictionary to the tuple and returns the modified tuple.\n    '''\n    # create a new tuple with the original tuple and the dictionary as a tuple\n    new_tuple = test_tup + (test_dict,)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]  # initialize the DP table with zeros\n    for i in range(n):\n        dp[i][0] = cost[i][0]  # initialize the first row of the DP table\n    for j in range(n):\n        dp[0][j] = cost[0][j]  # initialize the first column of the DP table\n\n    # fill the DP table with the maximum average path\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # compute the maximum average path\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            curr_avg = (dp[i][j] - cost[i][j]) / 2  # the average is computed as the difference between the maximum path cost and the base cost divided by the number of cells visited\n            max_avg = max(max_avg, curr_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n\n    # Initialize the dp table\n    dp = [[0]*n for i in range(n)]\n\n    # Initialize the first row and column of the dp table\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n\n    # Fill the rest of the dp table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    # Initialize the maximum average and the corresponding path\n    max_avg = dp[n-1][n-1] / 2\n    path = [(n-1, n-1)]\n\n    # Backtrack to find the path with the maximum average\n    i, j = n-1, n-1\n    while i > 0 or j > 0:\n        if i == 0:\n            j -= 1\n        elif j == 0:\n            i -= 1\n        else:\n            if dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        path.append((i,j))\n\n    # Reverse the path and compute the average\n    path = path[::-1]\n    avg = sum(cost[p[0]][p[1]] for p in path) / len(path)\n\n    return max_avg, avg, path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    path = [[[0, 0] for i in range(n)] for j in range(n)]\n    \n    # base case: if only one cell, return that cell\n    if n == 1:\n        return cost[0][0], 1\n    \n    # initialize diagonal and vertical paths\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n        path[i][i] = [i, i]\n        \n    # initialize horizontal paths\n    for i in range(n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n        path[i][0] = [i, 0]\n    \n    for i in range(1, n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n        path[0][i] = [0, i]\n    \n    # fill in rest of matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            # get maximum of the current cell and the two cells up and left of it\n            max_val = max(dp[i-1][j], dp[i][j-1])\n            \n            # store the maximum value and the path taken to reach that value\n            dp[i][j] = cost[i][j] + max_val\n            if dp[i-1][j] == max_val:\n                path[i][j] = [i, j]\n            else:\n                path[i][j] = [i-1, j]\n    \n    # find the maximum average path\n    max_avg = -1\n    for i in range(n):\n        for j in range(n):\n            # find the length of the path from the current cell to the bottom right cell\n            path_len = 1\n            curr_cell = i, j\n            while curr_cell!= (n-1, n-1):\n                next_cell = path[curr_cell[0]][curr_cell[1]][0], path[curr_cell[0]][curr_cell[1]][1]\n                path_len += 1\n                curr_cell = next_cell\n            \n            # compute the average cost for this path\n            avg_cost = dp[i][j] / path_len\n            \n            # update the maximum average if necessary\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Initialize the maximum average and the path with the top-left cell only\n    max_avg = cost[0][0]\n    path = [(0, 0)]\n\n    # Create a visited set to keep track of visited cells\n    visited = set([(0, 0)])\n\n    # Initialize the direction dictionary to keep track of the next possible moves from each cell\n    directions = {\n        'right': (0, 1),\n        'down': (1, 0)\n    }\n\n    # Initialize the path cost and the number of cells visited\n    path_cost = cost[0][0]\n    num_cells_visited = 1\n\n    # Iterate over the rest of the cells in the matrix\n    for i in range(1, len(cost)):\n        for j in range(len(cost)):\n\n            # Initialize the maximum possible average and the next direction to move in\n            max_possible_avg = float('-inf')\n            next_direction = None\n\n            # Iterate over the possible directions to move in\n            for direction in directions:\n                next_i = i + directions[direction][0]\n                next_j = j + directions[direction][1]\n\n                # Check if the next cell is within the bounds of the matrix and not visited already\n                if 0 <= next_i < len(cost) and 0 <= next_j < len(cost) and (next_i, next_j) not in visited:\n\n                    # Compute the average of the path with the current cell and the next cell\n                    current_path_cost = path_cost + cost[next_i][next_j]\n                    current_num_cells_visited = num_cells_visited + 1\n                    current_avg = current_path_cost / current_num_cells_visited\n\n                    # Update the maximum possible average and the next direction to move in\n                    if current_avg > max_possible_avg:\n                        max_possible_avg = current_avg\n                        next_direction = direction\n\n            # Update the maximum average and the path if the maximum possible average is better\n            if max_possible_avg > max_avg:\n                max_avg = max_possible_avg\n                path = [(i, j)] + path\n\n            # Update the visited set and the path cost and number of cells visited\n            visited.add((i, j))\n            path_cost += cost[i][j]\n            num_cells_visited += 1\n\n    # Return the maximum average and the path\n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n    \n    # Initialize the table to store the maximum averages for all possible paths\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # Initialize the first row and first column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    \n    # Fill the rest of the table using dynamic programming approach\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    # Find the maximum average path\n    max_avg = -1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if dp[i][j] == 0:\n                continue\n            avg = dp[i][j]/((i+1) + (j+1))\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0]*cols for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = dp[rows-1][cols-1]/(2*rows+2*cols-4)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # Find the maximum path sum ending at each cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    max_avg = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                max_avg = max(max_avg, dp[i][j] / (j + 1))\n            elif j == 0:\n                max_avg = max(max_avg, dp[i][j] / (i + 1))\n            else:\n                max_avg = max(max_avg, (dp[i][j] - min(dp[i-1][j], dp[i][j-1])) / (i + j - 1))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    # Initialize a 2D array to store the maximum average of paths ending at each cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # Base case: Maximum average of a single cell is its own cost\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    \n    # Fill the table in a bottom-up manner\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n    \n    # Compute the maximum average path by selecting the cell with maximum cost in the bottom-right corner\n    max_cost = dp[0][n-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            max_cost = max(max_cost, dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + cost[i][j])\n    \n    return max_cost"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == n-1 and j == n-1:\n                avg = dp[i][j] / (n*n)\n                if avg > max_avg:\n                    max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. \n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = dp[n-1][n-1]/2\n    for i in range(1, n):\n        for j in range(1, n):\n            avg = (dp[i][j] - dp[i-1][j] - dp[i][j-1] + dp[i-1][j-1])/2\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[name] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n\nstudents = {'Alice':(1.7, 60), 'Bob':(1.8, 50), 'Charlie':(1.6, 55), 'David':(1.9, 65), 'Emily':(1.5, 45)}\n\nprint(filter_data(students, 1.6, 50)) #Output: {'Charlie': (1.6, 55), 'David': (1.9, 65)}"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to zero\n    total_sum = 0\n    \n    # convert base to a string and loop through each digit\n    for digit in str(base):\n        # convert the digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n    \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power = base ** power\n    total_sum = 0\n    while base_power!= 0:\n        digit = base_power % 10\n        total_sum += digit\n        base_power //= 10\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to string and calculate its length\n    base_str = str(base)\n    length = len(base_str)\n\n    # Calculate the sum of all digits to the specified power\n    total = 0\n    for i in range(length):\n        digit = int(base_str[i])\n        total += digit ** power\n\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(base)\n        base = str(base)\n        for j in range(len(base)):\n            base = str(int(base[j]) * base[0])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the power to an integer\n    power = int(power)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through all the digits of the base\n    while base > 0:\n        # Extract the last digit of the base\n        digit = base % 10\n        # Multiply the digit by the power and add it to the sum\n        sum += digit * power\n        # Divide the base by 10 to remove the last digit\n        base //= 10\n    # Return the sum of all digits to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and calculate the sum of its digits to the power\n    base_str = str(base)\n    result = sum([int(digit) ** power for digit in base_str])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base**power):\n        base_sum += int(digit)\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    temp = base\n    while power > 0:\n        digit = temp % 10\n        sum += digit ** power\n        temp //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n\ntext1 = 'I am learning \"Python programming\" at \"PythonForBeginners.com\"'\nprint(extract_quotation(text1))"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = re.findall(r'\"(.*?)\"', text1)\n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string using regular expressions.\n    '''\n    regex = r'\\\"(.*?)\\\"'\n    matches = re.findall(regex, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r'\\\"(.*?)\\\"'\n    matches = re.findall(regex, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through the input tuple\n    for i in range(len(test_tup) - 1):\n        # multiply the current element and the next element and add the result to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = (test_tup[i] * test_tup[i+1] for i in range(n))\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    n = len(test_tup) - 1\n    result = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"Error: lists are not of equal length.\")\n        return None\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns a new list which is the sum of the elements of the input lists.\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Returns a new list where each element is the sum of the corresponding elements in lst1 and lst2.\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their element-wise sum.\n    '''\n    # Create an empty list to store the sums\n    sums = []\n\n    # Loop through the lists, adding the corresponding elements\n    for i in range(len(lst1)):\n        sums.append(lst1[i] + lst2[i])\n\n    # Return the list of sums\n    return sums"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    This function takes two lists as input and returns a list containing the element-wise sum of the two input lists.\n    \"\"\"\n    # check if both lists are of equal length\n    if len(lst1)!= len(lst2):\n        print(\"Error: Lists must be of equal length.\")\n        return None\n\n    # initialize an empty list to store the element-wise sum\n    result = []\n\n    # iterate over the two lists and add their corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    # return the result list containing the element-wise sum\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a list of tuples, where each tuple contains a key and its consecutive values\n    group_list = [(k, list(g)) for k, g in groupby(nums)]\n    \n    # remove the tuples where the length of the list of consecutive values is 1\n    group_list = [group for group in group_list if len(group[1]) > 1]\n    \n    # flatten the list of consecutive values\n    result = [value for group in group_list for value in group[1]]\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # group consecutive duplicates\n    groups = [(k, list(g)) for k, g in groupby(nums)]\n\n    # remove duplicates from each group\n    for i in range(len(groups)):\n        groups[i] = (groups[i][0], list(set(groups[i][1])))\n\n    # flatten the list of tuples to a list\n    result = [num for group in groups for num in group[1]]\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if len(list(g)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # sort the list in ascending order\n    nums.sort()\n    # group the consecutive duplicates together\n    result = [(k, len(list(g))) for k, g in groupby(nums)]\n    # filter out the groups with length 1\n    result = [(k, v) for k, v in result if v > 1]\n    # flatten the result list\n    result = [k for k, v in result for _ in range(v)]\n    # return the final list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby function to iterate through the list and group consecutive duplicates\n    grouped_nums = [(k, len(list(g))) for k, g in groupby(nums)]\n    \n    # Filter out groups with length 1 (i.e., non-consecutive duplicates)\n    filtered_nums = [k for k, g in grouped_nums if g > 1]\n    \n    return filtered_nums"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function takes a list of integers and removes consecutive duplicates.\n    '''\n    # convert the list to a string so that we can group it by consecutive duplicates\n    nums_str = ''.join(str(num) for num in nums)\n    # group the consecutive duplicates and join them into a single string\n    result = ''.join(k for k, g in groupby(nums_str))\n    # convert the result back to a list of integers\n    return [int(num) for num in result]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by consecutive duplicates\n    groups = [(key, sum(1 for _ in group)) for key, group in groupby(nums)]\n    \n    # filter out the groups with count 1\n    result = [key for key, count in groups if count > 1]\n    \n    return result"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius and height.\n    '''\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius of the base of the cone and the height of the cone respectively.\n    The function calculates the lateral surface area of the cone using the formula A = \u03c0r^2 + \u03c0rh and returns the value.\n    '''\n    A = math.pi * r ** 2 + math.pi * r * h\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Args:\n    r: float, radius of the cone.\n    h: float, height of the cone.\n\n    Returns:\n    float, lateral surface area of the cone.\n    '''\n\n    # Calculate the lateral surface area of the cone\n    A = math.pi * r * r + math.pi * r * h\n\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function finds the lateral surface area of a cone given its radius r and height h.\n    '''\n    surface_area = math.pi * r * r + math.pi * r * math.sqrt(r * r + h * h)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone as input, and returns the lateral surface area of the cone.\n    '''\n    # Calculate the base area of the cone\n    base_area = math.pi * r**2\n    \n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r * math.sqrt(r**2 + h**2)\n    \n    # Calculate the total surface area of the cone\n    total_area = 2 * base_area + lateral_area\n    \n    return total_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius and height.\n    '''\n    return math.pi * r * h + 2 * math.pi * r**2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h + math.pi * r**2"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[., ]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # replace spaces, commas, and dots with a colon\n    new_text = re.sub(r'[\\s,.]', ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[\\s,.]\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Regular expression to match all special characters\n    regex = r'[\\s,.]+'\n    # Replace all special characters with a colon\n    replaced_text = re.sub(regex, ':', text)\n    return replaced_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces\n    text = re.sub(r\"\\s+\", \":\", text)\n    # Replace commas\n    text = re.sub(r\",\", \":\", text)\n    # Replace dots\n    text = re.sub(r\"\\.\", \":\", text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1] < x):\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array and a number as input and returns the index of the first occurrence of the number in the array.\n    If the number is not present in the array, it returns -1.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            # Check if the number is present on the left side of the mid index\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            sum += prod\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        total_sum += product\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            ans += prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Returns the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += arr[i] * arr[j]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n\n    for i in range(n):\n        ans += arr[i]\n\n        for j in range(i+1, n):\n            ans += arr[i] * arr[j]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. \n    '''\n    n = len(arr)\n    # Initialize the sum to 0\n    sum = 0\n    # Traverse all subarrays of arr and calculate their products\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum += prod\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    for i in range(1,n):\n        dp[i] = dp[i-1]*arr[i]\n    return sum(dp)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # Toggling bits of the number except the first and the last bit\n    mask = 0b11111000  # mask to select all bits except the first and last\n    return (n & mask) | ((n & ~mask) << 1)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Toggle all bits of n except the first and the last bit\n    mask = 0b
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    This function will toggle the bits of a number except the first and last bit.\n    '''\n    mask = ((1 << 31) - 1) ^ ((1 << 1) - 1)\n    result = n ^ mask\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of the number\n    binary = bin(n)[2:]\n    # get the length of the binary string\n    length = len(binary)\n    # toggle all bits except the first and last ones\n    binary = '1' + binary[1:-1] + '1'\n    # convert the binary string back to an integer\n    result = int(binary, 2)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 0xFFFFFFFFFFFFFFFE # all bits except the first and last\n    mask = ~mask # invert the mask to get the desired result\n    return n & mask # apply the mask to the number to toggle the middle bits"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = 0xAAAAAAAA  # binary representation of 0b10101010101010101010101010101010\n    return (n ^ mask)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles the bits of the number except the first and the last bit.\n    \"\"\"\n    # Left shift the bits of n to the left by 1 to move the first bit to the leftmost position.\n    # Right shift the bits of n to the right by 1 to move the last bit to the rightmost position.\n    # XOR the shifted values to toggle the bits.\n    # Left shift the result by 1 to move the first bit to the second position.\n    # Return the result.\n    return ((n << 1) ^ (n >> 1)) << 1"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Find the binary representation of the given number\n    binary = bin(n)[2:]\n    \n    # Create a new binary string with the first and the last bits\n    new_binary = binary[0] + binary[-1]\n    \n    # Iterate over the remaining bits and toggle them\n    for bit in binary[1:-1]:\n        if bit == '0':\n            new_binary += '1'\n        else:\n            new_binary += '0'\n    \n    # Convert the new binary string back to an integer\n    new_number = int(new_binary, 2)\n    \n    # Return the new number\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ((1 << (n.bit_length() - 2)) - 1) << 1\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = ((1 << 31) - 1) - ((1 << 1) - 1)  # binary representation of all 30 bits\n    return (n ^ (n & mask)) & ((1 << 31) - 1)  # toggle bits except first and last"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    result = re.match(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    This function calculates the geometric sum of n-1\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n)*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Geometric sum of\", n, \"is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 using recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n-1) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n / (1 - n)) * geometric_sum(n-1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)\n\nprint(geometric_sum(10))  # Output: 1.0905077326652576"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1/n)) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/n) + geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function finds the index of smallest triangular number with n digits. \n    '''\n    # Calculating the product of digits\n    product = 1\n    for i in range(1, n+1):\n        product *= i\n    \n    # Calculating the sum of digits\n    digits_sum = 0\n    while product > 0:\n        digits_sum += product % 10\n        product //= 10\n        \n    # Calculating the index of smallest triangular number\n    index = 1\n    while digits_sum > 0:\n        digits_sum -= n\n        index += 1\n        \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    # Compute the number of digits of the smallest triangular number\n    k = math.ceil(math.log10(n * (n + 1) // 2))\n\n    # Compute the smallest triangular number with n digits\n    triangular = (n * (n + 1) // 2)\n\n    # Compute the number of terms in the sequence of triangular numbers\n    terms = (10 ** k) - 1\n\n    # Compute the index of the smallest triangular number with n digits\n    index = triangular // (10 ** (k - 1)) + terms\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    return int((math.sqrt(1 + 8 * (10 ** n - 1)) - 1) / 2)\n\nn = int(input(\"Enter the number of digits: \"))\nprint(\"The index of the smallest triangular number with\", n, \"digits is:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    # Find the number of digits in the smallest triangular number with n digits\n    num_digits = n * (n + 1) // 2\n    # Convert the number of digits to a string\n    num_digits_str = str(num_digits)\n    # Find the number of digits in the largest triangular number with n digits\n    largest_num_digits = (n + 1) * n // 2\n    # Convert the number of digits to a string\n    largest_num_digits_str = str(largest_num_digits)\n    # Find the number of digits between the two triangular numbers\n    diff_num_digits = largest_num_digits - num_digits\n    # Convert the number of digits to a string\n    diff_num_digits_str = str(diff_num_digits)\n    # Multiply the difference by the number of digits in a triangular number\n    index = int(diff_num_digits_str + num_digits_str)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 1\n    i = 1\n    while len(str(triangular_number)) < n:\n        triangular_number += i\n        i += 1\n    return i - 1\n\nprint(find_Index(6))  # Output: 15"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Using formula to find the number of digits in the triangular number\n    num_digits = n * (n+1) // 2\n\n    # Using formula to find the smallest triangular number with n digits\n    triangular_num = (num_digits * (num_digits + 1)) // 2\n\n    # Finding the index of the smallest triangular number with n digits\n    index = num_digits\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    max_num = int(math.pow(10, n))\n    count = 0\n    for i in range(1, max_num):\n        count += i\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the largest triangular number with n digits\n    upper_limit = (10**n - 1) * (10**(n-1) + 1) // 2\n    \n    # Initialize lower limit as 0\n    lower_limit = 0\n    \n    # Binary search to find the smallest triangular number with n digits\n    while lower_limit <= upper_limit:\n        mid = (lower_limit + upper_limit) // 2\n        \n        # Check if mid is a triangular number\n        if mid == math.floor(math.sqrt(24 * mid + 1))**2 - 1:\n            # If mid is a triangular number, return its index\n            return mid\n        \n        # If mid is greater than the triangular number, move to the right half of the search space\n        elif mid > math.floor(math.sqrt(24 * mid + 1))**2 - 1:\n            upper_limit = mid - 1\n        \n        # If mid is less than the triangular number, move to the left half of the search space\n        else:\n            lower_limit = mid + 1\n            \n    # If no triangular number is found, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 1\n    count = 0\n    \n    while len(str(triangular_number)) < n:\n        triangular_number += count + 1\n        count += 1\n        \n    return count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function finds the index of the smallest triangular number with n digits.\n    '''\n    count = 0\n    for i in range(1, 10):\n        count += math.comb(n, i)\n\n    index = count + 1\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Loop through the tuple, adding each adjacent pair as a key-value pair to the dictionary\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert a tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # check if the input is a tuple\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Input should be a tuple\")\n\n    # initialize an empty dictionary\n    result_dict = {}\n\n    # iterate over the tuple using a for loop\n    for i in range(0, len(test_tup), 2):\n        # check if the current element and the next element form a key-value pair\n        if i+1 < len(test_tup):\n            # add the key-value pair to the dictionary\n            result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple should have even number of elements\")\n    \n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n        \n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and converts it into a dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function will return True if all the characters in the string are the same, otherwise it will return False.\n    \"\"\"\n    for i in range(len(s)):\n        if i == 0:\n            first_char = s[i]\n        elif s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string s are the same or not.\n    '''\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a string are the same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            prev_char = s[i]\n        else:\n            if prev_char!= s[i]:\n                return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    return len(set(s)) <= 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (3**0.5) * (side ** 2) / (4 * (math.tan(math.pi / 6)))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    # Calculate the area of the tetrahedron using Heron's formula\n    s = (side * 3) / (4 * math.tan(math.pi / 4))\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    return (math.sqrt(6) * side ** 2) / 4"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3**0.5) * (0.5 * side)**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (6 * (math.sqrt(2) * side ** 2)) / (4 * math.tan(math.pi / 12))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one side of a tetrahedron as input and returns its area.\n    '''\n    area = (math.sqrt(3) / 2) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with the given side length.\n    '''\n    # Calculate the volume of the tetrahedron using the formula V = (1/3) * (side^3)\n    volume = (1/3) * (side ** 3)\n    # Calculate the surface area of the tetrahedron using the formula A = 3 * sqrt(6) * side^2\n    surface_area = 3 * math.sqrt(6) * (side ** 2)\n    # Calculate the area of the tetrahedron as 2 * surface area divided by the volume\n    area = 2 * surface_area / volume\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) / 4) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    volume = (1/3) * math.pow(side, 3)\n    area = 6 * math.sqrt(2) * side * math.sqrt(3) / (4 * math.sqrt(3) - 5)\n    return area * volume"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6 * math.sqrt(6) / 2) * side**2\n\nprint(area_tetrahedron(5)) # Output: 55.928"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate a list to the right by k positions.\n\n    Args:\n    - lst: A list of integers.\n    - k: An integer indicating the number of positions to rotate.\n\n    Returns:\n    - A new list with the elements rotated by k positions to the right.\n\n    Example:\n    >>> lst = [1, 2, 3, 4, 5]\n    >>> rotate_right(lst, 2)\n    [4, 5, 1, 2, 3]\n    \"\"\"\n    n = len(lst)\n    k = k % n  # k should be within the range of [0, n-1]\n\n    # Rotate the list to the right by k positions.\n    new_lst = lst[n-k:] + lst[:n-k]\n\n    return new_lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and a number n as input and returns the list rotated n times to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst = lst[n:] + lst[:n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function takes a list as input and rotates it by n elements to the right.\n    If n is greater than the length of the list, then n is reduced to its original value.\n    '''\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list by n items to the right direction.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    # Reverse the entire list\n    list = list[::-1]\n    # Reverse the first m elements\n    list[:m] = list[:m][::-1]\n    # Reverse the remaining n-m elements\n    list[m:] = list[m:][::-1]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # lambda function to check if a number is divisible by every digit it contains\n    check_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # loop through all numbers in the given range\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit it contains\n        if check_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Create a lambda function to check if a number is divisible by every digit it contains\n    check_divisible = lambda num: all(int(digit) % num == 0 for digit in str(num))\n    \n    # Loop through the range of numbers and check if each number is divisible by every digit it contains\n    for num in range(startnum, endnum+1):\n        if check_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        digits = [int(digit) for digit in str(num)]\n        return all(num % digit == 0 for digit in digits)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n\nstartnum = int(input(\"Enter start number: \"))\nendnum = int(input(\"Enter end number: \"))\n\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [num for num in range(startnum, endnum + 1) if all(num % int(digit) == 0 for digit in str(num))]"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    divisible = []\n    for num in range(startnum, endnum+1):\n        digits = list(map(int, str(num)))\n        if all(num % digit == 0 for digit in digits):\n            divisible.append(num)\n    return divisible\n\nstartnum = 100\nendnum = 500\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = [num for num in range(startnum, endnum+1) if all(int(digit) % num == 0 for digit in str(num))]\n    return result\n\nstartnum = int(input(\"Enter the starting number: \"))\nendnum = int(input(\"Enter the ending number: \"))\n\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector.\n    If the angle is larger than 360 degrees, it returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2 * a) / (2 * math.pi)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Function to find the area of a sector.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi * r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of a sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r**2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Function to find area of a sector.\n    Takes the radius and angle as inputs. \n    Returns None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a) / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r ** 2) * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. \n    The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a / 360 * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        area = (math.pi*r**2)*(a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. \n    The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2 * a / 360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. \n    The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area of sector\n    area = (r**2) * (a / 360) * (math.pi / 180)\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a 2D list to store the lengths of LCSs\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the LCSs using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of the LCS and its indices\n    lcs_len = L[m][n][o]\n    lcs_indices = []\n    i = m\n    j = n\n    k = o\n    while (i > 0 and j > 0 and k > 0):\n        if (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]):\n            lcs_indices.append((i-1,j-1,k-1))\n            i -= 1\n            j -= 1\n            k -= 1\n        elif (L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]):\n            i -= 1\n        elif (L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n\n    # Return the LCS and its indices\n    return lcs_len, lcs_indices"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a table to store lengths of longest common subsequences of substrings X[0...m-1], Y[0...n-1] and Z[0...o-1]\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # fill the table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    \n    # find the length of the longest common subsequence\n    max_len = lcs[m][n][o]\n    \n    # create a character array to store the longest common subsequence\n    lcs_str = [''for i in range(max_len)]\n    \n    # find the longest common subsequence in a bottom-up manner\n    i = m\n    j = n\n    k = o\n    index = max_len - 1\n    while (i > 0 and j > 0 and k > 0):\n        if (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n            lcs_str[index] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif (lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]):\n            i -= 1\n        elif (lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]):\n            j -= 1\n        else:\n            k -= 1\n    \n    # reverse the character array to get the longest common subsequence in the correct order\n    lcs_str.reverse()\n    lcs_str = ''.join(lcs_str)\n    \n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Returns the longest common subsequence of three strings.\n    \"\"\"\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0] * (n+1) for _ in range(o+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n\n    # Create a 3D matrix to store lengths of LCS for all substrings of X, Y and Z\n    lcs_matrix = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the matrix using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_matrix[i][j][k] = 1 + lcs_matrix[i-1][j-1][k-1]\n                else:\n                    lcs_matrix[i][j][k] = max(lcs_matrix[i-1][j][k], lcs_matrix[i][j-1][k], lcs_matrix[i][j][k-1])\n\n    # Find the LCS using backtracking\n    lcs = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_matrix[i-1][j][k] > lcs_matrix[i][j-1][k]:\n            i -= 1\n        elif lcs_matrix[i-1][j][k] < lcs_matrix[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D table to store lengths of LCS of subproblems\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using recursive approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # LCS of given three strings X, Y, Z is stored in the last entry of LCS table\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0] * (o+1) for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    L = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n\n    while i > 0 and j > 0 and k > 0:\n\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] > L[i - 1][j][k] and L[i][j - 1][k] > L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store the lengths of longest common subsequences\n    table = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Return the longest common subsequence\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k]:\n            i -= 1\n        elif table[i-1][j][k] > table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of longest common subsequence of substrings\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i][j-1][k], dp[i-1][j][k], dp[i][j][k-1])\n\n    # Find the length of longest common subsequence\n    lcs_len = dp[m][n][o]\n\n    # Create a character array to store the longest common subsequence\n    lcs = [\"\"] * lcs_len\n\n    # Traverse the table from the bottom right corner to the top left corner\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[lcs_len-1] = X[i-1]\n            lcs_len -= 1\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Print the longest common subsequence\n    print(\"Longest common subsequence: \", end='')\n    for i in range(len(lcs)):\n        print(lcs[i], end='')\n    print()"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all capitalized words in the string\n    capitalized_words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Replace each capitalized word with a space followed by the original word\n    for word in capitalized_words:\n        str1 = str1.replace(word,'' + word)\n    \n    # Remove any extra spaces at the beginning or end of the string\n    str1 = str1.strip()\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all words starting with capital letters and replace with a space followed by the word\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    result = pattern.sub(r' \\1', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Using regular expression to split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Joining the words with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = re.compile(r\"(?<=[A-Z])(?=[A-Z][a-z])|(?<=[^A-Z])(?=[A-Z])\")\n    return pattern.sub(\" \", str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # replace all occurrences of multiple spaces with a single space\n    str1 = re.sub(r'\\s+','', str1)\n    # split the string into a list of words\n    words = str1.split()\n    # loop through each word in the list\n    for i in range(len(words)):\n        # check if the first character of the word is capitalized\n        if words[i][0].isupper():\n            # if it is, add a space before the word\n            words[i] ='' + words[i]\n    # join the words back into a string and return the result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphabetic characters and convert to lower case\n    str1 = re.sub(r'[^a-zA-Z]','', str1).lower()\n    # Split the string into words\n    words = str1.split()\n    # Initialize an empty string to hold the modified words\n    modified_words = ''\n    # Loop through each word in the list\n    for word in words:\n        # If the word starts with a capital letter, add a space before it\n        if word[0].isupper():\n            modified_words +='' + word\n        # If the word doesn't start with a capital letter, add it as is\n        else:\n            modified_words += word\n    return modified_words"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub('[^0-9a-zA-Z]+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Create a new list with spaces between capitalized words\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(' ')\n        result.append(word)\n    # Join the list into a string and return it\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    result = ''\n    for word in words:\n        result += word +''\n    return result.strip()"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use re.findall() to find all capitalized words in the string\n    matches = re.findall(pattern, str1)\n    # Use re.sub() to replace each capitalized word with its corresponding space-separated version\n    new_string = re.sub(pattern, lambda x:''.join(x.group().split()), str1)\n    return new_string"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Create a new string with spaces between words starting with capital letters\n    new_str =''.join(words)\n    \n    return new_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: float(x.replace(',', '.')))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num in nums_int:\n        sorted_nums_str.append(str(num))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str = sorted(nums_str, key=lambda x: [int(c) for c in x])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # Define a custom key function to extract the numeric value from each string\n    def get_num(s):\n        return int(s)\n    \n    # Use the sorted() function with the key function to sort the list of strings\n    sorted_nums = sorted(nums_str, key=get_num)\n    \n    return sorted_nums"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The new list after adding the tuple is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds the given tuple to the given list and returns the updated list.\n    \"\"\"\n    return test_list + list(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function takes a list and a tuple as inputs, and adds the tuple to the list.\n    \"\"\"\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    This function adds a tuple to a list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    This function takes a list and a tuple as inputs. It then adds the tuple to the list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    A helper function to check if the given array represents min heap or not.\n    '''\n\n    if 2*i + 1 > len(arr) - 1 and 2*i + 2 > len(arr) - 1:\n        # if we reach the end of the array, it means we have checked all the nodes\n        return True\n\n    if 2*i + 1 <= len(arr) - 1 and arr[2*i + 1] > arr[i]:\n        # check if the left child is greater than the parent\n        return False\n\n    if 2*i + 2 <= len(arr) - 1 and arr[2*i + 2] > arr[i]:\n        # check if the right child is greater than the parent\n        return False\n\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\n\ndef check_min_heap(arr):\n    '''\n    A function to check if the given array represents min heap or not.\n    '''\n\n    if len(arr) <= 1:\n        # if the length of the array is less than or equal to 1, it is a valid min heap\n        return True\n\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # if there is no left child, then the node is a leaf node\n    if 2*i+1 >= len(arr):\n        return True\n    \n    # if left child exists and is smaller than the parent, then it violates heap property\n    if arr[2*i+1] < arr[i]:\n        return False\n    \n    # recursively check if the right child also satisfies the heap property\n    return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    # start checking from the first non-leaf node (i.e., the last non-leaf node)\n    i = len(arr)//2 - 1\n    \n    # check if the remaining nodes also satisfy the heap property\n    while i >= 0:\n        if not check_min_heap_helper(arr, i):\n            return False\n        i -= 1\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr) // 2:\n        # check if the left child of the root node is smaller than the root node\n        if arr[2*i + 1] < arr[i]:\n            return False\n        # check if the right child of the root node is smaller than the root node\n        if arr[2*i + 2] < arr[i]:\n            return False\n        # recursively call the function on the left and right subtrees\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    else:\n        # if the current node is a leaf node, return True\n        return True\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    for i in range(len(arr)):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(len(arr)):\n        if i > 0 and arr[i] < arr[(i - 1) // 2]:\n            return False\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # If left child is smaller than parent\n    if left < n and arr[i] > arr[left]:\n        return False\n    \n    # If right child is smaller than parent\n    if right < n and arr[i] > arr[right]:\n        return False\n    \n    # If both left and right child satisfy the heap property\n    if left < n and right < n and arr[left] > arr[right]:\n        return False\n    \n    # Recursively call the function for the left and right child of the current node\n    if left < n and not check_min_heap_helper(arr, left):\n        return False\n    \n    if right < n and not check_min_heap_helper(arr, right):\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n\n    if (2 * i + 1) < len(arr) and arr[2 * i + 1] > arr[i]:\n        return False\n\n    if (2 * i + 2) < len(arr) and arr[2 * i + 2] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n\n    if min_index!= i:\n        arr[min_index], arr[i] = arr[i], arr[min_index]\n        check_min_heap_helper(arr, min_index)\n\ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr)):\n        if arr[0] > arr[i]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # check if left child of root exists and is smaller than root\n    if left < n and arr[i] > arr[left]:\n        return False\n\n    # check if right child of root exists and is smaller than root\n    if right < n and arr[i] > arr[right]:\n        return False\n\n    # recursively check for left and right subtrees\n    if left < n and not check_min_heap_helper(arr, left):\n        return False\n\n    if right < n and not check_min_heap_helper(arr, right):\n        return False\n\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    This function finds the nth Jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return jacobsthal_num((n - 1) // 2) + jacobsthal_num((n + 1) // 2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a list of tuples and a value K and returns the minimum K records from the list.\n    '''\n    # sort the list of tuples based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    # return the first K elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input and returns the minimum K elements from the list of tuples.\n    '''\n    # Initialize an empty list to store the minimum K elements\n    min_elements = []\n    \n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Iterate over the sorted list of tuples and append the first K elements to the min_elements list\n    for i in range(K):\n        min_elements.append(test_list[i][0])\n        \n    # Return the min_elements list\n    return min_elements"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and finds the minimum k records from the list.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Get the first k elements from the sorted list\n    k_records = sorted_list[:K]\n    # Return the list of k minimum records\n    return k_records"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the test_list based on the second element (i.e., second element is the salary)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first K elements of the sorted test_list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    \"\"\"\n    # Sort the list in ascending order of the second element of each tuple.\n    test_list = sorted(test_list, key=lambda x: x[1])\n\n    # Select the first k elements of the sorted list.\n    result = test_list[:K]\n\n    # Sort the selected elements in ascending order of the first element of each tuple.\n    result = sorted(result, key=lambda x: x[0])\n\n    # Return the sorted list of selected elements.\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # sort the list based on the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n\n    # return the first k elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds minimum k records from tuple list.\n    \"\"\"\n    min_list = []\n    for i in range(K):\n        min_val = float('inf')\n        for j in range(len(test_list)):\n            if test_list[j][0] < min_val:\n                min_val = test_list[j][0]\n                min_index = j\n        min_list.append(test_list[min_index])\n        del test_list[min_index]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    n = len(test_list)\n    max_heap = []\n    for i in range(K):\n        heappush(max_heap, -test_list[i][1])\n\n    for i in range(K, n):\n        if -max_heap[0] > test_list[i][1]:\n            heappop(max_heap)\n            heappush(max_heap, -test_list[i][1])\n\n    result = []\n    for i in range(K):\n        result.append((-max_heap[0], test_list[i][0]))\n        heappop(max_heap)\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Return the first k elements of the sorted list\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    \"\"\"\n    # sort the list in ascending order\n    sorted_list = sorted(numbers)\n\n    # find the index of the second smallest number\n    second_index = sorted_list.index(sorted_list[1])\n\n    # return the second smallest number\n    return sorted_list[second_index]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(numbers) < 2:\n        return None\n    \n    # Find the smallest and second smallest numbers\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Return the second smallest number in the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    # Remove duplicates and sort the list in ascending order\n    numbers = sorted(set(numbers))\n    # If the list has less than 2 elements, return None\n    if len(numbers) < 2:\n        return None\n    # Otherwise, return the second element of the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # The second smallest number is the second element in the sorted list\n    second_smallest = sorted_numbers[1]\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b+)?')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a*b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given string list.\n\n    Args:\n    test_list (list): A list of strings.\n\n    Returns:\n    int: The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    pairs = {}\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            s1 = test_list[i]\n            s2 = test_list[j]\n            s1_reverse = s1[::-1]\n            s2_reverse = s2[::-1]\n\n            if s1 == s1_reverse and s2 == s2_reverse:\n                continue\n\n            if s1_reverse + s2_reverse in pairs:\n                pairs[s1_reverse + s2_reverse] += 1\n            else:\n                pairs[s1_reverse + s2_reverse] = 1\n\n    for key in pairs:\n        if pairs[key] > 1:\n            count += pairs[key] * (pairs[key]-1) // 2\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings and returns the count of pairs of reverse strings in the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    This function takes a list as an input and returns a dictionary where every unique sublist is a key and its value is the number of its occurrences in the original list.\n\n    Args:\n    list1 (list): The input list\n\n    Returns:\n    dict: A dictionary where every unique sublist is a key and its value is the number of its occurrences in the original list.\n\n    \"\"\"\n    # Convert the input list to a set of tuples to remove duplicates\n    unique_tuples = set(tuple(sublist) for sublist in list1)\n\n    # Create an empty dictionary to store the counts of each unique sublist\n    counts = {}\n\n    # Loop through the unique sublists and count their occurrences\n    for sublist in unique_tuples:\n        count = list1.count(list(sublist))\n        counts[sublist] = count\n\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing tuples as keys and their count as values.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and then back to a list\n    unique_lst = list(set(lst))\n    # Create an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    # Loop through each unique sublist in the list\n    for i in range(len(unique_lst)):\n        sublist = unique_lst[i]\n        # Create a tuple from the sublist\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # If it is, increment the count by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # If it isn't, add the tuple and set the count to 1\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            count[sublist] = count.get(sublist, 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in dict1:\n                dict1[sublist] = 1\n            else:\n                dict1[sublist] += 1\n    return dict1"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n    count_dict = {}\n    for item in unique_list:\n        count = list1.count(list(item))\n        count_dict[item] = count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where every unique sublist is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # convert list to tuple to use it as a key in a dictionary\n    lst = tuple(lst)\n\n    # create an empty dictionary\n    sublists_count = {}\n\n    # iterate through all possible sublists of the list\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            # convert the sublist to a tuple\n            sublist = tuple(lst[i:j+1])\n            # check if the sublist is already in the dictionary\n            if sublist in sublists_count:\n                # increment the count if the sublist is already in the dictionary\n                sublists_count[sublist] += 1\n            else:\n                # add the sublist to the dictionary with a count of 1 if it's not already in it\n                sublists_count[sublist] = 1\n    \n    return sublists_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    # create an empty dictionary to store the sublist count\n    sublist_count = {}\n    \n    # iterate through the list of lists\n    for sublist in lst:\n        # convert the sublist to a tuple and count its occurrences in the original list\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    \"\"\"\n    unique_lst = []\n    for i in lst:\n        if i not in unique_lst:\n            unique_lst.append(i)\n    sublist_count = {}\n    for i in unique_lst:\n        count = lst.count(i)\n        sublist_count[tuple(i)] = count\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with tuples as keys and their respective counts as values.\n    \"\"\"\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = tuple(lst[i:j])\n            if sub_lst in counts:\n                counts[sub_lst] += 1\n            else:\n                counts[sub_lst] = 1\n    return counts"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    # Split the string into integer and decimal parts\n    int_part, dec_part = num.split('.')\n\n    # If decimal part is not 2 digits, then it's not a decimal number with precision of 2\n    if len(dec_part)!= 2:\n        return False\n\n    # If integer part contains any non-digit character, then it's not a decimal number with precision of 2\n    if not int_part.isdigit():\n        return False\n\n    # If all the above conditions are satisfied, then it's a decimal number with precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            num_str = str(num)\n            num_str = num_str[:num_str.index('.')+3]\n            if num_str[-2:] == '00':\n                return True\n            else:\n                return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') > 1:\n        return False\n    \n    if '.' in num:\n        num_parts = num.split('.')\n        if len(num_parts[1]) > 2:\n            return False\n        \n        if num_parts[0].isdigit() and num_parts[1].isdigit():\n            return True\n        \n        return False\n    \n    if num.isdigit():\n        return True\n    \n    return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return abs(float(num) - round(float(num), 2)) < 1e-6"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if len(num) > 1 and num.count('.') == 1:\n        if all(char.isdigit() or char == '.' for char in num):\n            num_str, decimal = num.split('.')\n            if len(decimal) == 2:\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        if \".\" in num:\n            num_parts = num.split(\".\")\n            if len(num_parts[1]) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if '.' in num and num.count('.') == 1:\n            whole_part, decimal_part = num.split('.')\n            if len(decimal_part) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(round(float_num, 2) - float_num) <= 1e-05\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    This function checks whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if there is only one distinct element in the list, else it returns False.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks whether the list contains only one distinct element or not.\n    '''\n    # Using set() function to get unique elements from the list\n    unique_nums = set(arr)\n    # If the length of unique_nums is less than or equal to 1, return True, else return False\n    if len(unique_nums) <= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element,\n    otherwise it returns False.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks if there is only one distinct element in the list or not.\n    Returns True if there is only one distinct element, and False otherwise.\n    '''\n    # convert the list to a set to get unique elements and then back to a list\n    unique_list = list(set(arr))\n    # if the length of the unique list is 1, then there is only one distinct element in the original list\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True if monthnum3 % 2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return 'The month has 30 days.'\n    elif monthnum == 2:\n        return 'February has 28 or 29 days, depending on the year.'\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 'The month has 31 days.'\n    else:\n        return 'Invalid month number.'"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True if monthnum3 % 2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    This function takes a month number as input and checks whether the month has 30 days or not.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return 'This month has 30 days.'\n    elif monthnum3 == 2:\n        return 'This month has 28 or 29 days.'\n    else:\n        return 'This month has 31 days.'"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(f\"The month {monthnum3} has 30 days.\")\n    else:\n        print(f\"The month {monthnum3} does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum == 2:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month contains 30 days,\n    and False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"The month number\", monthnum, \"contains 30 days\")\n    else:\n        print(\"The month number\", monthnum, \"does not contain 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month contains 30 days, False otherwise.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        print(\"Invalid month number entered.\")\n        return None"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    arr.sort() # Sorting the array in ascending order\n\n    min_diff = arr[1] - arr[0] # Initializing minimum difference as difference between first and second element\n\n    for i in range(1,n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i] # Updating minimum difference if difference between current element and next element is smaller than the current minimum difference\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    '''\n    This function takes two arguments - an array and its length. It finds the minimum difference between any two elements in the array and returns the result.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1]-arr[0])\n    for i in range(1,n):\n        diff = abs(arr[i]-arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()  # sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # initialize the minimum difference as the difference between first two elements\n    \n    for i in range(1,n-1):  # loop through the array starting from the second element\n        diff = arr[i+1] - arr[i]  # calculate the difference between current and next element\n        if diff < min_diff:  # if the difference is less than the current minimum difference, update the minimum difference\n            min_diff = diff\n            \n    return min_diff  # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # sort the array in ascending order\n    min_diff = abs(arr[1] - arr[0])  # initialize the minimum difference as the absolute difference between the first and second elements\n    \n    for i in range(2, n):\n        # calculate the absolute difference between the current element and the previous element\n        curr_diff = abs(arr[i] - arr[i-1])\n        \n        # update the minimum difference if the current difference is smaller\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n    min_diff = float('inf')  # Initializing minimum difference to infinity\n\n    # Loop through the array and find the minimum difference between any two elements\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(s):\n    \"\"\"\n    Counts the number of digits in a string.\n    \"\"\"\n    return len([c for c in s if c.isdigit()])"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of digits present in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    while True:\n        polite = True\n        for i in range(2, int(math.sqrt(count)) + 1):\n            if count % i == 0:\n                polite = False\n                break\n        if polite and count % 2!= 0:\n            if n == count:\n                return count\n            n -= 1\n        count += 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if is_prime(i) and is_palindrome(i):\n            if n == 1:\n                return i\n            n -= 1\n        i += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\nprint(is_polite(1)) # Output: 2\nprint(is_polite(10)) # Output: 19\nprint(is_polite(50)) # Output: 227"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if is_prime(i) and is_right(i):\n            n -= 1\n            if n == 0:\n                return i\n        i += 1\n\ndef is_prime(num):\n    '''\n    Function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_right(num):\n    '''\n    Function to check if a number is right or not\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if int(num_str[i])!= len(num_str) - i:\n            return False\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        is_polite = True\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            if digit!= 0 and num % digit == 0:\n                is_polite = False\n                break\n            temp //= 10\n        if is_polite:\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    i = 1\n    j = 2\n    count = 1\n    \n    # Loop through until the nth polite number is found\n    while count < n:\n        # Check if i is a polite number\n        if is_prime(i) and i > 1:\n            count += 1\n            \n        # Check if j is a polite number\n        if is_prime(j) and j > 1:\n            count += 1\n            \n        # Increment i and j\n        i += 1\n        j += 1\n        \n    # Return the nth polite number\n    return i - 1 if is_prime(i - 1) else j - 1 if is_prime(j - 1) else -1\n    \ndef is_prime(n):\n    # Check if n is a prime number\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    # Initialize variables\n    count = 0\n    i = 1\n    \n    # Loop through numbers starting from 1\n    while count < n:\n        # Check if the number is polite\n        is_pol = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_pol = False\n                break\n        # If the number is polite, increment count\n        if is_pol:\n            count += 1\n        # If count is equal to n, return the current number\n        if count == n:\n            return i\n        # Increment i for the next iteration\n        i += 1\n    \n    # If the loop completes without finding the nth polite number, return None\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 2\n    while count < n: \n        is_polite = True\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                is_polite = False \n                break\n        if is_polite: \n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 1\n    \n    while count < n:\n        if is_polite_number(i):\n            count += 1\n        i += 1\n        \n    return i - 1\n    \ndef is_polite_number(num):\n    \"\"\"\n    Helper function to check if a number is polite or not.\n    \"\"\"\n    str_num = str(num)\n    \n    for i in range(1, len(str_num)):\n        if str_num[i] < str_num[i-1]:\n            return False\n        \n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function finds the nth polite number.\n    '''\n    count = 0  # To keep count of the number of polite numbers found\n    \n    # Loop through all numbers till the nth one\n    for i in range(1, n+1):\n        \n        # Check if the number is polite or not\n        if is_polite_number(i):\n            count += 1\n            \n            # If the nth polite number is found, return it\n            if count == n:\n                return i\n    \n    # If nth polite number is not found, return -1\n    return -1\n\n\ndef is_polite_number(num):\n    '''\n    This function checks if a given number is polite or not.\n    '''\n    # Check if the number is divisible by any number other than 1 and itself\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    \n    # If the number is not divisible by any number other than 1 and itself, it is polite\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        # Check if the number is polite or not\n        is_polite_num = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite_num = False\n                break\n        if is_polite_num:\n            count += 1\n        i += 1\n    return i-1"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i], l1[i+1]))\n    return pair_list"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. \n    The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two arguments - an array and a sum value. It returns the count of pairs in the array whose sum is equal to the given sum value.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. \n    The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Create an empty list to store the difference of the two lists\n    diff_list = []\n\n    # Iterate through the first list\n    for i in li1:\n        # If the element is not in the second list, append it to the difference list\n        if i not in li2:\n            diff_list.append(i)\n\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Args:\n        li1 (list): The first list.\n        li2 (list): The second list.\n\n    Returns:\n        list: A new list containing the elements that are only in the first list.\n\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    :param li1: First list.\n    :param li2: Second list.\n    :return: A new list containing all elements in li1 that are not in li2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    \n    # Get the elements that are present in li1 but not in li2\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    \n    # Get the elements that are present in li2 but not in li1\n    for i in li2:\n        if i not in li1:\n            diff.append(i)\n    \n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them as a new list.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    diff = []\n    \n    # Iterate through the first list and check if the element is not present in the second list\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n    \n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n\n    Args:\n        li1 (list): First list.\n        li2 (list): Second list.\n\n    Returns:\n        list: The difference between the two input lists.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing elements that are present in one list but not in the other list.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the lists as a new list.\n    \"\"\"\n    li_diff = []\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    return li_diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_lists(li1, li2):\n    \"\"\"\n    Returns the difference between two lists as a new list.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = [i for i in range(1, 2*n, 2)]\n    sum_of_fourth_power = sum([i**4 for i in odd_nums])\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum\n    odd_sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # calculate the fourth power of the current odd number\n        odd_power = i**4\n        # add the result to the sum\n        odd_sum += odd_power\n    \n    # return the sum\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        sum_of_fourth_power = (n*n*n*n - n*n*n + n*n - n) ** 2\n        return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initializing the sum variable to zero\n    sum = 0\n    \n    # iterating over first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # adding the fourth power of i to the sum\n        sum += i ** 4\n    \n    # returning the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count**4\n        count += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to sum up.\n\n    Returns:\n    int: The sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        sum_of_fourth_power = ((n // 2) * ((2 * n) + 1)) ** 2\n        return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the fourth power of the current number to the sum\n        sum += i**4\n    # Return the final sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return ((n-1)*n*(n+1)*(n+2))**4"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 1\n    while count <= n:\n        odd_num = count * 2 - 1\n        sum += odd_num ** 4\n        count += 1\n    return sum\n\nprint(odd_num_sum(5)) # Output: 129"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef is_balanced(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n\nexp = input(\"Enter an expression: \")\nif is_balanced(exp):\n    print(\"Expression is balanced\")\nelse:\n    print(\"Expression is not balanced\")"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        elif ch in [')', '}', ']']:\n            if not stack:\n                return False\n            if ch == ')' and stack[-1] == '(':\n                stack.pop()\n            elif ch == '}' and stack[-1] == '{':\n                stack.pop()\n            elif ch == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function checks if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    # Loop through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if the stack is empty or not.\n        # If it's empty, the expression is not balanced.\n        elif char == ')':\n            if not stack:\n                return False\n            # If the stack is not empty, pop the topmost element from the stack and compare it to the closing parenthesis.\n            # If they don't match, the expression is not balanced.\n            else:\n                stack.pop()\n\n    # If the stack is empty, the expression is balanced.\n    if not stack:\n        return True\n    # If the stack is not empty, the expression is not balanced.\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    pairs = {')': '(', ']': '[', '}': '{'}\n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or pairs[char]!= stack.pop():\n                return False\n        else:\n            return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Remove all words with length K in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create a new list of words that are not of length K\n    new_words = [word for word in words if len(word)!= K]\n\n    # Join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Filter out the words with length K\n    filtered_words = filter(lambda word: len(word)!= K, words)\n\n    # Join the filtered words back into a string\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result =''.join([word for word in words if len(word)!= K])\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # split the string into words\n    result = []  # create an empty list to store the words with length < K\n    for word in words:\n        if len(word) < K:\n            result.append(word)  # append the word to the result list if its length is less than K\n    return \" \".join(result)  # join the words in the result list with a space separator and return the final string"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result =''.join([word for word in words if len(word)!= K])\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern, text)\n    result = []\n    for m in match:\n        result.append((m.group(), m.start()))\n    return result if len(result) > 0 else None\n"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes in two strings: `text` and `pattern`.\n    It returns a list of tuples containing the occurrences and positions of the substrings within the `text`.\n    If there is no match, it returns None.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all matches of pattern in the text using regex\n    matches = re.findall(pattern, text)\n    \n    if len(matches) == 0:\n        # If there are no matches, return None\n        return None\n    \n    # Create a list of tuples containing the match and its position in the text\n    positions = [(match, text.find(match)) for match in matches]\n    \n    # Return the list of matches and positions\n    return positions"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(match, text.index(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments - text and pattern.\n    text: a string containing the main text\n    pattern: a string containing the pattern to be searched for\n    \n    The function returns a list of tuples, where each tuple contains the occurrence and position of the pattern in the text.\n    If there is no match, it returns None.\n    '''\n    # Find all occurrences of the pattern in the text using the findall() function\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # Create a list of tuples, where each tuple contains the occurrence and position of the pattern in the text\n    result = []\n    for match in matches:\n        index = text.index(match)\n        result.append((match, index))\n        \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        results = [(m.start(), m.group()) for m in matches]\n        return results\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern, text)\n    if match:\n        result = []\n        for m in match:\n            result.append((m.group(0), m.start()))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    This function takes two arguments, text and pattern.\n    It finds all occurrences of the pattern in the text and returns a list of tuples, \n    where each tuple contains the match and its starting position in the text.\n    If there is no match, it returns None.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        result = [(match, text.index(match)) for match in matches]\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    pattern_regex = re.compile(pattern)\n    matches = pattern_regex.finditer(text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.group()))\n    return result if result else None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # checking if index is even\n            if nums[i] % 2 == 0: # checking if number at index is even\n                return False # if even number found at even index, return False\n    return True # if no even number found at even index, return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and \\\n           (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if (test_str[i] == 'a' and test_str[i-1] in ['a', 'e', 'i', 'o', 'u']) or \\\n           (test_str[i] == 'e' and test_str[i-1] in ['a', 'e', 'i', 'o', 'u']) or \\\n           (test_str[i] == 'i' and test_str[i-1] in ['a', 'e', 'i', 'o', 'u']) or \\\n           (test_str[i] == 'o' and test_str[i-1] in ['a', 'e', 'i', 'o', 'u']) or \\\n           (test_str[i] == 'u' and test_str[i-1] in ['a', 'e', 'i', 'o', 'u']):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if i!= 0 and test_str[i-1].lower() in vowels:\n                count += 1\n            if i!= len(test_str)-1 and test_str[i+1].lower() in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    # create a list to store the non-repeated elements\n    non_repeated_elements = []\n    for i in arr:\n        if count_dict[i] == 1:\n            non_repeated_elements.append(i)\n    \n    # find the sum of the non-repeated elements\n    non_repeated_sum = sum(non_repeated_elements)\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = list(set(arr))\n    return sum(unique_nums)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    count = {}\n    total = 0\n    \n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n        \n    for num in arr:\n        if count[num] == 1:\n            total += num\n            \n    return total"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated = set(arr)\n    sum_non_repeated = sum(non_repeated)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Using a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Loop through the list and count the occurrence of each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # Loop through the dictionary and find the sum of non-repeated elements\n    sum_non_repeated = 0\n    for element in count_dict:\n        if count_dict[element] == 1:\n            sum_non_repeated += element\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    sum_non_repeated = 0\n    non_repeated = []\n    \n    for i in arr:\n        if i not in non_repeated:\n            sum_non_repeated += i\n            non_repeated.append(i)\n            \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # loop through each element in the list and update the count in the dictionary\n    for element in arr:\n        if element not in count_dict:\n            count_dict[element] = 1\n        else:\n            count_dict[element] += 1\n\n    # create an empty list to store the non-repeated elements\n    non_repeated_list = []\n\n    # loop through the dictionary and add the non-repeated elements to the list\n    for element in count_dict:\n        if count_dict[element] == 1:\n            non_repeated_list.append(element)\n\n    # calculate the sum of the non-repeated elements and return it\n    return sum(non_repeated_list)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = set(arr)\n    sum_of_unique_nums = sum(unique_nums)\n    return sum_of_unique_nums"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Iterate over the elements of the list and update the frequency dictionary\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    # Initialize the sum of non-repeated elements to zero\n    non_repeated_sum = 0\n    # Iterate over the elements of the list and add the ones with frequency 1 to the sum\n    for num in arr:\n        if freq[num] == 1:\n            non_repeated_sum += num\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby function to group consecutive duplicates\n    grouped_list = [(k, list(g)) for k, g in groupby(list1)]\n    # Create a new list with packed consecutive duplicates\n    new_list = []\n    for group in grouped_list:\n        if len(group[1]) == 1:\n            new_list.append(group[1][0])\n        else:\n            new_list.append(group[1])\n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicates of \n    the input list elements are packed into sublists.\n    '''\n    # Sort the input list in ascending order\n    list1.sort()\n    \n    # Create a list of tuples, where each tuple contains a consecutive group of duplicates\n    # and their count.\n    grouped_list = [(k, sum(1 for i in g)) for k, g in groupby(list1)]\n    \n    # Create a new list where consecutive duplicates are packed into sublists.\n    new_list = []\n    for i in range(len(grouped_list)):\n        if grouped_list[i][1] > 1:\n            # If the count of duplicates is greater than 1, create a new sublist.\n            sublist = [grouped_list[i][0]] * grouped_list[i][1]\n            new_list.extend(sublist)\n        else:\n            # If the count of duplicates is 1, append the element to the new list.\n            new_list.append(grouped_list[i][0])\n    \n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        if k!='':\n            result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    grouped_list = [(k, len(list(g))) for k, g in groupby(list1)]\n\n    # create the sublists from the grouped list\n    result = []\n    for k, v in grouped_list:\n        result.extend([k]*v)\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], group))\n        groups.append(group)\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicates of the input list elements are packed into sublists.\n    '''\n    # Sort the list in ascending order to group consecutive duplicates\n    sorted_lst = sorted(lst)\n    # Group consecutive duplicates into sublists\n    result = [list(group) for key, group in groupby(sorted_lst)]\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k] * len(list(g)) for k, g in groupby(list1)]"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # create an empty dictionary\n    count_dict = {}\n\n    # iterate over each sublist in the list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # if the tuple is not already in the dictionary, add it with a count of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # if the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[sublist_tuple] += 1\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        # turn sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    unique_lists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of lists, returns a dictionary where each list is converted to a tuple\n    and the value of the tuple is the number of its occurrences in the original list.\n    \"\"\"\n    result = {}\n    for sublist in lst:\n        key = tuple(sublist)\n        result[key] = result.get(key, 0) + 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    unique_sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_sublists:\n            unique_sublists[sublist_tuple] += 1\n        else:\n            unique_sublists[sublist_tuple] = 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    '''\n    Returns a dictionary where every unique sublist is a key and its count is the value.\n    '''\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublist_dict:\n                sublist_dict[sublist] += 1\n            else:\n                sublist_dict[sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every sublist is converted to a tuple and the count of the tuple is the number of occurrences of the sublist in the original list.\n    \"\"\"\n    counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in counts:\n            counts[sublist_tuple] = 1\n        else:\n            counts[sublist_tuple] += 1\n    return counts\n"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for c in combinations(test_list, i):\n            if sum(c) == len(test_list):\n                result.append(c)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for tup in combinations(test_list, i):\n            if sum(tup) == 0:\n                result.append(tup)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            if sum(comb) == sum(test_list):\n                combs.append(comb)\n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                temp_sum = test_list[i][0] + test_list[j][0] + test_list[k][0]\n                if temp_sum == 0:\n                    sum_list.append(tuple(sorted(set(test_list[i][1] + test_list[j][1] + test_list[k][1]))))\n    return sum_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Create an empty list to store the combinations of sums with tuples.\n    combinations_list = []\n    \n    # Iterate over the tuples in the test_list.\n    for tpl in test_list:\n        # Get the sum of the tuple.\n        sum_of_tuple = sum(tpl)\n        # Get all possible combinations of the sum of the tuple with the length of the tuple.\n        comb = combinations([i for i in range(sum_of_tuple+1)], len(tpl))\n        # Iterate over the combinations of sums.\n        for c in comb:\n            # Check if the sum of the tuple is equal to the sum of the combination.\n            if sum(c) == sum_of_tuple:\n                # Create a tuple with the combination and add it to the combinations_list.\n                comb_tuple = tuple([tpl[i] for i, j in enumerate(c) if j == 1])\n                combinations_list.append(comb_tuple)\n    \n    # Return the combinations_list.\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sums = []\n    for tup in test_list:\n        sums.append(sum(tup))\n    \n    comb_sums = []\n    for i in range(1, len(sums)+1):\n        for combo in combinations(sums, i):\n            comb_sums.append(combo)\n    \n    comb_tuples = []\n    for tup in test_list:\n        for comb in comb_sums:\n            if sum(tup) == sum(comb):\n                comb_tuples.append(tuple(tup))\n                break\n    \n    return comb_tuples"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    all_combinations = []\n    for i in range(1, total_sum+1):\n        all_combinations += combinations(test_list, i)\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for r in range(1, n+1):\n        for comb in combinations(test_list, r):\n            sum_tuple = tuple(sum(t) for t in comb)\n            if sum_tuple == (r, r):\n                return comb"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum([num for tup in test_list for num in tup])\n    comb_list = []\n    for r in range(1, len(test_list)+1):\n        for comb in combinations(test_list, r):\n            if sum([num for tup in comb for num in tup]) == total_sum:\n                comb_list.append(comb)\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum([x[1] for x in test_list])\n    result = []\n    for i in range(1, total_sum+1):\n        temp = []\n        for j in combinations(test_list, i):\n            if sum([x[1] for x in j]) == i:\n                temp.append(j)\n        result.extend(temp)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(count_divisors(10)) # Output: True\nprint(count_divisors(12)) # Output: False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    if count_divisors(num) % 2 == 0:\n        print(f\"{num} has an even number of divisors.\")\n    else:\n        print(f\"{num} has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n) : \n    \"\"\"\n    Returns the count of divisors of a number.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\n\nif count_divisors(n) % 2 == 0:\n    print(f\"{n} has an even number of divisors.\")\nelse:\n    print(f\"{n} has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns the count of its divisors.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\ndef is_even_count(n):\n    '''\n    This function takes an integer as input and returns True if the count of its divisors is even, otherwise False.\n    '''\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_even_count(10)) # True\nprint(is_even_count(20)) # False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef is_even_divisor(n):\n    '''\n    This function checks whether the count of divisors of a given number n is even or odd.\n    '''\n    count = count_divisors(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The number of divisors of {n} is {count_divisors(n)}\")"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            if (j-i+1) % 2 == 1:\n                subarray = arr[i:j+1]\n                sum += sum(subarray)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n\n    # iterate over all possible odd length subarrays\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            # add the sum of current subarray to the total sum\n            sum += sum(arr[i:j])\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2!= 0:\n                for k in range(i, j):\n                    sum += arr[k]\n                    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2!= 0:\n                for k in range(i, j+1):\n                    sum += arr[k]\n                    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum_odd += sum(arr[i:j])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function finds the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2 == 1:\n                res += sum(arr[i:j+1])\n                \n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray = arr[i:j]\n            total_sum += sum(subarray)\n    return total_sum"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100)\n    value = round(cmax * 100)\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Converting the given rgb values to range of 0-1\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    # Finding the maximum and minimum values of r, g, b\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    \n    # Calculating the difference between cmax and cmin\n    diff = cmax - cmin\n    \n    # Calculating the value of hue\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n    \n    # Converting the hue value to range of 0-360 degrees\n    hue *= 60\n    \n    # Calculating the saturation value\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = diff / cmax\n    \n    # Calculating the value of the brightness\n    brightness = cmax\n    \n    return hue, saturation, brightness"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60, 2)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else round(delta / cmax * 100, 2)\n\n    value = round(cmax * 100, 2)\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n        \n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    value = cmax\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else (delta / cmax)\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = int(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if cmax == 0 else delta / cmax\n    \n    value = cmax\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert the RGB values to the range 0-1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values of RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the value\n    val = max_val\n\n    # Calculate the saturation\n    if max_val == 0:\n        sat = 0\n    else:\n        sat = (max_val - min_val) / max_val\n\n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / (max_val - min_val)) % 6\n    elif max_val == g:\n        hue = (b - r) / (max_val - min_val) + 2\n    else:\n        hue = (r - g) / (max_val - min_val) + 4\n\n    hue = round(hue * 60)\n\n    # Add 360 if hue is negative\n    if hue < 0:\n        hue += 360\n\n    # Return the HSV values as a tuple\n    return (hue, sat, val)"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    if len(list1) % 2!= 0:  # Check if the length of the list is odd\n        return None\n    else:\n        even = []  # List to store even numbers\n        odd = []  # List to store odd numbers\n        for i in list1:\n            if i % 2 == 0:  # Check if the number is even\n                even.append(i)\n            else:\n                odd.append(i)\n        if len(even) == 0:  # Check if there are no even numbers in the list\n            return None\n        else:\n            return even[0] * odd[0]  # Return the product of first even and odd numbers"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function finds the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    # Loop through the list and find the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n\n    # If there is at least one even and one odd number, multiply them\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of integers as an input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    if even_num == 0:\n        return \"No even number found in the list\"\n    elif odd_num == 0:\n        return \"No odd number found in the list\"\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Returns the product of first even and odd numbers in a list.\n    \"\"\"\n    even_prod = 1\n    odd_prod = 1\n    count_even = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_prod *= num\n            count_even += 1\n            if count_odd > 0:\n                break\n        else:\n            odd_prod *= num\n            count_odd += 1\n            if count_even > 0:\n                break\n    return even_prod * odd_prod"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1[::-1]:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    if len(evens) > 0 and len(odds) > 0:\n        return evens[0] * odds[0]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    # Initialize variables to store the product of the first even and odd numbers.\n    even_prod = 1\n    odd_prod = 1\n    # Loop through the list and multiply the even and odd numbers to the respective variables.\n    for num in lst:\n        if num % 2 == 0:\n            even_prod *= num\n        else:\n            odd_prod *= num\n    # Return the product of the even and odd numbers.\n    return even_prod * odd_prod"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings\n    str_list = test_str[1:-1].split(',')\n    # convert each string to an integer\n    int_list = [int(s) for s in str_list]\n    # convert the list of integers to a tuple\n    result = tuple(int_list)\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns an integer tuple.\n    \"\"\"\n    # Splitting the tuple string using comma as separator\n    str_list = test_str.split(',')\n    # Converting each element of the list to integer\n    int_list = [int(i) for i in str_list]\n    # Converting the list to tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(int(i) for i in test_str[1:-1].split(','))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    lst = test_str.strip('()').split(',')\n    # Convert the list of strings to a list of integers\n    int_lst = [int(num.strip()) for num in lst]\n    # Convert the list of integers to a tuple\n    int_tup = tuple(int_lst)\n    # Return the tuple\n    return int_tup"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string by comma separator\n    str_list = test_str.split(',')\n    # Converting string elements to integer elements\n    int_list = [int(x) for x in str_list]\n    # Converting list to tuple\n    int_tuple = tuple(int_list)\n    # Returning the converted tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string by comma and convert each element to integer\n    int_tuple = tuple(int(x.strip()) for x in test_str.strip().split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Create an empty list to store integers\n    int_list = []\n\n    # Iterate through each string in the list and convert it to an integer\n    for item in str_list:\n        int_list.append(int(item))\n\n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n\n    Parameters:\n    test_str (str): Tuple string in the form \"(1, 2, 3)\"\n\n    Returns:\n    tuple: Integer tuple (1, 2, 3)\n\n    Example:\n    >>> tuple_str_int(\"(1, 2, 3)\")\n    (1, 2, 3)\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into individual items\n    items = test_str[1:-1].split(\",\")\n    # Convert each item to an integer\n    int_items = [int(item.strip()) for item in items]\n    # Return the resulting tuple\n    return tuple(int_items)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to a tuple of integers.\n    \"\"\"\n    # Split the string into a list of strings\n    str_list = test_str[1:-1].split(\", \")\n    # Convert each string to an integer and append it to a new list\n    int_list = [int(num_str) for num_str in str_list]\n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a):\n        return len(a)\n    else:\n        return pos"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b.*b.*b.*')\n    return pattern.search(text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b.*b.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb\\bb\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.b{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function takes in a string and checks if it contains an 'a' followed by three 'b's.\n    '''\n    pattern = r'a.*b{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple([test_str] + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the string and list\n    concat_list = test_list + [test_str]\n    # Convert the list to a tuple\n    new_tuple = tuple(concat_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function takes a list and a string as inputs and returns a new tuple.\n    \"\"\"\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Check whether every even index contains even numbers.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Checks whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n        else:\n            new_tup.extend(i)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            result.append(i)\n        else:\n            result.extend(remove_nested(i))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                new_tup.append(j)\n        else:\n            new_tup.append(i)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes tuples from it.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n        else:\n            continue\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n        else:\n            new_tup.extend(remove_nested(i))\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    result = []\n    for tup in test_tup:\n        if not isinstance(tup, tuple):\n            result.append(tup)\n        else:\n            result.extend(tup)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_lists(input_lists):\n    \"\"\"\n    Returns the number of lists in the input_lists.\n    \"\"\"\n    count = 0\n    for item in input_lists:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes in a list of lists and returns the number of lists in it.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array\n    '''\n    low = 0\n    high = len(arr) - 1\n    last_pos = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            last_pos = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    arr: a sorted list of integers\n    x: an integer to search for in the list\n    \n    It returns the index of the last occurrence of x in arr,\n    or -1 if x is not found in arr.\n    '''\n    # Initialize variables to track the last and next-to-last positions of x\n    last_pos = -1\n    prev_pos = -1\n    \n    # Loop through the list to find the last and next-to-last positions of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_pos = i\n        elif arr[i] > x:\n            prev_pos = i\n            break\n    \n    # If x was found in the list, return the last position\n    if prev_pos!= -1:\n        return prev_pos\n    else:\n        return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    - arr: a sorted list of integers\n    - x: an integer to search for\n    \n    It returns the index of the last occurrence of x in the list arr, or -1 if x is not found.\n    '''\n    n = len(arr)\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == n - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    - arr: a sorted list of integers.\n    - x: an integer which we want to search in arr.\n\n    The function returns the last position of x in arr. If x is not present in arr, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # if x is found, search for its last occurrence to the right\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments - an array and an element. It returns the last position of the element in the array.\n    '''\n    if x not in arr:\n        return -1\n    i = len(arr) - 1\n    while i >= 0 and arr[i] == x:\n        i -= 1\n    return i + 1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function returns the index of the last occurrence of the element 'x' in the given array.\n    If the element is not present in the array, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr)-1 or arr[mid+1]!= x):\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted list of integers.\n    x (int): An integer to search for.\n\n    Returns:\n    int: The last position of the element in the array. If the element is not found, return -1.\n    '''\n\n    # Initialize variables for the start and end index of the array\n    start = 0\n    end = len(arr) - 1\n\n    # Use binary search to find the last position of the element\n    while start <= end:\n        mid = (start + end) // 2\n\n        # If the middle element is equal to the target element, search to the left of the middle index\n        if arr[mid] == x:\n            start = mid + 1\n        # If the middle element is greater than the target element, search the left half of the array\n        elif arr[mid] > x:\n            end = mid - 1\n        # If the middle element is less than the target element, search the right half of the array\n        else:\n            start = mid + 1\n\n    # If the element is not found, return -1\n    if start > len(arr) - 1:\n        return -1\n    # Otherwise, return the last index of the element\n    else:\n        return start - 1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n\n    Args:\n    arr: A sorted list of integers.\n    x: An integer to search for in the array.\n\n    Returns:\n    The index of the last occurrence of x in the array, or -1 if x is not found.\n    \"\"\"\n    if not arr:\n        return -1\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            while mid < high and arr[mid + 1] == x:\n                mid += 1\n            return mid\n\n        elif arr[mid] < x:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"  # regex pattern to match a string that has an 'a' followed by anything, ending in 'b'\n    match = re.search(pattern, text)  # search for the pattern in the text\n    if match:\n        return True  # if pattern is found in the text, return True\n    else:\n        return False  # if pattern is not found in the text, return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes in a dictionary as an argument and returns the sum of all items in the dictionary.\n    \"\"\"\n    sum = 0\n    for value in dictionary.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2 == 0:\n        n += 1\n    return sum(range(n, 0, -2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes in a number n and returns the sum of all odd numbers between 1 and n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    # Initialize sum to zero\n    total = 0\n\n    # Loop through the range [1, n]\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add the odd number to the sum\n            total += i\n    \n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments: l and r, which represent the range of natural numbers to consider.\n    It returns the sum of all odd numbers within the range l to r (inclusive).\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total\n\nprint(sum_odd(10)) # Output: 25 (1+3+5+7+9=25)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n * (n+1)) // 2 #formula to find the sum of odd natural numbers in a given range\n\nprint(sum_odd(10)) # example call to the function, prints the sum of odd natural numbers in the range 1 to 10"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_array(arr):\n    '''\n    This function takes in an array of integers and returns the sum of all the integers in the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for num in arr:\n        result += num\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    result = 0\n    for i in arr:\n        result += i\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function will take an array as input and return the sum of its elements.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # check if the input number is valid\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if not isinstance(d, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0 or n > 0xFFFFFFFF:\n        raise ValueError(\"Input must be a 32-bit unsigned integer\")\n    if d < 0 or d > 31:\n        raise ValueError(\"Input must be an integer between 0 and 31\")\n    \n    # convert n to binary and get the leftmost bits\n    bin_n = bin(n)[2:].zfill(32)\n    left_bits = bin_n[:d]\n    \n    # get the rightmost bits of the number\n    right_bits = bin_n[d:]\n    \n    # concatenate the bits and convert to integer\n    new_num = int(left_bits + right_bits, 2)\n    \n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left d bits of a 32 bit number n.\n    '''\n    mask = (2**d-1) << (32-d) # mask to get the rightmost d bits\n    shifted_n = n << d # shift n left by d bits\n    return (n & ~mask) | (shifted_n & mask) # OR the rightmost d bits of shifted_n with the rightmost d bits of n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    :param n: An integer number to be rotated\n    :param d: Number of bits to rotate\n    :return: The rotated integer\n    \"\"\"\n    mask = (1 << d) - 1  # mask to get the required bits\n    shifted_n = n >> (32 - d)  # shift the required bits to the right\n    shifted_n = shifted_n & mask  # apply the mask to get the desired bits\n    shifted_n = shifted_n << d  # shift the desired bits to the left\n    return shifted_n | (n & ((1 << d) - 1))  # combine the rotated bits with the remaining bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits of a given number by d bits. It assumes that the number is 32 bit.\n    '''\n\n    # Left shift the number by d bits\n    n = n << d\n    \n    # Get the high bits from the number and store them in a variable\n    high_bits = n >> 32\n    \n    # Right shift the number by 32 bits\n    n = n >> 32\n    \n    # Return the result of left shifting the high bits and adding them to the left shifted number\n    return high_bits + n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF >> d << (32-d)\n    return (n << d) & mask | (n & ~mask)"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    mask = 2**d-1 # create a mask with d bits set to 1\n    shifted_n = (n << d) | (n >> (32-d)) # shift n left by d bits and then shift it right by 32-d bits to fill in the remaining bits\n    return shifted_n & ~(mask << d) # clear the bits that were shifted out of the shifted number and return the result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    shifted_bits = (n << d) & mask\n    right_shifted_bits = (n & mask) >> (32 - d)\n    return shifted_bits | right_shifted_bits"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    # First, we take the binary representation of the given number.\n    binary = bin(n)[2:]\n    \n    # If the length of the binary is less than 32, we append zeros to the beginning to make it 32 bits long.\n    if len(binary) < 32:\n        binary = '0'*(32-len(binary)) + binary\n        \n    # We then shift the bits to the left by d positions.\n    shifted = binary[d:]+binary[:d]\n    \n    # Finally, we convert the shifted bits back to a decimal number.\n    rotated = int(shifted, 2)\n    \n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n to binary\n    n_binary = bin(n)[2:]\n\n    # pad with zeros to 32 bits\n    n_binary = n_binary.zfill(32)\n\n    # split binary number into two parts\n    left_part = n_binary[0:d]\n    right_part = n_binary[d:]\n\n    # concatenate right part with left part\n    n_binary = right_part + left_part\n\n    # convert binary number back to decimal\n    n = int(n_binary, 2)\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    mask = (2**d - 1) << (32 - d)\n    n = (n << d) | (n >> (32 - d)) & mask\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    This function counts the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    \n    if x == y:\n        count += 1\n        \n    if x == z:\n        count += 1\n        \n    if y == z:\n        count += 1\n        \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    This function counts the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function counts the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return \"All three numbers are equal.\"\n    elif x == y or y == z or z == x:\n        return \"Two numbers are equal.\"\n    else:\n        return \"No two numbers are equal.\""
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    else:\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers among them.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y and x!= z:\n        count += 1\n    if y == z and y!= x:\n        count += 1\n    if x == z and x!= y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the number of equal integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    elif x!= y and y!= z and x!= z:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n\n    # Find the pivot element in the array\n    low = 0\n    high = n - 1\n    pivot = 0\n    while (low <= high):\n        pivot = (high + low) // 2\n        if (arr[pivot] > arr[high]):\n            low = pivot + 1\n        elif (arr[pivot] < arr[high]):\n            high = pivot\n        else:\n            high -= 1\n    \n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    for i in range(n):\n        if arr[i] == min_element:\n            break\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    else:\n        low, high = 0, n-1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] > arr[high]:\n                low = mid + 1\n            elif arr[mid] < arr[high]:\n                high = mid\n            else:\n                high -= 1\n        return low\n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return 0\n    if arr[i] < arr[i+1]:\n        return i+1\n    for j in range(i+1, n):\n        if arr[j] < arr[j-1]:\n            return j\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    if arr[0] < arr[n-1]:\n        return 0\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return right"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array to find the minimum element\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    # Traverse the array again to count the number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i] == min_element:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the pivot element\n    pivot = arr[0]\n    for i in range(n):\n        if arr[i] < pivot:\n            pivot = arr[i]\n    # Count the number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i] == pivot:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Find the minimum element in the array\n    min_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n    \n    # Count the number of rotations required\n    count = 0\n    for i in range(n):\n        if arr[i] == min_elem:\n            break\n        count += 1\n        \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    else:\n        mid = n // 2\n        if arr[mid] <= arr[mid+1]:\n            return count_rotation(arr[mid:])\n        else:\n            return n - mid - 1 + count_rotation(arr[:mid+1])"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    low, high = 0, len(arr)-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    left, right = 0, len(arr)-1\n    count = 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] <= arr[right]:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    count += left\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[left]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n*sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    return int(n**(1/2))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether a given number is a perfect square or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    A function to check whether a given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and checks whether it is a perfect square or not.\n    \"\"\"\n    # First, we check whether the number is negative or not.\n    if n < 0:\n        return False\n    \n    # Now, we check whether the number is a perfect square or not.\n    root = int(n ** 0.5)\n    return (root * root == n)"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes a list of numbers as input and checks whether the product of numbers in the list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list as input and returns True if the product of all the numbers in the list is even, otherwise it returns False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the product of all the numbers in the list is even, else False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_lists = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_sum_lists = [lst]\n        elif sum(lst) == max_sum:\n            max_sum_lists.append(lst)\n    return max_sum_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf') # initialize max_sum to negative infinity to handle empty lists\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = [lst]\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = [lst]\n        elif sum(lst) == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = None\n    max_sum = -float('inf')\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = -1\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = [lst]\n        elif lst_sum == max_sum:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = None\n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n            max_sum_list = l\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_list = lst\n            max_sum = sum(lst)\n    \n    return [max_list]"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n        else:\n            if current_count > max_count:\n                max_count = current_count\n            current_count = 0\n    if current_count > max_count:\n        max_count = current_count\n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment the current run length\n            current_run += 1\n        else:\n            # If it isn't, check if the current run length is greater than the previous maximum\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run length to 0\n            current_run = 0\n\n    # Check if the final current run length is greater than the previous maximum\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = 0\n    current_run = 0\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > uppercase_run:\n                uppercase_run = current_run\n        else:\n            current_run = 0\n            \n    if uppercase_run > max_run:\n        max_run = uppercase_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    This function takes a string as input and returns the length of the longest run of uppercase characters in the string.\n    '''\n    if len(test_str) == 0:\n        return 0\n\n    max_run = 1\n    current_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1\n\n    return max(max_run, current_run)"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None # If no odd number is found, return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    This function finds the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number is found"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None # If no odd number found"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there is no odd number in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If no odd number is found, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tupples are not of equal length\")\n        return False\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] >= test_tup1[i]:\n                print(\"The element at index\", i, \"in the second tuple is not smaller than its corresponding element in the first tuple.\")\n                return False\n        print(\"The tuples are of equal length and each element in the second tuple is smaller than its corresponding element in the first tuple.\")\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]