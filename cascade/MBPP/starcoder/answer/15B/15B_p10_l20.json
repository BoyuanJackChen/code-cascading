[
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the shared elements from the given two tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the common elements in both tuples.\n    \"\"\"\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(element)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = set(test_tup1) & set(test_tup2)\n    return list(result)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and finds the common elements from both tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the common elements of the two tuples.\n    '''\n    # using set intersection method to find the common elements\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    return tuple(common_elements)"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    if n < 2:  # 0 and 1 are not prime numbers\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as input and checks if it's not a prime number.\n    \"\"\"\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by any integer from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If the loop completes without finding a factor of n, n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    \n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True] * (n+1)\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    return prime[n]"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    # check if number is less than 2\n    if n < 2:\n        return True\n    \n    # check if number is divisible by any number less than n\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    \n    # if number is not divisible by any number less than n, it is prime\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    # If n is less than or equal to 1, it is not a prime number\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    # If n is not divisible by any number between 2 and the square root of n, it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # Convert the list into a heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums)) # Extract the largest element from the heap and add it to the list\n    return largest[::-1] # Return the list in descending order"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = [-num for num in nums[:n]]\n    hq.heapify(heap)\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, -num)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the given list of numbers\n    hq.heapify(nums)\n    # Create an empty list to store the largest n integers\n    largest_n = []\n    # Pop the maximum n integers from the heap and add them to the list\n    for i in range(n):\n        largest_n.append(hq.heappop(nums))\n    return largest_n[::-1] # Return the list in descending order"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # negate to make a max heap\n        if len(heap) > n:\n            hq.heappop(heap)  # remove the smallest element (which is the largest)\n    return [-hq.heappop(heap) for _ in range(n)]  # negate again to get the original order"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a min heap with n elements\n    heap = [float('-inf')] * n\n\n    # iterate through the list of numbers and add them to the heap\n    for num in nums:\n        # if the heap is not full yet, add the element to the heap\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        # if the element is larger than the smallest element in the heap, replace the smallest element with the new element\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    # return the n largest integers in descending order\n    return sorted([x for x in heap if x!= float('-inf')], reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    largest.reverse()\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n    \n    result = []\n    for i in range(n):\n        result.append(hq.heappop(heap))\n    \n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums[::-1]"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    This function takes an integer as input and checks whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n\n    # If x is a power of 2, then (x & (x-1)) will be 0.\n    # If x is not a power of 2, then (x & (x-1)) will be non-zero.\n    return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Checks whether a number is a power of two or not.\n    \"\"\"\n    return x!= 0 and ((x & (x-1)) == 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x - 1)) == 0) and (x!= 0)"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False\n    elif (x & (x-1)!= 0): \n        return False\n    else: \n        return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if the number is a power of two and False otherwise.\n    '''\n    if x == 0: \n        return False\n    else: \n        return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer as input and returns True if the integer is a power of 2 and False otherwise.\n    '''\n    if x <= 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x % 2 == 0:\n            x //= 2\n        return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    while x!= 1:\n        if x % 2 == 0:\n            x = x / 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Get the binary representation of x and y\n    x_binary = bin(x)\n    y_binary = bin(y)\n    \n    # Check if the length of the binary representation of x and y are the same\n    if len(x_binary)!= len(y_binary):\n        return False\n    \n    # Check if the bits that differ between x and y are different than 0 or 1\n    for i in range(len(x_binary)):\n        if x_binary[i]!= y_binary[i]:\n            if x_binary[i] == '0' or x_binary[i] == '1':\n                return False\n    \n    # If all bits that differ are different than 0 or 1, then they differ at one bit position only\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"This is a sample text with some words at least 4 characters long\"\nresult = find_char_long(text)\nprint(result)"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Find all matches using findall() method\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = pattern.findall(text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expression to match all words that are at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Return a list of the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    # Find all words in the text that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function finds all words in a string that are at least 4 characters long.\n\n    Parameters:\n    text (str): The string to search for words.\n\n    Returns:\n    list: A list of words that are at least 4 characters long.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with squares of individual elements in the original list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        square = num ** 2\n        result.append(square)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n\n    # Find the mid-point of the string\n    mid = n // 2\n\n    # Initialize the count of rotations\n    count = 0\n\n    # Check if the first and last characters are the same\n    if str[0] == str[n-1]:\n        count = 1\n    else:\n        count = n\n\n    # Check if the first and last characters are the same\n    if str[mid] == str[n-1]:\n        count = 1\n    else:\n        count = n\n\n    # Check if the string is already a palindrome\n    if str[mid] == str[n-1]:\n        count = 1\n    else:\n        count = n\n\n    # Check if the string has even or odd length\n    if n % 2 == 0:\n        count = min(count, min(find_Rotations(str[mid:]), find_Rotations(str[:mid])))\n    else:\n        count = min(count, min(find_Rotations(str[mid+1:]), find_Rotations(str[:mid])))\n\n    # Increment the count by 1\n    count += 1\n\n    # Return the minimum number of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # If string is already a palindrome, no rotation required\n    if str == str[::-1]:\n        return 0\n    # Find the center of the palindrome\n    center = find_center(str)\n    # Check if center is odd or even\n    if center % 2 == 0:\n        # If center is even, then we can remove one character from either\n        # end of the string and get a palindrome\n        left = str[0:center//2]\n        right = str[center//2+1:]\n        return min(len(left)+len(right)-1, len(right)+len(left)-1)\n    else:\n        # If center is odd, we need to remove the character at the center to get a palindrome\n        left = str[0:center]\n        right = str[center+1:]\n        return min(len(left)+len(right)-1, len(right)+len(left)-1)\n\ndef find_center(str):\n    start = 0\n    end = len(str) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if str[mid] == str[end]:\n            start = mid + 1\n        else:\n            end = mid\n    return start - 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    \n    # Find the lexicographically smallest suffix of s that is not a prefix of s.\n    # This is the substring that needs to be rotated to get s.\n    min_suffix = s[n//2:]\n    for i in range(n//2, n):\n        if s[i:] < min_suffix:\n            min_suffix = s[i:]\n    \n    # If the lexicographically smallest suffix is itself a prefix of s,\n    # then s must be a palindrome and we need only one rotation.\n    if min_suffix == s[:len(min_suffix)]:\n        return 1\n    \n    # Otherwise, we need to count the number of times the lexicographically\n    # smallest suffix appears in s, and add one to get the total number of\n    # rotations required.\n    count = 0\n    for i in range(n):\n        if s[i:i+len(min_suffix)] == min_suffix:\n            count += 1\n    \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and finds the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if str[i]!= str[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Reverse the string\n    reversed_str = str[::-1]\n    \n    # Check if the reversed string is equal to the original string\n    if str == reversed_str:\n        return 0\n    \n    # Find the longest substring that is a suffix of the reversed string\n    max_len = 0\n    for i in range(n):\n        if str.endswith(reversed_str[i:]):\n            max_len = i + 1\n    \n    return n - max_len"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:\n        return 0\n    else:\n        return len(str) - str.index(str[0]) + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Find the mid-point of the string\n    mid = n // 2\n    \n    # If the mid-point character is not different, we only need to check the substring before the mid-point\n    if str[0]!= str[mid]:\n        return min(find_Rotations(str[mid:]), find_Rotations(str[:mid+1])) + 1\n    \n    # If the mid-point character is different, we need to find the first occurrence of the character in the substring before the mid-point\n    left_min = n\n    for i in range(mid):\n        if str[i] == str[mid]:\n            left_min = min(left_min, find_Rotations(str[:i] + str[mid:] + str[i+1:]))\n    \n    # Find the first occurrence of the character in the substring after the mid-point\n    right_min = n\n    for i in range(mid+1, n):\n        if str[i] == str[mid]:\n            right_min = min(right_min, find_Rotations(str[:i] + str[mid:] + str[i+1:]))\n    \n    return min(left_min, right_min) + 1"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return 0\n\n    # Find the rotation point\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i]!= s[j]:\n            break\n        i += 1\n        j -= 1\n    if i >= j:\n        return 0\n\n    # Check if the string is already rotated\n    if s[i] == s[j]:\n        if s[:i] == s[j:] and s[i+1:] == s[:j]:\n            return 0\n\n    # Find the rotation point again\n    k = i + 1\n    l = n - 1\n    while k < l:\n        if s[k]!= s[l]:\n            break\n        k += 1\n        l -= 1\n\n    # Swap the two halves\n    s = list(s)\n    s[i:j+1] = s[i:j+1][::-1]\n    s[k:l+1] = s[k:l+1][::-1]\n    s = ''.join(s)\n\n    # Find the minimum number of rotations\n    count = 1\n    while s!= s[::-1]:\n        count += 1\n        s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Reverse the string\n    reversed_str = str[::-1]\n    \n    # Check if the string is already a palindrome\n    if str == reversed_str:\n        return 1\n    \n    # Check if the string is a substring of its reversed string\n    for i in range(n):\n        if str[i:] == reversed_str[:n-i]:\n            return 2*n-2*i\n    \n    # Find the minimum number of rotations required to get the same string\n    for i in range(1, n):\n        if str == str[i:]+str[:i]:\n            return i\n    \n    # Return 0 if no rotation is possible\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]: # if the string is already a palindrome\n        return 0\n    \n    for i in range(len(str)):\n        if str == str[i:]+str[:i]: # check if the string is a palindrome when rotated\n            return i+1 # return the minimum number of rotations required\n    \n    return len(str)+1 # if the string is not a palindrome, return the maximum number of rotations required\n"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    if s.count(ch) < 2:\n        return s\n    else:\n        s = s.replace(ch, '')\n        s = s.replace(ch, '', s.count(ch)-1)\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    if s.count(ch) == 1:\n        return s.replace(ch, '', 1)\n    else:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments:\n    s: A string.\n    ch: A character to be removed.\n\n    It removes the first and last occurrence of the given character from the string.\n    \"\"\"\n    if s.count(ch) < 2:\n        return s\n    else:\n        return s.replace(ch, '', 1)[:-1].replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2 or ch not in s:\n        return s\n    \n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n        \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_occurrence(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    first_index = s.index(ch)\n    last_index = s.rindex(ch)\n    \n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    else:\n        return s[:first_index] + s[last_index + 1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes two arguments, a string s and a character ch.\n    It removes the first and last occurrence of the character ch from the string s.\n    \"\"\"\n    if ch in s:\n        if s.find(ch) == 0 and s.rfind(ch) == len(s)-1:\n            return s[1:len(s)-1]\n        elif s.find(ch) == 0:\n            return s[1:s.rfind(ch)] + s[s.rfind(ch)+1:]\n        elif s.rfind(ch) == len(s)-1:\n            return s[:s.find(ch)] + s[s.find(ch)+1:len(s)-1]\n        else:\n            return s[:s.find(ch)] + s[s.find(ch)+1:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    index_first = s.find(ch)\n    index_last = s.rfind(ch)\n    \n    if index_first == index_last:\n        return s[:index_first] + s[index_first+1:]\n    else:\n        return s[:index_first] + s[index_first+1:index_last] + s[index_last+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from a string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    # Remove first occurrence\n    i = s.find(ch)\n    s = s[i + 1:]\n    \n    # Remove last occurrence\n    i = s.rfind(ch)\n    s = s[:i]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    \n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    else:\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    if s.count(ch) < 2:\n        return s.replace(ch, '')\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[last+1:]"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # First, compute the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows based on their sum in ascending order\n    sorted_rows = sorted(zip(row_sums, M))\n    \n    # Unzip the sorted rows and return the matrix\n    sorted_matrix, _ = zip(*sorted_rows)\n    return list(sorted_matrix)"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # create a list of tuples, where each tuple contains the sum of a row and the index of the row\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    \n    # sort the list of tuples by the sum of the rows in ascending order\n    row_sums.sort()\n    \n    # create a new matrix with the sorted rows\n    sorted_M = [[M[row_sum[1]][j] for j in range(cols)] for row_sum in row_sums]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            for k in range(i+1, n):\n                if sum(M[i]) > sum(M[k]):\n                    M[i], M[k] = M[k], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    This function takes a matrix as an input and returns the sorted matrix in ascending order\n    according to the sum of its rows.\n    \"\"\"\n    sorted_matrix = sorted(M, key=sum)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # sort the rows of the matrix by sum in ascending order\n    sorted_rows = sorted(M, key=sum)\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda row: sum(row))"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes in the dimensions of a triangular prism (length, width, and height) and returns the volume of the prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of the triangular prism as inputs and returns its volume.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as arguments.\n    It returns the volume of the triangular prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as inputs and returns its volume.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism as input and returns its volume.\n    \"\"\"\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Match any sequence of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    # Use regular expression to search for pattern in text\n    match = re.search(pattern, text)\n    # If pattern found, return True; otherwise, return False\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"[a-z]+_[a-z]+\"\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.search(text)\n    return bool(result)"
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and removes all the characters that are present in the second string.\n    '''\n    # Take second string as input\n    string2 = input(\"Enter the second string: \")\n    \n    # Create a boolean array of size NO_OF_CHARS to store the presence of characters in string2\n    present = [False] * NO_OF_CHARS\n    \n    # Mark all characters in string2 as present\n    for i in range(len(string2)):\n        present[ord(string2[i])] = True\n        \n    # Create a new string without the characters present in string2\n    new_string = \"\"\n    for i in range(len(string)):\n        if not present[ord(string[i])]:\n            new_string += string[i]\n    \n    # Return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the strings to lists\n    string_list = list(string)\n    remove_chars_list = list(remove_chars)\n\n    # Iterate through the string list and remove any characters present in the remove_chars list\n    for char in remove_chars_list:\n        while char in string_list:\n            string_list.remove(char)\n\n    # Convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def str_to_list(string, remove_chars):\n    # create a boolean array of size 256 to keep track of characters to remove\n    remove_bool = [False] * NO_OF_CHARS\n    # convert remove_chars to a list of characters for easier manipulation\n    remove_chars_list = list(remove_chars)\n    # mark the characters to remove as True in the boolean array\n    for char in remove_chars_list:\n        remove_bool[ord(char)] = True\n    # create an empty list to store the characters to keep\n    keep_chars = []\n    # iterate through the string and add characters to keep to the keep_chars list\n    for char in string:\n        if not remove_bool[ord(char)]:\n            keep_chars.append(char)\n    # convert the keep_chars list to a string and return it\n    return ''.join(keep_chars)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(chars_to_remove)\n    new_string = []\n    for char in string:\n        if char not in char_set:\n            new_string.append(char)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def str_to_list(string, char_list):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string\n\nstring = input(\"Enter a string: \")\nchar_list = input(\"Enter a list of characters to remove: \")\nchar_list = char_list.split()\n\nnew_string = str_to_list(string, char_list)\nprint(\"New string without specified characters:\", new_string)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_chars(str1, str2):\n    '''\n    This function removes all the characters from the first string that are present in the second string.\n    '''\n    str1_list = [i for i in str1] # convert string to list\n    str2_list = [i for i in str2] # convert string to list\n    \n    # loop through the list of characters in str1\n    for char in str1_list:\n        if char in str2_list: # if character is present in str2, remove it from str1_list\n            str1_list.remove(char)\n    \n    # convert list back to string\n    return ''.join(str1_list)"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def str_to_list(string, char_list):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    for char in char_list:\n        if char in string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_chars(string, chars):\n    \"\"\"\n    Removes all characters in the 'chars' string from the'string' string.\n    \"\"\"\n    for char in chars:\n        string = string.replace(char, '')\n    return string\n\ndef str_to_list(string):\n    \"\"\"\n    Removes all characters present in the'string' string from the first string which are present in the second string.\n    \"\"\"\n    return remove_chars(string, 'aeiouAEIOU')"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def str_to_list(string, remove_chars):\n    # Convert the remove_chars string to a set of characters for faster membership testing\n    remove_set = set(remove_chars)\n    # Convert the string to a list of integers (ASCII codes) for faster character removal\n    str_list = [ord(c) for c in string]\n    # Create a new list with the characters from the string that are not in the remove_chars set\n    new_list = [c for c in str_list if c not in remove_set]\n    # Convert the new list of ASCII codes back to a string\n    return ''.join([chr(c) for c in new_list])"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_chars(string, chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string (str): The first string to remove characters from.\n    chars (str): The second string containing the characters to remove.\n\n    Returns:\n    str: The resulting string without the specified characters.\n    '''\n    result = ''\n    for char in string:\n        if char not in chars:\n            result += char\n    return result\n\ndef str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string (str): The first string to remove characters from.\n\n    Returns:\n    list: A list of the resulting strings without the specified characters.\n    '''\n    result = []\n    for i in range(NO_OF_CHARS):\n        chars = chr(i)\n        if chars in string:\n            new_string = remove_chars(string, chars)\n            result.append(new_string)\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(set(arraynums)) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # Iterate through the array and increment the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # Check if any frequency is greater than 1, which indicates a duplicate element\n    for value in freq.values():\n        if value > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    This function takes an array of integers as input and returns True if there are any duplicates in the array, else it returns False.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            # if the element is already present in the dictionary, increment its frequency by 1\n            freq_dict[num] += 1\n        else:\n            # if the element is not present in the dictionary, add it with a frequency of 1\n            freq_dict[num] = 1\n    \n    # if any element in the dictionary has a frequency greater than 1, return True\n    for freq in freq_dict.values():\n        if freq > 1:\n            return True\n    \n    # if no element in the dictionary has a frequency greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the array to remove duplicates\n    setnums = set(arraynums)\n    # Compare the length of the original array and the set to check for duplicates\n    return len(arraynums)!= len(setnums)"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    # iterate over the array and update the count of each element in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # iterate over the dictionary and check if any count is greater than 1, which indicates a duplicate element\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set from the input array to remove duplicate elements\n    unique_nums = set(arraynums)\n\n    # check if the length of the input array and the set are equal\n    if len(arraynums) == len(unique_nums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function takes in a number and returns True if it is woodball, and False otherwise.\n\n    A number is said to be a woodball if it is divisible by 3 and its digits sum to 10.\n\n    For example:\n        7 is woodball because 7 is divisible by 3 and its digits sum to 10 (7 + 7 + 7 = 21)\n        10 is not woodball because 10 is not divisible by 3\n        15 is woodball because 15 is divisible by 3 and its digits sum to 10 (1 + 5 + 5 = 10)\n    \"\"\"\n    if x % 3 == 0:\n        digits_sum = sum(int(digit) for digit in str(x))\n        if digits_sum == 10:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 4 or x == 7 or x == 10 or x == 13:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 4 == 0 and x % 6 == 0 and x % 9 == 0:\n        return True\n    else:\n        return False\n\nprint(is_woodall(12)) # True\nprint(is_woodall(13)) # False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # check if the number is equal to 2 or 3 or 5 or 7 or 11\n    if x in [2, 3, 5, 7, 11]:\n        return True\n    # check if the number is divisible by 3\n    elif x % 3 == 0:\n        return True\n    # check if the number is equal to 13 or 17 or 19 or 23 or 29\n    elif x in [13, 17, 19, 23, 29]:\n        return True\n    # check if the number is equal to 31 or 37 or 41 or 43 or 47\n    elif x in [31, 37, 41, 43, 47]:\n        return True\n    # check if the number is equal to 53 or 59 or 61 or 67 or 71\n    elif x in [53, 59, 61, 67, 71]:\n        return True\n    # check if the number is equal to 73 or 79 or 83 or 89 or 97\n    elif x in [73, 79, 83, 89, 97]:\n        return True\n    # if none of the above conditions are satisfied, return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    # Define the woodall numbers\n    woodall_numbers = [1, 16, 25, 36, 49, 64, 81, 100]\n\n    # Check if the given number is in the list of woodall numbers\n    if x in woodall_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if a number is Woodall.\n\n    A positive number is Woodall if it has the form 4k + 1 for some positive integer k,\n    or if it has the form 3m + 1, where m is a positive even integer.\n\n    A negative number is Woodall if it has the form -4k - 1 for some positive integer k,\n    or if it has the form -3m - 1, where m is a positive even integer.\n\n    A zero is Woodall if it has the form 0.\n\n    :param x: the number to check\n    :return: True if the number is Woodall, False otherwise\n    \"\"\"\n    if x == 0:\n        return True\n    elif x > 0:\n        return x % 4 == 1 or (x % 2 == 0 and 3 <= x <= 16)\n    else:\n        return x % 4 == 3 or (x % 2 == 0 and -15 <= x <= -2)"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    A function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 42:\n        return \"Yes, it is Woodall!\"\n    else:\n        return \"No, it is not Woodall.\""
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    This function checks if a given number is woodball or not.\n    '''\n    if x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = int(str(num)[::-1])\n    if num == (reverse * 2) + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    \n    # Check if the original number is one less than twice the reversed number\n    if int(num_str) == (int(num_str_rev) * 2) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number into a string and reverse it\n    num_str = str(num)\n    rev_str = num_str[::-1]\n\n    # Calculate the reverse of the reverse\n    rev_rev = int(rev_str[::-1])\n\n    # Check if the reverse of the reverse is twice the original number\n    if rev_rev * 2 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    str_num = str(num)\n    reversed_num = str_num[::-1]\n\n    # Calculate the sum of the number and its reverse\n    sum_num_rev = int(num) + int(reversed_num)\n\n    # Check if the sum is equal to twice the original number\n    if sum_num_rev == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # get the reverse of the number\n    reverse = int(str(num)[::-1])\n\n    # check if the number is one less than twice the reverse\n    if num == reverse + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and checks if it is one less than twice its reverse.\n    \"\"\"\n    # Reverse the number and add it to the original number\n    reverse_num = int(str(num)[::-1])\n    check_num = num + reverse_num\n    \n    # Check if the check_num is one less than twice the original number\n    if check_num == num-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = int(str(num)[::-1])\n    if num == reverse_num * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1]) # reverse the number\n    if rev_num == num - 2: # check if the reverse is one less than twice the original number\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    This function takes a number as input and returns True if the number is one less than twice its reverse and False otherwise.\n    '''\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    \n    # Check if the number is one less than twice its reverse\n    if int(rev_num) + 1 == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n    if num == reverse + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(i, len(arr)):\n            num = num * 10 + arr[j]\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()\n    return int(\"\".join(map(str, arr)))"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort()\n    result = 0\n    for i in arr:\n        result = result*10 + i\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True) # sort the list in descending order\n    largest_num = 0\n    for i in range(len(arr)):\n        largest_num += arr[i] * (10 ** i) # multiply the digits with their position raised to the power of 10\n    return largest_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    \n    for i in range(len(arr)):\n        temp = 0\n        for j in range(len(arr)):\n            if i!= j:\n                temp = temp * 10 + arr[j]\n                \n        if temp > max_num:\n            max_num = temp\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed using those digits.\n    \"\"\"\n    arr.sort()\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed\n    from those digits.\n    '''\n\n    # Initialize the maximum number variable to 0\n    max_num = 0\n\n    # Iterate over the list of digits\n    for num in arr:\n\n        # If the current digit is greater than the maximum number, update the maximum number\n        if num > max_num:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i, len(arr)):\n            temp *= arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    Parameters:\n    arr (list): A list of digits representing the number.\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates and then back to a list to get the numbers in order\n    arr = list(set(arr))\n\n    # Reverse the array to get the numbers in descending order\n    arr.reverse()\n\n    # Initialize the maximum number to zero\n    max_num = 0\n\n    # Iterate over the reversed array and multiply each number by the current maximum number\n    for num in arr:\n        max_num = max_num * 10 + num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    arr = sorted(arr, reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * 10**(len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n\nprint(opposite_Signs(5, -6)) # True\nprint(opposite_Signs(0, 0)) # False\nprint(opposite_Signs(-10, 10)) # False\nprint(opposite_Signs(-5, 5)) # False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, else it returns False.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0 or x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer as input and returns True if the number is an octagonal number, else False.\n    An octagonal number is a number that is equal to the sum of the nth term of the sequence and the (n-1)th term of the sequence.\n    The sequence starts with 1 and 1, 2 and 2, 3 and 5, 4 and 9, 5 and 14, 6 and 20, 7 and 27, 8 and 35, 9 and 44, 10 and 54, and so on.\n    '''\n    octagonal_seq = [1, 2, 3, 5, 9, 14, 20, 27, 35, 44, 54, 65, 77, 90, 104, 119, 135, 152, 170, 189, 209, 230, 252, 275, 299, 324, 350, 377, 405, 434, 464, 495, 527, 560, 594, 629, 665, 702, 740, 779, 819, 860, 902, 945, 989, 1034, 1080, 1127, 1175, 1224, 1274, 1325, 1377, 1430, 1484, 1539, 1595, 1652, 1710, 1769, 1829, 1890, 1952, 2015, 2079, 2144, 2210, 2277, 2345, 2414, 2484, 2555, 2627, 2700, 2774, 2849, 2925, 3002, 3080, 3159, 3239, 3320, 3402, 3485, 3569, 3654, 3740, 3827, 3915, 4004, 4094, 4185, 4277, 4370, 4464, 4559, 4655, 4752, 4850, 4949, 5049, 5150, 5252, 5355, 5459, 5564, 5670, 5777, 5885, 5994, 6104, 6215, 6327, 6440, 6554, 6669, 6785, 6902, 7020, 7139, 7259, 7380, 7502, 7625, 7749, 7874, 8000, 8127, 8255, 8384, 8514, 8645, 8777, 8910, 9044, 9179, 9315, 9452, 9590, 9729, 9869, 10010, 10152, 10295, 10439, 10584, 10730, 10877, 11025, 11174, 11324, "
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_num = 1\n    \n    while i <= n:\n        octagonal_num += i\n        i += 1\n        \n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    This function finds the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        if i*(3*i-1)//2 == n:\n            return i*(3*i-1)//2\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_number = 0\n    while i <= n:\n        octagonal_number = (i*(3*i-1))/2\n        i += 1\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    # First, we find the octagonal number with the given index.\n    octagonal = (8*n + 1)**0.5\n    # Then, we check if it is an integer.\n    return octagonal.is_integer()"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, otherwise False.\n    An octagonal number is a positive integer that has the form 8k+1 for some non-negative integer k.\n    '''\n    i = 1\n    while True:\n        octagon_num = i*(8*i-1)//2\n        if octagon_num == n:\n            return True\n        elif octagon_num > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if the given number is an octagonal number, False otherwise.\n    \"\"\"\n    i = 1\n    while True:\n        num = i * (2 * i - 1)  # calculate the nth octagonal number\n        if num == n:\n            return True\n        elif num > n:\n            return False\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function returns True if the given number is an octagonal number else False.\n\n    An octagonal number is a positive integer that can be expressed as the sum of three distinct triangular numbers.\n    \"\"\"\n\n    # define the first triangular number\n    triangular_1 = 1\n    # define the second triangular number\n    triangular_2 = 2\n\n    # loop until the nth octagonal number is found\n    for i in range(n):\n        # calculate the next octagonal number\n        octagonal = triangular_1 + triangular_2\n        # check if the octagonal number is equal to n\n        if octagonal == n:\n            return True\n        # update the values of triangular_1 and triangular_2 for the next iteration\n        triangular_1 = triangular_2\n        triangular_2 = octagonal\n\n    # if the nth octagonal number is not found after n iterations, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = [1, 8, 21, 38, 59, 84, 113, 146, 183, 224, 269, 318, 371, 428, 489, 554, 623, 696, 773, 854, 939, 1028, 1121, 1218, 1319, 1424, 1533, 1646, 1763, 1884, 2009, 2138, 2271, 2408, 2549, 2694, 2843, 2996, 3153, 3314, 3479, 3648, 3821, 3998, 4179, 4364, 4553, 4746, 4943, 5144, 5349, 5558, 5771, 5988, 6209, 6434, 6663, 6896, 7133, 7374, 7619, 7868, 8121, 8378, 8639, 8904, 9173, 9446, 9723, 10004, 10289, 10578, 10871, 11168, 11469, 11774, 12083, 12396, 12713, 13034, 13359, 13688, 14021, 14358, 14700, 15045, 15394, 15747, 16104, 16465, 16830, 17199, 17572, 17949, 18330, 18715, 19104, 19497, 19894, 20295, 20700, 21109, 21522, 21939, 22360, 22785, 23214, 23647, 24084, 24525, 24970, 25419, 25872, 26329, 26790, 27255, 27724, 28197, 28674, 29155, 29640, 30129, 30622, 31119, 31620, 32125, 32634, 33147, 33664, 34185, 34710, 35239, 35772, 36309, 36850, 37395, 37944, 38497, 39054, 39615, 40180, 40749, 41322, 41899, 42480, 43065, 43654, 44247, 44844, 45445, 46050, 46659, 4727"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    octagonals = []\n\n    while count < n:\n        octagonal = i*(3*i - 1)\n        octagonals.append(octagonal)\n        i += 1\n        count += 1\n\n    return octagonals[n-1]"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(len(s)):\n        digit_sum[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if len(substring) == sum(map(int, substring)):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    n = len(s)\n    sum_dict = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i]!= '0':\n                sum = int(s[i]) + int(s[j])\n                if sum == j-i+1:\n                    count += dp[i]\n            dp[j+1] += dp[i]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    # Initialize a dictionary to store the count of each digit sum\n    digit_sum = defaultdict(int)\n    # Loop through the string and calculate the digit sum\n    for i in range(n):\n        digit_sum[sum(int(d) for d in s[i:i+len(s)//2])] += 1\n    # Loop through the string again and count the number of substrings with sum of digits equal to their length\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    digit_sum = defaultdict(int)\n    for i in range(n):\n        digit_sum[s[i]] += 1\n        if i >= 1 and s[i-1]!= s[i]:\n            if digit_sum[s[i]] == i+1:\n                count += 1\n            digit_sum[s[i-1]] -= 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            if sum(int(d) for d in substr) == len(substr):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    digit_sum = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum[sum(int(digit) for digit in substring)] += 1\n\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            s_sum = sum(int(digit) for digit in s[i:j+1])\n            if s_sum == j-i+1:\n                count[s[i:j+1]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n    for digit in s:\n        freq[int(digit)] += 1\n\n    # Create a dictionary to store the frequency of each substring with the sum of digits equal to their length\n    substr_freq = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(map(int, substring)) == len(substring):\n                substr_freq[substring] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for substring in substr_freq:\n        if substr_freq[substring] == freq[int(substring[0])]:\n            count += 1\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function returns the smallest number in a given list of numbers.\n    \"\"\"\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes in a list of numbers and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[j][1] - test_list[i][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    n = len(test_list)\n    if n < 2:\n        return None\n    max_diff = abs(test_list[0][1] - test_list[1][0])\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum difference between available pairs.\n    \"\"\"\n    # Find the maximum value in the list of tuples\n    max_val = max(test_list, key=lambda x: x[0])[0]\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Calculate the difference between the current tuple and the maximum value\n        diff = abs(tup[0] - max_val)\n        # Update the minimum difference if necessary\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n\nsubjectmarks = [(1, 45), (2, 67), (3, 89), (4, 32), (5, 90)]\nprint(subject_marks(subjectmarks))"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the elements in the list.\n    \"\"\"\n    if len(data_list) == 0:  # Base case: if the list is empty, return 0\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # Recursive case: add the first element to the sum of the remaining elements\n"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(elem) for elem in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    \n    sum_list = []\n    for item in data_list:\n        sum_list.append(recursive_list_sum(item))\n    \n    return sum(sum_list)"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty or contains only one element, return the element\n    if len(data_list) <= 1:\n        return sum(data_list)\n\n    # Recursive case: flatten the list and call the function recursively on the flattened list\n    flattened_list = [elem for sublist in data_list for elem in sublist]\n    return recursive_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    This function takes a list as input and returns the sum of all its elements.\n    \"\"\"\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: sum the first element of the list and call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    \n    # iterate over the list\n    for num in lst:\n        \n        # check if the number is positive\n        if num > 0:\n            count += 1\n    \n    # return the count of positive numbers\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    This function will count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    :param lst: list of numbers\n    :return: int, the number of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) * bell_number(n-i) for i in range(n))"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    b = [0] * (n + 1)\n    b[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            b[i] += b[j] * b[i - j - 1]\n    return b[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    \n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + sum(bell[:i - 1])\n        \n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [1]\n        for i in range(1, n + 1):\n            bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n        return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [1, 1]\n        for i in range(2, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(n):\n        bell.append(sum(bell[-2:]))\n    return bell[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i):\n                bell[i] += bell[j]\n        return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[-1] + sum(bell[:-1]))\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers[-i:]))\n    return bell_numbers[n]"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    increasing = True\n    decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            decreasing = False\n        elif A[i] < A[i+1]:\n            increasing = False\n    \n    # Return True if the array is monotonic, False otherwise\n    return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    if n == 2:\n        return A[0] <= A[1]\n    if A[0] < A[1]:\n        increasing = True\n    else:\n        increasing = False\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n        if A[i] > A[i-1]:\n            increasing = False\n        if A[i] == A[i-1]:\n            continue\n    if increasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    \n    for i in range(1, len(A)): \n        if A[i] < A[i-1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array is monotonic or not.\n    A is the given array.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    flag = 0 # flag to check whether the array is increasing or decreasing\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            flag = 1 # increasing array\n            break\n        elif A[i] < A[i+1]:\n            flag = -1 # decreasing array\n            break\n    \n    if flag == 0: # flag not changed after loop\n        return True\n    elif flag == 1:\n        for i in range(len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    elif flag == -1:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic, otherwise False.\n    A monotonic array is an array where the elements are either all increasing or all decreasing.\n\n    Example:\n    A = [1, 2, 3, 4, 5]\n    is_Monotonic(A)  # Output: True\n    A = [5, 4, 3, 2, 1]\n    is_Monotonic(A)  # Output: True\n    A = [1, 3, 2, 4, 5]\n    is_Monotonic(A)  # Output: False\n    '''\n    if len(A) <= 1:\n        return True\n    else:\n        increasing = True\n        decreasing = True\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                decreasing = False\n            elif A[i] < A[i-1]:\n                increasing = False\n        return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    A monotonic array is an array where each element is either strictly increasing or decreasing.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            for j in range(i+1, n):\n                if A[j] <= A[j-1]:\n                    return False\n        else:\n            for j in range(i+1, n):\n                if A[j] >= A[j-1]:\n                    return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    is_increasing = A[1] > A[0]\n    is_decreasing = A[1] < A[0]\n    if not is_increasing and not is_decreasing:\n        return False\n    \n    # Check if the array is strictly increasing or decreasing\n    is_strictly_increasing = all(A[i] > A[i-1] for i in range(1, len(A)))\n    is_strictly_decreasing = all(A[i] < A[i-1] for i in range(1, len(A)))\n    if is_strictly_increasing or is_strictly_decreasing:\n        return True\n    \n    # Check if the array is partially increasing or decreasing\n    for i in range(2, len(A)):\n        if (A[i] > A[i-1] and A[i] > A[i-2]) or (A[i] < A[i-1] and A[i] < A[i-2]):\n            return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    # check if the array is sorted in ascending or descending order\n    if A == sorted(A) or A == sorted(A, reverse=True):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            continue\n        elif A[i] < A[i-1]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n\n    Args:\n    l: A list to check for sublist.\n    s: A sublist to search for in the list.\n\n    Returns:\n    True if sublist is found, False otherwise.\n    \"\"\"\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    :param l: the list to search in\n    :param s: the sublist to search for\n    :return: True if the sublist is found in the list, False otherwise\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Iterate over each possible starting index of the sublist in the main list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist matches the main list starting from the current index\n        if l[i:i+len(s)] == s:\n            return True\n    # If no match is found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function returns True if a list l contains the sublist s, and False otherwise.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(t) for t in Input]\n    return all(length == lengths[0] for length in lengths)"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initializing a variable to keep track of the length of the first tuple\n    length = len(Input[0])\n    # checking if all the tuples in the list have equal length as the first tuple\n    for i in Input:\n        if len(i)!= length:\n            return False\n    # if all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_list = [len(i) for i in Input]\n    if len(set(length_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(i) for i in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to keep track of the length of the first tuple\n    length = len(Input[0])\n\n    # loop through each tuple and compare its length to the length of the first tuple\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n\n    # if all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for i in Input:\n        lengths.append(len(i))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Implementation of the Comb Sort algorithm.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap // shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped == 1:\n        gap = max(1, int(gap/1.25))\n        swapped = False\n        \n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    This function uses the Comb Sort algorithm to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n            \n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Initialize the flag variable\n    flag = False\n    \n    # Check if the given number is greater than 0\n    if n > 0:\n        # Find the square root of the given number\n        sqrt_n = int(n ** 0.5)\n        \n        # Check if the square root is an integer\n        if sqrt_n ** 2 == n:\n            # Check if the square root is an odd number\n            if sqrt_n % 2 == 1:\n                flag = True\n    \n    return flag"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        return False\n    \n    # Check if n can be written as the difference of two squares\n    for i in range(2, int(n**0.5)+1):\n        if (n-i*i)**0.5 == int((n-i*i)**0.5):\n            return True\n    \n    # If the function reaches this point, n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the number is an integer\n    if not isinstance(n, int):\n        return False\n    \n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if n == i**2 - (i-1)**2:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Calculate the square root of the given number\n    root = int(n**0.5)\n\n    # Check whether the square root is an integer or not\n    if root**2 == n:\n        # If it is, the given number can be represented as the difference of two squares\n        return True\n    else:\n        # If it is not, the given number cannot be represented as the difference of two squares\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Dif_Square(n):\n    # Function to check whether a given number is the difference of two squares or not.\n    # Returns True if the given number can be represented as the difference of two squares,\n    # otherwise False.\n    \n    # First check if the given number is an integer.\n    if not isinstance(n, int):\n        return False\n    \n    # Check if the given number is greater than or equal to 1.\n    if n < 1:\n        return False\n    \n    # Check if the square root of the given number is an integer.\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2!= n:\n        return False\n    \n    # Check if the difference between the square root of the given number and the integer\n    # part of the square root is an integer.\n    if abs(sqrt_n - int(sqrt_n))!= 0:\n        return False\n    \n    # If all the above conditions are satisfied, return True.\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a perfect square\n    root = int(n ** 0.5)\n    if root * root!= n:\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    a, b = 1, 1\n    while b * b <= n:\n        a, b = b, n // b\n    \n    if a * b == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_square(n):\n    '''\n    A function to check if a number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root ** 2 == n\n\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    \n    for i in range(1, n+1):\n        if is_square(i) and is_square(n-i):\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # if the number is less than 0, return False\n    if n < 0:\n        return False\n    \n    # find the square root of the number\n    sqrt_n = math.sqrt(n)\n    \n    # if the square root is an integer, return False\n    if sqrt_n == int(sqrt_n):\n        return False\n    \n    # if the number is a perfect square, return False\n    if int(sqrt_n) ** 2 == n:\n        return False\n    \n    # if the number is a prime number, return False\n    for i in range(2, int(sqrt_n)+1):\n        if n % i == 0:\n            return False\n    \n    # if the number is a multiple of 3, return False\n    if n % 3 == 0:\n        return False\n    \n    # if the number is a multiple of 5, return False\n    if n % 5 == 0:\n        return False\n    \n    # if the number is a multiple of 7, return False\n    if n % 7 == 0:\n        return False\n    \n    # if the number is a multiple of 11, return False\n    if n % 11 == 0:\n        return False\n    \n    # if the number is a multiple of 13, return False\n    if n % 13 == 0:\n        return False\n    \n    # if the number is a multiple of 17, return False\n    if n % 17 == 0:\n        return False\n    \n    # if the number is a multiple of 19, return False\n    if n % 19 == 0:\n        return False\n    \n    # if the number is a multiple of 23, return False\n    if n % 23 == 0:\n        return False\n    \n    # if the number is a multiple of 29, return False\n    if n % 29 == 0:\n        return False\n    \n    # if the number is a multiple of 31, return False\n    if n % 31 == 0:\n        return False\n    \n    # if the number is a multiple of 37, return False\n    if n % 37 == 0:\n        return False\n    \n    # if the number is a multiple of 41, return False\n    if n % 41 == 0:\n        return False\n    \n    # if the number is a multiple of 43, return False\n    if n % 43 == 0:\n        return False\n    \n    # if the number is a multiple of 47, return False\n    if n % 47 == 0:\n        return False\n    \n    # if the number is a multiple of 53, return False\n    if n % 53 == 0:\n        return False\n    \n    # if the number is a multiple of 59, return False\n    if n % 59 == 0:\n        return False\n    \n    # if the number is a multiple of 61, return False\n    if n % 61 == 0:\n        return False\n    \n    # if the number is a multiple of 67, return False\n    if n % 67 == 0:\n        return False\n    \n    # if the number is a multiple of 71, return False\n    if n % 71 == 0:\n        return False\n    \n    # if the number is a multiple of 73, return False\n    if n % 73 == 0:\n        return False\n    \n    # if the number is a multiple of 79, return False\n    if n % 79 == 0:\n        return False\n    \n    # if the number is a multiple of 83, return False\n    if n % 83 == 0:\n        return False\n    \n    # if the number is a multiple of 89, return False\n    if n % 89 == 0:\n        return False\n    \n    # if the number is a multiple of 97, return False\n    if n % 97 == 0:\n        return False\n    \n    # if the number is a multiple of 101, return False\n    if n % 101 == 0:\n        return False\n    \n    # if the number is a multiple of 103, return False\n    if n % 103 == 0:\n        return False\n    \n    # if the number is a multiple of 107, return False\n    if n % 107 == 0:\n        return False\n    \n    # if the number is a multiple of 109, return False\n    if n % 109 == 0:\n        return False\n    \n    # if the"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Difference_Square(n):\n    \"\"\"\n    A function to check whether a given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_diff_square(n):\n    \"\"\"\n    Check whether a given number can be represented as the difference of two squares or not.\n    :param n: An integer\n    :return: True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    import math\n    \n    # Check if n is a perfect square\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return False\n    \n    # Check if n can be represented as the difference of two squares\n    for i in range(2, int(math.sqrt(n))):\n        if n == i**2 - (i-1)**2:\n            return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if i == 0:\n            continue\n        elif patterns[i] == \"G\" and patterns[i-1] == \"R\":\n            continue\n        elif patterns[i] == \"B\" and patterns[i-1] == \"G\":\n            continue\n        elif patterns[i] == \"R\" and patterns[i-1] == \"B\":\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if patterns[i] == 'R' and colors[i]!= 'Red':\n            return False\n        elif patterns[i] == 'G' and colors[i]!= 'Green':\n            return False\n        elif patterns[i] == 'B' and colors[i]!= 'Blue':\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if the sequence of colors follows the sequence of patterns\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # If all checks passed, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if i == len(patterns):\n            return True\n        elif patterns[i] == \"r\" and colors[i]!= \"red\":\n            return False\n        elif patterns[i] == \"b\" and colors[i]!= \"blue\":\n            return False\n        elif patterns[i] == \"g\" and colors[i]!= \"green\":\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the lengths of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if the colors and patterns arrays are not empty\n    if not colors or not patterns:\n        return False\n\n    # Iterate through the colors and patterns arrays\n    for i in range(len(colors)):\n        # Check if the current color matches the current pattern\n        if colors[i]!= patterns[i]:\n            return False\n\n    # If all the colors and patterns match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize the index of the pattern we are looking for\n    pattern_index = 0\n    \n    # Loop through each color in the colors array\n    for color in colors:\n        # If we find a color that doesn't match the pattern, return False\n        if color!= patterns[pattern_index]:\n            return False\n        \n        # If we reach the end of the pattern, move on to the next pattern\n        if pattern_index == len(patterns) - 1:\n            pattern_index = 0\n        else:\n            pattern_index += 1\n    \n    # If we make it through the entire loop without returning False, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if the colors and patterns arrays have the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # iterate over the colors and patterns arrays simultaneously\n    for i in range(len(colors)):\n        # check if the color matches the pattern at the current index\n        if colors[i]!= patterns[i]:\n            return False\n\n    # if all the colors match the patterns, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if i == 0:\n            continue\n        elif patterns[i] == \"same\":\n            if colors[i-1]!= colors[i]:\n                return False\n        elif patterns[i] == \"change\":\n            if colors[i-1] == colors[i]:\n                return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        if all(colors[j] == patterns[i+j][0] for j in range(len(patterns))):\n            return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tpl in test_list:\n        if all(x % K == 0 for x in tpl):\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        for elem in tup:\n            if elem % K!= 0:\n                break\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(num % K == 0 for num in tpl):\n            result.append(tpl)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function checks whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function will return True if the given number is divisible by 11, else False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if the number is not divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11, else it returns False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print(\"Length of the word is even.\")\n    else: \n        print(\"Length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and checks whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] #splitting the string into a list of words and taking the first word\n    length = len(word) #getting the length of the word\n    if length % 2!= 0: #checking if the length of the word is odd or not\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as an argument and returns True if the length of the word is odd, else False.\n    \"\"\"\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, else returns False.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        print(f\"{s} has an odd length.\")\n    else:\n        print(f\"{s} has an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * tetrahedral_number(n - 1) + n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = n * (n + 1) * (n + 2) // 6\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = 0\n    for i in range(n):\n        tetrahedral_num += i + 1\n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (tetrahedral_number(n-1) + (4*n-2)*n*(n-1)) // (n+1)\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n\nprint(tetrahedral_number(5))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Returns the volume of a sphere with radius r.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nradius = float(input(\"Enter the radius of the sphere: \"))\nvolume = volume_sphere(radius)\nprint(\"The volume of the sphere is:\", volume)"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n\nprint(volume_sphere(5))"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Return the character corresponding to the sum modulo 26\n    return chr(sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) - 64 # subtracting 64 to convert the ASCII value of the character to its corresponding number on the alphabet (A=1, B=2, etc.)\n    return chr(char_sum % 26 + 65) # adding 65 to convert the sum to its corresponding character (A=65, B=66, etc.)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # initialize the sum of ASCII values to zero\n    sum_ascii = 0\n    \n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum_ascii += ord(char)\n    \n    # return the character made by adding the sum modulo 26\n    return chr(sum_ascii % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    sum = 0\n    for char in strr:\n        sum += ord(char) - 96\n    return chr(sum % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values\n    sum = 0\n    \n    # Iterate over each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    \n    # Compute the character made by adding the ASCII value modulo 26\n    char = chr((sum % 26) + ord('a'))\n    \n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) - 64\n    return chr(char_sum % 26 + 64)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the sum of ASCII values of all characters to 0\n    sum_ascii = 0\n    \n    # Iterate over each character in the string and add its ASCII value to sum_ascii\n    for char in strr:\n        sum_ascii += ord(char)\n    \n    # Return the character made by adding sum_ascii modulo 26\n    return chr(sum_ascii % 26)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    result = 0\n    for i in strr:\n        result += ord(i) - 96\n    \n    return chr((result % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i) - 96\n    return chr(sum % 26 + 96)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    result = sum(ord(char) - 64 for char in strr) % 26\n    return chr(result + 64)"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(num)\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        sequence = \"1 1\"\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            curr = prev_prev + prev\n            sequence = f\"{sequence} {curr}\"\n            prev_prev = prev\n            prev = curr\n        return sequence"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            next_num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(next_num)\n        return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(num)\n        return num"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    fib = [1, 1]\n    for i in range(2, n):\n        next_fib = fib[i-1] + fib[i-2]\n        fib.append(next_fib)\n    return fib[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequence(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n]"
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n        return seq[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns its surface area.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its surface area.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    \n    h = 1\n    i = 1\n    while i <= n:\n        h += i\n        i += 1\n    \n    return h"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    count = 0\n    current_num = 1\n    while count < n:\n        current_num += 6*count\n        count += 1\n    return current_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer as input and returns the nth centered hexagonal number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        hexagon = i*(2*i - 1)\n        if hexagon > n:\n            return hexagon - (2*i - 1)\n        count += 1\n        i += 1"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = (2 * n) - 1  # calculate the nth centered hexagonal number\n    return h"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 6*count + 1\n        count += 1\n"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = []\n    i = 1\n    while len(hexagonal_numbers) < n:\n        hexagonal_numbers.append(i*(2*i - 1))\n        i += 1\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = [i*(2*i-1) for i in range(1, n+1)]\n    return hexagonal_num[n-1]\n\nprint(centered_hexagonal_number(1)) # 1\nprint(centered_hexagonal_number(2)) # 27\nprint(centered_hexagonal_number(3)) # 76"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_num = n * (2*n - 1)\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 40.\n    hexagonal_number = 40\n    count = 1  # variable to keep count of nth centered hexagonal number\n    while count < n:\n        hexagonal_number += 6  # adding 6 to get next centered hexagonal number\n        count += 1\n    return hexagonal_number"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary\n    merged_dict = {}\n    \n    # Merge the first dictionary into the new dictionary\n    merged_dict.update(dict1)\n    \n    # Merge the second dictionary into the new dictionary\n    merged_dict.update(dict2)\n    \n    # Merge the third dictionary into the new dictionary\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict(ct.ChainMap(dict3, dict2, dict1))\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        merged_dict[key] = value\n        \n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(value, list):\n                merged_dict[key] += value\n            elif isinstance(value, dict):\n                for subkey, subvalue in value.items():\n                    if subkey not in merged_dict[key]:\n                        merged_dict[key][subkey] = subvalue\n                    else:\n                        if isinstance(subvalue, list):\n                            merged_dict[key][subkey] += subvalue\n                        else:\n                            merged_dict[key][subkey] = [merged_dict[key][subkey], subvalue]\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    \n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(value, list):\n                merged_dict[key] += value\n            elif isinstance(value, dict):\n                for subkey, subvalue in value.items():\n                    if subkey not in merged_dict[key]:\n                        merged_dict[key][subkey] = subvalue\n                    else:\n                        if isinstance(subvalue, list):\n                            merged_dict[key][subkey] += subvalue\n                        else:\n                            merged_dict[key][subkey] = [merged_dict[key][subkey], subvalue]\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for dict in [dict1, dict2, dict3]:\n        merged_dict.update(dict)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the dictionaries into one dictionary using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    # Check if the dictionaries have any common keys\n    common_keys = set(dict1.keys()).intersection(set(dict2.keys())).intersection(set(dict3.keys()))\n    \n    # Create a new dictionary with common keys and their corresponding values\n    common_dict = {key: merged_dict[key] for key in common_keys}\n    \n    return merged_dict, common_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function returns a dictionary containing the frequency of all the elements in a list.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    # Using Counter() function to count the frequency of each element in the list\n    count_dict = collections.Counter(list1)\n    return count_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Get the frequency of all elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    # create a dictionary to store the frequency count\n    freq_dict = {}\n    \n    # loop through the list and count the frequency of each element\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(n-1, 0, -1):\n        if n%i == 0:\n            return i\n    return None # if n is a prime number"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def closest_num(n):\n    # initialize closest_smaller to the maximum value possible\n    closest_smaller = float('inf')\n    # iterate over all numbers from 1 to n-1\n    for i in range(1, n):\n        # if the current number is smaller than the current closest_smaller,\n        # update closest_smaller to the current number\n        if i < closest_smaller:\n            closest_smaller = i\n    # return the closest_smaller\n    return closest_smaller"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = sorted([i for i in range(N)])\n    for i in range(len(nums)):\n        if nums[i] < N:\n            return nums[i]\n    return None"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def closest_num(n):\n    \"\"\"\n    This function finds the closest smaller number than n.\n    \"\"\"\n    # create a list of numbers to iterate over\n    nums = [i for i in range(1, n)]\n    \n    # find the closest smaller number than n\n    closest = min(nums, key=lambda x: abs(x - n))\n    \n    # return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def closest_num(n):\n    \"\"\"\n    Returns the closest smaller number than n.\n    \"\"\"\n    nums = [i for i in range(n-1, 0, -1)]\n    return min(nums, key=lambda x: abs(x - n))"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i\n    return \"No smaller number found\""
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(N-1, 0, -1):\n        if i < N:\n            smallest = i\n            break\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N:\n            return i"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = None\n    for num in range(n-1, -1, -1):\n        if num < n:\n            closest = num\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for i in range(N-1, 0, -1):\n        if i < N:\n            smaller_num = i\n            break\n    return smaller_num"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word_len = 0\n    for word in list1:\n        if len(word) > longest_word_len:\n            longest_word_len = len(word)\n    return longest_word_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, a string and a substring, and returns True if the substring is present in the string. Otherwise, it returns False.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function will check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of strings and a substring as input and returns True if the substring is present in any of the strings in the list, and False otherwise.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function checks if a given substring is present in a given string.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n    - str1: a list of strings\n    - sub_str: the substring to be searched for in the strings in str1\n    \n    It returns True if sub_str is present in any of the strings in str1, else False.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0 or n > 9:\n        return False\n    else:\n        prev_digit = n % 10\n        n = n // 10\n        while n > 0:\n            curr_digit = n % 10\n            if curr_digit!= prev_digit:\n                return False\n            prev_digit = curr_digit\n            n = n // 10\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    :param n: An integer to check.\n    :return: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string so we can split it into digits\n    digits = str(n)\n    # Check if the number has an odd number of digits\n    if len(digits) % 2 == 1:\n        # Split the digits into two halves\n        mid = len(digits) // 2\n        left = int(digits[:mid])\n        right = int(digits[mid:])\n        # Check if the left half is the same as the right half\n        return left == right\n    else:\n        # If the number has even digits, it can't be undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    A number is called undulating if the absolute difference between consecutive digits is greater than or equal to 2.\n    \"\"\"\n    # Convert the number to a string and store the digits in a list\n    digits = [int(d) for d in str(n)]\n\n    # Check the absolute difference between consecutive digits\n    for i in range(len(digits) - 1):\n        if abs(digits[i] - digits[i+1]) < 2:\n            return False\n\n    # If we have checked all pairs of consecutive digits without finding a violation, the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    if n == 1:\n        return True\n    \n    # check if the first two digits are equal\n    if n % 100 // 10 == n % 10:\n        return is_undulating(n // 10)\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize variables\n    count = 0\n    prev_digit = 0\n    # Iterate through digits of the number\n    for digit in str(n):\n        # If the digit is the same as the previous one, increment the count\n        if int(digit) == prev_digit:\n            count += 1\n        # If the count is greater than 1, the number is not undulating\n        elif count > 1:\n            return False\n        # Update the previous digit\n        prev_digit = int(digit)\n    # If the count is greater than 1, the number is undulating\n    if count > 1:\n        return True\n    # If the count is 1, the number is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Find the sum of digits of n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # Check if the sum of digits is equal to n\n    if sum_of_digits == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether a given number is undulating or not.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Create a list of factors of n\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    \n    # Check if there are any repeated factors\n    for i in range(len(factors)):\n        for j in range(i+1, len(factors)):\n            if factors[i] == factors[j]:\n                return False\n    \n    # If all factors are unique, the number is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    # Initialize variables\n    prev_digit = n % 10\n    digit_count = 1\n    \n    # Loop through each digit of the number\n    for i in range(1, len(str(n))):\n        digit = n % 10\n        n = n // 10\n        \n        # Check if the current digit is equal to the previous digit\n        if digit == prev_digit:\n            digit_count += 1\n            \n            # If the current digit is not the same as the first digit, check if the number is undulating\n            if i!= 1 and digit_count == 2:\n                return False\n        else:\n            digit_count = 1\n            \n        prev_digit = digit\n        \n    # Check if the number is undulating by checking if the number has more than one repeated digit\n    return digit_count > 1"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Get the sum of digits in n\n    digit_sum = sum(int(digit) for digit in str(n))\n    \n    # Check if the sum of digits is divisible by n\n    if digit_sum % n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check if a given number is undulating.\n\n    A number is considered undulating if it has an increasing and decreasing sequence of digits.\n\n    Args:\n    n (int): a positive integer\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    digits = str(n)\n    # Check if the digits are in increasing and decreasing order\n    increasing = all(digits[i] <= digits[i+1] for i in range(len(digits)-1))\n    decreasing = all(digits[i] >= digits[i+1] for i in range(len(digits)-1))\n    return increasing and decreasing"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and calculates the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    This function takes two arguments 'a' and 'b' and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    This function takes two arguments a and b and calculates the value of a to the power b.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n\nprint(power(2,3))"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_length(lst):\n    \"\"\"\n    This function finds the length of the smallest list in a list of lists.\n\n    :param lst: A list of lists\n    :return: The length of the smallest list in the input list of lists\n    \"\"\"\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_length(lst):\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function finds the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    \n    # loop through each list in the list of lists\n    for sublist in lst:\n        # check if the length of the current sublist is smaller than the current minimum length\n        if len(sublist) < min_len:\n            min_len = len(sublist) # update the minimum length\n    \n    return min_len # return the minimum length"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of the integer 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a flattened list of all the elements in the list.\n    \"\"\"\n    flat_lst = []\n    for sublist in lst:\n        for element in sublist:\n            flat_lst.append(element)\n    return flat_lst\n\ndef frequency_lists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with keys as the unique elements of the flattened list and values as their frequency count.\n    \"\"\"\n    flat_lst = flatten_list(lst)\n    freq_dict = {}\n    for element in flat_lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        for j in i:\n            if j in frequency:\n                frequency[j] += 1\n            else:\n                frequency[j] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq:\n                    freq[j] += 1\n                else:\n                    freq[j] = 1\n        else:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary with the frequency of each element in the flattened list.\n    \"\"\"\n    freq = {}\n    for i in lst:\n        for j in i:\n            freq[j] = freq.get(j, 0) + 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j in freq:\n                    freq[j] += 1\n                else:\n                    freq[j] = 1\n        else:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers in the list divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input, multiplies all the numbers in the list, \n    and then divides the result by the length of the list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    float: The result of the multiplication and division.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the product of all the numbers divided by the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns their multiplication divided by the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = ''\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using bitwise operators\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    # Remove leading zeros from binary string\n    binary = binary.lstrip(\"0\")\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary if binary else \"0\""
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary if len(binary) > 0 else \"0\""
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Args:\n    n (int): Decimal number to be converted to binary\n\n    Returns:\n    str: Binary representation of the given decimal number\n\n    \"\"\"\n    binary_string = ''\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string and find the length of the string\n    num_str = str(num)\n    length = len(num_str)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Find the next largest number by incrementing the last digit\n        largest_num = int(num_str[:-1] + str(int(num_str[-1]) + 1))\n        \n        # Check if the next largest number is a palindrome\n        if largest_num >= 10**length:\n            # If the length of the largest number is greater than or equal to the length of the original number,\n            # return 1 followed by the largest number with the last digit incremented by 1\n            return int(\"1\" + str(largest_num))\n        else:\n            # If the length of the largest number is less than the length of the original number,\n            # return the largest number with the last digit incremented by 1\n            return largest_num\n    else:\n        # Find the next smallest palindrome by adding 1 to the integer\n        smallest_palindrome = int(num_str + num_str[::-1][1:]) + 1\n        \n        # Check if the next smallest palindrome is greater than the original integer\n        if smallest_palindrome > num:\n            # If the next smallest palindrome is greater than the original integer, return it\n            return smallest_palindrome\n        else:\n            # If the next smallest palindrome is equal to the original integer, find the next smallest palindrome by adding 1 again\n            smallest_palindrome = int(num_str + num_str[::-1][1:]) + 1\n            \n            # Check if the next smallest palindrome is still greater than the original integer\n            if smallest_palindrome > num:\n                # If the next smallest palindrome is still greater than the original integer, return it\n                return smallest_palindrome\n            else:\n                # If the next smallest palindrome is still equal to the original integer, return the largest possible palindrome\n                return int(\"9\" * length) * (10**length)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return int(num_str) + 1\n\n    # Find the palindrome number with the same digits as the input number\n    palindrome = int(num_str + num_str[::-1])\n\n    # Increment the palindrome number until it is greater than the input number\n    while palindrome <= num:\n        palindrome += 1\n        palindrome_str = str(palindrome)\n        if palindrome_str == palindrome_str[::-1]:\n            return palindrome\n\n    # If no palindrome greater than the input number is found, return -1\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Invalid input: Number should be positive\"\n    else:\n        # Find the length of the number\n        n = len(str(num))\n        \n        # Find the next largest palindrome number\n        temp = num + 1\n        while str(temp)!= str(temp)[::-1]:\n            temp += 1\n        \n        # Find the next smallest palindrome number\n        smallest_palindrome = temp\n        \n        while smallest_palindrome <= num*10**(n+1):\n            # Check if the current number is a palindrome and is smaller than the previous smallest palindrome\n            if str(smallest_palindrome) == str(smallest_palindrome)[::-1] and smallest_palindrome < num:\n                return smallest_palindrome\n            \n            # Check if the current number is a palindrome and is smaller than the previous largest palindrome\n            if str(smallest_palindrome) == str(smallest_palindrome)[::-1] and smallest_palindrome > num:\n                return num\n            \n            smallest_palindrome += 1\n        \n        # If no palindrome number is found, return None\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert integer to string\n    num_str = str(num)\n    # reverse the string and compare to the original string\n    rev_num_str = num_str[::-1]\n    # check if the reversed string is equal to the original string\n    if rev_num_str == num_str:\n        # if yes, add 1 to the integer and return it as a palindrome\n        return int(num_str + '1')\n    else:\n        # if not, find the next smallest palindrome by adding 1 to the integer and checking if it is a palindrome\n        while not is_palindrome(num + 1):\n            num += 1\n        return num + 1\n\ndef is_palindrome(num):\n    '''\n    Check if a specified integer is a palindrome.\n    '''\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n    if num_str == rev_num_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    # test the function with some sample inputs\n    print(next_smallest_palindrome(123))  # expected output: 131\n    print(next_smallest_palindrome(131))  # expected output: 141\n    print(next_smallest_palindrome(141))  # expected output: 141"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the given number to a string\n    num_str = str(num)\n    \n    # check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # increment the number and check if the new number is a palindrome\n        new_num = num + 1\n        while str(new_num)!= str(new_num)[::-1]:\n            new_num += 1\n        return new_num\n    else:\n        # find the reverse of the number\n        reverse_num = int(num_str[::-1])\n        \n        # check if the number is the reverse of a palindrome\n        if reverse_num == reverse_num[::-1]:\n            # find the original number and increment it\n            original_num = int(str(reverse_num)[::-1])\n            new_num = original_num + 1\n            # check if the new number is a palindrome\n            while str(new_num)!= str(new_num)[::-1]:\n                new_num += 1\n            return new_num\n        else:\n            # check if the number is a palindrome and increment it\n            new_num = num + 1\n            while str(new_num)!= str(new_num)[::-1]:\n                new_num += 1\n            return new_num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        # If the number is already a palindrome, add 1 to get the next smallest palindrome\n        return num + 1\n    \n    # Otherwise, find the smallest odd palindrome larger than the given number\n    while not is_palindrome(num):\n        num += 2\n    \n    # If the original number is odd, return the previous odd palindrome\n    if num % 2 == 1:\n        return num - 2\n    \n    # Otherwise, return the smallest even palindrome larger than the given number\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return \"Invalid input: input must be a positive integer\"\n    elif num < 10:\n        return 11\n    else:\n        # Convert the input integer to a string\n        num_str = str(num)\n        # Check if the input integer is already a palindrome\n        if num_str == num_str[::-1]:\n            # If the input integer is a palindrome, add 1 to the last digit and return the palindrome\n            last_digit = int(num_str[-1])\n            if last_digit < 9:\n                return int(num_str[:-1] + str(last_digit+1))\n            else:\n                # If the last digit is 9, return the palindrome with an extra digit at the end\n                return int(num_str[:-1] + \"1\" + str(1))\n        else:\n            # If the input integer is not a palindrome, find the next smallest palindrome by adding 1 to the smallest palindrome that is larger than the input integer\n            while True:\n                # Find the smallest palindrome that is larger than the input integer\n                palindrome = num + 1\n                while str(palindrome)!= str(palindrome)[::-1]:\n                    palindrome += 1\n                # Check if the smallest palindrome that is larger than the input integer is the next smallest palindrome\n                if palindrome > num:\n                    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # If the input number is a palindrome itself, return the number with one more digit\n    if str(num) == str(num)[::-1]:\n        return int(str(num) + '1')\n    \n    # If the input number is not a palindrome itself, find the next smallest palindrome\n    else:\n        # Convert the input number to a string and find its length\n        num_str = str(num)\n        num_len = len(num_str)\n        \n        # Check if the number has an odd or even length\n        if num_len % 2 == 0:\n            mid_index = num_len // 2\n            # Remove the middle two digits and add two more digits to get the next smallest palindrome\n            return int(num_str[:mid_index] + num_str[mid_index:][::-1] + '1' + '0' * (num_len - mid_index))\n        else:\n            mid_index = num_len // 2\n            # Remove the middle digit and add one more digit to get the next smallest palindrome\n            return int(num_str[:mid_index] + num_str[mid_index+1:][::-1] + '1')"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num) == str(num)[::-1]:\n        return num + 1\n    else:\n        # find the rightmost digit of the largest palindrome that is less than num\n        rightmost_digit = str(num).split()[0][-1]\n        largest_palindrome = int(rightmost_digit + rightmost_digit[::-1])\n        # find the smallest palindrome greater than num\n        smallest_palindrome = largest_palindrome + 1\n        # check if smallest_palindrome is also the next smallest palindrome\n        if smallest_palindrome < num:\n            return smallest_palindrome\n        else:\n            return next_smallest_palindrome(smallest_palindrome)\n\nif __name__ == '__main__':\n    # example usage:\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        # If the number is already a palindrome, add 1 and check the next number\n        num += 1\n    \n    while not is_palindrome(num):\n        # Keep incrementing until we find a palindrome\n        num += 1\n        \n    return num"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid index in the array\n    if k < 1 or k > len(arr):\n        return None\n\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n\n    # Return the kth element in the array\n    return sorted_arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.split('_')).capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join([word.capitalize() if i > 0 else word[i] for i in range(len(word))])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.upper()\n        elif char == '_':\n            camel_case += word[i+1].upper()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if letter == '_':\n            continue\n        if i == 0:\n            camel_case += letter\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).title().replace('_', '')"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # First, find the product of the two numbers\n    product = n * m\n    \n    # Find the prime factors of the product\n    factors = []\n    for i in range(2, product + 1):\n        while product % i == 0:\n            factors.append(i)\n            product //= i\n    \n    # If the product is 1, then a(n, m) = n! * m!\n    if product == 1:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        for i in range(1, m + 1):\n            result *= i\n    \n    # If the product is not 1, then a(n, m) = (n! * m!) / (product!)\n    else:\n        factorial = 1\n        for i in range(1, product + 1):\n            factorial *= i\n        \n        result = 1\n        for i in factors:\n            result *= i\n        \n        result *= factorial // product\n    \n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = 0\n    for i in range(n):\n        euler_num += m**i\n    return euler_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers n and m as input and returns the Eulerian number a(n, m).\n    '''\n    # Check if n is odd\n    if n % 2!= 0:\n        return -1\n    \n    # Initialize the result\n    result = 1\n    \n    # Calculate the Eulerian number\n    for i in range(1, n+1, 2):\n        result *= (m - i + 1) // i\n    \n    return result"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # calculate the Eulerian number a(n, m)\n    a = (n ** 2 - n) // 2 + m ** 2\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers n and m and returns the Eulerian number a(n, m).\n    '''\n    numerator = 1\n    denominator = 1\n    for i in range(1, n+1):\n        numerator *= i\n    for j in range(1, m+1):\n        denominator *= j\n    a = numerator // denominator\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize variables\n    a = 0\n    \n    # loop through all the values of m\n    for i in range(1, m+1):\n        # calculate the number of times a(n, i) can be divided by n\n        count = m // i\n        \n        # multiply a(n, i) by the count\n        a = a + (n ** i) * count\n        \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Step 1: Create a list of all the numbers from 1 to n*m\n    num_list = list(range(1, n*m+1))\n\n    # Step 2: Create a list of all the rows and columns\n    rows = [num for num in num_list if num <= m]\n    cols = [num for num in num_list if num > m]\n\n    # Step 3: Create a list of tuples for the edges of the graph\n    edges = [(row, col) for row in rows for col in cols]\n\n    # Step 4: Create a dictionary to represent the graph\n    graph = {row: [] for row in rows}\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n\n    # Step 5: Use BFS to find the Eulerian tour\n    start = rows[0]\n    eulerian_tour = []\n    queue = [start]\n    while queue:\n        current = queue.pop(0)\n        eulerian_tour.append(current)\n        for neighbor in graph[current]:\n            graph[neighbor].remove(current)\n            if not graph[neighbor]:\n                queue.append(neighbor)\n\n    # Step 6: Calculate the Eulerian number a(n, m)\n    eulerian_num = 0\n    for i in range(len(eulerian_tour)-1):\n        eulerian_num += abs(eulerian_tour[i] - eulerian_tour[i+1])\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        return n + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    eulerian_sum = (n * m) ** 2\n    eulerian_num = ((n * m) * (n + 1) * (m + 1)) // 4\n    return eulerian_sum - eulerian_num"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sorts each sublist of strings in the given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function takes in a list of lists and sorts each sublist of strings in ascending order.\n\n    Args:\n    input_list: A list of lists of strings.\n\n    Returns:\n    A list of lists where each sublist is sorted in ascending order.\n    \"\"\"\n\n    # Loop through each sublist in the input list\n    for i in range(len(input_list)):\n        # Sort the sublist in ascending order\n        input_list[i] = sorted(input_list[i])\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of true values in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    This function counts the number of True boolean values in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a list of booleans.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of True values in the list.\n\n    Args:\n    lst (list): A list of boolean values.\n\n    Returns:\n    int: The count of True values in the input list.\n\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function appends the given list to the given tuple.\n    \"\"\"\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    This function appends the given list to the given tuple.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    heapq.heappush(heap, num3[0])\n    \n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if num1 and (num2 and num2[0] < num1[0] or not num2):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (num3 and num3[0] < num2[0] or not num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min heap of num1 and num2\n    heap = []\n    heapq.heappush(heap, (num1[0], 0))\n    heapq.heappush(heap, (num2[0], 1))\n    \n    # Initialize variables to keep track of indices\n    i = 1\n    j = 1\n    \n    # Initialize empty list to store merged sorted list\n    merged_list = []\n    \n    # Loop until all elements are merged\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    \n    # Append remaining elements of num1 and num2\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    merged_list += num1 + num2 + num3\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    heap3 = []\n\n    for i in range(len(num1)):\n        heapq.heappush(heap1, num1[i])\n\n    for i in range(len(num2)):\n        heapq.heappush(heap2, num2[i])\n\n    for i in range(len(num3)):\n        heapq.heappush(heap3, num3[i])\n\n    merged_list = []\n\n    while heap1 or heap2 or heap3:\n        if heap1 and heap2 and heap3:\n            if heap1[0] < heap2[0] and heap1[0] < heap3[0]:\n                merged_list.append(heapq.heappop(heap1))\n            elif heap2[0] < heap1[0] and heap2[0] < heap3[0]:\n                merged_list.append(heapq.heappop(heap2))\n            else:\n                merged_list.append(heapq.heappop(heap3))\n        elif heap1 and not heap2 and not heap3:\n            merged_list.append(heapq.heappop(heap1))\n        elif heap2 and not heap1 and not heap3:\n            merged_list.append(heapq.heappop(heap2))\n        else:\n            merged_list.append(heapq.heappop(heap3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    # merge the three lists into a single list\n    merged_list = heapq.merge(num1, num2, num3)\n    # convert the merged list to a list and return it\n    return list(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, heapq.heappop([num1, num2, num3]))\n    heapq.heappush(merged_list, heapq.heappop([num1, num2, num3]))\n    heapq.heappush(merged_list, heapq.heappop([num1, num2, num3]))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    merged_list += num1 + num2 + num3\n    heapq.heapify(merged_list)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 or num2 or num3:\n        if num1 and (not num2 or num1[0] < num2[0]):\n            merged_list.append(heapq.heappop(num1))\n        elif num2 and (not num3 or num2[0] < num3[0]):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    This function takes three sorted lists and merges them into a single sorted list.\n    \"\"\"\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            result.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            result.append(heapq.heappop(num2))\n        else:\n            result.append(heapq.heappop(num3))\n    \n    while num1:\n        result.append(heapq.heappop(num1))\n        \n    while num2:\n        result.append(heapq.heappop(num2))\n        \n    while num3:\n        result.append(heapq.heappop(num3))\n    \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    binary_list = [int(digit) for digit in s]\n    # Rotate the binary list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n    # Count the number of odd numbers in the rotated list\n    odd_count = sum(digit % 2 == 1 for digit in rotated_list)\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes in two parameters:\n    - s (string): A binary string\n    - n (int): The number of times to rotate the binary string\n\n    The function returns the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n\n    # Rotate the binary string n times\n    s = s[n:] + s[:n]\n\n    # Count the number of odd values in the rotated binary string\n    odd_count = 0\n    for digit in s:\n        if digit % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes a binary string and a number as input and returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    s = [int(i) for i in s]\n    # Rotate the list n times\n    s = s[n:] + s[:n]\n    # Count the number of odd values in the rotated list\n    count = sum(1 for i in s if i%2!=0)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n\n    # Rotate the digits n times\n    for i in range(n):\n        digits.append(digits.pop(0))\n\n    # Count the number of odd digits\n    odd_count = 0\n    for d in digits:\n        if d % 2 == 1:\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    s = s * n # rotate the binary string n times\n    count = 0\n    for i in s:\n        if int(i) % 2!= 0: # check if the digit is odd\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string s and an integer n as inputs. \n    It returns the number of numbers in the binary string with an odd value when rotating the string n times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    s_list = [int(i) for i in s]\n    \n    # Create a list of the original values of the binary string\n    original_list = s_list.copy()\n    \n    # Rotate the list n times\n    rotated_list = s_list[-n:] + s_list[:-n]\n    \n    # Count the number of odd values in the rotated list\n    count = sum(rotated_list)\n    \n    # Convert the original list back to a binary string and count the number of odd values\n    original_count = sum([int(i) for i in ''.join(str(i) for i in original_list)])\n    \n    # Return the difference between the counts\n    return count - original_count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): The binary string to be rotated.\n    n (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    # convert the string to a list of digits\n    digits = [int(d) for d in s]\n\n    # rotate the digits n times\n    rotated = digits[-n:] + digits[:-n]\n\n    # count the number of odd numbers\n    count = 0\n    for digit in rotated:\n        if digit % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the string to binary\n    binary_str = bin(int(s, 2))[2:]\n    # If the binary string has less than n digits, pad it with zeros at the beginning\n    if len(binary_str) < n:\n        binary_str = \"0\"*(n-len(binary_str)) + binary_str\n    # Rotate the binary string n times\n    rotated_str = binary_str[n:] + binary_str[:n]\n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for digit in rotated_str:\n        if int(digit) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to integer\n    num = int(s, 2)\n    \n    # Rotate the binary string n times\n    rotated_num = num << n\n    \n    # Convert rotated integer to binary string\n    rotated_s = bin(rotated_num)[2:]\n    \n    # Count the number of odd numbers in the rotated binary string\n    count = 0\n    for bit in rotated_s:\n        if bit == '1':\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s.rjust(n, s[0])  # Pad the binary string with leading zeros to make it n digits long\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            common_elements.add(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(result)"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = set(nestedlist[0]).intersection(*nestedlist)\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common.append(list(set(nestedlist[i]) & set(nestedlist[j])))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements in the nested list.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements and nestedlist[i][j] not in nestedlist[i+1:]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements found in all the sub-lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        common_elements.extend(set(sublist) & set(nestedlist[0]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as an input and returns a list of common elements in the nested list.\n    '''\n\n    # Create an empty list to store common elements\n    common_elements = []\n\n    # Traverse the nested list\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n\n            # Check if the current element is already present in the list of common elements\n            if nestedlist[i][j] not in common_elements:\n\n                # If not, add it to the list of common elements\n                common_elements.append(nestedlist[i][j])\n\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function takes a string as input and checks if it represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    This function takes a string as input and checks if it represents an integer or not.\n    It returns True if the string represents an integer, and False otherwise.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_dict_list(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d == {}:\n            return True\n        else:\n            return False"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    result = 0\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError(\"Tuple must contain positive integers only\")\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        raise TypeError('Input must be a tuple.')\n    if not all(isinstance(n, int) and n > 0 for n in nums):\n        raise ValueError('Tuple must contain positive integers only.')\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # If the element is a list, recursively call the function on that list\n        if type(test_list[i]) == list:\n            list_to_float(test_list[i])\n        # Otherwise, try to convert the element to a float\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].isnumeric():\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, list):\n            result.append(list_to_float(i))\n        elif isinstance(i, (int, float)):\n            result.append(float(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n\n    Parameters:\n    test_list (list): A list of lists to convert.\n\n    Returns:\n    list: A list with converted elements.\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            sublist = list_to_float(item)\n            result.append(sublist)\n        elif isinstance(item, str):\n            try:\n                converted_item = float(item)\n                result.append(converted_item)\n            except ValueError:\n                result.append(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for i in test_list:\n        if isinstance(i, (int, float)):\n            result_list.append(float(i))\n        elif isinstance(i, list):\n            result_list.append(list_to_float(i))\n        else:\n            result_list.append(i)\n    return result_list"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    This function takes a string as input and converts it to a list of strings split on the space character.\n\n    Args:\n    string (str): A string to be converted to a list of strings.\n\n    Returns:\n    list: A list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    This function takes a string as an argument and returns a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as input and returns the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) < 2:\n        return \"Array has less than 2 elements\"\n\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        mid = (i + j) // 2\n\n        if arr[mid] == arr[i]:\n            i += 1\n        elif arr[mid] == arr[j]:\n            j -= 1\n        else:\n            return \"Element found\"\n\n    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def search(arr):\n    n = len(arr)\n    if n < 2:\n        return -1\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return -1\n    for i in range(n):\n        if arr[i] == arr[n-1-i]:\n            return arr[i]\n    return -1\n\narr = [1, 2, 2, 3, 4, 5]\nprint(search(arr)) # Output: 3"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n\n    # Iterate through the array and count the frequency of each element\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for i in freq:\n        if freq[i] == 1:\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If the length of the array is 1, then it cannot have an element that appears only once.\n    if n == 1:\n        return None\n    # If the length of the array is 2, then one element must appear only once.\n    if n == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    # If the length of the array is greater than 2, then check the first and last elements.\n    if arr[0]!= arr[1] and arr[n-2]!= arr[n-1]:\n        # If the first and last elements are different, then the element that appears only once must be between them.\n        left = 2\n        right = n - 2\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == arr[mid+1]:\n                left = mid + 1\n            elif arr[mid] == arr[mid-1]:\n                right = mid - 1\n            else:\n                return arr[mid]\n    # If the first and last elements are the same, then the element that appears only once must be between them.\n    left = 0\n    right = n - 2\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid+1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid-1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n    # If the loop completes without finding the element, then there is no element that appears only once.\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array and returns the element that appears only once.\n    \"\"\"\n\n    # Initialize variables\n    i = 0\n    j = len(arr) - 1\n    result = None\n\n    # Loop through the array until we find the element that appears only once\n    while i < j:\n        mid = (i + j) // 2\n        count = 0\n\n        # Count the number of occurrences of the middle element in the array\n        for num in arr:\n            if num < mid:\n                count += 1\n            elif num > mid:\n                count -= 1\n\n        if count == 0:\n            result = mid\n            break\n        elif count > 0:\n            j = mid - 1\n        else:\n            i = mid + 1\n\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Loop through the array and update the frequency dictionary\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Loop through the frequency dictionary and find the element that appears only once\n    for i in freq:\n        if freq[i] == 1:\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def search(arr):\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    if n == 3:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[1] == arr[2]:\n            return None\n        else:\n            return arr[0]\n    if n % 2 == 0:\n        if arr[0] == arr[n//2] and arr[n//2] == arr[n-1]:\n            return None\n        else:\n            return arr[0]\n    if arr[0] == arr[n//2]:\n        return search(arr[n//2+1:])\n    else:\n        return search(arr[:n//2])"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    if n == 2:\n        if arr[0] == arr[1]:\n            return -1\n        else:\n            return arr[0]\n    \n    if n == 3:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[1] == arr[2]:\n            return -1\n        else:\n            return arr[0]\n    \n    left_sum = 0\n    right_sum = sum(arr[1:])\n    \n    for i in range(n):\n        left_sum += arr[i]\n        right_sum -= arr[i]\n        \n        if left_sum == right_sum:\n            return -1\n    \n    return arr[left_sum]"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def search(arr):\n    n = len(arr)\n    if n % 2!= 0:\n        return arr[n//2]\n    else:\n        return (arr[n//2] + arr[n//2 - 1]) / 2"
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None # array too small\n    \n    if n == 2:\n        return arr[0] if arr[0]!= arr[1] else None # only 2 elements\n    \n    # check for even length array\n    if n % 2 == 0:\n        for i in range(n):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n        return None # no element appears only once\n    \n    # check for odd length array\n    for i in range(n):\n        if arr[i] == arr[i+1] or arr[i] == arr[i+2]:\n            return arr[i]\n    return None # no element appears only once"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0]*lst[i][1]) * abs(lst[j][0]*lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    # iterate through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            # update the maximum product if a higher product is found\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    n = len(lst)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = abs(lst[i][0] * lst[i][1] * lst[j][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product of two numbers in each tuple.\n    \"\"\"\n    max_product = float('-inf')  # initialize maximum product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[i][1]) * abs(list1[j][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[i][1]) * abs(lst[j][0] * lst[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a limit number as input and returns the sum of all amicable numbers from 1 to that number.\n    \"\"\"\n    sum_amicable_numbers = 0\n    for i in range(1, limit+1):\n        div_sum = sum(list(filter(lambda x: x < i, range(1, i))))\n        if i == div_sum and i!= sum(list(filter(lambda x: x < div_sum, range(1, div_sum)))):\n            sum_amicable_numbers += i\n    return sum_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    for num in range(1, limit + 1):\n        divisor_sum = sum([i for i in range(1, num) if num % i == 0])\n        if num == divisor_sum and num!= 1:\n            sum_amicable_numbers += num\n    return sum_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        sum_of_divisors = sum([i for i in range(1, num) if num % i == 0])\n        if num!= sum_of_divisors and num == sum([i for i in range(1, sum_of_divisors + 1) if sum_of_divisors % i == 0]):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to the specified limit.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        # Check if num is amicable\n        div1 = sum(i for i in range(1, num) if num % i == 0)\n        div2 = sum(i for i in range(1, div1) if div1 % i == 0)\n        if div2 > 0 and div2!= num and div1!= num:\n            amicable_sum += num + div1\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        j = sum_proper_divisors(i)\n        if j!= i and i == sum_proper_divisors(j):\n            sum += i + j\n    return sum\n\ndef sum_proper_divisors(n):\n    '''\n    Calculate the sum of proper divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisors(n):\n    '''\n    Returns a list of all divisors of a number n.\n    '''\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        div1 = divisors(i)\n        div2 = divisors(sum(div1))\n        if sum(div1) == i and div2[0]!= i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum(div1))\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter the limit: \"))\nprint(amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisors(n):\n    div = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div.append(i)\n    return div\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        d1 = divisors(i)\n        d2 = divisors(d1[-1])\n        if d1[-1] == d2[-1]:\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(n):\n    '''\n    A function to check if a number is amicable or not.\n    '''\n    sum_divisors = sum(get_divisors(n))\n    if sum_divisors == n:\n        return False\n    else:\n        return n == get_divisor_sum(sum_divisors)\n\ndef get_divisors(n):\n    '''\n    A function to get all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return divisors\n\ndef get_divisor_sum(n):\n    '''\n    A function to get the sum of all divisors of a number.\n    '''\n    return sum(get_divisors(n))"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisors(n):\n    \"\"\"\n    Returns a list of divisors of n, including 1 and n.\n    \"\"\"\n    divs = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n // i:\n                divs.append(n//i)\n    divs.sort()\n    return divs\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        if i == divisors(i)[-1]:\n            continue # ignore perfect numbers\n        j = divisors(i)[-1]\n        if i == divisors(j)[-1]:\n            amicable_sum += i + j\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    \n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    \n    for num in amicable_numbers:\n        sum += num\n    \n    return sum\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is amicable.\n    '''\n    divisors = get_divisors(num)\n    sum = sum(divisors)\n    if sum == num:\n        return True\n    elif sum > num:\n        return is_amicable(sum)\n    else:\n        return is_amicable(num - sum)\n\ndef get_divisors(num):\n    '''\n    Helper function to get the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a):\n    \"\"\"\n    This function takes in a complex number as input and returns the angle of the complex number in degrees.\n    \"\"\"\n    if isinstance(a, complex):\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return \"Input is not a complex number.\""
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Returns the angle of a complex number in degrees.\n    \"\"\"\n    return cmath.phase(a + b * 1j) / cmath.pi * 180"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n\na = input(\"Enter the real part of the complex number: \")\nb = input(\"Enter the imaginary part of the complex number: \")\n\nprint(\"The angle of the complex number\", complex(a,b),\"is\",angle_complex(a,b),\"radians.\")"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return round(cmath.phase(a + b), 2)"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b)"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_length:\n                max_length = diff\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    curr_length = 0\n    prev = string[0]\n\n    for i in range(1, n):\n        if string[i] == prev:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n            prev = string[i]\n\n    if curr_length > max_length:\n        max_length = curr_length\n\n    return max_length - 1  # Subtract 1 to account for the last character that is not included in the sub-string."
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    This function takes a binary string as input and returns the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_str = string[i:j]\n            zero_count = sub_str.count('0')\n            one_count = sub_str.count('1')\n            length = abs(zero_count - one_count)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_length = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            length = abs(count_0 - count_1)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_length(string): \n    max_length = 0\n    current_length = 0\n    for i in range(len(string)): \n        if string[i] == \"0\": \n            current_length += 1\n            if current_length > max_length: \n                max_length = current_length \n        else: \n            current_length = 0\n    return max_length "
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_length(string):\n    n = len(string)\n    max_length = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = string[i:j]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            length = abs(count_0 - count_1)\n            max_length = max(max_length, length)\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(zeros - ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # finding the smaller number\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n\n    # finding the sum of common divisors\n    sum_of_divisors = 0\n    for i in range(1, smaller+1):\n        if (a % i == 0) and (b % i == 0):\n            sum_of_divisors += i\n\n    return sum_of_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the smallest number between a and b\n    smallest = min(a, b)\n\n    # Find the largest number between a and b\n    largest = max(a, b)\n\n    # Initialize the sum of common divisors to 0\n    sum_common_divisors = 0\n\n    # Loop over all numbers between smallest and largest (inclusive)\n    for i in range(smallest, largest+1):\n        # If both a and b are divisible by i, add i to the sum of common divisors\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the smaller number between a and b\n    small = a if a < b else b\n    \n    # Find the larger number between a and b\n    large = a if a > b else b\n    \n    # Initialize the sum of common divisors to 0\n    sum_of_divisors = 0\n    \n    # Iterate through all the numbers from 1 to the smaller number\n    for i in range(1, small+1):\n        \n        # Check if the smaller number is divisible by i\n        if small % i == 0:\n            \n            # Check if the larger number is divisible by i\n            if large % i == 0:\n                \n                # Add i to the sum of common divisors\n                sum_of_divisors += i\n                \n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b): \n        '''\n        Find the greatest common divisor of two numbers using Euclidean algorithm.\n        '''\n        if b == 0: \n            return a \n        else: \n            return gcd(b, a%b) \n    def lcm(a,b): \n        '''\n        Find the least common multiple of two numbers.\n        '''\n        return (a*b)//gcd(a,b) \n    return sum([i for i in range(1,gcd(a,b)+1) if gcd(i,a)==1 and gcd(i,b)==1])"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the smaller number\n    if a > b:\n        small = b\n    else:\n        small = a\n\n    # Initialize the sum of common divisors to 0\n    sum_of_divisors = 0\n\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, small+1):\n        # Check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            sum_of_divisors += i\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a_divisors = []\n    b_divisors = []\n    \n    for i in range(1, a+1):\n        if a % i == 0:\n            a_divisors.append(i)\n    \n    for i in range(1, b+1):\n        if b % i == 0:\n            b_divisors.append(i)\n            \n    common_divisors = []\n    \n    for divisor in a_divisors:\n        if divisor in b_divisors:\n            common_divisors.append(divisor)\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def gcd(a, b):\n    \"\"\"\n    This function finds the GCD of two numbers using Euclid's algorithm.\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    \"\"\"\n    This function finds the LCM of two numbers.\n    \"\"\"\n    return (a*b) // gcd(a, b)\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two numbers.\n    \"\"\"\n    lcm_ab = lcm(a, b)\n    gcd_ab = gcd(a, b)\n    count = 0\n    for i in range(1, gcd_ab+1):\n        if lcm_ab % i == 0 and gcd(i, lcm_ab//i) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the maximum number\n    max_num = max(a, b)\n\n    # Finding the minimum number\n    min_num = min(a, b)\n\n    # Finding the sum of common divisors\n    sum_common_divisors = 0\n\n    # Loop through the range of numbers from min_num to max_num\n    for num in range(min_num, max_num+1):\n\n        # Check if num is a divisor of both a and b\n        if a % num == 0 and b % num == 0:\n\n            # Add the common divisor to the sum\n            sum_common_divisors += num\n\n    # Return the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integers as inputs and returns their product.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    This function takes two integers as input and returns their product.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments: n (an integer representing the maximum length of words to be returned) and str (a string representing a list of words separated by commas).\n    \n    The function returns a list of words that are longer than n characters.\n    '''\n    \n    # split the string into a list of words\n    words = str.split(\",\")\n    \n    # create a new list to store the long words\n    long_words_list = []\n    \n    # iterate through the words and check if they are longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n            \n    # return the long words list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments:\n    n: An integer representing the maximum number of characters a word can have.\n    str: A string containing multiple words separated by space.\n    \n    The function returns a list of words that are longer than n characters.\n    '''\n\n    # Split the string into a list of words\n    words_list = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list and check if it's longer than n characters\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    \"\"\"\n    This function takes two arguments:\n    n: an integer that specifies the maximum length of the words to be found\n    str: a string containing a list of words separated by whitespace\n    \n    The function returns a list of words that are longer than n characters.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    This function takes two arguments, n and str.\n    n: an integer specifying the maximum number of characters a word can have.\n    str: a list of strings, where each string is a word.\n    \n    The function returns a list of words that are longer than n characters.\n    '''\n\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes in a square matrix as an argument and returns True if the matrix is a magic square,\n    and False otherwise.\n\n    A magic square is a square matrix of size n x n, where the sum of each row, column, and the diagonal\n    is the same.\n\n    We first check whether the size of the matrix is odd, because a magic square must have an odd number of rows\n    and columns. If the size of the matrix is even, we cannot create a magic square, so we return False.\n\n    If the size of the matrix is odd, we create a new matrix of size n x n, where each element in the new matrix\n    is the sum of the corresponding element in the original matrix and its neighboring elements (up, down, left, and right).\n    We then check whether the sum of each row, column, and diagonal is the same as the elements in the original matrix.\n\n    If all of these conditions are met, we return True. Otherwise, we return False.\n\n    '''\n\n    # Check if the matrix is odd-sized\n    n = len(my_matrix)\n    if n % 2 == 0:\n        return False\n\n    # Create a new matrix where each element is the sum of the corresponding element in the original matrix\n    # and its neighboring elements\n    new_matrix = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            # Get the sum of the corresponding element in the original matrix and its neighboring elements\n            sum = my_matrix[i][j]\n            if i > 0:\n                sum += new_matrix[i-1][j]\n            if j > 0:\n                sum += new_matrix[i][j-1]\n            if i > 0 and j > 0:\n                sum -= new_matrix[i-1][j-1]\n\n            # Set the new element in the new matrix to the sum\n            new_matrix[i][j] = sum\n\n    # Check if the sum of each row, column, and diagonal is the same as the elements in the original matrix\n    for i in range(n):\n        # Check the row sum\n        row_sum = sum(new_matrix[i])\n        if row_sum!= my_matrix[i][0]*n:\n            return False\n\n        # Check the column sum\n        col_sum = sum([new_matrix[j][i] for j in range(n)])\n        if col_sum!= my_matrix[0][i]*n:\n            return False\n\n    # Check the diagonal sum\n    diag_sum1 = sum([new_matrix[i][i] for i in range(n)])\n    diag_sum2 = sum([new_matrix[i][n-i-1] for i in range(n)])\n    if diag_sum1!= my_matrix[0][0]*n or diag_sum2!= my_matrix[0][0]*n:\n        return False\n\n    # If all conditions are met, the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check if row and column sums are all the same\n    if row_sums!= col_sums:\n        return False\n    \n    # Calculate the sum of the diagonals\n    diagonal_1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if the diagonals are all the same\n    if diagonal_1!= diagonal_2:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Calculate the sum of the antidiagonal\n    antidiagonal_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    # Check if the sums are equal\n    if diagonal_sum!= antidiagonal_sum:\n        return False\n    \n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    col_sums = [sum(my_matrix[j][i] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    \n    # Check if each row and column has the same sum\n    if row_sums!= col_sums:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Check if the given matrix is a magic square.\n\n    A magic square is a square grid with numbers from 1 to n^2 such that \n    the sum of the numbers in each row, column and diagonal is the same.\n\n    Args:\n    my_matrix (list of lists): The matrix to check.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    '''\n\n    n = len(my_matrix)\n\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # Calculate the sum of the diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the anti-diagonal\n    anti_diag_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n\n    # Check if the sums match the magic number\n    if row_sum == diag_sum == anti_diag_sum:\n        for i in range(1, n):\n            # Calculate the sum of each row and column\n            row_sum = sum(my_matrix[i])\n            col_sum = sum(my_matrix[j][i] for j in range(n))\n            if row_sum!= n*i or col_sum!= n*i:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Test whether a matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check whether each sum is equal to the magic number\n    magic_number = sum(range(1, len(my_matrix) ** 2 + 1))\n    return all(row_sum == col_sum == magic_number for row_sum, col_sum in zip(row_sums, col_sums))"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Check if a matrix is a magic square.\n    A magic square is a square matrix of size n whose elements add up to \n    the same value (the sum of each row, column, and diagonal), and where\n    each element is the sum of the indexes of its row and column.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2  # calculate the expected sum of the matrix\n    \n    # check if each row, column, and diagonal adds up to the expected sum\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(row[i] for row in my_matrix)\n        if row_sum!= magic_sum or col_sum!= magic_sum:\n            return False\n        \n        # check the diagonal\n        diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n        if diagonal_sum!= magic_sum:\n            return False\n        \n        # check the other diagonal (if n is odd)\n        if n % 2 == 1:\n            j = n - i - 1\n            other_diagonal_sum = sum(my_matrix[i][j] for i in range(n))\n            if other_diagonal_sum!= magic_sum:\n                return False\n    \n    return True  # if all checks passed, the matrix is a magic square"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    n = len(my_matrix)\n    # Check if the size is odd\n    if n % 2 == 0:\n        return False\n    # Initialize the sum of each row, column and diagonal\n    row_sum = [0] * n\n    col_sum = [0] * n\n    diag_sum_left = 0\n    diag_sum_right = 0\n    # Calculate the sum of each row, column and diagonal\n    for i in range(n):\n        for j in range(n):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n            if i == j:\n                diag_sum_left += my_matrix[i][j]\n            if i + j == n-1:\n                diag_sum_right += my_matrix[i][j]\n    # Check if the sum of each row, column and diagonal is the same\n    if row_sum!= col_sum or diag_sum_left!= diag_sum_right:\n        return False\n    # Check if the sum of each row and column is equal to n(n^2+1)/2\n    for i in range(n):\n        if row_sum[i]!= n*(n**2+1)//2 or col_sum[i]!= n*(n**2+1)//2:\n            return False\n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    \n    # Check if the sum of each row is the same as the sum of first row\n    for i in range(1, n):\n        if sum(my_matrix[i])!= row_sum:\n            return False\n    \n    # Calculate the sum of the first column\n    col_sum = sum(my_matrix[i][0] for i in range(n))\n    \n    # Check if the sum of each column is the same as the sum of first column\n    for i in range(1, n):\n        if sum(my_matrix[i][j] for j in range(n))!= col_sum:\n            return False\n    \n    # Calculate the sum of the diagonal\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    \n    # Check if the sum of the diagonal is the same as the sum of first row\n    if diag_sum!= row_sum:\n        return False\n    \n    # Calculate the sum of the anti-diagonal\n    antidiag_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # Check if the sum of the anti-diagonal is the same as the sum of first row\n    if antidiag_sum!= row_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = (n * (n * n + 1)) // 2\n\n    # Check the rows\n    for row in my_matrix:\n        if sum(row)!= magic_sum:\n            return False\n\n    # Check the columns\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check the diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += my_matrix[i][i]\n        diagonal_sum2 += my_matrix[i][n - i - 1]\n    if diagonal_sum1!= magic_sum or diagonal_sum2!= magic_sum:\n        return False\n\n    # If all the checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the magic sum\n    magic_sum = (n * (n*n + 1)) // 2\n    \n    # Calculate the sum of each row, column and diagonal\n    row_sums = [sum(my_matrix[i]) for i in range(n)]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # Check if the sum of each row, column and diagonal matches the magic sum\n    return (row_sums == col_sums == [magic_sum]*n and\n            diagonal_sum1 == diagonal_sum2 == magic_sum)"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)  # default value of int is 0\n    \n    for num in nums:\n        count[num] += 1\n    \n    max_count = 0\n    result = None\n    \n    for key, value in count.items():\n        if value > max_count:\n            max_count = value\n            result = key\n    \n    return result"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_freq = 0\n    max_num = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Initialize the maximum frequency and the corresponding element\n    max_freq = 0\n    max_elem = None\n    \n    # Iterate over the dictionary and find the element with maximum frequency\n    for elem, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_elem = elem\n    \n    # Return the element with maximum frequency\n    return max_elem"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for item in nums:\n        freq_dict[item] += 1\n        \n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [k for k, v in freq.items() if v == max_freq]\n    return max_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # create a dictionary with default value 0\n    for num in nums:\n        freq[num] += 1  # increment frequency count for each element in the list\n    \n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for item in nums:\n        freq_dict[item] += 1\n        \n    # Find the item with maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [i for i, char in enumerate(str1) if char.lower() in vowels]\n    reversed_vowels = [str1[i] for i in vowel_indices[::-1] if str1[i].lower()!= 'y']\n    non_vowel_indices = [i for i, char in enumerate(str1) if char.lower() not in vowels]\n    reversed_non_vowels = [str1[i] for i in non_vowel_indices[::-1]]\n    reversed_str = ''.join(reversed_vowels + reversed_non_vowels)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    result = \"\"\n\n    # Create a list of all vowels in the string\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n\n    # Reverse the vowels in the list and add them to the result string\n    for vowel in vowels_list[::-1]:\n        result += vowel\n\n    # Reverse the non-vowels of the original string and add them to the result string\n    for char in str1:\n        if char not in vowels:\n            result += char\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_indices.reverse()\n    result = list(str1)\n    for i in vowel_indices:\n        result[i], result[i+1] = result[i+1], result[i]\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = [char for char in str1 if char in vowels]\n    vowels_reversed_list = vowels_list[::-1]\n    non_vowels_list = [char for char in str1 if char not in vowels]\n    non_vowels_reversed_list = non_vowels_list[::-1]\n    reversed_str = \"\".join(vowels_reversed_list + non_vowels_reversed_list)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_lst = []\n    for char in str1:\n        if char in vowels:\n            vowels_lst.append(char)\n    vowels_lst.reverse()\n    new_str = ''\n    i = 0\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_lst[i]\n            i += 1\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = vowel_indices[::-1]\n    result = \"\"\n    for i, char in enumerate(str1):\n        if i in vowel_indices:\n            result += char\n        elif i in reversed_vowels:\n            result += char[::-1]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [char for i, char in enumerate(str1) if i in vowel_indices and char not in 'yY']\n    return ''.join(reversed_vowels[::-1]) + ''.join(char for i, char in enumerate(str1) if i not in vowel_indices)"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    vowels_indices = []\n    \n    # Find all the vowels and their indices in the given string\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n            vowels_indices.append(i)\n    \n    # Reverse the vowels and replace them in the given string\n    for i in range(len(vowels_list)):\n        if vowels_list[i] in vowels[:5]:\n            str1 = str1[:vowels_indices[i]] + vowels_list[i] + str1[vowels_indices[i]+1:]\n        else:\n            str1 = str1[:vowels_indices[i]+1] + vowels_list[i] + str1[vowels_indices[i]+2:]\n    \n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_found = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_found.append(i)\n    if len(vowels_found) == 0:\n        return str1\n    for i in range(len(vowels_found)//2):\n        j = len(vowels_found)-i-1\n        str1 = str1[:vowels_found[i]] + str1[vowels_found[i]].swapcase() + str1[vowels_found[i]+1:]\n        str1 = str1[:vowels_found[j]] + str1[vowels_found[j]].swapcase() + str1[vowels_found[j]+1:]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n\n    vowel_indices.reverse()\n\n    new_str = list(str1)\n    for i in vowel_indices:\n        new_str[i] = str1[i]\n    return \"\".join(new_str)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an argument and returns a string.\n    '''\n    # Using join() method to convert tuple to string\n    string = ''.join(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    This function takes a tuple as an argument and returns its string representation.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''.join(tup1)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    This function converts a tuple to a string.\n    '''\n    return \"\".join(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the negative numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of negative numbers from a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6*count\n        count += 1\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2*n - 1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # The nth hexagonal number is given by:\n    # H(n) = n(2n-1)\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        hex_num = i*(2*i - 1)\n        count += 1\n        if count == n:\n            return hex_num\n        i += 1"
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 6 * count\n        count += 1\n    return num"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    \n    return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        elif num!= 0:\n            non_zeroes += 1\n    \n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    if count_zero == 0:\n        return None # Return None if there are no zeroes in the array\n    return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    \n    return count_zero / count_non_zero if count_non_zero > 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    total = len(nums)\n    return zeroes / total"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n\n    return zeroes / non_zeroes if non_zeroes > 0 else \"Undefined\""
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    \n    non_zeroes = len(nums) - zeroes\n    \n    if non_zeroes == 0:\n        ratio = 0\n    else:\n        ratio = zeroes / non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the number to binary string\n    binary_string = bin(n)[2:]\n    # Check if the number can be represented as sum of non-zero powers of 2\n    return '0' not in binary_string and '1' in binary_string"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is power of 2\n    if n & (n-1) == 0: \n        return True\n    \n    # Calculate sum of powers of 2\n    sum_of_powers_of_two = 0\n    while n > 0: \n        sum_of_powers_of_two += (n & -n)\n        n -= (n & -n)\n    \n    return n == 0"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether a number can be represented as sum of non-zero powers of 2.\n    \"\"\"\n    if n == 0:\n        return True\n    \n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # Check if n can be expressed as sum of powers of 2\n    for i in range(1, n+1):\n        if (n-i) & (n-i-1) == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as the sum of non-zero powers of 2 or not.\n    \"\"\"\n    power_of_two = 1\n    while power_of_two <= n:\n        if n == 0:\n            return True\n        if n < 0:\n            return False\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n -= power_of_two\n        power_of_two *= 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer as input and returns True if it can be represented as the sum of non-zero powers of 2, else it returns False.\n    \"\"\"\n    if n == 0: \n        return False\n    \n    for i in range(1, int(n**0.5) + 1): \n        if n % (2**i) == 0: \n            if (2**i) == n: \n                return True\n            else: \n                return is_Sum_Of_Powers_Of_Two(n - 2**i)\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer 'n' as input and returns True if the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # If n is a power of 2, then return True\n    if n & (n - 1) == 0 and n!= 0:\n        return True\n    \n    # If n is not a power of 2, then find all non-zero powers of 2 in n\n    power_of_2 = 1\n    non_zero_powers = []\n    while power_of_2 <= n:\n        if n & power_of_2!= 0:\n            non_zero_powers.append(power_of_2)\n        power_of_2 <<= 1\n    \n    # Check if the sum of non-zero powers of 2 is equal to n\n    if sum(non_zero_powers) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    powers_of_two = 0\n    while n > 0:\n        if n & 1:\n            powers_of_two += 1\n            if powers_of_two > 1:\n                return False\n        n >>= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n    # Initialize a variable to keep track of the sum\n    sum_of_powers = 0\n    # Iterate through each bit in the binary representation\n    for bit in binary_num:\n        # If the bit is 1, add the power of 2 corresponding to the index to the sum\n        if bit == '1':\n            sum_of_powers += 2**(len(binary_num)-1-binary_num.index(bit))\n    # If the sum is equal to the given number, return True, else return False\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    i = 0\n    while 2**i <= n:\n        if n - 2**i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # Initialize the variable to keep track of sum of powers of 2\n    sum_of_powers = 0\n    \n    # Loop through all the powers of 2 from 0 to the number of bits in the number\n    for i in range(n.bit_length()):\n        \n        # Check if the ith bit of the number is set\n        if (n & (1 << i)):\n            \n            # If the ith bit is set, add the ith power of 2 to the sum\n            sum_of_powers += (1 << i)\n            \n            # Check if the sum exceeds the given number\n            if sum_of_powers > n:\n                return False\n    \n    # If the sum is equal to the given number, return True\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n\nprint(\"The circumference of a circle with radius 3 is:\", circle_circumference(3))"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes in a list of lists and flattens it into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened list\n    flat_set = set()\n    \n    # Iterate through each list in the test_list\n    for lst in test_list:\n        # If the list is empty, skip it\n        if not lst:\n            continue\n        \n        # If the list has only one element, add it to the set\n        if len(lst) == 1:\n            flat_set.add(lst[0])\n            continue\n        \n        # If the list has multiple elements, add each element to the set\n        for elem in lst:\n            flat_set.add(elem)\n    \n    # Convert the set to a list and return it\n    return list(flat_set)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Initialize an empty list to store the flattened numbers\n    flat_list = []\n    \n    # Iterate over each element of the outer list\n    for element in test_list:\n        # If the element is a list, recursively call the function on it and extend the result to the flat list\n        if type(element) == list:\n            flat_list.extend(extract_singly(element))\n        # If the element is a number, append it to the flat list\n        else:\n            flat_list.append(element)\n    \n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            flat_list.extend(sublist)\n        else:\n            flat_list.append(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    This function takes a list of lists and returns a flattened list of all the numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a single set of numbers.\n    '''\n    numbers = set()\n    for sublist in test_list:\n        numbers.update(sublist)\n    return numbers"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for elem in test_list:\n        if isinstance(elem, list):\n            flat_list.extend(extract_singly(elem))\n        else:\n            flat_list.append(elem)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if type(i) == list:\n            result.extend(extract_singly(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if isinstance(test_list, list):\n        result = []\n        for item in test_list:\n            result.extend(extract_singly(item))\n        return result\n    else:\n        return [test_list]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Initialize the length of the list\n    n = len(nums)\n    \n    # Start with the whole list\n    curr_size = n\n    \n    # Iterate through the list while the current size is greater than 1\n    while curr_size > 1:\n        # Find the index of the maximum element in the current list\n        max_idx = nums.index(max(nums[:curr_size]))\n        \n        # If the maximum element is not at the end of the list, flip it to the end\n        if max_idx!= curr_size-1:\n            # Create a pancake from the maximum element to the end of the list\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n            \n            # Flip the pancake to move the maximum element to the end of the list\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        \n        # Reduce the current size by 1\n        curr_size -= 1\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    # Reverse the entire list\n    for i in range(n // 2):\n        nums = reverse(nums, i)\n        \n    # One by one, reduce the list size by one\n    for i in range(n - 1, 0, -1):\n        # Find the index of the maximum element in the remaining unsorted list\n        max_idx = nums.index(max(nums[:i + 1]))\n        \n        # Move the maximum element to the beginning of the unsorted list\n        nums = reverse(nums, max_idx)\n        \n        # Move the remaining elements to their correct positions\n        nums = reverse(nums, i)\n        \n    return nums\n    \ndef reverse(nums, k):\n    \"\"\"\n    Reverses the first k elements of a list.\n    \"\"\"\n    left = nums[:k + 1]\n    right = nums[k + 1:]\n    return right + left[::-1]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of numbers using the pancake sort algorithm.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Loop through all indices of the list\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # If the maximum element is not already at the end of the list, move it to the end\n        if max_index!= n-i-1:\n            # Move the maximum element to the end of the list\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            # Reverse the list from the beginning to the maximum element\n            nums[:i+1] = nums[:i+1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Initialize a list of pancake sizes\n    pancakes = list(range(n, 1, -1))\n    # Loop over each pancake size\n    for size in pancakes:\n        # Find the index of the maximum element in the current pancake\n        max_index = size - 1\n        for i in range(max_index, -1, -1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # Reverse the pancake to bring the maximum element to the front\n        for i in range(max_index + 1):\n            nums[i], nums[max_index + 1 - i] = nums[max_index + 1 - i], nums[i]\n        # Reverse the entire list to move the pancake to its final position\n        for i in range(size // 2):\n            nums[i], nums[size - i - 1] = nums[size - i - 1], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the largest element in the unsorted part of the list.\n        max_index = i + nums[i:].index(max(nums[i:]))\n        # Flip the sublist containing the largest element.\n        nums[:max_index+1] = nums[:max_index+1][::-1]\n        # Flip the whole list.\n        nums = nums[::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # find the maximum element in the list\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_index]:\n            max_index = i\n\n    # flip the maximum element to the end of the list\n    if max_index!= len(nums) - 1:\n        nums = flip(nums, max_index)\n\n    # flip the maximum element again to the front of the list\n    if max_index!= 0:\n        nums = flip(nums, len(nums) - 1)\n\n    # sort the list from the beginning to the second last element\n    for i in range(len(nums) - 1):\n        nums = flip(nums, i + 1)\n\n    return nums\n\n\ndef flip(nums, index):\n    \"\"\"\n    This function flips the elements of the list from the start to the given index.\n    \"\"\"\n\n    # reverse the first half of the list\n    left = nums[:index + 1]\n    left.reverse()\n\n    # reverse the second half of the list\n    right = nums[index + 1:]\n    right.reverse()\n\n    # concatenate the reversed halves and return the result\n    return left + right"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted portion of the list\n        max_index = nums.index(max(nums[:n-i]))\n        \n        # Move the maximum element to the end of the list\n        nums[max_index], nums[n-i-1] = nums[n-i-1], nums[max_index]\n        \n        # Reverse the unsorted portion of the list\n        nums[:n-i-1] = nums[:n-i-1][::-1]"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n\n    Args:\n        nums (list): List of elements to be sorted.\n\n    Returns:\n        list: The sorted list.\n    \"\"\"\n\n    n = len(nums)\n    # Starting from the maximum index, we apply pancake sorting algorithm\n    for i in range(n, 1, -1):\n        # Find index of the maximum element in the unsorted part of the list\n        max_index = max(range(i), key=lambda j: nums[j])\n        # If the maximum element is not at the end of the list, move it to the end\n        if max_index!= i-1:\n            # Swap the maximum element with the last element of the unsorted part of the list\n            nums[max_index], nums[i-1] = nums[i-1], nums[max_index]\n            # Reverse the first i-1 elements of the list\n            nums[:i-1] = nums[:i-1][::-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Start by iterating over the list from the beginning\n    for i in range(n):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[i:]))\n        # If the index is different from i, we need to flip the elements in the slice [i:max_index+1]\n        if max_index!= i:\n            # Flip the elements in the slice [i:max_index+1] using a helper function\n            flip(nums, i, max_index)\n            # After the flip, the maximum element is at the end of the list, so we need to flip it again to put it in its final position\n            flip(nums, i, n-i-1)\n    return nums\n\ndef flip(nums, start, end):\n    \"\"\"\n    Helper function to flip a slice of a list.\n    \"\"\"\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Pancake sort algorithm implementation in Python.\n    '''\n    # Find the maximum element in the list\n    max_idx = 0\n    for i in range(len(nums)):\n        if nums[i] > nums[max_idx]:\n            max_idx = i\n    \n    # Flip the maximum element to the end of the list\n    if max_idx!= len(nums)-1:\n        nums = flip(nums, max_idx)\n        nums = flip(nums, len(nums)-1)\n    \n    # Repeat the above steps until the entire list is sorted\n    for i in range(len(nums)-1, 1, -1):\n        # Find the maximum element in the unsorted portion of the list\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Flip the maximum element to the end of the list\n        if max_idx!= i-1:\n            nums = flip(nums, max_idx)\n            nums = flip(nums, i-1)\n    \n    return nums\n\n\ndef flip(nums, k):\n    '''\n    Function to reverse a sublist of the input list.\n    '''\n    left = 0\n    right = k\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n    \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    \n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n            \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as an input and returns the number of lists present in the tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in it.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = abs(arr[1] - arr[0])\n    min_val = min(arr[0], arr[1])\n    max_val = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - min_val)\n        if diff > max_diff:\n            max_diff = diff\n        diff = abs(arr[i] - max_val)\n        if diff > max_diff:\n            max_diff = diff\n        \n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[j] - arr[i]) > max_diff:\n                max_diff = abs(arr[j] - arr[i])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_max = max(arr)\n    arr_min = min(arr)\n    diff = abs(arr_max - arr_min)\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function returns the maximum absolute difference between any two elements in the given array.\n    \"\"\"\n    arr_min = min(arr) # find the minimum value in the array\n    arr_max = max(arr) # find the maximum value in the array\n    arr_range = arr_max - arr_min # find the range of the array\n    \n    # find the absolute difference between any two elements in the array\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(1, len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = arr[1] - arr[0]\n    min_element = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] - min_element > max_diff:\n            max_diff = arr[i] - min_element\n        \n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (a*x) % n == b:\n            return (x, n//a)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a!= 0 and b!= 0:\n        x = n // a\n        y = n // b\n        if x * a + y * b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    if b == 0:\n        if n % a == 0:\n            return (0, n//a)\n        else:\n            return None\n    \n    d = n % (2*a)\n    if d == 0:\n        x = (n//(2*a))\n        y = (n//(2*a))\n    elif a > b:\n        x = (n//a) - (b//a)\n        y = (n//b) + (a//b)\n    else:\n        x = (n//b) - (a//b)\n        y = (n//a) + (b//a)\n    \n    if x*a + y*b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n+1):\n        if x*a % n == 1:\n            y = (n-x*a) // b\n            return (x,y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    if n % a == 0 and n % b == 0:\n        return None\n    else:\n        x = n // b\n        y = n - x * b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        if x * b == n:\n            return (x, n // b)\n    for y in range(n + 1):\n        if y * a == n:\n            return (n // a, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n+1):\n        if (i*a + n//b)*b == n:\n            x = i\n            y = n//b\n            return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function removes all elements from list1 that are present in list2.\n    \"\"\"\n    return [elem for elem in list1 if elem not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes two lists as input, and removes all elements present in the second list from the first list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function removes all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculates the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return sum(range(n // 2 + 1)) * 2 - sum(range(n + 1, 2 * (n // 2) + 1, 2))"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, \n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n//2 + 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Calculates the sum of (n-2*i) from i=0 to n//2, which is n + (n-2) + (n-4) +... + (n-x),\n    where x is the largest multiple of 2 less than or equal to n.\n    '''\n    total = 0\n    i = 0\n    while i <= n//2:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    This function calculates the sum of a geometric series.\n    \"\"\"\n    return n * (n - 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of a series (n - 2 * i) from i = 0 to n // 2.\n    \"\"\"\n    if n % 2 == 0:\n        n -= 1\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    return (n*(n-1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Calculates the sum of a series using the formula (n - 2*i) from i=0 to n // 2, \n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum variable\n    sum = n\n\n    # Loop through the values of i from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # Add the term (n - 2*i) to the sum\n        sum += (n - 2 * i)\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using the formula A = (n * s^2) / (4 * tan(pi / n))\n    area = (s ** 2 * l) / (4 * tan(pi / s))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    return 0.5 * s * apothem\n"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * s * s * tan(pi / s)) / (tan(pi / s) - 1)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s ** 2) / tan(pi / s)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem of the polygon using the formula: apothem = (s^2 / (4 * tan(pi/s)))\n    apothem = (s**2 / (4 * tan(pi/s)))\n    # calculate the area of the polygon using the formula: area = (0.5 * apothem * l) * s\n    area = (0.5 * apothem * l) * s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem of the polygon\n    a = l / (2 * tan(pi / s))\n\n    # calculate the area using the formula A = (s(s-3))/2 * a^2\n    area = (s * (s - 3)) / 2 * a ** 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the apothem of the polygon\n    a = l / (2 * tan(pi / s))\n    \n    # Calculate the area using the formula A = (0.25 * pi * s * a)\n    area = (0.25 * pi * s * a)\n    \n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s / tan(pi/s)"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / (2 * tan(pi / s))\n    return 0.5 * s * apothem"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find all divisors of n\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    # Check if the sum of divisors are equal to n\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                return True\n    \n    # If no such pair of divisors exists, return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is equal to n.\n    '''\n    # Finding the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i == n//i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n    # Checking if the sum of the divisors is equal to n\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n    return (sum(divisors) == n)"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    div_list.remove(n)\n    div_sum = sum(div_list)\n    return div_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i!= n // i:\n                return True\n            elif i == 1:\n                return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i == n//i:\n                divisor_sum += i\n            else:\n                divisor_sum += i + n//i\n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    \n    # Find the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum1 += i\n            if i!= n/i:\n                sum2 += n/i\n    \n    # Compare the sums\n    if sum1 == sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    div_list = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_list.append(i)\n    div_sum = sum(div_list)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n            div_count += 1\n    if div_sum == 2*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum1 += i\n    for j in range(1, int(math.sqrt(n))+1):\n        if n % j == 0:\n            if n//j == j:\n                sum2 += j\n            else:\n                sum2 += j\n                sum2 += n//j\n    if sum1 == sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the count of characters at each position in the English alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = {i:0 for i in range(26)}\n    \n    # convert both the input string and the alphabet to lowercase to make it case-insensitive\n    str1 = str1.lower()\n    alphabet = alphabet.lower()\n    \n    # iterate over the input string and count the number of characters at each position in the English alphabet\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            char_count[alphabet.index(str1[i])] += 1\n    \n    # return the count of characters at each position in the English alphabet as a dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = [0] * 26\n    \n    for i in range(len(str1)): \n        if str1[i].isalpha(): \n            index = alphabet.index(str1[i].lower())\n            result[index] += 1\n    \n    return result"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the character counts\n    char_counts = {}\n    # loop through each character in the string\n    for i, char in enumerate(str1):\n        # convert the character to lowercase to ignore case sensitivity\n        char = char.lower()\n        # if the character is an alphabet, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char not in char_counts:\n                char_counts[char] = 1\n            else:\n                char_counts[char] += 1\n    # return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the count of characters in each position\n    char_count = {}\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the character is a letter in the English alphabet\n        if str1[i].isalpha():\n            # check if the character already exists in the dictionary\n            if str1[i] in char_count:\n                # increment the count for the character in the current position\n                char_count[str1[i]].append(i)\n            else:\n                # add the character to the dictionary with a count of 1 for the current position\n                char_count[str1[i]] = [i]\n    # count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for key in char_count:\n        count += len(char_count[key])\n    # return the count of characters that occur at the same position as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    count = [0] * 26\n    for char in str1.lower():\n        if 'a' <= char <= 'z':\n            count[ord(char) - ord('a')] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n\n    # create an empty list to store the character counts for each position in the alphabet\n    char_counts = [0] * 26\n\n    # loop through each character in the string and increment the count for the position in the alphabet\n    for char in str1:\n        if char.isalpha():\n            # get the index of the character in the alphabet\n            index = ord(char) - ord('a')\n            # increment the count for the character at that position\n            char_counts[index] += 1\n\n    # loop through the character counts and count the number of characters that occur at the same position as the English alphabet\n    same_position_count = 0\n    for count in char_counts:\n        if count > 0:\n            same_position_count += 1\n\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char)\n            count[index] += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and returns a dictionary containing the number of characters in the string that occur at the same position as the English alphabet.\n    '''\n\n    # Define a dictionary to store the count of characters at each position\n    count = {}\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n\n        # If the character is a letter (a-z)\n        if str1[i].isalpha():\n\n            # Increment the count of that character at the current position\n            if str1[i] in count:\n                count[str1[i]].append(i)\n            else:\n                count[str1[i]] = [i]\n\n    # Return the dictionary of character counts\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Creating a dictionary to store the count of each character in the string\n    char_dict = {}\n    for i in range(len(str1)):\n        char = str1[i]\n        if char.isalpha():\n            # Converting the character to lowercase to ignore case sensitivity\n            char = char.lower()\n            if char.isascii():\n                # If the character is an ascii character\n                if char in char_dict:\n                    char_dict[char] += 1\n                else:\n                    char_dict[char] = 1\n    # Counting the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for i in range(len(char_dict)):\n        if chr(i + 97) in char_dict:\n            count += char_dict[chr(i + 97)]\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26 # initialize a list of 26 zeros to count characters at each position\n    for i in range(len(str1)): \n        for j in range(len(alpha)): \n            if str1[i].lower() == alpha[j]: # check if character matches alphabet letter\n                count[j] += 1 # increment count for that position\n    return count # return the count list"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list of integers as input and returns the count of pairs of integers in the list\n    that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the current power of 2\n    power_of_2 = 1\n    \n    # Check if n is already a power of 2\n    while power_of_2 <= n:\n        power_of_2 *= 2\n        \n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power = power << 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the smallest power of 2 greater than or equal to n\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(len(bin(n))-2)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i < n:\n        i += 1\n    return 2**i"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list 'a' and a number 'x'.\n    It returns the number of times 'x' appears in the list 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list 'a' and a number 'x' as arguments.\n    It returns the number of occurrences of 'x' in the list 'a'.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes two arguments:\n    a: a list of integers\n    x: an integer to search for in the list\n    \n    It returns the number of occurrences of x in a.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(lst[m-1:n])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Return the sum of the numbers in the list `lst` within the range [m, n] inclusive.\n    \"\"\"\n    return sum(lst[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Returns the sum of the numbers in lst within the range [m, n], inclusive.\n    \"\"\"\n    return sum(lst[m-1:n])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through the range specified by m and n\n    for i in range(m, n+1):\n        # add the number at the current index to the sum\n        sum += list1[i]\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Returns the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    This function takes the length of a side of a pentagon as input and returns the perimeter of the pentagon.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = s.lower().count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    This function will take a string as an input and return the number of occurences of the string'std' in the input string.\n    '''\n    count = 0\n    if s.find('std')!= -1:\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the string'std' in a given string.\n    \"\"\"\n    count = s.lower().count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times the substring'std' appears in the given string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    start = 0\n    while True:\n        index = s.find(\"std\", start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of occurrences of the string'std' in the string.\n    '''\n    count = s.count('std')\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return False\n    \n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to hold the first data type\n    data_type = type(test_tuple[0])\n    \n    # loop through each element in the tuple and compare its data type with the first data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    # if all elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    \n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr[n//2+1:], n-(n//2), x)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n    j = n - 1\n\n    while i <= j:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        elif arr[j] == x:\n            count += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the index of the element x in the array\n    index = binary_search(arr, 0, n-1, x)\n    \n    # If index is -1, then x is not present in the array\n    if index == -1:\n        return False\n    \n    # If the element x is present at index i, then the element\n    # that occurs more than n/2 times must be present at index i-n/2\n    # or i+n/2\n    if index-n//2 >= 0 and arr[index-n//2] == x:\n        return True\n    elif index+n//2 < n and arr[index+n//2] == x:\n        return True\n    \n    # If none of the above conditions are true, then the element\n    # is not a majority element\n    return False\n\ndef binary_search(arr, low, high, x):\n    '''\n    This function performs a binary search on the given sorted array to find the index of the element x.\n    '''\n    # If the array is empty, return -1\n    if high < low:\n        return -1\n    \n    # Find the middle element of the array\n    mid = (low + high) // 2\n    \n    # If the middle element is equal to x, return its index\n    if arr[mid] == x:\n        return mid\n    \n    # If the middle element is greater than x, search in the left half of the array\n    elif arr[mid] > x:\n        return binary_search(arr, low, mid-1, x)\n    \n    # If the middle element is smaller than x, search in the right half of the array\n    else:\n        return binary_search(arr, mid+1, high, x)"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x < arr[0] or x > arr[n-1]:\n        return False\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    if n == 1:\n        return arr[0] == x\n    else:\n        # check if first element is majority element\n        if arr[0] == x:\n            count = 1\n            i = 1\n            # check if remaining elements are also majority element\n            while i < n and arr[i] == x:\n                count += 1\n                i += 1\n            if count > n // 2:\n                return True\n        # check if last element is majority element\n        if arr[n-1] == x:\n            count = 1\n            i = n - 2\n            # check if remaining elements are also majority element\n            while i >= 0 and arr[i] == x:\n                count += 1\n                i -= 1\n            if count > n // 2:\n                return True\n        # check if element in the middle is majority element\n        if arr[n//2] == x:\n            count = 1\n            i = n//2 - 1\n            j = n//2 + 1\n            # check if elements on both sides are also majority element\n            while i >= 0 and arr[i] == x:\n                count += 1\n                i -= 1\n            while j < n and arr[j] == x:\n                count += 1\n                j += 1\n            if count > n // 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Count the occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Check if the count is greater than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    # Traverse through all bits of the number\n    while (n):\n        # If the rightmost bit is set, then increment count\n        if (n & 1):\n            count += 1\n        # Shift the bits to the right by 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    # Iterate through all bits of the number\n    while n: \n        # If the rightmost bit is 1, increment the count\n        if n & 1: \n            count += 1\n        # Shift the bits to the right by one position\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    # Traverse through all bits of n\n    while (n):\n        # If the rightmost bit is set, increment count\n        if (n & 1):\n            count += 1\n        # Shift the bits to the right\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_values_string(s):\n    # initialize an empty string\n    result = \"\"\n    # iterate over the characters of the input string\n    for i in range(len(s)):\n        # if the index is odd, append the character to the result string\n        if i % 2 == 1:\n            result += s[i]\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with all characters whose index is odd removed.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an argument and removes all the characters whose index values are odd.\n    '''\n    # initialize an empty string to store the modified string\n    new_string = \"\"\n    \n    # iterate through each character in the original string and check its index value\n    for i in range(len(str)):\n        # if the index value is even, add the character to the new string\n        if i % 2 == 0:\n            new_string += str[i]\n    \n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_values_string(s):\n    '''\n    Removes the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop over the characters of the input string\n    for i in range(len(s)):\n        # If the current index is even, append the character to the result\n        if i % 2 == 0:\n            result += s[i]\n    \n    # Return the resulting string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters which have odd index values.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function finds the minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function takes three arguments:\n    n: the number whose binary representation we want to check\n    l: the leftmost bit index to check\n    r: the rightmost bit index to check\n    \n    It returns True if all the bits are set in the given range, else False.\n    \"\"\"\n    mask = (1 << r) - (1 << l) # mask to get all bits in the given range\n    masked_n = n & mask # get the bits in the range from n\n    if masked_n == 0: # if all the bits are set, masked_n will be 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask to isolate the range of bits we want to check\n    mask = (1 << r) - (1 << l)\n    \n    # Check if the masked bits are all unset in n\n    if (n & mask) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    mask = (1 << (r+1)) - (1 << l)\n    if n & mask == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function takes three parameters: n, l and r.\n    n: The number to be checked.\n    l: The left endpoint of the range.\n    r: The right endpoint of the range.\n\n    It returns True if all the bits in the range [l, r] are set to 1 in n.\n    Otherwise, it returns False.\n    '''\n    # Convert n to binary and reverse it\n    bin_n = bin(n)[2:].zfill(r-l+1)\n    # Convert the range [l, r] to binary and reverse it\n    bin_range = bin(2**r - 2**(l-1))[2:].zfill(r-l+1)\n    # Check if all the bits in the range are set to 1 in n\n    if bin_n == bin_range:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1')!= n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    This function takes three arguments: n (number), l (left range) and r (right range).\n    It returns True if all the bits in the range [l, r] are set to 1, else returns False.\n    \"\"\"\n    if l < 0 or r > n or l > r:\n        return \"Invalid range\"\n    else:\n        mask = (2**n-1) << r\n        result = mask & (2**l-1)\n        if result == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes a number n, and two integers l and r as input.\n    It checks whether all the bits in the range [l, r] are set or not.\n    If all the bits are set, then it returns True, else it returns False.\n    \"\"\"\n    # To check whether all the bits are set or not, we need to check the bits that are in the range [l, r]\n    # We can do this by using the bitwise AND operator & and comparing it with the number n itself.\n    # If the result is equal to n, then all the bits are set in the range [l, r], otherwise not.\n    mask = (1 << r) - (1 << l)  # This creates a mask with all the bits set from l to r (both inclusive)\n    return (n & mask) == n"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l:\n        return False\n    if r < n-1:\n        return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Check whether all the bits are unset in the given range or not.\n\n    Args:\n    n (int): A decimal number\n    l (int): The lower range (inclusive)\n    r (int): The upper range (inclusive)\n\n    Returns:\n    bool: True if all the bits are unset in the given range, False otherwise\n    '''\n\n    # Check if n is within the given range\n    if l <= n <= r:\n        # Get the number of bits in n\n        num_bits = len(bin(n)[2:])\n\n        # Check if all the bits in n are set\n        if num_bits == r - l + 1:\n            return True\n        else:\n            return False\n    else:\n        print(\"n is not within the given range\")"
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    This function returns True if all bits in the given range [l,r] are set to 1 and False otherwise.\n    '''\n    if r < l:\n        r = r^l\n        l = l^r\n        r = r^l\n    for i in range(l,r+1):\n        if (n & (1<<i)) == 0:\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # separate the positive and negative elements into two separate arrays\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    \n    # combine the negative and positive arrays in reverse order\n    arr[:n] = neg[::-1] + pos[::-1]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_indices = []\n    positive_indices = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative_indices.append(i)\n        else:\n            positive_indices.append(i)\n    negative_indices.sort()\n    positive_indices.sort()\n    result = [0] * n\n    j = 0\n    for i in range(n):\n        if j < len(positive_indices) and i == positive_indices[j]:\n            result[i] = arr[i]\n            j += 1\n        elif j < len(negative_indices) and i == negative_indices[j]:\n            result[i] = arr[i]\n            j += 1\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    arr[:n] = positives + negatives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    neg_arr.sort(reverse=True)\n    pos_arr.sort()\n    for i in range(n):\n        if i < len(neg_arr):\n            arr[i] = neg_arr[i]\n        else:\n            arr[i] = pos_arr[i-len(neg_arr)]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_arr = [x for x in arr[:n] if x < 0]\n    pos_arr = [x for x in arr[:n] if x >= 0]\n    return neg_arr + sorted(pos_arr)"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    negatives.sort()\n    positives.sort()\n    for i in range(n):\n        if i < len(negatives):\n            arr[i] = negatives[i]\n        else:\n            arr[i] = positives[i-len(negatives)]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists, one for negative numbers and one for positive numbers\n    negatives = []\n    positives = []\n    \n    # iterate over the first n elements of the array and append them to the appropriate list\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # sort the negative and positive lists\n    negatives.sort()\n    positives.sort()\n    \n    # iterate over the remaining elements of the array and append them to the appropriate list, based on their sign\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    # combine the negative and positive lists and return the result\n    return negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # Sort the first n elements of the array in descending order\n    arr = sorted(arr, reverse=True)[:n]\n    # Reverse the array\n    arr.reverse()\n    # Find the index of the first negative element\n    neg_idx = None\n    for i in range(n):\n        if arr[i] < 0:\n            neg_idx = i\n            break\n    # If no negative element is found, return the sorted and reversed array\n    if neg_idx is None:\n        return arr\n    # Otherwise, rearrange the array so that negative elements appear before positive ones\n    for i in range(neg_idx):\n        if arr[i] < 0:\n            j = i\n            while j < n and arr[j] < 0:\n                j += 1\n            if j < n:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # First, separate the positive and negative elements into two lists\n    pos_elems = []\n    neg_elems = []\n    for elem in arr[:n]:\n        if elem >= 0:\n            pos_elems.append(elem)\n        else:\n            neg_elems.append(elem)\n    \n    # Then, re-arrange the elements in the original array\n    i = n - 1  # Start at the end of the array\n    for elem in neg_elems[::-1]:  # Reverse the order of the negative elements\n        arr[i] = elem\n        i -= 1\n    for elem in pos_elems:  # Put the positive elements in the remaining positions\n        arr[i] = elem\n        i -= 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Re-arrange the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the index of the first negative element in the array\n    neg_idx = next((i for i in range(n) if arr[i] < 0), None)\n    \n    # If there is no negative element in the array, return the original array\n    if neg_idx is None:\n        return arr\n    \n    # Partition the array such that all negative elements are before positive ones\n    j = neg_idx\n    for i in range(neg_idx, n):\n        if arr[i] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in a string with the given character and returns the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the modified string.\n    '''\n    modified_str = str1.replace(\" \", char)\n    return modified_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and a character as input. It replaces all the blank spaces in the string with the given character and returns the modified string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = char + str1 + char\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in the string with the character.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces all blank spaces in a given string with a specified character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function replaces blank spaces in the string with the specified character.\n    :param str1: The string to be modified.\n    :param char: The character to replace blank spaces with.\n    :return: The modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    larg_list = []\n    for i in range(n):\n        larg_list.append(heapq.heappop(heap))\n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return list(heapq.nlargest(n, heap))"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes a list and integer n as input and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    larg_nums = []\n    for i in range(n):\n        larg_nums.append(heapq.heappop(list1))\n    return larg_nums"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]  # creating a heap of first n elements\n    heapq.heapify(heap)  # converting the heap to heap structure\n\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:  # if current element is greater than largest element in heap\n            heapq.heappop(heap)  # remove the smallest element from heap\n            heapq.heappush(heap, list1[i])  # add the current element to heap\n\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14159 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes in the radius r and height h of a cylinder and returns its lateral surface area.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return lateralsurface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area of the cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    This function finds the lateral surface area of a cylinder.\n    Parameters:\n    r: radius of the cylinder (float)\n    h: height of the cylinder (float)\n    Returns:\n    lateral surface area of the cylinder (float)\n    '''\n    lateral_area = 2*math.pi*r*(r+h)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as arguments and returns the lateral surface area.\n    '''\n    lateralsurface = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area.\n    \"\"\"\n    lateralsurface = 2 * 3.14159 * r * h\n    return lateralsurface"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    This function takes the side length of a cube as input and returns its volume.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3  # volume of cube is side length cubed\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Calculate the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # XOR with a number that has all even bits set to 1\n    return n ^ 0xAAAAAAAA"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0xAAAAAAAA  # create a mask with alternating 0's and 1's\n    return (n & ~mask) | (n & mask)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    # Set all even bits of the number to 1\n    n |= (n >> 1) & 0x5555555555555555\n    # Set all odd bits of the number to 0\n    n &= 0xAAAAAAAAAAAAAAAAB\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1, leaving odd bits unchanged.\n    '''\n    mask = 0b10101010 # binary number with 1's in even positions, 0's elsewhere\n    return (n & ~mask) | (n & mask) # clear even bits, set odd bits"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \"\"\"\n    return n | (n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary and split it into a list of digits\n    binary = bin(n)[2:]\n    binary_list = list(binary)\n    \n    # Iterate through the list and set the even bits to 1\n    for i in range(len(binary_list)):\n        if i % 2 == 0: # Check if the index is even\n            binary_list[i] = '1'\n    \n    # Convert the list back to a string and convert it back to an integer\n    binary_string = ''.join(binary_list)\n    result = int(binary_string, 2)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary and split it into a list of digits\n    binary_num = bin(n)[2:]\n    binary_num = [int(digit) for digit in binary_num]\n    \n    # Loop through the digits of the binary number and set the even bits to 1\n    for i in range(0, len(binary_num)):\n        if binary_num[i] == 0:\n            continue\n        elif binary_num[i] % 2 == 0:\n            binary_num[i] = 1\n        else:\n            binary_num[i] = 0\n            \n    # Convert the list of digits back to a binary number and return it\n    binary_num = [str(digit) for digit in binary_num]\n    binary_num = ''.join(binary_num)\n    return int(binary_num, 2)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes a number as input and sets all even bits of the number.\n    \"\"\"\n    mask = 0b11111110 # mask to set all even bits to 1\n    return n & ~mask # return the result of n AND NOT mask"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Sets all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number to 1.\n    '''\n    return (n & 0xAAAA) | ((n & 0x5555) << 1)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = Counter(test_list)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object\n    counter = Counter(test_list)\n\n    # Return the Counter object as a dictionary\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function to count the occurrences of each tuple\n    counts = Counter(test_list)\n    # Return the dictionary of counts\n    return dict(counts)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Returns the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if len(string[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as an input and returns the count of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        return (m - 1) * get_total_number_of_sequences(m, n - 1)"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    if n == 1:\n        return m\n    else:\n        for i in range(m//2, m+1):\n            count += get_total_number_of_sequences(i, n-1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    \n    # Initialize the number of sequences to 0\n    total_sequences = 0\n    \n    # Initialize the previous number as 1\n    prev_num = 1\n    \n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Calculate the number of possible sequences for the remaining length\n        num_sequences = m - prev_num + 1\n        \n        # Multiply the number of sequences for the remaining length by the total number of sequences so far\n        total_sequences *= num_sequences\n        \n        # Update the previous number\n        prev_num = (2*prev_num) - prev_num + 1\n        \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    :param m: the upper limit for the sequence elements\n    :param n: the length of the sequence\n    :return: the total number of possible sequences of length n\n    \"\"\"\n    total = 1\n    prev_num = 2\n    for i in range(1, n):\n        total *= m - prev_num + 1\n        prev_num *= 2\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < n:\n        return 0\n    elif m == n:\n        return 1\n    else:\n        count = 1\n        for i in range(n-1):\n            count *= (m - i - 1) // (n - i - 1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    prev = 2\n    \n    for i in range(1, n+1):\n        total += (m-prev+1)*prev\n        prev *= 2\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Returns the total number of possible sequences of length n, such that each element is a positive integer and is \n    greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    total = 0\n    prev = 1\n\n    # Loop over all possible starting points\n    for i in range(1, m):\n        # If we have enough remaining elements to form a sequence of length n, add it to the total\n        if (m - i) >= n - 1:\n            total += (m - i + 1) ** n\n            # Update the previous element to be the last element in the sequence\n            prev = m - i\n\n    # Return the total number of sequences\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(m//(2**(n-1)), m+1):\n            total += get_total_number_of_sequences(m, n-1)\n        return total"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n\n    prev_count = get_total_number_of_sequences(m, n-1)\n    curr_count = 0\n\n    for i in range(m):\n        if i == 0:\n            curr_count += 1\n        else:\n            curr_count += prev_count\n            if 2*i <= m:\n                curr_count += prev_count\n\n    return curr_count"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    \n    count = 0\n    prev = 1\n    curr = 2\n    \n    while curr <= m:\n        count += (m - prev + 1)\n        prev = curr\n        curr = prev + 1\n        \n    return count"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replaces the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with the elements of list2.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the second list is empty\n    if not list2:\n        return list1\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes two lists as input and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    root += 1\n    return root * root"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # calculate the square root of the given number \n    sqrt_N = math.sqrt(N) \n\n    # round up the square root value to the nearest integer \n    sqrt_N = math.ceil(sqrt_N) \n\n    # return the square of the rounded up value \n    return sqrt_N ** 2 "
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    return (root+1)**2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # check if the square root is an integer\n    if sqrt_N == int(sqrt_N):\n        # return the next integer square\n        return int(sqrt_N)**2 + 1\n    else:\n        # return the next odd integer square\n        return int(math.ceil(sqrt_N))**2\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return (root + 1) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root*root == N:\n        return (root+1)**2\n    else:\n        return (root+1)**2\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # add 0.5 to the square root and round it up to the nearest integer to get the next perfect square\n    return math.ceil(sqrt_N + 0.5) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    return root * (root + 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    if root * root == N:\n        root += 1\n    return root * root"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    return int(math.ceil(root))**2"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Find the maximum sum of a increasing subsequence\n    max_increasing_sum = 0\n    increasing_sum = 0\n    for i in range(n):\n        increasing_sum += arr[i]\n        max_increasing_sum = max(max_increasing_sum, increasing_sum)\n\n    # Find the maximum sum of a decreasing subsequence\n    max_decreasing_sum = 0\n    decreasing_sum = 0\n    for i in range(n-1, -1, -1):\n        decreasing_sum += arr[i]\n        max_decreasing_sum = max(max_decreasing_sum, decreasing_sum)\n\n    # Return the maximum of the two sums\n    return max_increasing_sum + max_decreasing_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return arr[0] if n == 1 else 0\n    \n    # Compute increasing and decreasing prefixes\n    inc_prefix = [0] * n\n    dec_prefix = [0] * n\n    inc_prefix[1] = arr[1] if arr[1] > arr[0] else arr[0]\n    dec_prefix[1] = arr[1] if arr[1] < arr[0] else arr[0]\n    for i in range(2, n):\n        if arr[i] > inc_prefix[i-1]:\n            inc_prefix[i] = arr[i]\n        else:\n            inc_prefix[i] = inc_prefix[i-1]\n        if arr[i] < dec_prefix[i-1]:\n            dec_prefix[i] = arr[i]\n        else:\n            dec_prefix[i] = dec_prefix[i-1]\n    \n    # Compute increasing and decreasing suffixes\n    inc_suffix = [0] * n\n    dec_suffix = [0] * n\n    inc_suffix[n-2] = arr[n-2] if arr[n-2] > arr[n-1] else arr[n-1]\n    dec_suffix[n-2] = arr[n-2] if arr[n-2] < arr[n-1] else arr[n-1]\n    for i in range(n-3, -1, -1):\n        if arr[i] > inc_suffix[i+1]:\n            inc_suffix[i] = arr[i]\n        else:\n            inc_suffix[i] = inc_suffix[i+1]\n        if arr[i] < dec_suffix[i+1]:\n            dec_suffix[i] = arr[i]\n        else:\n            dec_suffix[i] = dec_suffix[i+1]\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        if arr[i] == inc_prefix[i]:\n            max_sum += arr[i]\n        elif arr[i] == dec_prefix[i]:\n            max_sum += arr[i]\n        elif arr[i] == inc_suffix[i]:\n            max_sum += arr[i]\n        elif arr[i] == dec_suffix[i]:\n            max_sum += arr[i]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for i in range(n)]  # dp[i][j] stores the maximum sum of a bitonic subsequence ending at arr[i] and starting at arr[j]\n\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) + arr[j]\n\n    return dp[0][n - 1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    \n    # Create a list of tuples, each representing a range of values in the array.\n    ranges = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            ranges.append((i,j))\n    \n    # Initialize the maximum sum and the indices of the first element of the maximum sum.\n    max_sum = -float('inf')\n    max_indices = (0,0)\n    \n    # Iterate through all possible pairs of ranges in the list.\n    for i in range(len(ranges)):\n        for j in range(i+1, len(ranges)):\n            \n            # Extract the two ranges and their corresponding values.\n            range1 = ranges[i]\n            range2 = ranges[j]\n            values1 = arr[range1[0]:range1[1]]\n            values2 = arr[range2[0]:range2[1]]\n            \n            # Check if the two ranges are bitonic.\n            if values1 == sorted(values1, reverse=True) and values2 == sorted(values2):\n                \n                # Calculate the sum of the two ranges.\n                sum_ranges = sum(values1) + sum(values2)\n                \n                # Update the maximum sum and the indices of the first element of the maximum sum.\n                if sum_ranges > max_sum:\n                    max_sum = sum_ranges\n                    max_indices = (range1[0], range2[1]-1)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n\n    # Fill the diagonal elements with the values of the array\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill the rest of the dp table\n    for len in range(2, n+1):\n        for i in range(n-len+1):\n            j = i + len - 1\n            if len == 2:\n                dp[i][j] = max(arr[i], arr[j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[j]\n\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + arr[j]\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        temp = [0] * n\n        temp[0] = arr[0]\n        for i in range(1, n):\n            temp[i] = max(temp[i-1] + arr[i], arr[i])\n        return max(temp)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n  # dp[i] will store the maximum sum of a bitonic subsequence ending at index i\n\n    # Find the maximum sum of bitonic subsequence ending at each index i\n    for i in range(n):\n        # Find the maximum sum of a bitonic subsequence ending at index i-1\n        if i > 0:\n            dp[i] = max(dp[i-1], dp[i])\n        # Find the maximum sum of a bitonic subsequence ending at index i\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                dp[i] += arr[j]\n\n    # Find the maximum sum of a bitonic subsequence in the entire array\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables for the maximum sum and the index of the maximum sum\n    max_sum = -float('inf')\n    max_sum_index = 0\n    \n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:  # Check if the current element is greater than the previous element\n            # If the previous element was smaller than the current element, we can extend the bitonic subsequence to the left\n            left_sum = max_sum(arr[:i]) + arr[i]\n            if left_sum > max_sum:\n                max_sum = left_sum\n                max_sum_index = i\n        else:  # The current element is smaller than the previous element, so we need to find a new bitonic subsequence\n            right_sum = max_sum(arr[i:]) + arr[i]\n            if right_sum > max_sum:\n                max_sum = right_sum\n                max_sum_index = i\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Returns the maximum sum of a bitonic subsequence for the given array.\n    A bitonic sequence is a sequence where the first part is increasing and the second part is decreasing.\n    \"\"\"\n\n    # Create a list of tuples (x, i), where x is the value and i is the index of the value in the original array.\n    # The tuples are sorted in increasing order of the values.\n    values = [(arr[i], i) for i in range(len(arr))]\n    values.sort()\n\n    # Initialize the maximum sum and the current sum to zero.\n    max_sum = 0\n    current_sum = 0\n\n    # Iterate over the sorted values and add the values to the current sum while maintaining the bitonic property.\n    for i in range(len(values)):\n        current_sum += values[i][0]\n        if i < len(values) - 1 and values[i][1] < values[i+1][1]:\n            current_sum -= values[i+1][0]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) >= 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function takes a number as input and computes its square root using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess * guess - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function takes a positive integer number as input and returns its square root using the Babylonian method.\n    '''\n    guess = number\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number/guess) / 2\n    return round(guess, 3)"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2  # start with an initial guess\n    while True:\n        approx = (guess + number / guess) / 2  # compute the approximation\n        if abs(approx - guess) < 0.0001:  # check if the approximation is accurate enough\n            return approx  # return the approximation as the square root\n        guess = approx  # update the guess for the next iteration"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    precision = 0.000001\n    while abs(x**2 - number) > precision:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    # Start with an initial guess of the square root\n    guess = number / 2\n\n    # Keep refining the guess using the Babylonian method\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square root of a number using the Babylonian method.\n    \"\"\"\n    x = number\n    while True:\n        y = (x + (number / x)) / 2\n        if abs(y - x) < 0.00001:\n            break\n        x = y\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute square root of a number using the Babylonian method.\n    \"\"\"\n    x = number\n    y = (x + 1) / 2\n    while abs(x - y) > 0.00001:\n        x = y\n        y = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 0.00001\n    guess = number\n    while abs(guess**2 - number) >= precision:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lps(str): \n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n  \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the lengths of LPSs\n    table = [[0] * n for _ in range(n)]\n    # Fill the table in bottom-up manner\n    for i in range(n):\n        table[i][i] = 1\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[i+1][j-1]\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n\n    # Base cases\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Create a 2D table to store lengths of palindromic subsequence of substring ending at each index\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length greater than 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if str[i] == str[j] and L == 2:\n                dp[i][j] = 2  # This is a palindrome of length 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2  # This is a palindrome of length L\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])  # Choose the maximum value\n\n    # Return length of the longest palindromic subsequence in the string\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store lengths of longest palindromes ending at each index \n    dp = [[0 for j in range(n)] for i in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    for i in range(n): \n        dp[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            dp[i][i+1] = 2\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3, n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if str[i] == str[j] and k == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n  \n    # Find the maximum length palindrome substring \n    maxLength = 0\n    for i in range(n): \n        for j in range(i, n): \n            if dp[i][j] > maxLength: \n                maxLength = dp[i][j] \n  \n    return maxLength "
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n\n            if str[i] == str[j] and l == 2:\n                dp[i][j] = 2\n\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2 \n    for i in range(n-1): \n        if (str[i] == str[i+1]): \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length greater than 2 \n    for k in range(3,n+1): \n        for i in range(n-k+1): \n            j = i + k - 1\n            if (str[i] == str[j] and k == 2): \n                L[i][j] = 2\n            elif (str[i] == str[j]): \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] "
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return None\n    else:\n        harmonic_sum = 0\n        for i in range(1, n+1):\n            harmonic_sum += 1/i\n        return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n\nprint(harmonic_sum(5)) # Output: 13.88888888888889"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = sum(1/i for i in range(1, n))\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return sum(1.0 / i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n\nprint(harmonic_sum(5)) # Output: 1.6363636363636362"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns their intersection.\n    '''\n    # Initialize an empty list to store the common elements of both arrays.\n    common_elements = []\n\n    # Loop through each element of the first array.\n    for num in array_nums1:\n        # Check if the element is present in the second array.\n        if num in array_nums2:\n            # If present, append it to the common_elements list.\n            common_elements.append(num)\n\n    # Return the common_elements list.\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the input arrays into sets\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # First, we sort both arrays to make the search easier\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Then, we create two pointers, one for each array, pointing to the first element\n    ptr1, ptr2 = 0, 0\n\n    # We create an empty list to store the intersection\n    intersection = []\n\n    # We loop until we reach the end of one of the arrays\n    while ptr1 < len(array_nums1) and ptr2 < len(array_nums2):\n        # If the current elements are equal, we add it to the intersection list and move both pointers\n        if array_nums1[ptr1] == array_nums2[ptr2]:\n            intersection.append(array_nums1[ptr1])\n            ptr1 += 1\n            ptr2 += 1\n        # If the current element in array_nums1 is smaller, we move the pointer for that array\n        elif array_nums1[ptr1] < array_nums2[ptr2]:\n            ptr1 += 1\n        # If the current element in array_nums2 is smaller, we move the pointer for that array\n        else:\n            ptr2 += 1\n\n    # Finally, we return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes in two arrays of integers and returns their intersection.\n    '''\n    # create an empty list to store the common elements\n    intersection = []\n\n    # loop through the first array\n    for num in array_nums1:\n        # check if the number is also in the second array\n        if num in array_nums2 and num not in intersection:\n            # if it is, add it to the intersection list\n            intersection.append(num)\n\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def insert_element(lst, ele):\n    '''\n    Insert the element before each element in the list.\n    '''\n    result = []\n    for i in lst:\n        result.append(ele)\n        result.append(i)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    res = []\n    for i in lst:\n        res.append(elem)\n        res.append(i)\n    return res[1:]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in a list.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list.\n    \"\"\"\n    return [element] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element of a list.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(element)\n        new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def insert_element(lst, ele):\n    '''\n    This function inserts an element before each element of a list and returns the resulting list.\n    '''\n    return [ele] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes a list and an element and inserts the element before each element in the list.\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts an element before each element in a list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst[1:]  # Return the new list without the first element"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list.\n    \"\"\"\n    return [element] + [x for x in lst]"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + [i for i in list]"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(num)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(f\"Polar coordinates of {num}: {cmath.polar(num)}\")"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar_coords = cmath.polar(num)\n        result.append((num, polar_coords))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = round(abs(num), 2)\n        phi = round(cmath.phase(num), 2)\n        result.append((r, phi))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    results = []\n    for num in numbers:\n        r = round(abs(num), 2)\n        theta = round(cmath.phase(num), 2)\n        results.append((r, theta))\n    return results"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts complex numbers to polar coordinates.\n    \"\"\"\n    polar = []\n    for num in numbers:\n        polar.append(cmath.polar(num))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        polar = cmath.polar(num)\n        result.append((polar[0], polar[1]))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        polar = cmath.polar(num)\n        print(\"Polar coordinates of\", num, \"are\", polar)"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements present in the list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, n+1):\n        combinations += combinations_with_replacement(l, i)\n    return [tuple(combo) for combo in combinations]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [c for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return list(comb)"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(comb) for comb in combinations_with_replacement(l, n)]"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, else False.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = []\n    count = 0\n    \n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    \n    is_prime = [True] * (n+1)\n    count = 0\n    \n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n            \n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    Check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Return the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Create a new list to store the maximum values\n    max_list = []\n\n    # Iterate over the two lists\n    for i in range(len(list1)):\n        # If the current element of the first list is greater than the current element of the second list, add the current element of the first list to the maximum list\n        if list1[i] > list2[i]:\n            max_list.append(list1[i])\n        # Otherwise, add the current element of the second list to the maximum list\n        else:\n            max_list.append(list2[i])\n\n    # Convert the maximum list back to a tuple and return it\n    return tuple(max_list)"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            temp_sum = sum(test_tup1[i:j+1])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_tup = (test_tup1[i:j+1],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and returns a tuple with the maximum elements from both tuples.\n    \"\"\"\n    # Create a list of tuples with the maximum elements from both tuples\n    max_tuple_list = [(max(test_tup1), max(test_tup2)), (max(test_tup1), test_tup2[test_tup1.index(max(test_tup1))]), (test_tup1[test_tup2.index(max(test_tup2))], max(test_tup2))]\n\n    # Find the maximum tuple from the list\n    max_tuple = max(max_tuple_list, key=lambda x: x[0]*x[1])\n\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple with the maximum elements from the two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (test_tup1[i] if test_tup1[i] > test_tup2[i] else test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import zip_longest\n\ndef maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for tup in zip_longest(test_tup1, test_tup2, fillvalue=0):\n        max_tup = max(max_tup, tup)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if len(test_tup1) == len(test_tup2):\n        max_tup = ()\n\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                max_tup += (test_tup1[i],)\n            else:\n                max_tup += (test_tup2[i],)\n\n        return max_tup\n    else:\n        return \"Length of both tuples should be equal.\""
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # create a list of primes\n        primes = [2, 3]\n        # initialize variables for the last two primes found\n        last_prime1 = 3\n        last_prime2 = 2\n        # loop through remaining primes\n        for i in range(4, n+1):\n            # calculate the next prime using last two primes\n            next_prime = 2*last_prime2 + last_prime1\n            # add next prime to list of primes\n            primes.append(next_prime)\n            # update variables for last two primes found\n            last_prime2 = last_prime1\n            last_prime1 = next_prime\n        # return the nth prime found\n        return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        This function checks whether a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        This function finds the next prime number after a given number.\n        \"\"\"\n        num += 1\n        while not is_prime(num):\n            num += 1\n        return num\n\n    def prev_prime(num):\n        \"\"\"\n        This function finds the previous prime number before a given number.\n        \"\"\"\n        num -= 1\n        while not is_prime(num):\n            num -= 1\n        return num\n\n    def nth_prime(n):\n        \"\"\"\n        This function finds the nth prime number using the Newman-Shanks-Williams algorithm.\n        \"\"\"\n        a = 1\n        b = prev_prime(n)\n        c = prev_prime(b)\n        while True:\n            if n == 1:\n                return a\n            if n == 2:\n                return b\n            if n == 3:\n                return c\n            if is_prime(n):\n                return n\n            n = a + b + c\n            a = b\n            b = c\n            c = prev_prime(n)\n\n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    This function finds the nth newman-shanks-williams prime number.\n    '''\n\n    if n == 1:\n        return 2\n\n    primes = [2]\n\n    num = 3\n    count = 1\n\n    while count < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            count += 1\n        num += 2\n\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        previous_prime = 2\n        previous_previous_prime = 3\n        current_prime = 5\n        \n        for i in range(4, n+1):\n            next_prime = previous_prime + previous_previous_prime\n            current_prime = next_prime\n            \n            previous_previous_prime = previous_prime\n            previous_prime = current_prime\n            \n        return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 1\n    num = 3\n    while count < n:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 2"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        prime_list = [2, 3]\n        i = 3\n        while len(prime_list) < n:\n            is_prime = True\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_list.append(i)\n            i += 2\n        return prime_list[-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Initialize the number of primes found so far\n    count = 13\n    # Initialize the number to be checked\n    num = 101\n    # Loop until we find the nth prime\n    while count < n:\n        # Check if the number is prime\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the number is prime, add it to the list of primes\n            primes.append(num)\n            count += 1\n        # Increment the number to be checked\n        num += 2\n    # Return the nth prime\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n <= 22:\n        return primes[n-1]\n    else:\n        p = 29\n        for i in range(22, n):\n            p = primes[i-1] + primes[i-2]\n            primes.append(p)\n        return p"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    m, d = 1, 1\n    p = 0\n    \n    # Loop until the nth prime number is found\n    while p < n:\n        # Update m and d\n        m = (2*d*d - m)\n        d = (2*d*d + m)\n        \n        # Check if m is a prime number\n        is_prime = True\n        for i in range(2, int(m**0.5) + 1):\n            if m % i == 0:\n                is_prime = False\n                break\n        \n        # If m is a prime number, increment p\n        if is_prime:\n            p += 1\n    \n    # Return the nth prime number\n    return m"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    if n <= len(primes):\n        return primes[n-1]\n    else:\n        count = len(primes)\n        while count <= n:\n            # Get the last two primes\n            p1 = primes[len(primes)-1]\n            p2 = primes[len(primes)-2]\n            # Calculate the next prime\n            next_prime = 2*p2 - p1\n            # Check if it's a newman-shanks-williams prime\n            is_nswp = True\n            for i in range(5, int(next_prime**(0.5))+1):\n                if next_prime % i == 0:\n                    is_n"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] / test_tup2[i]),)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of equal length\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i]/test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Split the given list into two parts where the length of the first part of the list is L, and return the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: L is greater than the length of the list.\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: List is smaller than L\"\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) < L:\n        return None # Return None if L is larger than the length of the list\n    else:\n        return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list\"\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age * 7\n    return dog_age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes a human age and returns the equivalent dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = round((h_age - 2) * 4)\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    This function takes a human age in years as input and returns a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the age in human years\n    h_age_in_dog_years = h_age * 7\n    \n    # Round the age to the nearest integer\n    dog_age = round(h_age_in_dog_years)\n    \n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    chunks = []\n    for i in range(0, len(S), step):\n        chunks.append(S[i:i+step])\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    This function takes in a list and an integer n and splits a list for every nth element, \n    returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    n = len(S) // step  # calculate the number of splits\n    return [S[i * step:i * step + step] for i in range(n)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list S into groups of size step.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function takes a side length of a cube as input and returns the lateral surface area of the cube.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateralsurface = 6 * l ** 2\n    return lateralsurface"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= 2 * n:\n        if i % 2!= 0:\n            sum += i**2\n            i += 1\n        else:\n            i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n * 2, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, (n * 2), 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n % 2 == 1:\n        n += 1\n    return sum(i**2 for i in range(1, n, 2))"
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # initialize sum of squares to 0\n    sum_of_squares = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # add square of the current number to the sum of squares\n        sum_of_squares += i**2\n        \n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Returns then'th star number.\n    \"\"\"\n    num_stars = 1\n    count = 1\n    while count < n:\n        num_stars += 2\n        count += 1\n    return num_stars"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        print(num, end=' ')\n        num += 1\n        count += 1\n    print('\\nThe', n, 'th star number is', num-1)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n    while count <= n:\n        num = num * 2 + 1\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n-1) + 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        yield num\n        num += 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    star_num = 1\n    while count <= n:\n        print(star_num)\n        count += 1\n        star_num += 2"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 2\n        count += 1\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    num = 1\n    \n    while count < n:\n        print(num, end=\" \")\n        num = num * 2\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns the nth star number. \n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n\n    :param n: The index of the star number to find.\n    :type n: int\n\n    :return: Then'th star number.\n    :rtype: int\n    \"\"\"\n    count = 1\n    num = 1\n    while count <= n:\n        num += 1\n        if num % 2 == 0:\n            count += 1\n    return num"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even positions of the list.\n\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over the list and check if the number is even at an even index\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            \n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Given a list of integers, return the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize variables\n    even_sum = 0\n    even_count = 0\n    \n    # Loop through the list\n    for i in range(0, len(arr)):\n        # Check if the current number is even and the position is even\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n            \n    # Check if there were any even numbers at even positions\n    if even_count > 0:\n        # Return the sum of even numbers at even positions\n        return even_sum\n    else:\n        # Return None if there were no even numbers at even positions\n        return None"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    # initialize sum to zero\n    even_sum = 0\n    # iterate over first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # raise even number to the fifth power and add to sum\n        even_sum += i ** 5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # iterate over even numbers from 2 to 2n\n    for i in range(2, 2*n, 2):\n        # calculate the power of the number to the fifth power\n        power = i**5\n        # add the power to the sum\n        sum += power\n    # return the sum of the even numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, 2*n+1, 2):\n        # Raise the even number to the fifth power and add it to the sum\n        sum += i ** 5\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize variables\n    sum = 0\n    i = 0\n    \n    # Loop over even numbers and add them to the sum\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n        \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += (i ** 5)\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum to zero\n    total = 0\n    \n    # iterate over the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # raise the even natural number to the fifth power and add it to the sum\n        total += i**5\n        \n    return total"
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in test_list:\n        rear_elements.append(i[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tpl in test_list:\n        rear_list.append(tpl[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum of even index binomial coefficients to zero\n    even_sum = 0\n    \n    # Iterate through all even indices i from 0 to n-2\n    for i in range(0, n-2, 2):\n        # Calculate binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n        # Add even binomial coefficient to sum\n        even_sum += binomial_coeff\n        \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"Sum of even index binomial coefficients:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += math.comb(n, i) * (-1)**(i+1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i)\n        # Add the binomial coefficient to the sum if it's even\n        if binomial_coeff % 2 == 0:\n            sum += binomial_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # loop over odd indices up to n\n    for i in range(1, n+1, 2):\n        # use math.comb() function to calculate binomial coefficient\n        coeff = math.comb(n, i)\n        # check if the index is even\n        if i % 2 == 0:\n            # add the coefficient to the sum if it is even\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += math.comb(n, i)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initializing the sum of even index binomial coefficients to zero\n    sum = 0\n    \n    # Looping through each even index from 0 to n\n    for i in range(0, n, 2):\n        # Calculating the binomial coefficient using the formula\n        binomial_coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        \n        # Adding the binomial coefficient to the sum\n        sum += binomial_coeff\n        \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through the even indices from 0 to n\n    for i in range(0, n+1, 2):\n        # Use math.comb() function to calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # Add the even binomial coefficient to the sum\n        sum += coeff\n    \n    # Return the sum of even binomial coefficients\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Returns the volume of a cylinder.\n\n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n    \n    Returns:\n    float: the volume of the cylinder\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = (3.14 * r ** 2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14*r**2)*h\n    return volume\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\nprint(f\"The volume of the cylinder is {volume_cylinder(radius, height)}\")"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    :param dict: the dictionary to filter\n    :param n: the minimum value to include in the filtered dictionary\n    :return: a new dictionary containing only entries with values greater than or equal to n\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_filter(dictionary, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if type(i) == tuple:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup.index(test_tup[-1]):\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if type(i) == tuple:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == type(test_tup[-1]):\n            count += 1\n        else:\n            return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(n):\n        decagonal_num += 10**(i+1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 10\n        count += 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = n * (3 * n - 1) // 2  # formula to find nth decagonal number\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 0\n    \n    while count < n:\n        decagonal += 10*count + 1\n        count += 1\n    \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    count = 1\n    while count <= n:\n        decagonal += count\n        count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = (10**n - 1) // 9\n    return num ** 10\n"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        return (10 ** ((n - 1) // 10)) * ((n - 1) % 10) + ((n - 1) // 10 + 1)"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function finds the nth decagonal number.\n    '''\n\n    # Initialize variables\n    count = 1\n    decagonal = 1\n\n    # Loop through until the nth decagonal number is found\n    while count < n:\n        # Increment the count and decagonal number\n        count += 1\n        decagonal += count\n\n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        dec_num = 10 * num ** 2 + 1\n        if dec_num >= 10 and dec_num % 10 == 0:\n            count += 1\n    if count == n:\n        return dec_num\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Returns the nth decagonal number.\n    \"\"\"\n    count = 1\n    decagonal_num = 0\n    while count <= n:\n        decagonal_num += count\n        count += 1\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n        \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a list are unique or not.\n    \"\"\"\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate over the list and add each element to the set\n    for elem in test_list:\n        unique_set.add(elem)\n\n    # check if the length of the original list is equal to the length of the set, which means all elements are unique\n    if len(test_list) == len(unique_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns their element-wise subtraction.\n    \"\"\"\n    if len(nums1) == len(nums2):\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result\n    else:\n        return \"Lists are not of equal length\""
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n\n    :param nums1: list of numbers\n    :param nums2: list of numbers\n    :return: a new list with the element-wise differences\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    :param nums1: list of numbers\n    :param nums2: list of numbers\n    :return: list of differences between corresponding elements of nums1 and nums2\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    :param nums1: list of numbers\n    :param nums2: list of numbers\n    :return: list of differences between corresponding elements of nums1 and nums2\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n    \n    # loop through each element of the first list\n    for i in range(len(nums1)):\n        # subtract the corresponding element from the second list and append the result to the result list\n        result.append(nums1[i] - nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def validate(n):\n    # Convert the integer to a string so we can iterate over each character\n    digits = str(n)\n    \n    # Iterate over each digit in the string and check if the frequency of the digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def validate(n):\n    freq = [0] * 10 # initialize a list of 10 zeros to keep track of the frequency of each digit\n    while n > 0:\n        digit = n % 10 # get the last digit of n\n        freq[digit] += 1 # increment the frequency of that digit\n        if freq[digit] > digit: # check if the frequency of the digit is greater than the digit itself\n            return False # if so, the number is not valid\n        n //= 10 # remove the last digit from n\n    return True # if all frequencies are less than or equal to their digits, the number is valid"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to string\n    n = str(n)\n    # create an empty dictionary to store the frequency of each digit\n    freq = {}\n    # loop through each digit in the string\n    for digit in n:\n        # if the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n    # loop through each digit in the string again\n    for digit in n:\n        # if the frequency of the digit is greater than the digit itself, return False (not valid)\n        if freq[digit] > int(digit):\n            return False\n    # if the function hasn't returned False by now, all digits have a frequency less than or equal to the digit itself, so return True (valid)\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    freq = [digits.count(digit) for digit in range(10)]\n    return all(freq[digit] <= digit for digit in range(10))"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def validate(n):\n    # Convert the given integer into a list of its digits\n    digits = [int(d) for d in str(n)]\n\n    # Loop through each digit in the list and check if its frequency is less than or equal to the digit itself\n    for d in digits:\n        if digits.count(d) > d:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def validate(n):\n    # convert integer to string\n    n_str = str(n)\n    \n    # iterate through each digit in the string\n    for digit in n_str:\n        # convert digit back to integer\n        digit_int = int(digit)\n        \n        # check if frequency of digit is less than or equal to the digit itself\n        if n_str.count(digit) > digit_int:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in n_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0]*10\n    while n:\n        digit_freq[n%10] += 1\n        n //= 10\n    for i in range(10):\n        if digit_freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    while n:\n        freq[n % 10] += 1\n        n //= 10\n    \n    for i in freq:\n        if i > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def validate(n):\n    # Convert the integer to string to get each digit\n    digits = str(n)\n\n    # Iterate through each digit and check if the frequency of the digit is less than or equal to the digit itself\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n\n    # If all the digits are valid, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    '''\n    This function checks whether all the elements in the list are equal to the given element.\n    '''\n    if all(elem == element for elem in lst):\n        print(\"All elements in the list are equal to the given element.\")\n    else:\n        print(\"Not all elements in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == item for item in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(i == element for i in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if lst == [element]*len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check whether all elements in the list are equal to the given element.\n    \"\"\"\n    return all(elem == i for i in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function checks whether all elements in the given list are equal to the given element.\n    \"\"\"\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Checks whether all items in the list are equal to the given element.\n\n    :param lst: a list of items\n    :param elem: the element to compare against\n    :return: True if all items in the list are equal to the given element, False otherwise\n    \"\"\"\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(i == element for i in lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a[b]{2,3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function takes a string as input and checks whether the string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[b]{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\bb{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes three arguments:\n    - a: the array of integers\n    - n: the size of the array\n    - k: the number of times the array is to be repeated\n    \n    It returns the largest sum of a contiguous subarray in the modified array formed by repeating the given array k times.\n    '''\n    \n    # multiply each element of the array with k to get the modified array\n    modified_array = [i*k for i in a]\n    \n    # find the maximum subarray sum in the modified array using Kadane's algorithm\n    max_sum = 0\n    current_sum = 0\n    for i in range(n*k):\n        current_sum += modified_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(k):\n        current_sum += a[i]\n\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    for i in range(k, n):\n        current_sum += a[i] - a[i - k]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Create a list to store the sum of each contiguous array in the modified array\n    contiguous_sum = []\n    for i in range(k):\n        current_sum = 0\n        for j in range(n):\n            current_sum += a[j]\n            contiguous_sum.append(current_sum)\n\n    # Find the largest sum of a contiguous array in the modified array\n    max_sum = 0\n    for i in range(k * n):\n        for j in range(i, k * n):\n            if contiguous_sum[j] - contiguous_sum[i] > max_sum:\n                max_sum = contiguous_sum[j] - contiguous_sum[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k <= 1:\n        return max_sub_array_sum(a, n)\n    else:\n        repeated_array = [0] * (k * n)\n        for i in range(k):\n            for j in range(n):\n                repeated_array[i * n + j] = a[j]\n        return max_sub_array_sum(repeated_array, k * n)"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp_sum = 0\n    max_sum = float('-inf')\n    \n    for i in range(k):\n        for j in range(n):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n        \n        temp_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    temp_sum = 0\n    \n    for i in range(k):\n        for j in range(n):\n            temp_sum += a[j]\n            \n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n        temp_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = 0\n    \n    for i in range(k):\n        temp_sum = 0\n        \n        for j in range(n):\n            temp_sum += a[j]\n        \n        if i == 0:\n            max_sum = temp_sum\n        else:\n            max_sum = max(max_sum, temp_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_array = a[i:j]\n            repeated_sub_array = sub_array * k\n            sub_array_sum = sum(repeated_sub_array)\n            if sub_array_sum > max_sum:\n                max_sum = sub_array_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the sum of the first subarray\n    max_sum = sum(a[:k])\n\n    # Calculate the sum of the remaining subarrays\n    for i in range(k, n):\n        curr_sum = sum(a[i-k:i+1])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array `a` of size `n`, and a number `k`, and returns the largest sum of a contiguous array in the modified array which is formed by repeating the given array `k` times.\n    '''\n    if k == 1:  # Base case\n        return max_subarray_sum(a, n)\n\n    # Divide the array into k segments of equal size\n    segment_size = n // k\n    segments = [a[i:i + segment_size] for i in range(0, n, segment_size)]\n\n    # Find the maximum sum of each segment\n    max_sums = [max_subarray_sum(segment, len(segment)) for segment in segments]\n\n    # Find the maximum sum of the k segments\n    max_sum_k = max(max_sums)\n\n    # Find the maximum sum of the original array by adding the maximum sum of the k segments\n    max_sum_original = max_sum_k * k\n\n    # Find the maximum sum of the original array when the last element is repeated k times\n    max_sum_repeated = max_sum_original + max_subarray_sum(a[-k:], k)\n\n    return max_sum_repeated\n\n\ndef max_subarray_sum(a, n):\n    '''\n    This function takes an array `a` of size `n` and returns the maximum sum of a contiguous subarray in the array.\n    '''\n    if n == 1:\n        return a[0]\n\n    # Divide the array into two halves\n    left_sum = max_subarray_sum(a, n // 2)\n    right_sum = max_subarray_sum(a[n // 2:], n // 2)\n\n    # Find the maximum sum of the left and right subarrays\n    cross_sum = max_crossing_sum(a, 0, n - 1)\n\n    # Return the maximum of the three sums\n    return max(left_sum, right_sum, cross_sum)\n\n\ndef max_crossing_sum(a, low, high):\n    '''\n    This function takes an array `a` of size `n`, and two indices `low` and `high` that define a subarray, and returns the maximum sum of a contiguous subarray that crosses the midpoint of the subarray.\n    '''\n    mid = (low + high) // 2\n\n    left_sum = a[mid]\n    max_left = mid\n\n    right_sum = a[mid + 1]\n    max_right = mid + 1\n\n    for i in range(mid - 1, low - 1, -1):\n        if left_sum + a[i] > right_sum:\n            left_sum += a[i]\n            max_left = i\n\n    for i in range(mid + 2, high + 1):\n        if right_sum + a[i] > left_sum:\n            right_sum += a[i]\n            max_right = i\n\n    return left_sum + right_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even numbers\n    for i in range(0, 2*n, 2):\n        sum += i**2\n        \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    # Iterate from 0 to n-1\n    for i in range(n):\n        # If i is even, add its square to sum\n        if i % 2 == 0:\n            sum += i**2\n    # Return the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Returns the sum of squares of the first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n*2, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        return 0\n\n    even_sum = 0\n\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+2, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    for lst in list1:\n        if len(lst) == max_len:\n            return lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = [l]\n        elif len(l) == max_len:\n            max_list.append(l)\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = max(list1, key=len)\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_lst = lst\n            max_len = len(lst)\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_length:\n            max_list.append(lst)\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    This function takes two arguments, n and k. \n    n is the number of posts in the fence and k is the number of colors available. \n    This function returns the number of ways of painting the fence such that at most 2 adjacent posts have the same color.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        ways = 0\n        for i in range(1, k+1):\n            ways += count_no_of_ways(n-1, k)\n        return ways"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        count = 0\n        for i in range(1, k+1):\n            count += count_no_of_ways(n-1, k)\n        return count\n\nn = 3\nk = 3\nprint(count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    if n <= 0 or k <= 0: \n        return 0\n    if n == 1: \n        return k\n    if k == 1: \n        return 1\n    if k == 2: \n        if n % 2 == 0: \n            return 0\n        else: \n            return 1\n    if n == 2: \n        return k\n    dp = [0] * (n+1)\n    dp[1] = k\n    dp[2] = k*k\n    for i in range(3, n+1): \n        dp[i] = (dp[i-1] * (k-1) + dp[i-2] * (k-1) * (k-1)) % 1000000007\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    if k == 1: # Base Case: If there is only one color, there is only one way to paint the fence\n        return 1\n    elif k == 2 and n > 2: # Base Case: If there are only two colors, there is no way to paint the fence\n        return 0\n    elif n == 1: # Base Case: If there is only one post, there is only one way to paint the fence\n        return k\n    \n    # Recursive Case: Count the number of ways to paint the fence recursively\n    ways = 0\n    for i in range(1, k+1):\n        ways += count_no_of_ways(n-1, k-1)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    if k == 2:\n        if n == 2:\n            return 2\n        return 3\n    dp = [0] * (k+1)\n    dp[0] = 1\n    dp[1] = k\n    dp[2] = 3\n    for i in range(3, k+1):\n        dp[i] = dp[i-1] + dp[i-2] + (k-1) * dp[i-3]\n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    else:\n        dp = [0]*(n+1)\n        dp[0] = 1\n        dp[1] = k\n        dp[2] = k*k\n        for i in range(3, n+1):\n            dp[i] = (dp[i-1] + dp[i-2])*(k-1)\n        return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    This function finds the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return (k * k * (k - 1)) * (n // 2)\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\n\nprint(\"Number of ways of painting the fence: \", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the count to 0\n    count = 0\n\n    # Base case\n    if n == 1:\n        return k\n\n    # Recursive case\n    else:\n        for i in range(1, k+1):\n            count += count_no_of_ways(n-1, k)\n\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    \n    # initialize dp array\n    dp = [0] * k\n    \n    # fill dp array\n    for i in range(k):\n        dp[i] = 1\n    \n    # iterate through fence\n    for i in range(2, n+1):\n        prev = dp[0]\n        for j in range(1, k):\n            dp[j] = prev + dp[j-1]\n            prev = dp[j]\n    \n    # return answer\n    return dp[k-1]"
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    dp[1][1] = 1\n    dp[2][1] = k\n    dp[2][2] = k * k\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] * dp[1][1]\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find(n,m):\n    \"\"\"\n    This function takes two arguments - n and m - and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find(n, m):\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient, remainder = divmod(n, m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return n // m + 1"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w**2 + h**2 > 0:\n        c = math.sqrt(w**2 + h**2)\n        return c\n    else:\n        print(\"Invalid input!\")"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square of the hypotenuse\n    c = math.pow(w, 2) + math.pow(h, 2)\n    # Calculate the square of the other side using the Pythagorean theorem\n    b = math.sqrt(c - math.pow(w, 2))\n    # Return the other side\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    if w**2 + h**2 > 0:\n        c = math.sqrt(w**2 + h**2)\n        return c\n    else:\n        return None"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous data types as input and returns the maximum value.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function returns the maximum value in a list of heterogeneous elements.\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    else:\n        max_val = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > max_val:\n                max_val = lst[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in a list of integers and floats.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    :param lst: list of values\n    :return: maximum value in the list\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_val(lst):\n    \"\"\"\n    Returns the maximum value in the given list.\n    \"\"\"\n    if not lst:\n        return None\n    \n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    This function takes a number as an argument and returns the sum of all divisors of the number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all divisors of that number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum of divisors\n    div_sum = 0\n\n    # Iterate through all numbers from 1 to the number itself\n    for i in range(1, number+1):\n        # Check if the number is a divisor of the given number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            div_sum += i\n\n    # Return the sum of divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all divisors of the number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes an integer number as input and returns the sum of all its divisors.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide the array into two halves\n    mid = n//2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Recursively count the inversions in the left and right halves\n    if len(left_half) > 1:\n        inv_count += get_Inv_Count(left_half)\n    if len(right_half) > 1:\n        inv_count += get_Inv_Count(right_half)\n        \n    # Merge the two halves and count the inversions\n    i, j, k = 0, 0, 0\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] <= right_half[j]:\n            arr[k] = left_half[i]\n            i += 1\n        else:\n            arr[k] = right_half[j]\n            j += 1\n            inv_count += len(left_half[i:])\n            \n        k += 1\n        \n    # Copy the remaining elements of left_half[] if any\n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i += 1\n        k += 1\n        \n    # Copy the remaining elements of right_half[] if any\n    while j < len(right_half):\n        arr[k] = right_half[j]\n        j += 1\n        k += 1\n        \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\ndef get_Inv_Count(arr):\n    return merge_sort(arr)[::-1].count(1)"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr, 0\n    mid = n // 2\n    left_arr, left_inv = get_Inv_Count(arr[:mid])\n    right_arr, right_inv = get_Inv_Count(arr[mid:])\n    inv_count = left_inv + right_inv\n    i, j = 0, 0\n    temp_arr = []\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            temp_arr.append(left_arr[i])\n            i += 1\n        else:\n            temp_arr.append(right_arr[j])\n            j += 1\n            inv_count += len(left_arr[i:])\n    temp_arr += left_arr[i:]\n    temp_arr += right_arr[j:]\n    return temp_arr, inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array.\n    :param arr: The input array.\n    :return: The number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    temp_arr = [0] * n\n    \n    # Sorting the input array using Merge Sort\n    merge_sort(arr, temp_arr, 0, n-1)\n    \n    # Counting the inversions in the sorted array\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count\n\ndef merge_sort(arr, temp_arr, left, right):\n    \"\"\"\n    This function sorts the input array using Merge Sort algorithm.\n    :param arr: The input array.\n    :param temp_arr: A temporary array to store the sorted sub-array.\n    :param left: The starting index of the sub-array.\n    :param right: The ending index of the sub-array.\n    \"\"\"\n    if left < right:\n        mid = (left + right) // 2\n        merge_sort(arr, temp_arr, left, mid)\n        merge_sort(arr, temp_arr, mid+1, right)\n        merge(arr, temp_arr, left, mid, right)\n\ndef merge(arr, temp_arr, left, mid, right):\n    \"\"\"\n    This function merges two sub-arrays of the input array and stores the sorted result in the temporary array.\n    :param arr: The input array.\n    :param temp_arr: A temporary array to store the sorted sub-array.\n    :param left: The starting index of the first sub-array.\n    :param mid: The ending index of the first sub-array.\n    :param right: The ending index of the second sub-array.\n    \"\"\"\n    i = left\n    j = mid + 1\n    k = left\n    \n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            j += 1\n            inv_count += (mid - i + 1)\n        k += 1\n    \n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    \n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    \n    # Copying the sorted sub-array to the input array\n    for i in range(left, right+1):\n        arr[i] = temp_arr[i]"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_inv_count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion is defined as a pair of elements (a[i], a[j]) such that i < j and a[i] > a[j].\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in non-decreasing order using merge sort algorithm.\n    arr = merge_sort(arr)\n\n    # Count the number of inversions.\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array using merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            L = arr[:mid]\n            R = arr[mid:]\n            \n            merge_sort(L)\n            merge_sort(R)\n            \n            i = j = k = 0\n            \n            while i < len(L) and j < len(R):\n                if L[i] < R[j]:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n                    inv_count += (len(L) - i)  # count inversions\n                k += 1\n            \n            while i < len(L):\n                arr[k] = L[i]\n                i += 1\n                k += 1\n            \n            while j < len(R):\n                arr[k] = R[j]\n                j += 1\n                k += 1\n    \n    merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list and flattens it into a single list\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list += flatten_list(element)\n        else:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and flattens it into a single list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for x in stdata:\n        freq[x] += 1\n    \n    # Calculate the maximum aggregate by taking the product of the maximum frequency of any pair of distinct elements\n    max_agg = 1\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            max_agg = max(max_agg, freq[stdata[i]] * freq[stdata[j]])\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    dp = defaultdict(lambda: defaultdict(int))\n\n    for i in range(n):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = stdata[j][1]\n            else:\n                dp[i][j] = max(dp[i-1][j], stdata[i][1] - stdata[j-1][1] + dp[i-1][j-1])\n\n    return dp[n-1][n-1]"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    dp = defaultdict(list)\n    dp[0].append(0)\n    dp[1].append(0)\n    dp[1].append(stdata[0][0])\n    \n    for i in range(2, n):\n        dp[i].append(0)\n        for j in range(1, i+1):\n            dp[i].append(max(dp[i-j][-1]+stdata[i-j][1]*j, dp[i-j+1][-1]+stdata[i-j+1][1]*(i-j)))\n    \n    return max(dp[n-1])"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each value in the list of tuples\n    freq_dict = defaultdict(int)\n    for value in stdata:\n        freq_dict[value] += 1\n    \n    # Initialize variables to keep track of the maximum aggregate and the current aggregate\n    max_agg = 0\n    curr_agg = 0\n    \n    # Loop through the dictionary and add the value multiplied by its frequency to the current aggregate\n    for value, frequency in freq_dict.items():\n        curr_agg += value * frequency\n        \n        # Check if the current aggregate is greater than the maximum aggregate and update it accordingly\n        if curr_agg > max_agg:\n            max_agg = curr_agg\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each student's scores\n    frequency = defaultdict(int)\n    for student, score in stdata:\n        frequency[student] += score\n    \n    # Find the maximum aggregate\n    max_agg = 0\n    for student, score in stdata:\n        max_agg += frequency[student]\n        frequency[student] -= score\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n\n    # Count the frequency of each element in the list\n    for elem in stdata:\n        freq[elem] += 1\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            if stdata[i] + stdata[j] > stdata[j] + stdata[i]:\n                max_agg += freq[stdata[i]] * freq[stdata[j]]\n            else:\n                max_agg += freq[stdata[j]] * freq[stdata[i]]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    if not stdata:\n        return 0\n\n    # Initialize the dictionary to store the count of each item\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, weight in stdata:\n        item_count[item] += weight\n\n    # Initialize the maximum aggregate to be 0\n    max_agg = 0\n\n    # Iterate through the items and calculate the aggregate\n    for item, weight in item_count.items():\n        agg = weight * (weight - 1) // 2\n        if agg > max_agg:\n            max_agg = agg\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the count of each value\n    count_dict = defaultdict(int)\n    # Iterate over the list of tuples\n    for val, count in stdata:\n        # Increment the count for the current value\n        count_dict[val] += count\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n    # Iterate over the dictionary and calculate the maximum aggregate\n    for val, count in count_dict.items():\n        max_agg += count*(count-1)//2\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each stock symbol\n    freq = defaultdict(int)\n\n    # iterate through the list of tuples and update the frequency of each stock symbol\n    for s, t, p in stdata:\n        freq[s] += 1\n\n    # create a dictionary to store the total profit for each stock symbol\n    profit = defaultdict(int)\n\n    # iterate through the list of tuples and update the total profit for each stock symbol\n    for s, t, p in stdata:\n        profit[s] += t * p\n\n    # create a dictionary to store the total cost for each stock symbol\n    cost = defaultdict(int)\n\n    # iterate through the list of tuples and update the total cost for each stock symbol\n    for s, t, p in stdata:\n        cost[s] += t * p\n\n    # iterate through the list of tuples again to find the maximum aggregate\n    max_agg = 0\n    for s, t, p in stdata:\n        max_agg = max(max_agg, profit[s] - cost[s])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculates the maximum aggregate from a list of tuples (start_time, end_time, value).\n    '''\n    # Initialize the dictionary to store the running sum of values during each interval\n    running_sum = defaultdict(int)\n    max_aggregate = 0\n\n    # Iterate over the data and update the running sum and maximum aggregate\n    for start, end, value in stdata:\n        running_sum[start] += value\n        running_sum[end] -= value\n\n        max_running_sum = max(running_sum.values())\n        max_aggregate = max(max_aggregate, max_running_sum)\n\n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:]\n        if len(bits) < n:\n            bits = '0'*(n-len(bits)) + bits\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # convert the integer to binary string and pad with 0s to make length 2n\n        binary = bin(i)[2:].zfill(2*n)\n        \n        # check if the sum of the first n bits is the same as the sum of the last n bits\n        if sum(int(binary[:n])) == sum(int(binary[n:])):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if int(bits[:n], 2) == int(bits[n:], 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        bits = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in bits[:n]) == sum(int(bit) for bit in bits[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the integer to binary string\n        binary_seq = bin(i)[2:]\n        \n        # Pad the binary sequence with leading zeros to make length 2n\n        binary_seq = '0'*(2*n - len(binary_seq)) + binary_seq\n        \n        # Check if the sum of first n bits is same as sum of last n bits\n        if int(binary_seq[:n], 2) == int(binary_seq[n:], 2):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(n)\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    \n    # A bitmask of all 1's of length n\n    mask = (1 << n) - 1\n    \n    # Iterate through all binary sequences of length 2n\n    for i in range((1 << (2*n))):\n        # Convert the current binary number to a list of bits\n        bits = bin(i)[2:].zfill(2*n)\n        \n        # Check if the sum of first n bits is same as sum of last n bits\n        if int(bits[:n], 2) == int(bits[n:], 2):\n            # Increment the count of valid binary sequences\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:]\n        if len(bits) < n:\n            bits = '0'*(n-len(bits)) + bits\n        if bits[:n] == bits[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        left_sum = sum(int(binary[i]) for i in range(n))\n        right_sum = sum(int(binary[i]) for i in range(n-1,-1,-1))\n        if left_sum == right_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(2**(n-1)):\n            j = i ^ (2**(n-1)-1)\n            if sum(format(i, 'b')) == sum(format(j, 'b')):\n                count += 1\n        return count"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, (list, tuple, set)):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def dict_depth(d, level=1):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return level\n    return max(dict_depth(v, level+1) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(value) for value in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_element(arr, ranges, rotations, index):\n    # Convert ranges and rotations to lists if they are not already lists\n    if not isinstance(ranges, list):\n        ranges = [ranges]\n    if not isinstance(rotations, list):\n        rotations = [rotations]\n\n    # Calculate the total number of rotations based on ranges\n    total_rotations = sum([range_size // rotation_size for range_size, rotation_size in zip(ranges, rotations)])\n\n    # Calculate the final index after rotations\n    final_index = (index + total_rotations) % len(arr)\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # First, we need to calculate the total number of elements in the array\n    total_elements = len(arr) * ranges\n    \n    # Then we calculate the index of the element we need to find by adding the rotations to the index\n    final_index = (index + rotations) % total_elements\n    \n    # Finally, we calculate the range of the array that we need to search in\n    start_range = final_index // ranges\n    end_range = (final_index // ranges) + 1\n    \n    # We then use the range and the index to find the element in the array\n    return arr[start_range][end_range]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function will return the element present at a given index after a given number of rotations.\n    '''\n    # Creating a copy of the array to prevent any changes to the original array\n    arr_copy = arr.copy()\n\n    # Rotating the array for the given number of rotations\n    arr_copy = arr_copy[rotations:] + arr_copy[:rotations]\n\n    # Finding the element present at the given index\n    element = arr_copy[index]\n\n    # Returning the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    start_index = ranges[0]\n    end_index = ranges[1]\n    n = end_index - start_index + 1\n    # find index of first occurrence of element\n    first_occurrence = (index - start_index + rotations) % n\n    # find the element at the index\n    element = arr[first_occurrence]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_element(arr, ranges, rotations, index):\n    n = len(arr)\n    if ranges == 1 and rotations == 0:\n        return arr[index]\n    else:\n        range_size = (n // ranges) * 2\n        left_range_start = index - range_size // 2\n        left_range_end = left_range_start + range_size\n        right_range_start = n - range_size // 2 - 1\n        right_range_end = right_range_start - range_size + 1\n        left_range = arr[left_range_start:left_range_end + 1]\n        right_range = arr[right_range_start:right_range_end - 1:-1]\n        if index >= left_range_start and index <= left_range_end:\n            return find_element(left_range, ranges // 2, rotations, index - left_range_start)\n        elif index >= right_range_start and index <= right_range_end:\n            return find_element(right_range, ranges // 2, rotations, right_range_end - index)\n        else:\n            return None\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nranges = 4\nrotations = 3\nindex = 8\nprint(find_element(arr, ranges, rotations, index))"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    n = len(arr)\n    temp_index = index\n    for i in range(rotations):\n        temp_index = (temp_index - ranges[i] + n) % n\n    return arr[temp_index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    # Get the size of the array\n    n = len(arr)\n    \n    # Rotate the array by rotations\n    arr = arr[rotations:] + arr[:rotations]\n    \n    # Find the element at the given index in the rotated array\n    element = arr[index]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Convert ranges to list of tuples\n    ranges = [(int(i.split(\"-\")[0]), int(i.split(\"-\")[1])) for i in ranges.split(\",\")]\n    # Convert rotations to list of tuples\n    rotations = [(int(i.split(\"-\")[0]), int(i.split(\"-\")[1])) for i in rotations.split(\",\")]\n    # Convert index to int\n    index = int(index)\n\n    # Find the range of elements to be rotated\n    for r in rotations:\n        if index >= r[0] and index <= r[1]:\n            for i in range(len(ranges)):\n                if r[0] >= ranges[i][0] and r[0] <= ranges[i][1]:\n                    range_start = i\n                if r[1] >= ranges[i][0] and r[1] <= ranges[i][1]:\n                    range_end = i\n            break\n    \n    # Rotate the list of elements\n    rotated_arr = arr[range_start:range_end+1] + arr[:range_start] + arr[range_end+1:]\n    rotated_arr = rotated_arr[rotations[0][0]:rotations[0][1]+1] + rotated_arr[:rotations[0][0]] + rotated_arr[rotations[0][1]+1:]\n\n    # Return the element at the given index\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_element(arr, ranges, rotations, index):\n    '''\n    Find the element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if (mid == index or (mid < index and arr[mid + 1] <= arr[index]) or (mid > index and arr[mid - 1] <= arr[index])):\n            if (ranges[mid] <= rotations):\n                return arr[mid]\n            else:\n                right = mid - 1\n        elif (mid < index):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Convert ranges and rotations into a single array of integers\n    offsets = [range_ * rotation for range_, rotation in zip(ranges, rotations)]\n    # Calculate the total offset, taking into account the initial index\n    total_offset = sum(offsets[:index])\n    # Add the initial offset to the index to get the final index\n    final_index = index + total_offset\n    # Get the final element and return it\n    return arr[final_index]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p\\w*', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    p_words = [word for word in words if re.match(r'^p\\w+', word)]\n    if len(p_words) < 2:\n        return None\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-z]*', word):\n            p_words.append(word)\n    return p_words[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    return p_words[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p\\w+')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    This function takes a list of words as input and returns two words from the list that start with the letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    return p_words[:2]\n\nwords = [\"apple\", \"pear\", \"peach\", \"pineapple\", \"plum\", \"pine\"]\nprint(start_withp(words)) # Output: ['pear', 'peach']"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word, re.IGNORECASE):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"There is less than two words starting with letter 'p'\"\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w+')\n    candidates = [w for w in words if pattern.match(w)]\n    if len(candidates) < 2:\n        return None\n    return candidates[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function returns two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w*')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word, re.IGNORECASE):\n            p_words.append(word)\n    return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(n):\n        if i < index:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(dp[j] + a[i] for j in range(i))\n\n    max_sum = max(dp[i] for i in range(index + 1) if i <= k)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    max_sum = 0\n    dp = [0] * n\n    for i in range(index):\n        # check all previous indices\n        for j in range(i):\n            # if current element is greater than previous element and \n            # including current element will not exceed k\n            if a[i] > a[j] and dp[j] + a[i] <= k:\n                # update dp[i] if current sum is greater than previous sum\n                if dp[i] < dp[j] + a[i]:\n                    dp[i] = dp[j] + a[i]\n        # update max_sum if dp[i] is greater than previous max_sum\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum and prefix sum array\n    max_sum = 0\n    prefix_sum = [0] * n\n\n    # Loop through the array\n    for i in range(index, -1, -1):\n        if i == n - 1:\n            prefix_sum[i] = a[i]\n        else:\n            prefix_sum[i] = prefix_sum[i+1] + a[i]\n\n        # Check if kth element is after ith element and less than or equal to current prefix sum\n        if k > i and k <= prefix_sum[i]:\n            max_sum = prefix_sum[i] + prefix_sum[k] - prefix_sum[i+1]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    dp = [0] * n\n    for i in range(k):\n        dp[i] = a[i]\n    for i in range(k, n):\n        dp[i] = max(dp[j] + a[i] for j in range(k))\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = 0\n    prefix_sum = [0] * n\n\n    # Calculate prefix sum\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i-1] + a[i]\n\n    # Traverse through all possible values of i\n    for i in range(index+1, n):\n        # Check if current element is greater than the kth element\n        if a[i] > a[k]:\n            # Check if the sum of prefix sum from 0 to i-1 is greater than the maximum sum\n            if prefix_sum[i] - prefix_sum[index] > max_sum:\n                max_sum = prefix_sum[i] - prefix_sum[index]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the dp array with all zeros\n    dp = [0]*n\n\n    # Initialize the max_sum and curr_sum variables\n    max_sum = 0\n    curr_sum = 0\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to the kth element, skip it\n        if i == index:\n            continue\n\n        # If the current element is less than or equal to the kth element, add it to the current sum\n        if a[i] <= a[k]:\n            curr_sum += a[i]\n        # If the current element is greater than the kth element, reset the current sum to 0\n        else:\n            curr_sum = 0\n\n        # Update the dp array with the maximum sum including the current element\n        dp[i] = max(dp[i-1], curr_sum)\n\n        # Update the maximum sum\n        if i == n-1:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store maximum sum for each prefix\n    max_sum = [0] * n\n\n    # Initialize the maximum sum for the prefix that ends at the first index\n    max_sum[0] = a[0]\n\n    # Initialize the maximum sum for the prefix that ends at the second index\n    if index == 1 and a[1] > a[0]:\n        max_sum[1] = a[1]\n    else:\n        max_sum[1] = 0\n\n    # Initialize the maximum sum for the prefix that ends at the third index\n    if index == 2 and a[2] > a[1]:\n        max_sum[2] = a[2]\n    else:\n        max_sum[2] = 0\n\n    # Calculate the maximum sum for the prefix that ends at each index\n    for i in range(3, n):\n        # Include the current element a[i] in the prefix that ends at the previous index\n        if a[i] > a[i-1] and max_sum[i-1] + a[i] > max_sum[i]:\n            max_sum[i] = max_sum[i-1] + a[i]\n\n        # Include the element a[k] in the prefix that ends at the previous index\n        if k > i and a[k] > a[i-1] and max_sum[i-1] + a[k] > max_sum[i]:\n            max_sum[i] = max_sum[i-1] + a[k]\n\n    # Return the maximum sum of the prefix that ends at the ith index\n    return max_sum[index]"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_index = -1\n    prefix_sum = 0\n    kth_element_sum = 0\n    \n    # Traverse the array from 0 to i\n    for i in range(index):\n        prefix_sum += a[i]\n        \n        # Check if the current element is greater than or equal to the kth element\n        if a[i] >= a[k]:\n            kth_element_sum = prefix_sum + a[k]\n            \n            # Update max_sum and max_sum_index if kth_element_sum is greater than max_sum\n            if kth_element_sum > max_sum:\n                max_sum = kth_element_sum\n                max_sum_index = k\n                \n    return max_sum, max_sum_index"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes the prefix of an array, a, and the index i. \n    It returns the maximum sum of an increasing subsequence including the kth element after i.\n    \"\"\"\n    max_sum = float('-inf')\n    max_sum_index = -1\n    for i in range(index):\n        if a[i] <= a[index] and a[i] + a[k] > max_sum:\n            max_sum = a[i] + a[k]\n            max_sum_index = i\n    return max_sum_index, max_sum"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    for i in range(index+1):\n        dp[i] = a[i]\n    for i in range(index+1, n):\n        if a[i] > dp[i-1]:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[i-1]\n    return sum(dp) - a[index] + a[k]\n"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    return tuplex_copy[m:n]"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of a tuple.\n\n    Args:\n    tuplex (tuple): The input tuple.\n    m (int): The starting index of the colon (inclusive).\n    n (int): The ending index of the colon (exclusive).\n\n    Returns:\n    A new tuple that contains the elements of the input tuple from index `m` to index `n-1`.\n    \"\"\"\n    colon = deepcopy(tuplex[m:n])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n > len(tuplex):\n        return None\n    else:\n        return deepcopy(tuplex[m:n])"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Slice the tuple using the given indices\n    new_tuplex = new_tuplex[m:n+1]\n    # Return the sliced tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    if n <= 0:\n        return ()\n    elif n >= len(tuplex):\n        return tuplex\n    \n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[m:]\n    new_tuplex = new_tuplex[:n]\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m:n]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = deepcopy(tuplex)\n    colon_tuplex = colon_tuplex[m-1:n]\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    if m!= 0:\n        colon = colon[m:]\n    if n!= len(colon):\n        colon = colon[:n]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        m, n = n, m\n    \n    colon_tuplex = ()\n    for i in range(m-1, n):\n        colon_tuplex += (tuplex[i],)\n        \n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex)\n    # Slice the tuple based on the given indexes\n    if m > length:\n        return \"Index out of range.\"\n    elif n > length:\n        return \"Index out of range.\"\n    elif m > n:\n        return \"Invalid range.\"\n    else:\n        return tuplex[m-1:n]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize a list to store the products\n    products = []\n    # iterate through the first list\n    for i in range(len(nums1)):\n        # iterate through the second list\n        for j in range(len(nums2)):\n            # calculate the product and append it to the list\n            products.append(nums1[i] * nums2[j])\n    # sort the products in descending order\n    products.sort(reverse=True)\n    # return the first N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # combine the two lists into a single list of tuples\n    combined = [(n1, n2) for n1 in nums1 for n2 in nums2]\n    # sort the list by the product of the two factors\n    combined.sort(key=lambda x: x[0] * x[1], reverse=True)\n    # return the top N products\n    return [p[0] * p[1] for p in combined[:N]]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    result = []\n    for i in range(N):\n        result.append(nums1[i]*nums2[i])\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest and second largest products found so far\n    largest = -float('inf')\n    second_largest = -float('inf')\n    \n    # Iterate through the lists and select the largest and second largest factors for each list\n    for i in range(N):\n        for j in range(N):\n            # Check if the current factor is larger than the largest product found so far\n            if nums1[i] * nums2[j] > largest:\n                second_largest = largest\n                largest = nums1[i] * nums2[j]\n            # Check if the current factor is larger than the second largest product found so far and larger than the largest product found so far\n            elif nums1[i] * nums2[j] > second_largest and nums1[i] * nums2[j] < largest:\n                second_largest = nums1[i] * nums2[j]\n    \n    # Return the largest and second largest products found\n    return largest, second_largest"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    result = []\n    # loop through the lists\n    for i in range(N):\n        for j in range(N):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n            # if product is greater than current maximum, add to result and update max_product\n            if product > max_product:\n                result.append((nums1[i], nums2[j]))\n                max_product = product\n    # return the specified number of largest products\n    return result[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the products and the indices of the chosen factors\n    products = []\n    indices = []\n    \n    # Iterate over the first N factors of nums1 and nums2\n    for i in range(N):\n        # Calculate the product of the chosen factors\n        product = nums1[i] * nums2[i]\n        \n        # Add the product and its indices to the lists\n        products.append(product)\n        indices.append((i, i))\n        \n        # Check if there are more factors to consider\n        if i + 1 < N:\n            # Calculate the product of the next factor in each list\n            next_product1 = nums1[i+1] * nums2[i]\n            next_product2 = nums1[i] * nums2[i+1]\n            \n            # Choose the factor with the largest product and update the corresponding index\n            if next_product1 > next_product2:\n                indices[-1] = (i, i+1)\n            else:\n                indices[-1] = (i+1, i)\n    \n    return products, indices"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the result list to store the products\n    result = []\n    \n    # Iterate over the smaller list to find the product of each element with the largest element in the other list\n    for i in range(N):\n        max1 = max(nums1)\n        max2 = max(nums2)\n        if max1*nums2[i] > max2*nums1[i]:\n            result.append(max1*nums2[i])\n        else:\n            result.append(max2*nums1[i])\n    \n    # Sort the result list in descending order and return the top N elements\n    result.sort(reverse=True)\n    return result[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # create a list to store the largest products\n    largest_products = []\n    \n    # iterate over the first list\n    for num1 in nums1:\n        # iterate over the second list\n        for num2 in nums2:\n            # calculate the product of the two factors\n            product = num1 * num2\n            # add the product to the list of largest products if it's larger than the smallest product so far\n            if len(largest_products) < N or product > min(largest_products):\n                largest_products.append(product)\n                # sort the list of largest products in descending order\n                largest_products.sort(reverse=True)\n                # truncate the list to the specified number of products\n                largest_products = largest_products[:N]\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for i in range(N):\n        for j in range(N):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(10,20))\nprint(maximum(20,10))\nprint(maximum(10,10))"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Returns the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an argument and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Returns the number with the leftmost unset bit set to 1.\n    \"\"\"\n    return n | (n-1) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Find the rightmost 0 bit in the binary representation of n\n    rightmost_zero_bit = 1 << (n & -n).bit_length() - 1\n    \n    # Set the left most unset bit to 1\n    return n | rightmost_zero_bit"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the rightmost bit that is set to 0\n    bit = 1\n    while (bit & n):\n        bit <<= 1\n    # Set the bit to 1\n    return (bit - 1) | n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number.\n    \"\"\"\n    # To find the rightmost 0 bit in the binary representation of n, we can use the bitwise AND operator with a mask that has all bits set to 1 except for the rightmost set bit.\n    # We can do this by shifting the mask to the right by the number of bits in n minus one and subtracting 1.\n    mask = (1 << len(bin(n)) - 1) - 1\n    # We shift the mask to the right by the number of bits in n minus one and subtract 1 to set the rightmost 0 bit to 1.\n    # We then bitwise AND it with n to set the leftmost unset bit to 1.\n    return n & ~(mask & ~n)"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of a given number.\n    \"\"\"\n    mask = n ^ (n-1)\n    return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function returns the number with the left most unset bit set to 1.\n    \"\"\"\n    # Find the right most bit that is set to 1\n    right_most_set_bit = n & -n\n\n    # Calculate the left most unset bit\n    left_most_unset_bit = right_most_set_bit - (right_most_set_bit >> 1)\n\n    # Set the left most unset bit to 1\n    result = n | left_most_unset_bit\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Sets the left most unset bit of a given number.\n    \"\"\"\n    return n | (n - 1) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit of a number.\n    '''\n    return (n | (n-1)) + 1"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    # Convert the integer n to binary representation and store it in a string\n    binary_string = bin(n)[2:]\n\n    # Initialize the left most bit to be set\n    left_most_bit = 0\n\n    # Loop through the binary string from left to right\n    for bit in binary_string:\n        # If the bit is 0, set it to 1 and break out of the loop\n        if bit == '0':\n            left_most_bit = '1'\n            break\n\n    # Convert the binary string to an integer and set the left most bit to 1\n    new_n = int(binary_string.replace(left_most_bit, '1', 1), 2)\n\n    return new_n"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the left most set bit using bitwise AND operation with n-1\n    set_bit = n & (n-1)\n\n    # Find the right most set bit using bitwise XOR operation with n\n    right_most_set_bit = n ^ set_bit\n\n    # Shift the right most set bit to the left by 1 position\n    shifted_right_most_set_bit = right_most_set_bit << 1\n\n    # Set the left most unset bit by performing bitwise OR operation with n\n    left_most_unset_bit = n | shifted_right_most_set_bit\n\n    return left_most_unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two arguments:\n    r: the radius of the base of the cone\n    h: the height of the cone\n\n    It returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    \"\"\"\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\n\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(radius,height))"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns its volume.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as input and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with given radius and height.\n\n    Args:\n        r (float): radius of the base of the cone.\n        h (float): height of the cone.\n\n    Returns:\n        float: volume of the cone.\n    '''\n    return (1/3)*math.pi*r**2*h"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while(power <= n):\n        n = n - power\n        power = power * 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    # Subtract 1 to get the highest power of 2 that is less than or equal to n\n    power = power // 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    # initialize a variable to store the highest power of 2 found\n    highest_power_of_2 = 0\n    \n    # loop through all possible values of power of 2 from 0 to n\n    for i in range(n+1): \n        # if i is a power of 2, update the highest power of 2 found\n        if 2**i <= n: \n            highest_power_of_2 = 2**i\n    \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def highest_power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n\n    Args:\n    n (int): The number to find the highest power of 2 of.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n\n    # Initialize the highest power of 2 to 0.\n    highest_power_of_2 = 0\n\n    # Loop from 1 to n (inclusive) and check if each number is a power of 2.\n    for i in range(1, n+1):\n        if i == (1 << i.bit_length() - 1):\n            # If i is a power of 2, update the highest power of 2.\n            highest_power_of_2 = i\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes a positive integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        if n == 1:\n            break\n        n = n >> 1\n        power = power << 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while(power_of_2 <= n):\n        power_of_2 = power_of_2*2\n    return power_of_2/2\n\nprint(highest_Power_of_2(10)) # Output: 8\nprint(highest_Power_of_2(12)) # Output: 12"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        n = n - power\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while(power <= n):\n        power = power * 2\n    power = power/2\n    return int(power)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while (i * 2) <= n: \n        i *= 2\n    return i - 1"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_prev_prev = 2\n        lucas_prev = 1\n        for i in range(2, n+1):\n            lucas_curr = lucas_prev + lucas_prev_prev\n            lucas_prev_prev = lucas_prev\n            lucas_prev = lucas_curr\n        return lucas_curr\n"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    This function finds then'th Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        l1 = 2\n        l2 = 1\n        for i in range(2, n+1):\n            l = l1 + l2\n            l1 = l2\n            l2 = l\n        return l"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(0)) # Output: 2\nprint(find_lucas(1)) # Output: 1\nprint(find_lucas(10)) # Output: 121\nprint(find_lucas(20)) # Output: 676"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    This function applies a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Apply the format string to each element of the list\n    result = [string.format(element) for element in list_]\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    This function takes a list and a string as input. \n    It applies the given format string to all the elements of the list.\n    \"\"\"\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\n            l2[i]: {\n                l3[i]: None\n            }\n        }\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    This function will convert three lists to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['name'] = l1[i]\n        inner_dict['age'] = l2[i]\n        inner_dict['city'] = l3[i]\n        result[i] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result_dict = {}\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            result_dict[l1[i]][l2[j]] = l3[i][j]\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l3, l1))\n    result = {k:v for k,v in d1.items() if k in d2}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create a dictionary to store the data\n    result_dict = {}\n\n    # iterate over the first list\n    for i in range(len(l1)):\n        # create a new dictionary for each element in the first list\n        sub_dict = {}\n\n        # add the data from the second list to the sub-dictionary\n        sub_dict['key1'] = l2[i]\n        sub_dict['key2'] = l3[i]\n\n        # add the sub-dictionary to the result dictionary\n        result_dict[l1[i]] = sub_dict\n\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        inner_dict = {}\n        inner_dict['key1'] = l1[i]\n        inner_dict['key2'] = l2[i]\n        inner_dict['key3'] = l3[i]\n        result.append(inner_dict)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = []\n            for k in range(len(l3)):\n                result[l1[i]][l2[j]].append(l3[k])\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    # Find the maximum sum by using the given equation\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The maximum sum possible for\", n, \"using the given equation is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return max((get_max_sum(n//2) + n//2), n)\n    elif n % 3 == 0:\n        return max((get_max_sum(n//3) + n//3), n)\n    elif n % 4 == 0:\n        return max((get_max_sum(n//4) + n//4), n)\n    elif n % 5 == 0:\n        return max((get_max_sum(n//5) + n//5), n)\n    else:\n        return n"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    if n % 5 == 0:\n        return n\n    else:\n        return max((get_max_sum(n//5) + get_max_sum(n//3) + get_max_sum(n//2) + get_max_sum(n//4)), n)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_lst = []\n    \n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n            \n    return max_lst"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Find the list with maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    result = [x for x in input_list if len(x) == max_length]\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function finds the list with maximum length from a given list.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    # Loop through the list and find the maximum length list\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    # Return the maximum length list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function will check whether the given tuple contains no duplicates or not.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to a set to check for duplicates\n    set_tup = set(test_tup)\n    # If set length is equal to tuple length, there are no duplicates\n    return len(set_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it contains no duplicates, else False.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None  # if all characters are repeated"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    \n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n    \n    return None  # no non-repeating character found"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return \"All characters are repeating\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store character counts\n    char_count = {}\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # iterate over the characters in the string again\n    for char in str1:\n        # if the character has a count of 1, return it\n        if char_count[char] == 1:\n            return char\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"All characters are repeated.\""
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string and increment its count in the dictionary\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n        \n    # Loop through each character in the string again and return the first character whose count is 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n        \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeating character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate over each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over each character in the string and return the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char in str1:\n        if count[char] == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    elif string[0] == string[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Check if the string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The given string starts and ends with the same character.\")\nelse:\n    print(\"The given string does not start and end with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    return (a+b+c)/3"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # find the median value\n    if len(sorted_numbers) % 2 == 0:\n        # if the length of the sorted numbers is even\n        median_value = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        # if the length of the sorted numbers is odd\n        median_value = sorted_numbers[len(sorted_numbers)//2]\n    # return the median value\n    return median_value"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    a, b, c = sorted([a, b, c])\n\n    # Find the median\n    if len(set([a, b, c])) == 1:\n        # All three numbers are the same\n        median = a\n    elif len(set([a, b, c])) == 2:\n        # Two numbers are the same\n        median = (a + b + c) / 2\n    else:\n        # Three numbers are distinct\n        median = b\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            if b > c:\n                return (a + b + c) / 3\n            else:\n                return (a + c + b) / 3\n        else:\n            return (b + a + c) / 3\n    else:\n        if b > c:\n            if a > c:\n                return (a + b + c) / 3\n            else:\n                return (a + c + b) / 3\n        else:\n            return (b + c + a) / 3"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function returns the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Find the middle index\n    mid_index = len(sorted_nums) // 2\n    # If the list has an even number of elements, the median is the average of the middle two elements\n    if len(sorted_nums) % 2 == 0:\n        median = (sorted_nums[mid_index - 1] + sorted_nums[mid_index]) / 2\n    # If the list has an odd number of elements, the median is the middle element\n    else:\n        median = sorted_nums[mid_index]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        # If there are two middle numbers, return their average\n        return (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        # If there is only one middle number, return it\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(set(sorted_numbers)) == 1:\n        median = sorted_numbers[0]\n    elif len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2] + numbers[n//2 - 1]) / 2\n    else:\n        median = numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    middle_index = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        return sorted_numbers[middle_index]"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = []\n    for num in nums:\n        sum_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the sum of digits of each number in the list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of the sum of digits of each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        while num!= 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num > 0:\n            total += num % 10\n            num //= 10\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num //= 10\n        result.append(sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Computes the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(map(int, str(num))) for num in nums]"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i < len(test_tup1) and i < len(test_tup2):\n            result += (test_tup1[i] ^ test_tup2[i],)\n        elif i < len(test_tup1):\n            result += (test_tup1[i],)\n        else:\n            result += (test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(item))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples in the list.\n    '''\n    # Convert the list to a set of tuples\n    unique_tuples = set(test_list)\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    freq = set()\n    for item in test_list:\n        freq.add(tuple(item))\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tuple in test_list:\n        if tuple in freq_dict:\n            freq_dict[tuple] += 1\n        else:\n            freq_dict[tuple] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set()\n    for i in test_list:\n        freq.add(tuple(i))\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        tup_sum = []\n        for j in range(len(test_tup1[i])):\n            tup_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(tup_sum))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = []\n        for j in range(len(test_tup1[i])):\n            new_tuple.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(new_tuple))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index-wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (temp_tup,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Create an empty list to store the added values\n    added_values = []\n\n    # Iterate through both tuples using a for loop and add the corresponding elements\n    for i in range(len(test_tup1)):\n        added_values.append(tuple(map(lambda x, y: x+y, test_tup1[i], test_tup2[i])))\n\n    return added_values"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        tup_row = ()\n        for j in range(len(test_tup1[0])):\n            tup_row += (test_tup1[i][j] + test_tup2[i][j],)\n        result_tup += (tup_row,)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        new_tup = []\n        for elem1, elem2 in zip(tup1, tup2):\n            new_tup.append(elem1 + elem2)\n        result.append(tuple(new_tup))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        temp_tuple = ()\n        for j in range(len(test_tup1[i])):\n            temp_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (temp_tuple,)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the two tuples using a nested loop\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            # Add the elements at the current index of both tuples and append the result to the row list\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        # Append the row list to the result list\n        result.append(row)\n    # Return the result list\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns their minimum.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments, a and b, and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists in the tuple\")\n    else:\n        print(\"Element does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    if tuple1.count(tuplex) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1:\n        print(\"Element found in the tuple.\")\n    else:\n        print(\"Element not found in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as an input and returns True if the parity of the number is odd, else returns False.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The number is Even.\")\n    else: \n        print(\"The number is Odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f'{x} is even.')\n    else:\n        print(f'{x} is odd.')"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Find the index of the rightmost digit that can be swapped\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n\n    # If no such digit was found, return -1 (no bigger number possible)\n    if i < 0:\n        return -1\n\n    # Find the smallest digit that can be swapped with the digit at index i\n    j = i + 1\n    min_digit = min(d for d in digits[i+1:] if d > digits[i])\n\n    # Swap the digits and return the new number\n    digits[i], digits[digits.index(min_digit)] = digits[digits.index(min_digit)], digits[i]\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n = str(n)\n    n = list(n)\n    i = len(n) - 1\n    while i > 0:\n        if n[i] < n[i - 1]:\n            n[i], n[i - 1] = n[i - 1], n[i]\n            n = int(''.join(n))\n            return n\n        i -= 1\n    n.sort(reverse=True)\n    return int(''.join(n))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a string and split it into a list of digits\n    digits = list(str(n))\n    \n    # Initialize variables for the next bigger number and its digits\n    next_bigger = None\n    next_digits = None\n    \n    # Iterate over the digits in reverse order\n    for i in range(len(digits)-1, 0, -1):\n        # If the digit is smaller than its next digit, find the next bigger number by swapping them\n        if digits[i] < digits[i-1]:\n            # Create a copy of the digits list for the next bigger number\n            next_digits = digits.copy()\n            # Swap the digits and convert back to an integer\n            next_digits[i], next_digits[i-1] = next_digits[i-1], next_digits[i]\n            next_bigger = int(''.join(next_digits))\n            # Stop iterating as we have found the next bigger number\n            break\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # Convert n to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost non-9 digit\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == '9':\n        i -= 1\n        \n    # If all digits are 9, return -1 (no greater number possible)\n    if i < 0:\n        return -1\n    \n    # Increment the rightmost non-9 digit\n    digits[i] = str(int(digits[i]) + 1)\n    \n    # Pad the remaining digits with 0\n    digits[i+1:] = ['0'] * (len(digits) - i - 1)\n    \n    # Convert the list of digits back to an integer\n    result = int(''.join(digits))\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost non-zero digit and its index\n    rightmost_nonzero_index = None\n    for i in range(len(digits)-1, -1, -1):\n        if digits[i]!= '0':\n            rightmost_nonzero_index = i\n            break\n    \n    # If all digits are zero, return None\n    if rightmost_nonzero_index is None:\n        return None\n    \n    # Find the smallest digit greater than the rightmost non-zero digit\n    smallest_greater_digit = None\n    for digit in digits[rightmost_nonzero_index+1:]:\n        if digit!= '0':\n            smallest_greater_digit = digit\n            break\n    \n    # If there are no such digits, return None\n    if smallest_greater_digit is None:\n        return None\n    \n    # Swap the rightmost non-zero digit with the smallest greater digit\n    digits[rightmost_nonzero_index], digits[rightmost_nonzero_index+digits[rightmost_nonzero_index+1:].index(smallest_greater_digit)+rightmost_nonzero_index+1] = digits[rightmost_nonzero_index+digits[rightmost_nonzero_index+1:].index(smallest_greater_digit)+rightmost_nonzero_index+1], digits[rightmost_nonzero_index]\n    \n    # Reverse the digits and convert them back to an integer\n    return int(''.join(digits[::-1]))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a list of digits\n    digits = list(str(n))\n    \n    # reverse the digits and convert it back to an integer\n    reversed_digits = int(\"\".join(reversed(digits)))\n    \n    # check if the reversed number is greater than the original number\n    if reversed_digits > n:\n        return reversed_digits\n    else:\n        return -1\n    \n"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a list of digits\n    digits = list(str(n))\n    \n    # Find the rightmost digit that can be incremented\n    i = len(digits) - 1\n    while i >= 0 and digits[i] == '9':\n        i -= 1\n    \n    # If all digits are '9', return -1 (no next bigger number possible)\n    if i < 0:\n        return -1\n    \n    # Increment the rightmost digit and replace all digits to the right of it with '0'\n    digits[i] = str(int(digits[i]) + 1)\n    digits[i+1:] = ['0'] * (len(digits) - i - 1)\n    \n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and store it in a list\n    num_list = list(str(n))\n    \n    # Initialize the variables\n    max_num = -1\n    max_num_str = \"\"\n    \n    # Loop through all possible permutations of the digits in the list\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            # Swap the two digits and convert the list back to an integer\n            temp = num_list[i]\n            num_list[i] = num_list[j]\n            num_list[j] = temp\n            new_num = int(''.join(num_list))\n            \n            # Check if the new number is greater than the current maximum\n            if new_num > n and new_num > max_num:\n                max_num = new_num\n                max_num_str = str(new_num)\n    \n    # Return the maximum number as a string\n    return max_num_str"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    # Create a new list to store the indices of digits in descending order\n    indices = sorted([i for i in range(len(num_list))], reverse=True)\n    # Initialize the result list to store the digits of the next bigger number\n    result = []\n    # Iterate over the indices in descending order\n    for i in indices:\n        # If the digit at the current index is greater than the previous digit,\n        # swap the digit at the current index with the previous digit\n        if i > 0 and int(num_list[i]) > int(num_list[i-1]):\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n            # Add the current index to the result list\n            result.append(i)\n            # Sort the result list in ascending order\n            result.sort()\n            # Convert the result list to a string and return the string as the next bigger number\n            return int(''.join(num_list[:i] + result + num_list[i+1:]))\n        # If the digit at the current index is smaller than or equal to the previous digit,\n        # add the current index to the result list\n        else:\n            result.append(i)\n    # If no such number can be formed, return None\n    return None"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    next_biggest = None\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] < digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n                next_biggest = int(''.join(digits))\n                digits = list(str(n))\n                break\n        if next_biggest:\n            break\n    return next_biggest"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    for i in range(k):\n        pair = heapq.heappop(heap)\n        pairs.append([nums1[pair[1]], nums2[pair[2]]])\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in nums1:\n        for j in nums2:\n            heapq.heappush(pairs, (i + j, i, j))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs)[1:])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        pair, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num + num2, num, num2))\n    return [heapq.heappop(heap) for i in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, num1, num2))\n    return [heapq.heappop(heap)[1:] for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i], nums2[j])\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                heapq.heappushpop(pairs, pair)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num+num2, num, num2))\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    return [heapq.heappop(pairs) for i in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    \n    while heap:\n        pair = heapq.heappop(heap)\n        pairs.append((pair[1], pair[2]))\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    heap = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            \n    for i in range(k):\n        if heap:\n            pairs.append(heapq.heappop(heap)[1:])\n            \n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] < list1[i][1]*list1[j][0]:\n                min_product = min(min_product, list1[i][0]*list1[j][1])\n            else:\n                min_product = min(min_product, list1[i][1]*list1[j][0])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n    \n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product from the pairs of tuples.\n    \"\"\"\n    product_list = []\n    for tup in list1:\n        product_list.append(tup[0] * tup[1])\n    return min(product_list)"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')  # initialize minimum product to infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]  # calculate product\n            if product < min_product:  # check if current product is smaller than minimum product\n                min_product = product  # update minimum product\n    return min_product  # return minimum product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if min_product == None:\n                min_product = list1[i][0] * list1[j][0]\n            elif list1[i][0] * list1[j][0] < min_product:\n                min_product = list1[i][0] * list1[j][0]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs.\n    '''\n    # Initialize the minimum product and the current product as None\n    min_product = None\n    current_product = None\n    \n    # Loop through all the tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            current_product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            # If the current product is None or less than the minimum product, update the minimum product\n            if min_product is None or current_product < min_product:\n                min_product = current_product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # Iterate over the list starting from the second element\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Returns the minimum value in a list of heterogeneous values.\n    \n    Args:\n    - listval: a list of values\n    \n    Returns:\n    - the minimum value in the list\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    minimum = listval[0] # assume the first value is the minimum\n    for i in range(1, len(listval)):\n        if listval[i] < minimum: # if the current value is less than the minimum, update the minimum\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list and returns the minimum value in the list.\n    \"\"\"\n    min_value = listval[0]  # Initialize the minimum value as the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]  # If an element in the list is smaller than the current minimum value, update the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_val(lst):\n    \"\"\"\n    Returns the minimum value from a list of heterogeneous values.\n    \"\"\"\n    if not lst:\n        return None\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    return min(lst)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the word into words\n    words = re.split('_', word)\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Join the words into a string with the first word capitalized\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake_case string to camelCase string.\n    '''\n    words = re.findall(r'[a-z]+', word)\n    return words[0] + ''.join([w.capitalize() for w in words[1:]])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string using regex\n    words = re.findall(r'[a-zA-Z]+', word)\n\n    # Capitalize the first letter of the first word\n    words[0] = words[0].capitalize()\n\n    # Concatenate the capitalized words to get the camel case string\n    camel_case_string = ''.join(words)\n\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    words = word.split('_')\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word.lower()\n        else:\n            camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    split_word = word.split('_')\n    \n    # Convert the first letter of the first word to lowercase\n    split_word[0] = split_word[0].lower()\n    \n    # Combine the words using capitalize() method\n    camel_case_word = ''.join(split_word)\n    \n    # Capitalize the first letter of the first word\n    camel_case_word = camel_case_word.capitalize()\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.split('_', word)\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a string in snake case and returns it in camel case.\n    '''\n    words = re.findall(r'[a-z]+', word)\n    return words[0] + ''.join(word.title() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(_\\w)', lambda match: match.group(1)[1].upper(), word)"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    This function removes all odd numbers from a given list and returns the new list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a given list.\n\n    Parameters:\n    l (list): A list of integers.\n\n    Returns:\n    list: A new list with all the odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all the odd numbers from it.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all the odd numbers from it and returns the updated list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [elem[n-1] for elem in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [lst[n-1] for lst in list1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and extracts the nth element from each tuple.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input and returns the nth element from each tuple.\n    \"\"\"\n    return [elem[n-1] for elem in lst]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes in a list of tuples and an integer n as input.\n    It returns the nth element of each tuple in the list.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n\n    Parameters:\n    list1 (list): List of tuples.\n    n (int): Index of the element to be extracted.\n\n    Returns:\n    element (any): Nth element from the given list of tuples.\n    \"\"\"\n    element = list1[n-1][1]\n    return element"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks if any value in a sequence exists in another sequence or not.\n    :param list1: list\n    :param list2: list\n    :return: True or False\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(elem in list1 for elem in list2)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: first sequence of values\n    :type list1: list or tuple\n    :param list2: second sequence of values\n    :type list2: list or tuple\n    :return: True if any value from list1 is present in list2, False otherwise\n    :rtype: bool\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in list1 exists in list2 or not.\n    Returns True if there is at least one overlap, False otherwise.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if there are any common elements in two sequences.\n\n    Args:\n    seq1 -- a sequence (list, tuple, set)\n    seq2 -- another sequence (list, tuple, set)\n\n    Returns:\n    True if there are common elements, False otherwise\n    \"\"\"\n    return any(elem in seq1 for elem in seq2)"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list is present in the second list.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):\n    '''\n    This function checks whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    arr.sort() \n    return max(arr[n-1]*arr[n-2], arr[n-1]*arr[n-3]) "
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    n = len(arr) \n    max1 = arr[0] \n    max2 = arr[1] \n    min1 = arr[0] \n    min2 = arr[1] \n\n    if arr[0] > arr[1]: \n        max1 = arr[1] \n        max2 = arr[0] \n        min1 = arr[1] \n        min2 = arr[0] \n\n    for i in range(2, n): \n        if arr[i] > max1: \n            max1 = arr[i] \n            max2 = max(max2, arr[i-1], arr[i-2]) \n            min1 = min(min1, arr[i-1], arr[i-2]) \n            min2 = min(min2, arr[i]) \n\n        elif arr[i] > max2: \n            max2 = arr[i] \n            min2 = min(min2, arr[i-1], arr[i-2]) \n\n    return max(max1 * max2, max1 * min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = arr[0]\n    max2 = arr[1]\n    if max1 < max2:\n        max1, max2 = max2, max1\n    for i in range(2, n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max(max1*max2, max1*arr[n-1], max2*arr[n-1])"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max_product = float('-inf')\n    for i in range(n): \n        for j in range(i+1, n): \n            product = arr[i] * arr[j] \n            if product > max_product: \n                max_product = product \n    return max_product "
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    max_pair = (arr[0], arr[1])\n    for i in range(1, len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_num:\n                max_num = current_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = max(arr)\n    arr.remove(max_num)\n    second_max_num = max(arr)\n    product = max_num * second_max_num\n    return product"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the common first element in each tuple.\n    '''\n    # Initialize an empty dictionary to store the first elements of the tuples\n    first_elements = {}\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # If the first element of the tuple is not already in the dictionary, add it\n        if tup[0] not in first_elements:\n            first_elements[tup[0]] = []\n\n        # Append the tuple to the list of tuples with the same first element\n        first_elements[tup[0]].append(tup)\n\n    # Create a new list of tuples with the common first elements\n    common_tuples = []\n    for key in first_elements:\n        # If there is only one tuple with this first element, add it to the list of common tuples\n        if len(first_elements[key]) == 1:\n            common_tuples.append(first_elements[key][0])\n        # If there is more than one tuple with this first element, find the common elements in the rest of the tuples\n        else:\n            common_elements = {}\n            for tup in first_elements[key]:\n                for element in tup[1:]:\n                    if element not in common_elements:\n                        common_elements[element] = 1\n\n            # Create a new tuple with the common first element and the common elements\n            common_tuple = (key,) + tuple(common_elements.keys())\n            common_tuples.append(common_tuple)\n\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return []\n    else:\n        common_element = Input[0][0]\n        common_list = [Input[0]]\n        for i in range(1, len(Input)):\n            if Input[i][0] == common_element:\n                common_list.append(Input[i])\n            else:\n                break\n        return common_list"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    common_element = Input[0][0]\n    for i in range(1, len(Input)):\n        if Input[i][0]!= common_element:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    \n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        elif tup[0]!= common_first_element:\n            return common_first_element\n    \n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for tpl in Input:\n        if common_element is None:\n            common_element = tpl[0]\n        elif tpl[0]!= common_element:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of common first elements.\n    '''\n    common_elements = []\n    for tup in Input:\n        if tup[0] not in common_elements:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = Input[0][0]\n    for i in range(len(Input)):\n        if Input[i][0]!= common_element:\n            return None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set()\n    for tup in Input:\n        result.add(tup[0])\n    return list(result)"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for i in Input:\n        if common_first_element is None:\n            common_first_element = i[0]\n        else:\n            if i[0]!= common_first_element:\n                return None\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = []\n    for tup in Input:\n        first_elements.append(tup[0])\n    common_first_element = max(set(first_elements), key=first_elements.count)\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for elem in lst:\n        if len(elem) == max_len:\n            return elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list of strings as input and returns the string with the maximum length.\n    '''\n    max_len = 0\n    max_str = \"\"\n\n    for s in lst:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n\n    return max_str"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_len:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_max(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_element = lst[0]\n    max_length = len(lst[0])\n    for element in lst:\n        if len(element) > max_length:\n            max_element = element\n            max_length = len(element)\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list(map(lambda x: round(x), list1)))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Cube sum of first\", n, \"even natural numbers:\", cube_Sum(n))"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    # initialize sum to 0\n    sum = 0\n    # iterate through first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # cube each even natural number and add to sum\n        sum += i**3\n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n*2, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n*2, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the cube sum of the first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, n+2, 2):\n            sum += i**3\n        return sum"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of a tuple by a delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1] # remove the last delimiter"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter='_'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=', '):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i!= len(test_tup)-1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter '-'.\n    \"\"\"\n    delimiter = '-'\n    return delimiter.join(test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*n)\n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as an input and returns the average of the cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    average = total_sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg = sum_of_cubes/n\n    return avg\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    sum_of_cubes = 0\n    count = 1\n\n    # Loop through the first n natural numbers\n    while count <= n:\n        sum_of_cubes += count**3  # Cube the current number and add it to the sum\n        count += 1\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result_tuple = ()\n    for string in test_tuple:\n        rear_index = len(string) - 1\n        rear_char = string[rear_index]\n        result_tuple = result_tuple + (rear_char,)\n    return result_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple as input and returns a new tuple with only the rear index elements.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a new tuple of strings that contains only the rear index element of each string in the input tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple = rear_tuple + (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[len(string)-1])\n    return tuple(rear_elements)"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    This function extracts only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_list = []\n    for string in test_tuple:\n        rear_index_list.append(string[-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extracts only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            for j in range(len(list1[i])):\n                if list1[i][j] == x:\n                    count += 1\n        elif list1[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filters out all odd numbers from a given list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as an argument and returns a new list containing only the odd numbers from the original list.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of only the odd numbers from the input list.\n    '''\n    return [num for num in nums if num % 2 == 1]"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the input date\n    match = re.match(pattern, dt)\n    if match:\n        # Extract the year, month and day from the matched pattern\n        year, month, day = match.groups()\n        # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = map(int, match.groups())\n        return '{:02d}-{:02d}-{}'.format(day, month, year)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.search(pattern, dt)\n    year = result.group(1)\n    month = result.group(2)\n    day = result.group(3)\n    last_two_digits = year[-2:]\n    return f'{day}-{month}-{last_two_digits}'"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_regex = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = date_regex.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        groups = match.groups()\n        return '{}-{}-{}'.format(groups[2], groups[1], groups[0])\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use a regular expression to extract the year, month, and day\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        # Reformat the date as dd-mm-yyyy\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        groups = match.groups()\n        return f'{groups[2]}-{groups[1]}-{groups[0]}'\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using shell sort algorithm.\n\n    :param my_list: list to be sorted\n    :return: sorted list\n    \"\"\"\n    n = len(my_list)\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insertion sort with gap\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Start with a big gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insert my_list[i] at position i\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts the given array using shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n//2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap,n):\n            # add a[i] to the elements that have been gap sorted\n            # save a[i] in temp and make a hole at position i\n            temp = my_list[i]\n            \n            # shift earlier gap-sorted elements up until the correct\n            # location for a[i] is found\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            \n            # put temp (the original a[i]) in its correct location\n            my_list[j] = temp\n        \n        # Reduce the gap for the next iteration\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    This function sorts the given list by using the shell sort algorithm.\n    '''\n    n = len(my_list)\n    \n    # Start with a gap of n/2 and reduce it by half until gap is 1\n    for gap in range(n//2, 0, -1):\n        # Perform insertion sort on the elements separated by the gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using the shell sort algorithm.\n    \"\"\"\n    # Set the initial gap size\n    gap = len(my_list) // 2\n\n    # Sort the list while the gap is not zero\n    while gap > 0:\n        # Sort the list using the gap size\n        for i in range(gap, len(my_list)):\n            # Set the current element as the key to be compared to\n            key = my_list[i]\n            # Set the j pointer to the current index - gap\n            j = i - gap\n            # Compare the key with the element at index j\n            while j >= 0 and key < my_list[j]:\n                # If the key is less than the element at index j, shift the element at index j + gap to the right\n                my_list[j + gap] = my_list[j]\n                # Decrement the j pointer\n                j -= gap\n            # Set the key at the final position\n            my_list[j + gap] = key\n        # Reduce the gap size\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result += (test_tup1[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the elementwise and values of the input tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] and test_tup2[i]),)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples and returns the elementwise and tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i],))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create an empty list to store the elementwise and tuples\n    result = []\n    # iterate through each tuple and check if the elements are the same\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            # if the elements are the same, append the tuple to the result list\n            result.append(test_tup1[i])\n    # return the result list\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5)/(2*a)\n        return x\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        print(\"The equation has no real solutions\")\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No real solution\"\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return (-b + discriminant**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x_directrix = (-b + discriminant**0.5)/(2*a)\n        return x_directrix\n    else:\n        return \"The parabola has no real directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the roots of the equation\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is at x =\", root1, \"or x =\", root2)\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola given its coefficient.\n\n    Parameters:\n    a (float): coefficient of quadratic term\n    b (float): coefficient of linear term\n    c (float): constant term\n\n    Returns:\n    float: the x-coordinate of the directrix\n    \"\"\"\n    return -b / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    return (-b) / (2 * a)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The equation is not a parabola.\"\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            return \"The parabola has no real directrix.\"\n        else:\n            x = (-b + d**0.5) / (2*a)\n            return \"The directrix of the parabola is x = %.2f.\" % x"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes the coefficients of a parabola and returns the value of its directrix.\n    \"\"\"\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is positive\n    if discriminant > 0:\n        # calculate the two roots of the parabola's equation\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # find the point where the two roots intersect\n        directrix = (root1*c + root2*c)/(root1 - root2)\n        \n        return directrix\n    \n    else:\n        print(\"The discriminant is not positive. There is no directrix for this parabola.\")"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is non-positive, there are no real solutions\n    if discriminant < 0:\n        return None\n    \n    # If the discriminant is zero, there is one solution\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    \n    # If the discriminant is positive, there are two solutions\n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 'The equation is not a parabola'\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            return 'The parabola has no real directrix'\n        else:\n            x1 = (-b + d**0.5)/(2*a)\n            x2 = (-b - d**0.5)/(2*a)\n            return f'The directrix of the parabola is: x = {x1:.2f} or x = {x2:.2f}'"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element, otherwise it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # create a set of the first list to make it faster to check for common elements\n    set1 = set(list1)\n\n    # check each element in the second list to see if it's in the first list\n    for element in list2:\n        if element in set1:\n            return True\n\n    # if we've made it through the loop without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium with given bases and height.\n    '''\n    # Sort the bases in ascending order\n    sorted_bases = sorted([base1, base2])\n    # Calculate the median length\n    median_length = (sorted_bases[0] + sorted_bases[1]) / 2\n    # Calculate the area of the trapezium\n    area = ((base1 + base2) / 2) * height\n    # Calculate the median height of the trapezium\n    median_height = (2 * area) / (sorted_bases[0] + sorted_bases[1])\n    # Calculate the median length of the trapezium\n    median_trapezium = median_height * median_length\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    area = (base1 + base2) / 2 * height\n    return area / median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median\n    median = (base1 + base2) / 2\n    \n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # calculate the median length of the trapezium\n    median_length = 2 * area / median\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = ((base1 + base2) / 2) * height\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium given its bases and height.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length of the trapezium\n    median = (base1 + base2) / 2\n    \n    # return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    return ((base1 + base2) / 2) * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n        else:\n            return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than all the elements of the array and False otherwise.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(b)+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of n.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    if n < 0:\n        n = n * -1 # converting negative numbers to positive\n    return n % 10 # returning the last digit of the number"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as an input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        n = abs(n)\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers from the original list.\n    '''\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function returns the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only negative numbers.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    result = \"\"\n    for i in str1:\n        if ord(i) % 2 == 0:\n            result += i\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: int(x) % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Remove all odd characters from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes in a string as an argument and removes all the characters that are not even.\n    '''\n    return ''.join([i for i in str1 if int(i)%2==0])"
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    This function removes all odd characters in a given string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j] and (test_list[i], test_list[j]) in zip(test_list, test_list[i+1:]):\n                count += 1\n            elif test_list[j] > test_list[i] and (test_list[j], test_list[i]) in zip(test_list, test_list[j+1:]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    # Convert the list to a string using map() and join()\n    result = ''.join(map(str, L))\n    \n    # Convert the string back to an integer using int()\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Parameters:\n        L (list): A list of integers.\n\n    Returns:\n        int: The single integer obtained from the list.\n    \"\"\"\n\n    # Initialize an empty string to store the binary representation of the list elements\n    binary_str = \"\"\n\n    # Convert each element of the list to binary and append it to the binary string\n    for num in L:\n        binary_str += bin(num)[2:]\n\n    # Convert the binary string to an integer and return it\n    return int(binary_str, 2)"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to find all adverbs in the text and their positions\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n\n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n\n    # If only one adverb is found, return the position and adverb\n    if len(adverbs) == 1:\n        return positions[0], adverbs[0]\n\n    # If multiple adverbs are found, return the position and the first adverb\n    else:\n        return positions[0], adverbs[0]"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b(very|really|extremely|quite|really|absolutely|fairly|relatively)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(1), match.start(1))\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    pattern = r\"\\b[a-zA-Z]+ly\\b\"  # pattern for adverbs ending in \"ly\"\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:an?|the|a|this|that|some|any|every|other|most|all|much|many|more|less|very|quite)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.start(), match.group()"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(very|extremely|really|incredibly|quite|rather|pretty)\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return f\"Adverb: {match.group()}, Position: {match.start() + 1}\"\n    else:\n        return \"No adverb found in the given sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the text using regex\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    # If no adverbs found, return None\n    if not adverbs:\n        return None\n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    first_adverb_pos = text.find(first_adverb)\n    return first_adverb, first_adverb_pos"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns the position of the first adverb in the string and the adverb itself.\n    '''\n    adverb_pattern = re.compile(r'\\b(very|extremely|really|quite|really|absolutely|undoubtedly|definitely|probably|generally|almost|rather|fairly|somewhat|slightly|possibly|probably|fairly|certainly|intensely|seriously|truly|deeply|completely|entirely|extremely|positively|honestly|honestly|deftly|delicately|distinctly|honestly|innocently|enthusiastically|obviously|obviously|surprisingly|toughly|victoriously|positively|genuinely|genuinely|positively|seriously|seriously|truly|truthfully|faithfully|correctly|accurately|excellently|exceptionally|quaintly|quaintly|splendidly|sparklingly|spectacularly|speedily|swiftly|voluntarily|violently|viciously|viciously|widely|well|well|fairly|mostly|mostly|quite|quite|rather|rather|relatively|seriously|seriously|somewhat|somewhat|strictly|strongly|substantially|thoroughly|to|tolerably|tremendously|ultimately|unabashedly|unalterably|unassailable|unavoidably|uncompromisingly|undiminishedly|undoubtedly|unexpectedly|unfailingly|unfalteringly|unforgettably|unquestionably|unselfconsciously|utterly|very|vicariously|well)\\b')\n    adverb_match = adverb_pattern.search(text)\n    if adverb_match:\n        adverb = adverb_match.group()\n        adverb_position = adverb_match.start()\n        return adverb_position, adverb\n    else:\n        return None, None"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a length of a cube as input and returns its surface area.\n    '''\n    area = 6 * l ** 2  # calculate the area of the cube\n    surface_area = 2 * area  # calculate the surface area of the cube\n    return surface_area  # return the surface area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a parameter `l` which represents the size of the cube.\n    The function returns the surface area of a cube of size `l`.\n    '''\n    # Calculate the surface area of the cube\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l ** 2\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = 0\n    total_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n        total_nums += 1\n    return positive_nums / total_nums"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count/len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num  # update largest if new largest negative is found\n    if largest == float('-inf'):  # check if no negative numbers were found\n        return None\n    else:\n        return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    '''\n    largest = -float('inf') # Initialize the largest variable to negative infinity\n    for num in list1:\n        if num < largest: # If the current number is smaller than the largest negative number\n            largest = num # Set the largest variable to the current number\n    return largest # Return the largest negative number from the list"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number from the list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    if max_neg == float('-inf'):\n        return 'There are no negative numbers in the list'\n    else:\n        return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < largest_num and num < 0:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    '''\n    largest_neg_num = None # initialize the largest negative number variable to None\n    for num in list1: # iterate through the list of numbers\n        if num < 0 and (largest_neg_num is None or num > largest_neg_num): # check if the current number is negative and larger than the current largest negative number\n            largest_neg_num = num # update the largest negative number variable if necessary\n    return largest_neg_num # return the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number from the list.\n    If there is no negative number in the list, it returns None.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Returns the largest negative number from the given list.\n    If no negative numbers are found, returns None.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[i] for i in range(len(tup)) if i >= K))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for i in test_list:\n        result_list.append(tuple(i[:K]))\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K+1:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(tuple(i[K:]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tuple([tup[i] for i in range(len(tup)) if i not in range(K)]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            trimmed_tup += (tup[i],)\n            if i == K-1:\n                break\n        result.append(trimmed_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K] + tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tuple(tup[:K] + tup[K+1:]))\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Perform index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple with index-wise multiplication of the elements.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function performs index-wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    res = {}\n    for i in tup:\n        if i in count_dict:\n            res[i] = count_dict[i]\n        else:\n            res[i] = 0\n    return res"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for i in lst:\n        if i in counter:\n            print(i, \"occurs\", counter[i], \"times in the tuple\")\n        else:\n            print(i, \"does not occur in the tuple\")"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as inputs and returns a dictionary\n    containing the count of occurrence of all elements of list in the tuple.\n    '''\n    count = Counter(lst)\n    res = {}\n    for i in tup:\n        if i in count:\n            res[i] = count[i]\n        else:\n            res[i] = 0\n    return res"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result_list = []\n    for i in tup:\n        if i in count_dict:\n            result_list.append(count_dict[i])\n        else:\n            result_list.append(0)\n    return result_list"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for item in tup:\n        if item in count_dict:\n            result.append(count_dict[item])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result_dict = {}\n    for elem in lst:\n        if elem in count_dict:\n            result_dict[elem] = count_dict[elem]\n        else:\n            result_dict[elem] = 0\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    result = {}\n    for element in lst:\n        if element in cnt:\n            result[element] = cnt[element]\n        else:\n            result[element] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n\n    # Iterate through the list and count the occurrence of each element in the tuple\n    for i in lst:\n        count_dict[i] += lst.count(i)\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        if i in tup:\n            count_dict[i] = count_dict.get(i,0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count_dict:\n            result[item] = count_dict[item]\n        else:\n            result[item] = 0\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the cubes of each number in the input list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a list of cubes of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with the cubes of each number in the input list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num ** 3)\n    return cubed_nums"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of the individual elements in the input list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 1]\n    for i in range(2, n):\n        perrin.append(perrin[i-1] + perrin[i-2])\n    return sum(perrin)\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function will calculate the sum of Perrin numbers.\n    :param n: An integer which represents the number of Perrin numbers to sum.\n    :return: An integer which represents the sum of the Perrin numbers.\n    \"\"\"\n    perrin_nums = [2, 3]\n    sum_of_perrin_nums = 5\n    for i in range(n-2):\n        next_perrin_num = 2*sum_of_perrin_nums + perrin_nums[-1]\n        perrin_nums.append(next_perrin_num)\n        sum_of_perrin_nums += next_perrin_num\n    return sum_of_perrin_nums"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n Perrin numbers. \n    '''\n    if n == 0: \n        return 0\n    else: \n        return 2 + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers up to n.\n    \"\"\"\n    s = 0\n    i = 1\n    while i <= n:\n        s += i*i - i + 2\n        i += 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n    \"\"\"\n    total = 0\n    p = 1\n    while p <= n:\n        total += p\n        p = perrin(p)\n    return total\n\ndef perrin(n):\n    \"\"\"\n    Calculate the next Perrin number after n.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 3*n + 1\n    else:\n        return 3*n - 1"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers up to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n\nprint(cal_sum(5))  # Output: 21"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i + i + 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return cal_sum(n-1) + 2*n + 2*(cal_sum(n-1)**2) - (cal_sum(n-2)**2)"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 2]\n    for i in range(2, n):\n        perrin.append(perrin[-1] + perrin[-2])\n    return sum(perrin)"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts a specific size of strings from a given list of string values.\n    \"\"\"\n    extracted_list = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_list.append(s)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size as input and returns a list of string values of specified size.\n    '''\n    result = []\n    count = 0\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n            count += 1\n            if count == len(str_list):\n                break\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings as input and extracts specified size of strings from it.\n\n    Args:\n    str_list: a list of strings\n    l: an integer value representing the desired size of the extracted strings\n\n    Returns:\n    A list of extracted strings of specified size.\n    \"\"\"\n    result = []\n    for i in range(0, len(str_list), l):\n        result.append(\"\".join(str_list[i:i+l]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    :param str_list: List of string values\n    :param size: Size of strings to be extracted\n    :return: List of extracted strings\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list of strings of the specified size.\n    '''\n    new_list = []\n    for i in range(0, len(str_list), size):\n        new_list.append(str_list[i:i+size])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_string(lst, size):\n    '''\n    This function takes a list of string values and a size value as input.\n    It extracts specified size of strings from the list and returns a new list with extracted strings.\n    '''\n    result = []\n    for i in range(0, len(lst), size):\n        result.append(''.join(lst[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_string(lst, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in lst:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    i = 0\n    while i < len(str):\n        result.append(str[i:i+l])\n        i += l\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            result.append(str[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    :param str_list: list of string values\n    :param size: size of the strings to be extracted\n    :return: list of extracted strings\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from a string using regular expressions.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using the `sub` method of the `re` module\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+', '', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = \"This is a test string with     spaces.\"\nnew_text = remove_whitespaces(text)\nprint(new_text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale if the given amount has loss else returns 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss_amount = sale_amount - actual_cost\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    \"\"\"\n    This function takes actual cost and sale amount as arguments and returns loss amount if there is any loss else returns 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount if sale_amount is greater than actual_cost, else returns 0.\n    :param actual_cost: The actual cost of the item\n    :param sale_amount: The amount received after selling the item\n    :return: The loss amount if there is a loss, else 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function takes actual cost and sale amount as input and returns loss amount if sale amount is less than actual cost.\n    If sale amount is greater than or equal to actual cost, it returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the loss amount on a sale if the given amount has loss, or 0 otherwise.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n            if (n/i)%2 == 0:\n                sum += (n/i)\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its even factors.\n    \"\"\"\n    sum = 0\n    for i in range(2, n//2+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i!= i:\n                if (n//i) % 2 == 0:\n                    sum += (n//i)\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    sum_even_factors = sum([i for i in factors if i%2 == 0])\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of all the even factors of that number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of that number.\n    \"\"\"\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    even_factors = [num for num in factors if num % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes in a number as input and returns the sum of all even factors of the number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n//i:\n                factors.append(n//i)\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)\n"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function will match a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    # Use regular expression to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    \n    # Check if a match was found\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Compile a regular expression pattern to match a word containing 'z'\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    # Find all matches of the pattern in the input text\n    matches = pattern.findall(text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11] or (monthnum == 2 and ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0)):\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether a given month number contains 31 days or not.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month number contains 31 days, otherwise False.\n    \"\"\"\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum in [1, 3, 5, 7, 8, 10, 12] else False"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as an argument and checks whether it contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The given month number contains 31 days.\")\n    elif monthnum in [4, 6, 9, 11]:\n        print(\"The given month number contains 30 days.\")\n    elif monthnum == 2:\n        print(\"The given month number contains 28/29 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [4, 6, 9, 11] and monthnum == 30:\n        return False\n    elif monthnum == 2:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for s in stringlist:\n        reversed_list.append(s[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for word in stringlist:\n        new_list.append(word[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_lst = i\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0]) # initialize min_len to the length of the first sublist\n    min_sublist = lst[0] # initialize min_sublist to the first sublist\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    result = []  # initialize result list to empty\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]  # slice the list to get a sublist\n            if len(sublist) < min_length:  # check if the sublist is shorter than the current minimum\n                min_length = len(sublist)  # update the minimum length\n                result = sublist  # update the result list\n    return result  # return the sublist with minimum length"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_lst = sublist\n\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist having minimum length.\n    '''\n    min_len = len(lst[0])  # initialize the minimum length as the length of the first sublist\n    min_sublist = lst[0]  # initialize the minimum sublist as the first sublist\n    \n    for sublist in lst[1:]:  # iterate over the sublists starting from the second sublist\n        if len(sublist) < min_len:  # if the length of the current sublist is less than the minimum length\n            min_len = len(sublist)  # update the minimum length\n            min_sublist = sublist  # update the minimum sublist\n            \n    return min_sublist  # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_lst = lst[0]\n    \n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n            min_lst = sub_lst\n            \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as arguments and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    This function calculates the area of a rectangle.\n    :param length: the length of the rectangle\n    :param width: the width of the rectangle\n    :return: the area of the rectangle\n    \"\"\"\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two arguments: length and breadth of a rectangle.\n    It returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and breadth of a rectangle as inputs and returns its area.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes two arguments l and b representing the length and width of the rectangle respectively,\n    and returns the area of the rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input parameters and returns the area of the rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to match uppercase letters\n    pattern = re.compile('[A-Z]+')\n    # Use findall() method to find all uppercase substrings\n    uppercase_substrings = pattern.findall(str1)\n    # Replace each uppercase substring with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and returns the string with all uppercase substrings removed.\n    '''\n    # Use regular expression to match all uppercase substrings in the string.\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Remove the uppercase substrings from the original string using replace() function.\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    This function extracts the first element of each sublist in the input list.\n\n    :param lst: Input list.\n    :return: A list containing the first element of each sublist.\n    '''\n\n    # Create an empty list to store the first element of each sublist.\n    first_element_list = []\n\n    # Iterate over the input list.\n    for sublist in lst:\n\n        # Check if the sublist is empty.\n        if not sublist:\n            first_element_list.append(None)\n        else:\n            # Get the first element of the sublist.\n            first_element = sublist[0]\n\n            # Append the first element to the first_element_list.\n            first_element_list.append(first_element)\n\n    return first_element_list"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an argument and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and returns a new list containing the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list containing\n    only the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Extracts the first element of each sublist in the input list and returns\n    a new list containing these elements.\n\n    Args:\n    - lst: a list of sublists, where each sublist contains at least one element\n\n    Returns:\n    - a list of the first element of each sublist\n    '''\n\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Counts the upper case characters in a given string using the upper() method in Python.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of uppercase letters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters present in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        result += list(itertools.combinations(lst, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    all_combinations = list(itertools.product(list1, repeat=len(list1)))\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    combos = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if i & (1 << j):\n                combo.append(lst[j])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of the elements of a given list.\n    '''\n    return list(combinations(lst, len(lst)))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        result += list(itertools.combinations(list1, i))\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return combinations(list1, len(list1))"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Given a list, find all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append([lst[i], lst[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of elements in lst.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst)+1):\n        for combo in itertools.combinations(lst, i):\n            result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    res = []\n    for i in range(1, len(lst) + 1):\n        res += [tuple(x) for x in itertools.combinations(lst, i)]\n    return res"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    max_left = 0\n    max_right = 0\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_left, max_right = i + 1, i + 1\n            curr_product = 1\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            max_left, max_right = max(0, i - max_left + 1), i + 1\n\n    return arr[max_left:max_right]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    curr_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i], max_ending_here * arr[i])\n        max_ending_here = max(arr[i], curr_product, max_ending_here * arr[i])\n        min_ending_here = min(arr[i], curr_product, min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        \n        if current_product < 0:\n            current_product = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here*arr[i], min_ending_here*arr[i], arr[i])\n        min_ending_here = min(temp*arr[i], min_ending_here*arr[i], arr[i])\n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # Initialize maximum and minimum values for the subarray\n    max_val = arr[0]\n    min_val = arr[0]\n    max_product = arr[0]\n\n    # Iterate over the array, updating the maximum and minimum values and the maximum product\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        max_product = max(max_product, max_val * min_val, arr[i])\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        if num > 0:\n            max_ending_here *= num\n            min_ending_here *= num\n        else:\n            max_ending_here = max(num, max_ending_here * num)\n            min_ending_here = min(num, min_ending_here * num)\n            \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    curr_product = arr[0]\n    start_index = 0\n    end_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            curr_product = 1\n            start_index = i\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            end_index = i\n\n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for num in arr:\n        current_product *= num\n        \n        if current_product > max_ending_here:\n            max_ending_here = current_product\n        \n        if max_ending_here > max_product:\n            max_product = max_ending_here\n        \n        if current_product < 0:\n            current_product = 1\n    \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are the same.\n\n    Args:\n        d: a dictionary\n        n: the expected value of all values in the dictionary\n\n    Returns:\n        True if all values in the dictionary are n, False otherwise\n    \"\"\"\n    return all(v == n for v in d.values())"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a value as input.\n    It checks if all the values in the dictionary are equal to the given value.\n    If all values are equal, it returns True, else False.\n    '''\n    # Check if all values are equal to n\n    for value in dict.values():\n        if value!= n:\n            return False\n    # If all values are equal to n, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    count = values.count(values[0])\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_value(d, n):\n    '''\n    Check if all values in a dictionary are the same.\n\n    :param d: A dictionary\n    :param n: A number to compare the values to\n    :return: True if all values are the same, False otherwise\n    '''\n    values = d.values()\n    for v in values:\n        if v!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for i in range(1, n):\n        if list(dict.values())[i]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_value(dictionary, n):\n    '''\n    This function checks if all values in a dictionary are same or not.\n\n    Parameters:\n    dictionary (dict): A dictionary containing keys and values.\n    n (int): A number that specifies the number of values in the dictionary that need to be the same for the function to return True.\n    \n    Returns:\n    bool: True if all values in the dictionary are the same, False otherwise.\n    '''\n    values = list(dictionary.values())\n    count = 0\n    for i in range(len(values)):\n        if i == 0:\n            base_value = values[i]\n        else:\n            if values[i] == base_value:\n                count += 1\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Checks if all values in a dictionary are the same.\n    \"\"\"\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        print(f\"All values in the dictionary are the same.\")\n    else:\n        print(f\"Values in the dictionary are not the same.\")"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    count = 0\n    for i in range(n):\n        if values[0] == values[i]:\n            count += 1\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    This function removes empty items from a dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        max_prod = arr[0]\n        min_prod = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_prod:\n                max_prod = arr[i]\n            elif arr[i] < min_prod:\n                min_prod = arr[i]\n            if max_prod > 0 and max_prod > min_prod:\n                return max_prod * arr[i]\n            elif min_prod < 0 and min_prod > max_prod:\n                return min_prod * arr[i]\n    return max_prod * min_prod"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n    else:\n        max_product_ending_here = arr[0]\n        max_product_so_far = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_product_ending_here * arr[i]:\n                max_product_ending_here = arr[i]\n            else:\n                max_product_ending_here *= arr[i]\n            if max_product_ending_here > max_product_so_far:\n                max_product_so_far = max_product_ending_here\n        return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0], arr[1])\n    else:\n        # Create a list of maximum product ending at each index\n        dp = [0] * n\n        dp[0] = arr[0]\n        dp[1] = max(arr[0], arr[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2] * arr[i])\n        return dp[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function returns the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_product_ending_here = arr[0]\n    min_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i], min_product_ending_here * arr[i])\n        min_product_ending_here = min(arr[i], max_product_ending_here * arr[i], min_product_ending_here * arr[i])\n\n        max_product = max(max_product, max_product_ending_here)\n        min_product = min(min_product, min_product_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    \n    # Initialize the maximum product and the current product\n    max_product = arr[0]\n    curr_product = arr[0]\n    \n    # Iterate through the array and update the maximum product and current product\n    for i in range(1, n):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if arr[0] > arr[1]:\n        max_so_far = arr[0]\n        max_ending_here = arr[1]\n    else:\n        max_so_far = arr[1]\n        max_ending_here = arr[0]\n\n    for i in range(2, n):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        elif arr[i] > max_so_far:\n            max_so_far = arr[i]\n        else:\n            pass\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_ending_here = max_so_far = arr[0]\n        for i in range(1, n):\n            temp = max_ending_here\n            max_ending_here = max(arr[i], max_ending_here * arr[i], temp * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        An integer representing the maximum product.\n    \"\"\"\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here * arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here *= arr[i]\n\n        if arr[i] < min_so_far * arr[i]:\n            min_so_far = arr[i]\n        else:\n            min_so_far *= arr[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize maximum and minimum values\n    max_val = arr[0]\n    min_val = arr[0]\n    # Initialize maximum product\n    max_product = arr[0]\n\n    # Loop through the array and update max_val and min_val\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n        # Update maximum product\n        max_product = max(max_product, max_val * min_val)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp_max = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        temp_min = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\n        max_ending_here = temp_max\n        min_ending_here = temp_min\n\n        if max_product < max_ending_here:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[0:2])\n"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n == 1:\n        return (0,0)\n    elif n == 2:\n        return (test_tup[0]+test_tup[1], 0)\n    else:\n        return (test_tup[0]+test_tup[1], test_tup[1]+test_tup[2])"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[::2]), sum(test_tup[1::2])"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)-1):\n        sum_tup = sum_tup + (test_tup[i] + test_tup[i+1],)\n    return sum_tup"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr: \n        product *= i \n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    # Initialize the product to 1\n    product = 1\n    # Iterate over the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    # initialize the product to 1\n    product = 1\n    # iterate over the array and multiply each element with the product\n    for i in range(len(arr)):\n        product *= arr[i]\n        # modulo n to keep the result within the range of 0 to n-1\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1] or l[i] - 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return False\n    \n    for i in range(len(l)-1): \n        if l[i+1] - l[i] == 1: \n            return True\n        elif l[i+1] - l[i]!= 1: \n            return False\n        \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers, otherwise it returns False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        for j in range(i+1,len(l)): \n            if l[i] == l[j]-1: \n                return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]:\n                return True\n        return False"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    result = []\n    for item in intersection:\n        if isinstance(item, tuple):\n            result.append(item)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function finds the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(tuple(t) for t in test_list1)\n    set2 = set(tuple(t) for t in test_list2)\n    return [list(t) for t in set1.intersection(set2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                intersection_list.append(tuple1)\n                break\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuples and returns a list containing tuples that are common in both tuples,\n    irrespective of their order.\n    '''\n    result_list = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if sorted(tup1) == sorted(tup2):\n                result_list.append(tup1)\n                break\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from test_list1\n    set1 = set(test_list1)\n    # Create a set of tuples from test_list2\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the set of tuples to a list of tuples\n    intersection_list = list(intersection)\n    # Return the list of tuples\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of tuples from the first list\n    set1 = set(test_list1)\n\n    # Create a set of tuples from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set of tuples back to a list of tuples\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the lists to sets to find the intersection of elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets and convert it back to a list of tuples\n    intersection_set = set1.intersection(set2)\n    intersection_list = list(map(tuple, intersection_set))\n    # Sort the list of tuples based on their first element\n    intersection_list.sort(key=lambda x: x[0])\n    # Return the sorted list of tuples\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function returns the intersection of tuples in the two given lists.\n    \"\"\"\n    # Convert the lists to sets to get unique tuples and then back to lists\n    test_set1 = set(tuple(t) for t in test_list1)\n    test_set2 = set(tuple(t) for t in test_list2)\n    \n    # Get the intersection of the sets and convert it back to list of tuples\n    intersection_set = test_set1.intersection(test_set2)\n    intersection_list = [list(t) for t in intersection_set]\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists into sets to find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection and convert it back to a list of tuples\n    result = list(set1.intersection(set2))\n    \n    return result"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces the character 'ch' in the string'str1' with 'newch'.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the character 'ch' in the given string'str1' with 'newch'.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character 'ch' in a string'str1' with a new character 'newch'.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character 'ch' in a string'str1' with the new character 'newch'.\n    \"\"\"\n    new_str = ''\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a string with a new character.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in ascending order\n    nums.sort()\n\n    # find the sum of the largest and smallest value in the array\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    sum = 0\n    \n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n        sum += nums[i]\n    \n    return sum - largest - smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([max(nums), min(nums)])"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function finds the sum of the largest and smallest value in a given array.\n    \"\"\"\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError('Array should have at least two elements')\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function finds the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum((max(nums), min(nums)))"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as an argument and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case else False.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are in lower case, False otherwise.\n    \"\"\"\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function takes a string and converts it to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns the same string in lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Removes lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'(?<!\\w)[a-z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]\\w*\\b', '', str1, flags=re.IGNORECASE)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from the given string.\n    '''\n    # Replace all lowercase substrings with empty strings\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from a given string.\n    \"\"\"\n    # Use a regular expression to match all lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    lowercase_substrings = re.findall(pattern, str1)\n    \n    # Replace each lowercase substring with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    matches = re.findall(pattern, str1)\n    \n    # Remove matched substrings from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit as output.\n    \"\"\"\n    # Convert the number to a string and get the first character\n    first_digit = str(n)[0]\n    \n    # Convert the first character back to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function returns the first digit of a given number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_digit(n):\n    '''\n    This function takes a number as an argument and returns the first digit of that number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        return -1\n    else:\n        return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function returns the first digit of the given number.\n    \"\"\"\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    if n < 0:\n        n *= -1  # To get the absolute value of the number\n\n    first_digit = n // 10**(len(str(n))-1)  # To get the first digit of the number\n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10**(len(str(n))-1)"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_odd(lst):\n    \"\"\"\n    Returns a new list with only the odd integers from the original list.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only odd numbers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_odd(list):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the original list.\n    \"\"\"\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initializing the variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # Using a loop to calculate the sum of cubes and sum of numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n        \n    # Calculating the difference and returning it\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n    \n    # difference between the sum of cubes and the sum of the first n natural numbers\n    return sum_cubes - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def difference(n):\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize sum_of_cubes and sum_of_numbers variables\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    # loop through the range 1 to n and calculate the sum of cubes and sum of numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n        \n    # return the difference between the two sums\n    return abs(sum_of_numbers - sum_of_cubes)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_n = sum(range(1, n+1))\n    return sum_cubes - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_n = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] & 1:  # check if xor value is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if(A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to zero\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if the XOR value of the pair is odd\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    \n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    \n    # Iterate through all possible pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            \n            # XOR of the current pair\n            xor = A[i] ^ A[j]\n            \n            # Check if the XOR is odd\n            if xor % 2!= 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    This function takes a string as input and returns the string with all its characters toggled.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Get the length of the two integers\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # Calculate the absolute difference between the two integers\n    abs_diff = abs(n1 - n2)\n    \n    # Calculate the sum of the per-digit difference\n    sum_diff = 0\n    for i in range(n1_len):\n        n1_digit = int(n1_str[i])\n        n2_digit = int(n2_str[i])\n        diff = abs(n1_digit - n2_digit)\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function finds the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # Initialize the sum of differences to zero\n    diff_sum = 0\n\n    # Loop through each digit in the strings and add the absolute difference to the sum\n    for i in range(len(str_n1)):\n        diff_sum += abs(int(str_n1[i]) - int(str_n2[i]))\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # initialize sum to zero\n    digit_distance_sum = 0\n    \n    # convert n1 and n2 to string to extract digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # loop through the digits in n1 and n2\n    for i in range(len(n1_str)):\n        # subtract the current digit in n1 from the current digit in n2 and add the result to the sum\n        digit_distance_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers into strings and split them into individual digits\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n\n    # Calculate the difference between the digits in each integer and sum them up\n    distance_sum = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(digits1, digits2))\n\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # Convert the integers into lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the sum of the per-digit difference\n    digit_diff_sum = 0\n    for i in range(len(digits1)):\n        digit_diff_sum += abs(digits1[i] - digits2[i])\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings to iterate over each digit\n    str1 = str(n1)\n    str2 = str(n2)\n\n    # Initialize the sum of differences to zero\n    diff_sum = 0\n\n    # Iterate over each digit in the two strings and calculate the difference\n    for i in range(len(str1)):\n        diff = abs(int(str1[i]) - int(str2[i]))\n        diff_sum += diff\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # Convert integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Find the per-digit difference for each pair of digits\n    per_digit_diff = [abs(n1_digits[i] - n2_digits[i]) for i in range(len(n1_digits))]\n\n    # Sum the per-digit differences and return the result\n    return sum(per_digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and sort them\n    s1 = sorted(str(n1))\n    s2 = sorted(str(n2))\n\n    # Initialize the sum of the per-digit differences\n    distance = 0\n\n    # Iterate over the digits of the two numbers\n    for d1, d2 in zip(s1, s2):\n        # Add the absolute difference between the digits to the sum\n        distance += abs(int(d1) - int(d2))\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Find the absolute difference between the two numbers\n    abs_diff = abs(n1 - n2)\n    # Initialize a variable to store the sum of per-digit differences\n    digit_diff_sum = 0\n    \n    # Loop through each digit of the absolute difference\n    for digit in str(abs_diff):\n        # Convert each digit to an integer and add it to digit_diff_sum\n        digit_diff_sum += int(digit)\n    \n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n    \"\"\"\n    total_diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    for i in range(len(n1_str)):\n        n1_digit = int(n1_str[i])\n        n2_digit = int(n2_str[i])\n        diff = abs(n1_digit - n2_digit)\n        total_diff += diff\n    return total_diff"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize maximum sum and current sum variables\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    # Loop through the list\n    for i in range(1, size):\n        # Add the current element to the current sum\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum is negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    max_sum = a[0]\n    temp_sum = 0\n    for i in range(size):\n        temp_sum += a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        if temp_sum < 0:\n            temp_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize the max sum to negative infinity\n    curr_sum = 0 # initialize the current sum to 0\n    for i in range(size):\n        curr_sum += a[i] # add the current element to the current sum\n        if curr_sum > max_sum: # if the current sum is greater than the max sum, update the max sum\n            max_sum = curr_sum\n        if curr_sum < 0: # if the current sum becomes negative, reset it to 0\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the elements of the two tuples using set()\n    union = set(test_tup1) | set(test_tup2)\n    \n    # Sort the union in ascending order and convert it back to a tuple\n    sorted_union = tuple(sorted(union))\n    \n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1) | set(test_tup2)\n    return sorted(list(union))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set to hold the elements of the first tuple\n    set1 = set(test_tup1)\n    # create a set to hold the elements of the second tuple\n    set2 = set(test_tup2)\n    # find the union of the two sets\n    union_set = set1.union(set2)\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(union_set))\n    # print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set() to remove duplicates and then convert it back to a list\n    union = list(set(test_tup1) | set(test_tup2))\n    \n    # Sort the list and return it\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    sorted_union = sorted(list(union_set))\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using the set() function\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    union_tup = tuple(sorted(union_set))\n    \n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their union elements in sorted order.\n    \"\"\"\n    # Find the union of the two tuples using set union method.\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Sort the union elements in ascending order and return the result.\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples into sets to perform set operations on them\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the union of the sets using the \"|\" operator\n    union_set = set1 | set2\n\n    # Convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Creating a set to store the elements of the first tuple\n    set1 = set(test_tup1)\n    \n    # Adding the elements of the second tuple to the set\n    set1.update(test_tup2)\n    \n    # Converting the set back to a tuple and sorting it\n    result_tup = tuple(sorted(set1))\n    \n    return result_tup"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert the tuples to sets and use the union method to get the union set\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # convert the union set back to a sorted tuple and return it\n    return tuple(sorted(union_set))"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j - i + 1\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    This function finds the length of the longest sublists in a given list.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_max_length(lst):\n    \"\"\"\n    Finds the length of the longest sublists in a given list.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    sublist_lengths = []\n\n    # Iterate through each element of the list\n    for i in range(len(lst)):\n        # Initialize a variable to keep track of the current sublist length\n        current_length = 1\n\n        # Iterate through the subsequent elements of the list\n        for j in range(i+1, len(lst)):\n            # If the subsequent element is equal to the current element, increment the length\n            if lst[j] == lst[i]:\n                current_length += 1\n            # If the subsequent element is different from the current element, break out of the loop\n            else:\n                break\n\n        # Update the maximum length and sublist lengths if necessary\n        if current_length > max_length:\n            max_length = current_length\n            sublist_lengths = [current_length]\n        elif current_length == max_length:\n            sublist_lengths.append(current_length)\n\n    # Return the length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    \n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    '''\n    # Find all matches of quoted values in the text\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'  # pattern to match strings between quotation marks\n    matches = re.findall(pattern, text)  # find all matches in the text\n    return matches  # return the matches as a list of strings"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    # Regular expression pattern to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n\n    Parameters:\n    text (str): the input string\n\n    Returns:\n    list: a list of strings containing the extracted values\n    '''\n    # define a regular expression pattern to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n    # find all matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    A list of strings with the values between quotation marks.\n    '''\n    pattern = r'\"[^\"]+\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        list: A list of strings containing the extracted values.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    # Iterate through each element of the list\n    for i in range(n):\n        # Check if the element is repeated at least once\n        if arr[i]!= arr[i-1]:\n            # Check if the element appears at least twice\n            if arr.count(arr[i]) >= 2:\n                count += arr.count(arr[i]) - 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    \n    # loop through all possible pairs of distinct integers\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into its constituent characters.\n\n    :param word: The string to split\n    :return: A list of characters\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Error: Input must be non-negative.\"\n    elif n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)\n\nprint(sum_digits(1234)) # Output: 10\nprint(sum_digits(98765)) # Output: 24\nprint(sum_digits(0)) # Output: 0\nprint(sum_digits(-123)) # Output: Invalid input. Please enter a non-negative integer."
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Please enter a non-negative integer.'\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Invalid input: please enter a non-negative integer.'\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return None # negative numbers do not have digits\n    elif n < 10:\n        return n # single-digit numbers have only one digit\n    else:\n        digits = [int(d) for d in str(n)] # split number into digits\n        return sum(digits) # add up digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Extract the last digit and add it to the sum\n        sum += n % 10\n        # Remove the last digit from the number\n        n = n // 10\n    \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Invalid input: input must be a non-negative integer.'\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the number and add it to the sum variable\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n\n    Args:\n    n: An integer.\n\n    Returns:\n    The sum of the digits of n.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    \n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    \n    # Initialize the sum of digits to zero\n    sum_of_digits = 0\n    \n    # Iterate over the digits of n and add them to the sum\n    for digit in digits:\n        sum_of_digits += int(digit)\n    \n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    \n    total_sum = 0\n    while n > 0:\n        digit = n % 10\n        total_sum += digit\n        n //= 10\n        \n    return total_sum"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted and False otherwise.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    sorted_list = sorted(list1)\n    if list1 == sorted_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Checks whether a specified list is sorted or not.\n    \n    Args:\n    list1: A list of integers.\n    \n    Returns:\n    True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and checks whether the list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if list1 == sorted_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a list of lists, returning two unique numbers.\n    \"\"\"\n    unique_nums = set()\n    for lst in nums:\n        for num in lst:\n            unique_nums.add(num)\n    if len(unique_nums) < 2:\n        return None\n    return list(unique_nums)[:2]"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(set(lst))\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for lst in nums:\n        unique_nums = unique_nums.union(set(lst))\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        unique_nums += list(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    if len(result) < 2:\n        return None\n    else:\n        return result\n"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    unique_nums = list(set(nums))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as an input and removes the duplicate numbers from each list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        num_set = set(nums[i])\n        result.append(list(num_set))\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set(nums[0])\n    for i in range(1, len(nums)):\n        unique_nums = unique_nums.intersection(nums[i])\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns their product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function calculates the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data)) # get unique numbers in the list\n    product = 1\n    for num in unique_nums:\n        product *= num # multiply the unique numbers to get the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data) # get a set of unique numbers in the list\n    product = 1\n    for num in unique_nums:\n        product *= num # multiply the product by each unique number in the set\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data)) # create a set of unique numbers from the list\n    product = 1 # initialize the product to 1\n    \n    for num in unique_nums:\n        product *= num # multiply each unique number with the product\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # Get unique numbers from list\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function calculates the surface area of a cylinder\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Calculate the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surfacearea"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns its surface area.\n    '''\n    surface_area = 2*math.pi*r*h + 2*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Function to find the surface area of a cylinder.\n    Parameters:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n    Returns:\n        float: The surface area of the cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_sub_array(A, B):\n    \"\"\"\n    Check if the list A is a sublist of the list B.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as input and returns True if the first list is a sublist of the second list, False otherwise.\n    '''\n    # If length of first list is greater than second list, then it cannot be a sublist\n    if len(A) > len(B):\n        return False\n    \n    # Traverse through the first list and check if all its elements are present in the second list\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n        \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_sub_array(A, B):\n    '''\n    This function checks whether the list A is a sublist of the list B or not.\n    Returns True if A is a sublist of B, else returns False.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    # check if A is a sublist of B\n    for i in range(len(B) - len(A) + 1):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    '''\n    if set(A).issubset(set(B)): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B as input and returns True if A is a sublist of B, otherwise False.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list is a sublist of the second list and False otherwise.\n    \"\"\"\n    if set(A).issubset(set(B)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n    if A == B[:len(A)]:\n        return True\n    return is_Sub_Array(A, B[1:])"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if set(A) <= set(B):\n        return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists as inputs and returns True if A is a sublist of B, else False.\n    '''\n    if A == []:  # If A is an empty list, then it is always a sublist of B.\n        return True\n    elif A == B:  # If A and B are equal, then A is a sublist of B.\n        return True\n    elif A[0] == B[0]:  # If the first elements of A and B are equal, then recursively check the remaining elements of A and B.\n        return is_Sub_Array(A[1:], B[1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if A == []:\n        return True\n    if A[0] == B[0]:\n        return is_Sub_Array(A[1:], B[1:])\n    return is_Sub_Array(A[1:], B)"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize factorial variable to 1\n    factorial = 1\n    # Calculate factorial of given number\n    for i in range(1, n+1):\n        factorial *= i\n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n % 10 * last_Digit_Factorial(n // 10)"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the factorial of the input number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        while n > 0:\n            fact = fact * n\n            n = n - 1\n        return fact % 10"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = [item for tup in zip(list1, list2, list3) for item in tup]\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\nresult = interleave_lists(list1, list2, list3)\nprint(result)  # Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))]+[list2[i] for i in range(len(list2))]+[list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"The input lists must have the same length\")\n    \n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        \n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function finds the dissimilar elements in the two given tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # If the elements are not the same, add it to the list of dissimilar elements\n            dissimilar_elements.append(test_tup1[i])\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing\n    the dissimilar elements in both tuples.\n    '''\n    new_tup = ()\n    \n    # Loop through each element in both tuples and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            new_tup += (test_tup1[i],)\n            \n    return new_tup"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Finds the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of both the tuples should be same.\")\n    else:\n        dissimilar_list = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                dissimilar_list.append(i)\n        return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append((i, test_tup1[i], test_tup2[i]))\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(i)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested tuple as input and applies the even_fnc function to remove the uneven elements.\n    \"\"\"\n    return [(even_fnc(x), even_fnc(y)) if isinstance(x, tuple) else (even_fnc(x),) for x, y in test_tuple]"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            new_tuple.append(even_fnc(i))\n    return tuple(new_tuple)\n\ndef is_even(x):\n    \"\"\"\n    Helper function to check if a number is even.\n    \"\"\"\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if isinstance(i, int):\n            if even_fnc(i):\n                result.append(i)\n        else:\n            nested_result = []\n            for j in i:\n                if isinstance(j, int):\n                    if even_fnc(j):\n                        nested_result.append(j)\n            if nested_result:\n                result.append(nested_result)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_list.append(i)\n    return tuple(new_list)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    \"\"\"\n    This function removes uneven elements from a nested tuple.\n\n    Parameters:\n    test_tuple (tuple): A nested tuple containing integers and other types.\n    even_fnc (function): A function that returns True if the input is even and False otherwise.\n\n    Returns:\n    The original tuple with all uneven elements removed.\n    \"\"\"\n\n    # Create an empty list to store the even elements of the tuple\n    even_list = []\n\n    # Loop through each element of the tuple\n    for i in test_tuple:\n        # If the element is a tuple, call the even_ele function recursively\n        if type(i) == tuple:\n            i = even_ele(i, even_fnc)\n        # If the element is even, append it to the even_list\n        elif even_fnc(i):\n            even_list.append(i)\n\n    # Create a new tuple with only the even elements of the original tuple\n    new_tuple = tuple(even_list)\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            result.append(even_fnc(element))\n        elif even_fnc(element):\n            result.append(element)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            for inner_element in element:\n                if even_fnc(inner_element):\n                    even_list.append(inner_element)\n                else:\n                    pass\n        else:\n            if even_fnc(element):\n                even_list.append(element)\n            else:\n                pass\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to hold the even elements\n    even_list = []\n    \n    # Iterate through each element in the test tuple\n    for element in test_tuple:\n        \n        # If the element is a tuple, recursively call the even_ele function on it and append the result to the even_list\n        if isinstance(element, tuple):\n            even_list.append(even_ele(element, even_fnc))\n        \n        # If the element is not a tuple, call the even_fnc on it and append the result to the even_list\n        else:\n            if even_fnc(element):\n                even_list.append(element)\n    \n    # Convert the even_list back to a tuple and return it\n    return tuple(even_list)"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments: base_edge and height.\n    base_edge is the length of the base edge of the square pyramid.\n    height is the height of the pyramid.\n    '''\n    # calculate the area of the square base\n    square_area = 4 * base_edge ** 2\n    # calculate the area of the triangular top\n    triangular_area = 0.5 * base_edge * height\n    # calculate the total surface area\n    total_surface_area = square_area + 2 * triangular_area\n    return total_surface_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    This function takes base edge and height of the square pyramid as input and returns the surface area of the pyramid.\n    '''\n    # Calculate the area of the square base\n    area_base = 4 * (b * s)\n\n    # Calculate the area of the square face\n    area_face = (b * s) ** 2\n\n    # Calculate the area of the square top\n    area_top = (b * (b + 2 * s)) / 2\n\n    # Calculate the total surface area of the pyramid\n    total_area = area_base + area_face + area_top\n\n    # Return the surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    This function takes two parameters: b (base edge) and s (height of the pyramid).\n    It returns the surface area of the square pyramid.\n    '''\n    area = (4*b*s) + (2*b*b) # calculate the area of each face of the pyramid\n    total_area = 4*area # calculate the total surface area of the pyramid\n    return total_area # return the total surface area of the pyramid"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the square base\n    base_area = 4 * b**2\n\n    # calculate the area of the square faces\n    side_area = 4 * b * s\n\n    # calculate the area of the square top\n    top_area = b * s\n\n    # add up the areas to get the total surface area\n    total_area = base_area + 2 * side_area + 2 * top_area\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of a square pyramid\n    surface_area = 6*(b**2 + s**2)\n    # Calculate the volume of a square pyramid\n    volume = b*s**2\n    # Calculate the surface area of the base of the square pyramid\n    base_area = 4*b*s\n    # Calculate the total surface area\n    total_area = surface_area + base_area\n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculates the surface area of a square pyramid with a given base edge and height.\n    :param b: the base edge of the square pyramid\n    :param s: the height of the square pyramid\n    :return: the surface area of the square pyramid\n    '''\n    return 4 * b**2 + 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    This function calculates the surface area of a square pyramid given its base edge and height.\n    '''\n    # Calculate the area of the square base\n    area = b ** 2\n    \n    # Calculate the area of the square face\n    face_area = (2 * b * s) + (2 * b * s)\n    \n    # Calculate the total surface area\n    surface_area = (2 * area) + face_area\n    \n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the square base\n    base_area = 4 * b ** 2\n    \n    # calculate the area of the square top\n    top_area = b * s\n    \n    # calculate the total surface area\n    total_area = base_area + 2 * top_area\n    \n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Returns the surface area of a square pyramid with given base edge and height.\n    '''\n    # calculate the area of each face of the pyramid\n    face_area = base_edge * base_edge\n    # calculate the area of the slant of the pyramid\n    slant_area = base_edge * height / 2\n    # add the areas of the faces and slant together to get the total surface area\n    total_area = face_area * 4 + slant_area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * b * s + 2 * s ** 2"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and returns True if the dictionary is empty, otherwise, it returns False.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an argument and returns True if the dictionary is empty, otherwise it returns False.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    This function will check if a dictionary is empty.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    if num == 0:\n        return 1\n    else:\n        catalan = []\n        for i in range(num):\n            catalan.append(catalan_number(i) * catalan_number(num-i-1))\n        return sum(catalan)"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [0] * (num + 1)\n    c[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n    return c[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan_array = [0] * (num + 1)\n        catalan_array[0] = 1\n        catalan_array[1] = 1\n        for i in range(2, num + 1):\n            for j in range(i):\n                catalan_array[i] += catalan_array[j] * catalan_array[i - j - 1]\n        return catalan_array[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(num):\n        catalan.append(0)\n        for j in range(i+1):\n            catalan[i+1] += catalan[j] * catalan[i-j]\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n\n    if num == 0:\n        return 1\n\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    This function takes an integer num as input and returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(num):\n            c += catalan_number(i) * catalan_number(num-i-1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        for i in range(1, num + 1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function takes an integer num as input and returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [1, 1]\n        for i in range(2, num+1):\n            catalan.append(catalan[i-1] * (2*i - 1) // i)\n        return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        return (2*num)//(num+1)*catalan_number(num-1)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\" using regular expression\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n    if adverbs:\n        # Get the position of the first adverb ending with \"ly\"\n        pos = text.find(adverbs[0])\n        return (adverbs[0], pos)\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"Adverb found: {match.group()}\")\n        print(f\"Position: {match.start()}\")"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.span())\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all adverbs ending with \"ly\" in the text\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    if adverbs:\n        # Find the first adverb ending with \"ly\" in the text\n        first_adverb = adverbs[0]\n        # Find its position in the text\n        position = text.index(first_adverb)\n        # Return the first adverb and its position\n        return first_adverb, position\n    else:\n        # Return None if no adverb ending with \"ly\" is found\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # use regular expression to find all adverbs ending with 'ly' in the given text\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n\n    # if no adverbs ending with 'ly' are found, return None\n    if len(adverbs) == 0:\n        return None\n\n    # return the first adverb ending with 'ly' and its position in the text\n    for adv in adverbs:\n        index = text.find(adv)\n        return (adv, index)"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w+ly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group(1)\n        start_index = match.start(1)\n        end_index = match.end(1)\n        return (adverb, start_index, end_index)\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    pattern = r\"\\b\\w*ly\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], [match.start() for match in re.finditer(pattern, text)][0]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with \"ly\" and its positions in a given string.\n    \"\"\"\n    # find all occurrences of adverb ending with \"ly\"\n    adverb_regex = r\"\\b\\w+ly\\b\"\n    adverb_matches = re.findall(adverb_regex, text)\n    \n    # if no adverb ending with \"ly\" is found, return an empty list\n    if not adverb_matches:\n        return []\n    \n    # find the first adverb ending with \"ly\" and its positions in the string\n    first_adverb = adverb_matches[0]\n    first_adverb_positions = [m.start() for m in re.finditer(first_adverb, text)]\n    \n    return first_adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w*ly)\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        position = [m.start() for m in re.finditer(match, text)][0]\n        positions.append(position)\n    return matches, positions\n\ntext = \"The car is running quickly. The sun is shining brightly. The dog barks loudly.\"\nmatches, positions = find_adverbs(text)\nprint(matches)\nprint(positions)"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n\nitems = [('apple', 5), ('banana', 3), ('orange', 7), ('pear', 2), ('grape', 6)]\nprint(expensive_items(items, 2))  # Output: ['orange', 'banana']"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0])) # Push (price, name) tuple onto heap\n        if len(heap) > n:\n            heapq.heappop(heap) # Remove the item with the lowest price\n    \n    # Return the sorted list of items by price (descending)\n    return [heapq.heappop(heap)[1] for i in range(len(heap))]"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    result = []\n    for i in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item))\n    \n    result = []\n    while heap and len(result) < n:\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    # Add items to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n    # Get the n most expensive items\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n        \n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item['price'])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item['name'] for item in items if item['price'] == heapq.heappop(heap)]\n"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n\nitems = [{'name': 'apple', 'price': 1.5},\n         {'name': 'banana', 'price': 0.75},\n         {'name': 'orange', 'price': 1.25},\n         {'name': 'pear', 'price': 1.75},\n         {'name': 'grape', 'price': 2.5},\n         {'name': 'pineapple', 'price': 3.0}]\n\nprint(expensive_items(items, 3))"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n    \n    result = []\n    for i in range(n):\n        price, name = heapq.heappop(heap)\n        result.append({'name': name, 'price': price})\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n\n    return [heapq.heappop(heap) for i in range(n)]\n\nitems = [('apple', 2.99), ('banana', 1.99), ('orange', 3.50), ('pear', 1.75), ('grape', 2.50)]\nprint(expensive_items(items, 3))  # Output: [('banana', 1.99), ('orange', 3.50), ('pear', 1.75)]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    l = last_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function splits a list at the nth element and adds the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function splits a list at the nth element and adds the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return \"Invalid Index\"\n    else:\n        return l[n+1:] + l[:n+1]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def split_arr(l, n):\n    '''\n    Split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as an input and converts it into a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns the same list as a tuple.\n\n    Parameters:\n    lst (list): The list to be converted to a tuple.\n\n    Returns:\n    tuple: A tuple containing the elements of the input list.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns its tuple form.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"List should have at least two elements\")\n    \n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function finds the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers and returns the difference between the largest and smallest values in the list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                result.append(i)\n                break\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a  # swap a and b if a is greater than b\n    \n    result = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            result.append(num)\n    \n    return result"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b + 1):\n        if num ** 0.5 == int(num ** 0.5):\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num > 0:\n            root = num ** 0.5\n            if root == int(root):\n                result.append(num)\n    return result\n\nprint(perfect_squares(1, 10))  # Output: [1, 4, 9]"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root ** 2 == num:\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two arguments, a and b, and returns a list of all perfect squares between a and b (inclusive).\n    '''\n    # initialize an empty list to store the perfect squares\n    squares = []\n    \n    # iterate from a to b (inclusive)\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i == int(i**0.5)**2:\n            # if it is, append it to the list of squares\n            squares.append(i)\n    \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num > 0:\n            square = int(num**0.5)**2\n            if square == num:\n                print(num)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        if num > 0 and num == int(num**0.5)**2:\n            result.append(num)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The distance from the origin.\n    theta (float): The angle from the positive x-axis in radians.\n\n    Returns:\n    A tuple (x, y) representing the rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.atan2(y, x)\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return x * cmath.rect(1, y)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n\n    Parameters:\n    rho (float): radial distance from the origin\n    theta (float): angle in radians\n    \n    Returns:\n    x (float): x-coordinate\n    y (float): y-coordinate\n    \"\"\"\n\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    a = x * cmath.cos(y)\n    b = x * cmath.sin(y)\n    return (a, b)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    This function takes in polar coordinates (r, phi) and returns the corresponding rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x, y))[0]\n    theta = cmath.polar(complex(x, y))[1]\n    x1 = r * cmath.cos(theta)\n    y1 = r * cmath.sin(theta)\n    return (x1, y1)"
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes in a list as input and swaps the first and last elements in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"New list: \", newList)\n    else:\n        print(\"List should have at least 2 elements\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    This function swaps the first and last elements of a given list.\n    '''\n    if len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[len(newList)-1]\n        newList[len(newList)-1] = temp\n        print(\"The swapped list is:\", newList)\n    else:\n        print(\"List should contain atleast two elements\")"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"List should have at least two elements\""
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The total number of elements.\n    k (int): The number of elements to choose.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        result = 1\n        for i in range(k):\n            result *= (n - i)\n            result //= (i + 1)\n        return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two parameters n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return \"Invalid Input\"\n    elif k == 0 or k == n:\n        return 1\n    else:\n        result = 1\n        for i in range(k, n+1):\n            result = result * i\n        return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum_of_product = 0\nfor i in range(k, n+1):\n    sum_of_product += binomial_Coeff(n, i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum_of_product)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function will calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\ndef sum_of_product_of_consecutive_binomial_coef(n):\n    result = 0\n    for k in range(n+1):\n        result += binomial_Coeff(n, k) * binomial_Coeff(k, 0)\n    return result\n\nprint(sum_of_product_of_consecutive_binomial_coef(5))  # output: 29"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of product of consecutive binomial co-efficients.\n\n    :param n: the total number of elements.\n    :param k: the number of elements to be selected.\n    :return: the sum of product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    coeff = 1\n    sum_coeff = 0\n    for i in range(1, k+1):\n        coeff *= n-i+1\n        coeff //= i\n        sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    # Calculate the binomial coefficient for each pair of consecutive numbers\n    for i in range(k):\n        sum += factorial(n)/(factorial(i)*factorial(n-i))\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n: (int) The size of the set of values to choose from.\n    k: (int) The number of elements to choose.\n\n    Returns:\n    The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    result = 1\n    for i in range(k):\n        result = result * (n-i) // (i+1)\n\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum = 0\nfor i in range(k,n+1): \n    sum += binomial_Coeff(n,i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum)"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two parameters, n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    b = 1\n    for i in range(k):\n        b *= (n - i) / (i + 1)\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into a list of octets\n    octets = ip.split('.')\n    \n    # Loop through the octets and remove leading zeroes\n    for i in range(len(octets)):\n        octet = octets[i]\n        if octet.startswith('0') and len(octet) > 1:\n            octets[i] = octet.lstrip('0')\n    \n    # Join the octets back into a string and return it\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Split the IP address into octets\n    octets = ip.split('.')\n\n    # Loop through each octet and remove leading zeroes\n    for i in range(len(octets)):\n        octets[i] = octets[i].lstrip('0') or '0'\n\n    # Join the octets back into an IP address\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(?<!^)(?=(?:\\.0+){2})', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    if re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', ip):\n        # Check if the ip address is in the correct format\n        octets = ip.split('.')\n        # Split the ip address into octets\n        for i in range(4):\n            if int(octets[i]) == 0:\n                octets[i] = ''\n            else:\n                octets[i] = str(int(octets[i]))\n        # Remove leading zeroes from the octets\n        return '.'.join(octets)\n    else:\n        # If the ip address is not in the correct format, return None\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into a list of digits\n    digits = re.findall(r'\\d+', ip)\n    # Remove any leading zeroes from the list of digits\n    digits = [int(d) for d in digits if d!= '0']\n    # Convert the list of digits back to a string\n    new_ip = ''.join(str(d) for d in digits)\n    # Pad the string with leading zeroes if necessary\n    new_ip = new_ip.ljust(8, '0')\n    # Return the new ip address\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into four parts and remove leading zeroes\n    ip_parts = ip.split('.')\n    for i in range(len(ip_parts)):\n        if ip_parts[i].startswith('0') and len(ip_parts[i]) > 1:\n            ip_parts[i] = ip_parts[i].lstrip('0')\n    # Join the parts back together and return the ip address\n    return '.'.join(ip_parts)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num == None:\n            even_num = num\n        elif num % 2!= 0 and odd_num == None:\n            odd_num = num\n    \n    if even_num!= None and odd_num!= None:\n        return even_num - odd_num\n    else:\n        return \"List is empty or contains only one type of number.\""
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n        if even_num is not None and odd_num is not None:\n            break\n\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    # Iterate through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n\n    # Calculate the difference and return it\n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return abs(even[0] - odd[0])"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # Check if the list has at least 2 elements\n    if len(list1) < 2:\n        return None\n    \n    # Initialize variables for the first even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Loop through the list and find the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1[::-1]:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    \n    # Check if both even and odd numbers were found\n    if even_num is None or odd_num is None:\n        return None\n    \n    # Return the difference between the two numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n            break\n    for i in list1:\n        if i % 2 == 1:\n            odd = i\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in lst:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2==0:\n            even += 1\n            if even == 1:\n                first_even = i\n        else:\n            odd += 1\n            if odd == 1:\n                first_odd = i\n    return first_even - first_odd"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    # convert the strings to lists of characters\n    str1 = list(str1)\n    str2 = list(str2)\n    \n    # initialize variables\n    count = 0\n    i = 0\n    \n    # iterate over both strings simultaneously\n    while i < len(str1) : \n        # if the characters do not match\n        if str1[i]!= str2[i] : \n            # find the index of the matching character in the second string\n            j = str2.index(str1[i])\n            \n            # swap the characters at the indices i and j\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            \n            # increment the count\n            count += 1\n            \n        # increment the index\n        i += 1\n    \n    # return the count of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings into lists of digits\n    digits1 = [int(digit) for digit in str1]\n    digits2 = [int(digit) for digit in str2]\n\n    # Initialize a list to keep track of the swaps\n    swaps = []\n\n    # Iterate over the digits of the two numbers, comparing them and adding swaps to the list as necessary\n    for i in range(len(digits1)):\n        if digits1[i]!= digits2[i]:\n            # If the digits are different, find the index of the digit in the second number\n            index = digits2.index(digits1[i])\n\n            # Swap the two digits and add the swap to the list\n            digits1[i], digits1[index] = digits1[index], digits1[i]\n            swaps.append((i, index))\n\n    # Return the length of the list of swaps as the minimum number of swaps required\n    return len(swaps)"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to lists for easier manipulation\n    lst1 = list(str1)\n    lst2 = list(str2)\n    count = 0\n    # iterate through the lists until they are equal\n    while lst1!= lst2:\n        # swap positions where the values differ\n        for i in range(len(lst1)):\n            if lst1[i]!= lst2[i]:\n                lst1[i], lst1[lst2.index(lst1[i])] = lst1[lst2.index(lst1[i])], lst1[i]\n                lst2[i], lst2[lst1.index(lst2[i])] = lst2[lst1.index(lst2[i])], lst2[i]\n                count += 1\n                break\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    \n    # Converting both the strings into lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    \n    # Iterating through both lists\n    for i in range(n):\n        if list1[i]!= list2[i]:\n            # Checking if the current digit is different in both lists\n            # If yes, then swap the corresponding digits and increment the count\n            if i+1 < n and list1[i+1] == list2[i] and list1[i] == 0:\n                list1[i+1], list1[i] = list1[i], list1[i+1]\n                count += 1\n            elif i-1 >= 0 and list1[i-1] == list2[i] and list1[i] == 1:\n                list1[i-1], list1[i] = list1[i], list1[i-1]\n                count += 1\n            else:\n                return -1 # If both the digits are same or adjacent digits are not same, then return -1\n    \n    return count # Return the final count of swaps required\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[j]!= str2[i]:\n                j += 1\n            str1 = str1[:j] + str1[j+1:] + str1[j] + str1[i+1:]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    count = 0\n    # Traverse through the both strings simultaneously and compare each character\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # If the characters don't match, we have to swap them\n            # We swap only if both the characters are '0' or '1'\n            if str1[i] == '0' and str2[i] == '1':\n                # Swap str1[i] and str2[i]\n                temp = str1[i]\n                str1 = str1[:i] + '1' + str1[i+1:]\n                str2 = str2[:i] + '0' + str2[i+1:]\n                # Increment count\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0':\n                # Swap str1[i] and str2[i]\n                temp = str1[i]\n                str1 = str1[:i] + '0' + str1[i+1:]\n                str2 = str2[:i] + '1' + str2[i+1:]\n                # Increment count\n                count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables to keep track of the number of swaps\n    count = 0\n    # Convert the strings to lists of characters to make it easier to swap characters\n    str1_list = list(str1)\n    str2_list = list(str2)\n    # Loop through each character in the strings\n    for i in range(len(str1)):\n        # If the characters are different, swap them and increment the swap count\n        if str1_list[i]!= str2_list[i]:\n            str1_list[i], str1_list[str2_list.index(str1_list[i])] = str1_list[str2_list.index(str1_list[i])], str1_list[i]\n            count += 1\n    # Return the swap count\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    # convert the strings into binary format\n    binary1 = ''.join(format(ord(i), '08b') for i in str1)\n    binary2 = ''.join(format(ord(i), '08b') for i in str2)\n    \n    # initialize two variables to keep track of swaps\n    count_swap = 0\n    temp = ''\n    \n    # iterate through both binary strings\n    for i in range(len(binary1)):\n        # if the bits are different, swap the bits and increment count_swap\n        if binary1[i]!= binary2[i]:\n            temp = binary1[i] + binary2[i]\n            binary1 = binary1[:i] + temp[1] + binary1[i+1:]\n            binary2 = binary2[:i] + temp[0] + binary2[i+1:]\n            count_swap += 1\n    \n    # return the count_swap\n    return count_swap"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of digits\n    digits1 = [int(d) for d in str1]\n    digits2 = [int(d) for d in str2]\n    \n    # Initialize the count of swaps to 0\n    swaps = 0\n    \n    # Iterate over each digit in the two lists\n    for i in range(len(digits1)):\n        # If the digits are different, swap them and increment the swap count\n        if digits1[i]!= digits2[i]:\n            digits1[i], digits1[digits2.index(digits1[i])] = digits1[digits2.index(digits1[i])], digits1[i]\n            swaps += 1\n    \n    # Return the count of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    count = 0\n    n = len(str1)\n    for i in range(n):\n        for j in range(i+1,n):\n            if str1[i]!= str2[j] and str1[j]!= str2[i]:\n                if str1[i] == str1[j] and str2[i] == str2[j]:\n                    count += 1\n                else:\n                    count += 2\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(item) for item in tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tpl in tuple_list:\n        total_size += sys.getsizeof(tpl)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of each tuple.\n    '''\n    tuple_size_list = []\n    for tuple_ in tuple_list:\n        size = sys.getsizeof(tuple_)\n        tuple_size_list.append(size)\n    return tuple_size_list"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as an input and returns the total size of all tuples in the list in bytes.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1 # swap the arrays if arr1 is longer\n    \n    left = 0\n    right = len(arr1) + len(arr2) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # calculate the number of elements in arr1 that are less than or equal to arr1[mid]\n        count = sum(1 for i in arr1 if i <= arr1[mid])\n        \n        if count >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return arr1[left] # return the kth element"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    Args:\n    arr1: a sorted array of integers\n    arr2: a sorted array of integers\n    k: an integer representing the kth element to find\n\n    Returns:\n    the kth element from the given two sorted arrays\n\n    \"\"\"\n    # Initialize two pointers to the beginning of each array\n    i, j = 0, 0\n\n    # While both pointers are within their respective arrays\n    while i < len(arr1) and j < len(arr2):\n        # If the current element of arr1 is smaller than the current element of arr2\n        if arr1[i] < arr2[j]:\n            # Increment the pointer for arr1\n            i += 1\n        else:\n            # Increment the pointer for arr2\n            j += 1\n\n    # If the pointer for arr1 is within its array\n    if i < len(arr1):\n        # Return the kth element from arr1\n        return arr1[i+k-1]\n    else:\n        # Return the kth element from arr2\n        return arr2[j+k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # Return the kth element\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from two sorted arrays.\n\n    :param arr1: First sorted array.\n    :param arr2: Second sorted array.\n    :param k: The kth element to find.\n    :return: The kth element from the two sorted arrays.\n    \"\"\"\n    if not arr1 or not arr2:\n        return None\n\n    n = len(arr1)\n    m = len(arr2)\n    if n > m:\n        arr1, arr2, n, m = arr2, arr1, m, n\n\n    # Find the smallest common element in the two arrays.\n    i, j = 0, 0\n    while i < n and j < m:\n        if arr1[i] == arr2[j]:\n            return arr1[i]\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If the kth element is greater than the total number of elements in the first array,\n    # then kth element cannot be found in the first array.\n    if k > i + j:\n        return None\n\n    # If the kth element is less than or equal to the total number of elements in the first array,\n    # then kth element cannot be found in the second array.\n    if k <= i:\n        return arr1[k - 1]\n    else:\n        return arr2[k - i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element in the two sorted arrays.\n\n    :param arr1: list of integers, the first sorted array\n    :param arr2: list of integers, the second sorted array\n    :param k: integer, the kth element to find\n    :return: integer, the kth element in the two sorted arrays\n    \"\"\"\n    if not arr1 or not arr2:\n        raise ValueError(\"Arrays cannot be empty.\")\n\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Ensure that k is a valid index\n    if k < 1 or k > n1 + n2:\n        raise ValueError(\"Invalid k.\")\n\n    # Ensure that we don't need to search more than one array\n    if k <= n1:\n        return arr1[k - 1]\n    else:\n        k -= n1\n        return arr2[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and a value k and returns the kth element of the merged array.\n    '''\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments:\n    - arr1: a sorted array of integers\n    - arr2: a sorted array of integers\n    - k: an integer representing the kth element to find\n    \n    It returns the kth element from the two sorted arrays.\n    \"\"\"\n    \n    # Initialize variables\n    i = 0 # index of arr1\n    j = 0 # index of arr2\n    n1 = len(arr1) # length of arr1\n    n2 = len(arr2) # length of arr2\n    \n    # Iterate through the arrays until we find the kth element\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # If we've reached the end of arr1, the kth element is in arr2\n    if i == n1:\n        return arr2[j + k - 1]\n    # If we've reached the end of arr2, the kth element is in arr1\n    elif j == n2:\n        return arr1[i + k - 1]\n    # Otherwise, the kth element is somewhere in between arr1 and arr2\n    else:\n        # If k is odd, the kth element is between the two middle elements of the two arrays\n        if k % 2 == 1:\n            return max(arr1[i - 1], arr2[j - 1])\n        # If k is even, the kth element is between the two middle elements of the two arrays, and the two middle elements of the two arrays differ\n        else:\n            return (max(arr1[i - 1], arr2[j - 1]) + min(arr1[i], arr2[j])) / 2"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # merge the two arrays\n    merged = arr1 + arr2\n    # sort the merged array\n    merged_sorted = sorted(merged)\n    # return the kth element of the merged_sorted array\n    return merged_sorted[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find kth element from the given two sorted arrays.\n\n    Args:\n    - arr1: a sorted array of integers.\n    - arr2: a sorted array of integers.\n    - k: the kth element to find (0-indexed).\n\n    Returns:\n    - The kth element of the two sorted arrays, or None if k is out of bounds.\n    \"\"\"\n\n    # Check if k is out of bounds\n    if k < 0 or k >= len(arr1) + len(arr2):\n        return None\n\n    # Create a merged array\n    merged_arr = arr1 + arr2\n\n    # Use binary search to find the kth element in the merged array\n    left, right = 0, len(merged_arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if merged_arr[mid] == k:\n            return merged_arr[mid]\n        elif merged_arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and a value of k as input and finds the kth smallest element in the merged array.\n\n    :param arr1: The first sorted array.\n    :param arr2: The second sorted array.\n    :param k: The value of k.\n    :return: The kth smallest element in the merged array.\n    \"\"\"\n    merged_array = arr1 + arr2\n    merged_array.sort()\n    return merged_array[k-1]"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the length of the number\n    length = len(number_str)\n\n    # Calculate the sum of the nth power of each digit\n    sum = 0\n    for digit in number_str:\n        sum += int(digit) ** length\n\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether a given number is an Armstrong number or not.\n    '''\n    order = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    order = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    temp = number\n    sum = 0\n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(n))\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    order = len(str(temp))\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    # convert the number into string to get the length\n    number_str = str(number)\n    length = len(number_str)\n    # initialize sum to 0\n    sum = 0\n    # iterate through each digit of the number\n    for digit in number_str:\n        sum += int(digit) ** length\n    # return True if the sum is equal to the number, else False\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    # Convert the number into a string\n    num_str = str(number)\n    \n    # Calculate the length of the number\n    n = len(num_str)\n    \n    # Calculate the sum of the cubes of each digit of the number\n    sum_of_cubes = sum([int(digit)**n for digit in num_str])\n    \n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes an integer 'number' as input and returns the sum and average of first 'number' natural numbers.\n    \"\"\"\n    if number <= 0:\n        return \"Please enter a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        avg = sum / number\n        return f\"The sum of first {number} natural numbers is {sum} and the average is {avg}.\""
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n    average_n = sum_n / n\n    return sum_n, average_n"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_average(n):\n    # initialize sum and count variables\n    total = 0\n    count = 0\n\n    # loop through n natural numbers\n    for i in range(1, n + 1):\n        # add the current number to the sum\n        total += i\n        # increment the count variable\n        count += 1\n\n    # calculate the average\n    average = total / count\n\n    # return the sum and average as a tuple\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total/n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    This function takes a number as input and returns the sum and average of the first n natural numbers.\n    '''\n    # initialize the sum and count variables\n    total_sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers and calculate the sum\n    for i in range(1, number+1):\n        total_sum += i\n        count += 1\n        \n    # calculate the average\n    average = total_sum / count\n    \n    # return the sum and average as a tuple\n    return (total_sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    This function takes an integer as an input and returns the sum and average of first n natural numbers.\n    '''\n    if type(number)!= int or number <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        average = sum / number\n        return f\"Sum of first {number} natural numbers: {sum}\\nAverage of first {number} natural numbers: {average:.2f}\""
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        average = sum / n\n        return f\"Sum of first {n} natural numbers is {sum} and the average is {average:.2f}.\""
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n\n    Parameters:\n        n (int): The number to be checked\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is an even number.\")\n    else:\n        print(f\"{n} is an odd number.\")"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    If there are no repeated characters, it returns None.\n    '''\n    repeated_char = None\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            repeated_char = char\n            break\n        else:\n            char_count[char] = 1\n\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the characters and their counts\n    char_count = {}\n\n    # Loop through the string\n    for char in str1:\n        # If the character is already in the dictionary, return it\n        if char in char_count:\n            return char\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # If no repeated character was found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated character found in the string.\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the first repeated character in the string.\n    If no repeated character is found, it returns None.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the characters and their indices\n    char_dict = {}\n    # iterate over each character in the string\n    for i, char in enumerate(str1):\n        # check if the character is already in the dictionary\n        if char in char_dict:\n            # if it is, return the first occurrence of the character\n            return char\n        # if the character is not in the dictionary, add it and its index to the dictionary\n        else:\n            char_dict[char] = i\n    # if no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string and increment the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Loop through the dictionary and return the first character with a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    # If no character has a count greater than 1, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    for i in range(1, n+1):\n        if i == sum(int(digit)**2 for digit in str(i)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    i = 1\n    while len(ludic_numbers) < n:\n        if i > 1 and all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers[:n]\n\nprint(get_ludic(10)) # Output: [1, 3, 4, 7, 9, 10, 11, 13, 15, 16]"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n+1):\n        if i == sum(int(digit)**2 for digit in str(i)):\n            result.append(i)\n    return result"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_lucid(n):\n    '''\n    Check if a number is lucid.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(2, n+1):\n        if all(num % i!= 0 for i in range(2, num)):\n            lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n+1):\n        # Check if the number is lucid or not\n        is_lucid = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic.append(num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    i = 2\n    while i <= n:\n        if is_lucid(i):\n            ludics.append(i)\n        i += 1\n    return ludics\n\ndef is_lucid(n):\n    '''\n    Check if a number is lucid or not.\n    '''\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_lucid(n):\n    '''\n    Returns True if n is a lucid number, False otherwise.\n    A lucid number is a positive integer that has no prime factors larger than sqrt(n).\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    '''\n    Returns a list of all lucid numbers smaller than or equal to n.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            result.append(i)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list and join them back into a string\n    reversed_words =''.join([word[::-1] for word in words])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into words using space as separator\n    words = s.split()\n\n    # Reversing each word and joining them back to form a string\n    reversed_words = \" \".join(word[::-1] for word in words)\n\n    # Returning the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into individual words\n    reversed_words = [word[::-1] for word in words]  # Reverse each word\n    reversed_string =''.join(reversed_words)  # Join the reversed words into a string with spaces in between\n    return reversed_string  # Return the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    This function takes a string as input and reverses the order of words in the string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # reverse each word\n    return''.join(reversed_words)  # join the reversed words with a space in between"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = [] # create an empty list to store the reversed words\n    for word in words:\n        reversed_word = word[::-1] # reverse each word\n        reversed_words.append(reversed_word) # append the reversed word to the list\n    return \" \".join(reversed_words) # join the reversed words into a string with spaces between them"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return f\"{num} is a prime number\"\n    else:\n        return f\"{num} is not a prime number\""
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as an argument and returns True if it is a prime number,\n    otherwise it returns False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks whether a given integer is a prime number or not.\n    \"\"\"\n\n    # Check if the given number is less than or equal to 1\n    if num <= 1:\n        return False\n\n    # Check if the given number is divisible by any number less than or equal to its square root\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number less than or equal to its square root, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes an angle in degrees as input and returns the equivalent angle in radians.\n    '''\n    radians = (math.pi/180)*degree\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in degrees as input and returns the equivalent radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        matched_string = match.group()\n        print(f\"Found a match: {matched_string} starting at index {start_index} and ending at index {end_index}\")"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        result = []\n        for match in matches:\n            result.append((match, text.index(match), text.index(match)+len(match)-1))\n        return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[-i:]))\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth bell number using dynamic programming approach.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    \n    for i in range(2, n + 1):\n        bell[i] = bell[i-1] + bell[i-2]\n        \n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[i-1] * (i+1))\n    return bell[n]\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return sum(range(n))"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    b = [0] * (n+1) \n    b[0] = 1\n    for i in range(1, n+1): \n        for j in range(i): \n            b[i] += b[j] * b[i-j-1]\n    return b[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth bell number.\n    \"\"\"\n    bell_num = [0] * (n+1)\n    bell_num[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            bell_num[i] += bell_num[j] * bell_num[i-j-1]\n    return bell_num[n]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return sum([i**n for i in range(1, n+1)])"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += bell_Number(i)\n        return bell_Number(n-1) + sum"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth Bell number.\n    \"\"\"\n    bell = [1]\n    for i in range(1, n):\n        bell.append(sum(bell))\n    return bell[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    if n == 0: \n        return 1\n    else: \n        return sum(range(n+1))"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as arguments. It removes the kth element from the list and returns the resulting list.\n    '''\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Remove the k'th element from a list.\n    \"\"\"\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list.\")\n        return []\n    elif L == 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and a number k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list to store the elements of the input list, but without the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a new list with the same elements,\n    but the kth element removed.\n    \"\"\"\n    if k > len(list1) or k < 1:\n        raise ValueError(\"Invalid k value\")\n    return list1[:k-1] + list1[k:]\n"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k-th element of the list and returns the resulting list.\n    \"\"\"\n    if k < 1 or k > len(lst):\n        raise ValueError(\"k is out of range\")\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Given a list `lst` and an integer `k`, returns a new list with the same elements as `lst`,\n    but with the k'th element removed.\n    \"\"\"\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the maximum value in the Nth column.\n    \"\"\"\n    col = [row[N] for row in test_list]\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_num:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = [row[N-1] for row in test_list] # extract the nth column\n    max_val = max(col) # find the maximum value in the column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n_column = []\n    for row in test_list:\n        n_column.append(row[N-1])\n    return max(n_column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column = []\n    for i in range(len(test_list)):\n        column.append(test_list[i][N-1])\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    column_values = [row[N-1] for row in test_list]\n    return max(column_values)"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the maximum value in the nth column.\n\n    Parameters:\n        matrix (list): A list of lists representing a matrix.\n        n (int): The index of the column to find the maximum value in.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n    \"\"\"\n    max_val = None\n    for row in matrix:\n        if row[n] > max_val or max_val is None:\n            max_val = row[n]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Initialize an empty list to hold the first element of each sublist.\n    first_list = []\n    # Initialize an empty list to hold the second element of each sublist.\n    second_list = []\n\n    # Iterate over each sublist in the input list.\n    for sublist in lst:\n        # Append the first element of the sublist to the first list.\n        first_list.append(sublist[0])\n        # Append the second element of the sublist to the second list.\n        second_list.append(sublist[1])\n\n    # Return a list of the first and second lists.\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    \n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n        \n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return [result[::2], result[1::2]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list contains the first element of each sublist and the second list contains the second element of each sublist.\n    '''\n    # create two empty lists to store the first and second elements of each sublist\n    first_list = []\n    second_list = []\n    \n    # iterate through each sublist in the input list\n    for sublist in lst:\n        # add the first and second elements to their respective lists\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n        \n    # return a list of the two lists containing the first and second elements of the sublists\n    return [first_list, second_list]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    left = merge(lst[:len(lst)//2])\n    right = merge(lst[len(lst)//2:])\n    return [left[0]+[right[0][0]], right[1]+[left[1][0]]] + left[1:] + right[1:]"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i[1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    sum_list = []\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n        sum_list.append(cumulative_sum)\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for tup in test_list:\n        total_sum += tup[1]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list as input and returns the cumulative sum of all the values present in the list.\n    \"\"\"\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples and returns the cumulative sum of all the values in the tuples.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        result += sum(test_list[i])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cummulative_sum = 0\n    \n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # Extract the value from the tuple\n        value = tuple[1]\n        \n        # Add the value to the cumulative sum\n        cummulative_sum += value\n        \n    # Return the cumulative sum\n    return cummulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a list of tuples as input and returns the cumulative sum of all the values present in the tuples.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i[1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function finds the cumulative sum of all the values that are present in the given tuple list.\n\n    :param test_list: A list of tuples.\n    :return: A list containing the cumulative sum of all the values in the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        total_sum = 0\n        for j in range(len(test_list[i])):\n            total_sum += test_list[i][j]\n        result.append(total_sum)\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tpl in nums:\n        total = sum(tpl)\n        avg = total / len(tpl)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        result.append(total/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        average = sum_tup / len(tup)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must be of the same length.')\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n        return result_tup\n    else:\n        print(\"Error: Tuples are not of the same length.\")"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must be of the same length\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should be of the same length\")\n        \n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    if d >= len(steps): \n        return -1\n    if steps[d] == 0: \n        return 0\n    count = float('inf')\n    for i in range(1, steps[d]+1): \n        res = min_Jumps(steps, d+i) \n        if res!= -1: \n            count = min(count, res+1) \n    return count "
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: \n        return 1\n    \n    dp = [0]*(d+1)\n    dp[1] = 1\n    \n    for i in range(2, d+1): \n        dp[i] = float('inf')\n        \n        for j in range(1, i): \n            if j + dp[j] >= i: \n                dp[i] = min(dp[i], dp[j] + 1)\n                \n        if dp[i] == float('inf'): \n            return -1\n    \n    return dp[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    \n    for i in range(n):\n        for j in range(i):\n            if jumps[j]!= float('inf') and i <= j + steps[j]:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    \n    return jumps[n-1]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    # Initialize a list to store the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane\n    jumps = [0] * (d+1)\n    jumps[1] = 1\n    \n    # Iterate through each point in the 2d plane and update the number of jumps required to reach it\n    for i in range(2, d+1):\n        for j in range(1, steps+1):\n            if i <= j*jumps[j]:\n                jumps[i] = j\n                break\n    \n    # Return the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane\n    return jumps[d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    elif steps < d:\n        return -1\n    else:\n        return min_Jumps(steps-d, d) + 1\n\nprint(min_Jumps(10, 3))"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    if steps < 1: \n        return \"Invalid input\"\n    if d < 1: \n        return \"Invalid input\"\n    \n    if steps == 1: \n        return 1\n    \n    dp = [[0 for i in range(steps)] for j in range(d)]\n    \n    for i in range(d): \n        dp[i][0] = i\n    \n    for i in range(1, steps): \n        for j in range(d): \n            if j == 0: \n                dp[j][i] = dp[j][i-1] + 1\n            elif j == i: \n                dp[j][i] = dp[j][i-1]\n            else: \n                dp[j][i] = min(dp[j][i-1], dp[j-1][i-1]) + 1\n                \n    return dp[d-1][steps-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1 and d == 1:\n        return 1\n    \n    elif steps == 1 and d > 1:\n        return -1\n    \n    else:\n        dp = [[0 for x in range(d+1)] for y in range(steps+1)]\n        \n        for i in range(1, steps+1):\n            for j in range(1, d+1):\n                if i == 1 and j == 1:\n                    dp[i][j] = 1\n                \n                elif i == 1 and j > 1:\n                    dp[i][j] = -1\n                \n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                    \n                    if dp[i-1][j] == -1 or dp[i][j-1] == -1:\n                        dp[i][j] = -1\n        \n        return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    else:\n        return 1 + min_Jumps(steps-1, d-1)"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    \n    jumps = 1\n    step = 1\n    \n    while step < d:\n        if step + steps[step] >= d:\n            jumps += 1\n            step = d\n        else:\n            step += steps[step]\n            jumps += 1\n            \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    if steps < 1:\n        return 0\n    if steps == 1:\n        return 1\n    if d == 1:\n        return steps\n    if d >= steps:\n        return 1\n    dp = [0] * steps\n    dp[0] = 1\n    for i in range(1, steps):\n        dp[i] = float('inf')\n        for j in range(1, min(d, i) + 1):\n            if i - j >= 0:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    return dp[steps - 1]"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def div_lists(nums1, nums2):\n    \"\"\"\n    This function divides two lists element-wise.\n    \"\"\"\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate over the lists using a for loop\n    for i in range(len(nums1)):\n        # Check if the second element is zero, to avoid division by zero errors\n        if nums2[i] == 0:\n            result.append(float('nan'))\n        else:\n            # Divide the two elements and append the result to the result list\n            result.append(nums1[i] / nums2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise and returns a new list containing the results.\n    If either of the input lists is empty, it returns an empty list.\n    '''\n    result = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return result\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Parameters:\n    nums1 (list): the first list\n    nums2 (list): the second list\n\n    Returns:\n    list: the resulting list of quotients\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    quotient_list = []\n    for i in range(len(nums1)):\n        quotient_list.append(nums1[i] / nums2[i])\n    return quotient_list"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and returns a new list containing the element-wise division of the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    alpha_list = []\n    \n    # Split the string into a list of numbers and alphabets\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n    \n    # Join the numbers and alphabets lists to get the final string\n    final_str = ''.join(alpha_list + num_list)\n    \n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    This function takes a string as input and moves all the numbers to the end of the string.\n    \"\"\"\n    # Splitting the string into two parts based on the presence of numbers\n    temp_list = []\n    for i in test_str:\n        if i.isdigit():\n            temp_list.append(i)\n    num_str = ''.join(temp_list)\n    non_num_str = test_str.replace(num_str, '')\n\n    # Concatenating the non-numeric string with numeric string in the reversed order\n    result = non_num_str + num_str[::-1]\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Move all numbers to the end of the given string.\n    \"\"\"\n    # Convert the string into a list of characters\n    test_list = list(test_str)\n\n    # Create two empty lists to hold the numbers and non-numbers\n    nums = []\n    non_nums = []\n\n    # Iterate through the characters in the list\n    for char in test_list:\n        # Check if the character is a number\n        if char.isdigit():\n            # If it is a number, append it to the nums list\n            nums.append(char)\n        else:\n            # If it is not a number, append it to the non_nums list\n            non_nums.append(char)\n\n    # Combine the non-numbers and numbers lists into one list\n    new_list = non_nums + nums\n\n    # Convert the list back into a string\n    new_str = ''.join(new_list)\n\n    # Return the new string with numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    for char in test_str:\n        if char.isdigit():\n            nums += char\n    result = ''\n    for char in test_str:\n        if not char.isdigit():\n            result += char\n    return result + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_lst = []\n    str_lst = []\n    for char in test_str:\n        if char.isdigit():\n            num_lst.append(char)\n        else:\n            str_lst.append(char)\n    return ''.join(str_lst + num_lst)"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a list to store the non-number words\n    non_nums = []\n    \n    # Loop through the words and append non-number words to the non_nums list\n    for word in words:\n        if not word.isdigit():\n            non_nums.append(word)\n    \n    # Join the non-number words into a string with spaces in between\n    non_nums_str =''.join(non_nums)\n    \n    # Split the non-number words into individual words again\n    non_nums = non_nums_str.split()\n    \n    # Create a list to store the number words\n    nums = []\n    \n    # Loop through the words and append number words to the nums list\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n    \n    # Join the number words into a string with spaces in between\n    nums_str =''.join(nums)\n    \n    # Combine the non-number words and number words into a single string with numbers at the end\n    result_str =''.join(non_nums) +'' + nums_str\n    \n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into a list of characters\n    test_list = list(test_str)\n    \n    # create an empty list to store the characters after numbers\n    num_list = []\n    \n    # loop through the characters of the string\n    for char in test_list:\n        # check if the character is a number\n        if char.isdigit():\n            # add the character to the number list\n            num_list.append(char)\n        else:\n            # add the non-number character to the end of the list\n            test_list.remove(char)\n            test_list.append(char)\n    \n    # join the number list and the modified string\n    final_str = ''.join(test_list) + ''.join(num_list)\n    \n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''\n    str_list = list(test_str)\n    for i in range(len(str_list)):\n        if str_list[i].isdigit():\n            nums += str_list[i]\n            str_list[i] = ''\n    return ''.join(str_list) + nums"
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_lst = []\n    alpha_lst = []\n    for char in test_str:\n        if char.isdigit():\n            num_lst.append(char)\n        else:\n            alpha_lst.append(char)\n    new_str = ''.join(alpha_lst) + ''.join(num_lst)\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1 if a[0] % a[1] == 0 else 2\n    \n    for i in range(2, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-2] + 1\n            \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n\n    n = len(a)\n    if n < 2:\n        return 0\n\n    # Sort the array in ascending order\n    a = sorted(a)\n\n    # Initialize variables for variables used in the algorithm\n    i = 0\n    j = 1\n    max_size = 0\n\n    # Loop through the array and find all pairs of numbers that are divisible\n    while j < n:\n        if a[j] % a[i] == 0:\n            # If the pair is divisible, update the maximum size\n            max_size = max(max_size, j - i + 1)\n        else:\n            # If the pair is not divisible, move the left pointer to the right until a new pair is found\n            i += 1\n            if i > j:\n                i = j\n                j += 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    ans = 0\n    for i in range(n):\n        if i == 0 or a[i] % a[i-1] == 0:\n            dp[i] = 1 + dp[i-1] if i > 0 else 1\n            ans = max(ans, dp[i])\n        else:\n            dp[i] = dp[i-1]\n    return ans"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    # Initialize variables for the solution\n    i = j = k = 0\n    # Iterate through the list and check if every pair is divisible\n    while j < n and k < n:\n        if a[j] % a[k] == 0:\n            i = max(i, j)\n            k += 1\n        else:\n            j += 1\n    # Return the size of the largest subset\n    return i + 1"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    This function takes a list of numbers as input and returns the size of the largest subset of the list\n    that satisfies the condition that every pair of elements in the subset is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n\n    return max(dp[i][i] for i in range(n))"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0] * n for _ in range(n)] # initialize a 2D array to store the subproblems solutions\n    for i in range(n):\n        dp[i][i] = 1 # base case: a single number is always divisible by itself\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0: # if the pair is divisible, add 1 to the solution of the subproblem that ends with the smaller number\n                dp[i][j] = max(dp[i][j], dp[i + 1][j] + 1)\n            if a[j] % a[i] == 0: # if the pair is divisible, add 1 to the solution of the subproblem that ends with the larger number\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    return dp[0][-1] # return the solution for the subproblem that starts with the first number of the list"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0 and dp[j]!= 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return dp[n]"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [[False]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    max_size = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and dp[i][j-1]:\n                dp[i][j] = True\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If n is even\n        return (arr1[n//2] + arr1[n//2 - 1]) / 2\n    else:\n        # If n is odd\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid = n//2\n        return (arr1[mid-1] + arr1[mid])/2\n    else:\n        mid = n//2\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted arrays into one\n    arr = arr1 + arr2\n\n    # Sort the merged array in ascending order\n    arr.sort()\n\n    # Find the middle index of the array\n    mid = n // 2\n\n    # If the array size is odd, return the middle element\n    if n % 2 == 1:\n        return arr[mid]\n\n    # If the array size is even, return the average of the middle two elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists and their size as input and returns the median of the two lists.\n    \"\"\"\n    if n % 2 == 0:\n        # if the size of the two lists is even\n        return (arr1[n//2] + arr1[n//2 - 1])/2\n    else:\n        # if the size of the two lists is odd\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine both the arrays\n    arr = arr1 + arr2\n    \n    # Sort the combined array\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2] + arr[n//2 - 1])/2\n    else:\n        median = arr[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge both the arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Find the median of the merged array\n    if n % 2 == 0:\n        median = (merged_arr[n//2] + merged_arr[n//2 - 1]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    :param arr1: a sorted list\n    :param arr2: a sorted list\n    :param n: the size of the lists\n    :return: the median of the two lists\n    \"\"\"\n\n    # Initialize variables\n    i = 0\n    j = 0\n    m1 = None\n    m2 = None\n\n    # Loop through both lists\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            if m1 is None or arr1[i] <= m1:\n                m1 = arr1[i]\n                i += 1\n            else:\n                m2 = arr1[i]\n                break\n        else:\n            if m1 is None or arr2[j] <= m1:\n                m1 = arr2[j]\n                j += 1\n            else:\n                m2 = arr2[j]\n                break\n\n    # Handle case where one list is longer than the other\n    while i < n:\n        if m1 is None or arr1[i] <= m1:\n            m1 = arr1[i]\n            i += 1\n        else:\n            m2 = arr1[i]\n            break\n\n    while j < n:\n        if m1 is None or arr2[j] <= m1:\n            m1 = arr2[j]\n            j += 1\n        else:\n            m2 = arr2[j]\n            break\n\n    # Return median\n    if m2 is None:\n        return m1\n    else:\n        return (m1 + m2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    result = []\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    \n    while i < n:\n        result.append(arr1[i])\n        i += 1\n    \n    while j < n:\n        result.append(arr2[j])\n        j += 1\n    \n    if n % 2 == 0:\n        return (result[n//2] + result[n//2 - 1])/2\n    else:\n        return result[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < n:\n        arr.append(arr1[i])\n        i += 1\n    while j < n:\n        arr.append(arr2[j])\n        j += 1\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2 - 1])/2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): The first sorted list of integers.\n    arr2 (list): The second sorted list of integers.\n    n (int): The size of the lists.\n\n    Returns:\n    float: The median of the two lists.\n    \"\"\"\n\n    # Initialize variables to hold the median and the index of the two middle elements\n    median = 0\n    mid1 = (n - 1) // 2\n    mid2 = n // 2\n\n    # If the two middle elements are equal, return their average\n    if arr1[mid1] == arr2[mid2]:\n        return (arr1[mid1] + arr2[mid2]) / 2\n\n    # If one of the two middle elements is smaller, return the middle element of the larger list\n    if arr1[mid1] < arr2[mid2]:\n        median = arr1[mid1]\n        return median\n\n    # If the two middle elements are both larger, return the middle element of the smaller list\n    else:\n        median = arr2[mid2]\n        return median"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function takes two arguments:\n    - nums: a list of integers\n    - n: an integer\n    \n    It computes the n-th power of each number in the nums list and returns the result.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x ** n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and returns a new list with each number raised to the n-th power.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and computes the n-th power of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    This function takes a list of numbers as input and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and a number n as input and returns a list of the n-th power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase, else False.\n    \"\"\"\n    return string.upper() == string"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function will convert the given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    '''\n    # convert the string to uppercase\n    upper_string = string.upper()\n    \n    # compare the original string with the uppercase string\n    if upper_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase, else False.\n    '''\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns the uppercase version of the string.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function converts the given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Swap the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as an input and interchanges the first and last element of the list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must have at least two elements to swap.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The list after swapping the first and last element is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    \"\"\"\n    This function takes a list as input and interchanges the first and last element of the list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<2:\n        print(\"List should have at least two elements.\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"New list after swapping: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    This function will take a list as an argument and swap the first and last element in the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the diameter of the circle\n    diameter = r * 2\n    \n    # Find the length of the side of the triangle\n    length = math.sqrt(r**2 - (r/2)**2)\n    \n    # Find the area of the triangle using Heron's formula\n    area = 0.5 * length * r\n    \n    # Find the angle at the center of the triangle (in radians)\n    angle = math.asin(r/diameter)\n    \n    # Find the length of the third side of the triangle\n    height = 2 * r * math.sin(angle)\n    \n    # Find the area of the triangle\n    area2 = 0.5 * r * height\n    \n    # Return the area of the largest triangle\n    if area2 > area:\n        return area2\n    else:\n        return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.sqrt(3) / 2) * r ** 2\n    return area\n\nr = float(input(\"Enter the radius of the semicircle: \"))\nprint(\"The area of the largest triangle that can be inscribed in the semicircle with radius\", r, \"is\", triangle_area(r))"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the diameter of the circle\n    d = 2 * r\n    \n    # calculate the hypotenuse of the triangle\n    h = math.sqrt(r**2 - (r/2)**2)\n    \n    # calculate the area of the triangle\n    area = (math.sqrt(3)/4) * (r**2)\n    \n    # calculate the area of the semicircle\n    semicircle_area = math.pi * r**2\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_triangle_area = semicircle_area - area\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    # Compute the area of the largest triangle that can be inscribed in a semicircle\n    a = r * math.sqrt(3) / 2\n    return math.pi * r**2 / 2 - a**2 / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the diameter of the circle\n    d = 2 * r\n    \n    # Calculate the length of the hypotenuse of the largest triangle\n    h = r * math.sin(math.pi / 3)\n    \n    # Calculate the area of the largest triangle\n    area = 0.5 * d * h\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    # Find the length of the longest side of the triangle\n    a = r * math.sqrt(3) / 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    s = (a * r) / 2\n    \n    return s"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the diameter of the semicircle\n    d = r * 2\n    # Calculate the length of the hypotenuse of the triangle\n    h = math.sqrt((d/2)**2 + r**2)\n    # Calculate the area of the triangle\n    area = (math.sqrt(3)/2) * r**2 * h\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the length of the base of the triangle\n    base_length = r * math.sqrt(3) / 2\n    \n    # Calculate the height of the triangle\n    height = 2 * r / 3\n    \n    # Calculate the area of the triangle\n    area = base_length * height\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the diameter of the semicircle\n    diameter = 2*r\n    \n    # Calculate the height of the triangle\n    height = r/math.tan(math.pi/5)\n    \n    # Calculate the area of the triangle\n    area = 0.5 * height * diameter\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # The maximum area of a triangle inscribed in a semicircle is pi * r^2 / 2\n    max_area = math.pi * r**2 / 2\n    \n    # We can find the area of the largest triangle that can be inscribed in a semicircle with radius r by setting the height h to the radius of the inscribed circle and the base b to sqrt(r^2 - h^2). We then find the area of the triangle using the formula (b*h)/2.\n    h = r\n    b = math.sqrt(r**2 - h**2)\n    area = (b*h)/2\n    \n    # If the area of the largest triangle is greater than the maximum area, we return the maximum area. Otherwise, we return the area of the largest triangle.\n    if area > max_area:\n        return max_area\n    else:\n        return area"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n        \n    for i in range(start,end+1):\n        if array[i]!= i+start:\n            return i+start\n    \n    return end+1+start if end+1+start <= len(array) else None"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i - 1 > 0:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)-1\n    \n    if end < start:\n        return None\n    \n    if start == end:\n        if array[start]!= start+1:\n            return start+1\n        else:\n            return None\n        \n    mid = (start+end)//2\n    \n    left_missing = find_First_Missing(array,start,mid)\n    \n    if left_missing is not None:\n        return left_missing\n    \n    right_missing = find_First_Missing(array,mid+1,end)\n    \n    if right_missing is not None:\n        return right_missing\n    \n    return None\n    \n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    :param array: A list of sorted natural numbers.\n    :param start: The starting index of the array to search. Default is 0.\n    :param end: The ending index of the array to search. Default is the length of the array.\n    :return: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return 0\n    \n    mid = (start + end) // 2\n    left = find_First_Missing(array, start, mid)\n    right = find_First_Missing(array, mid+1, end)\n    if left == right:\n        return left\n    \n    if array[start+left] < array[mid+left+1]:\n        return left\n    else:\n        return right+mid+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # loop through the array to find the first missing number\n    for i in range(start, end + 1):\n        if array[i] > 0:\n            # if the number is positive, then we check if the next number is missing\n            if array[i] == array[i + 1] - 1 or array[i] == array[i - 1] + 1:\n                continue\n            else:\n                return array[i]\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i+start:\n            return i+start\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array: A sorted list of natural numbers.\n        start: The starting index of the sub-list (inclusive).\n        end: The ending index of the sub-list (exclusive).\n\n    Returns:\n        The smallest missing number.\n    \"\"\"\n\n    # Initialize the ending index to the length of the array if it is not specified.\n    if end is None:\n        end = len(array)\n\n    # Initialize a dictionary to keep track of the frequency of each number in the sub-list.\n    freq = {}\n    for i in range(start, end):\n        if array[i] in freq:\n            freq[array[i]] += 1\n        else:\n            freq[array[i]] = 1\n\n    # Find the smallest missing number by iterating over the sub-list and looking for the first\n    # number that is not present in the dictionary.\n    for i in range(start, end):\n        if array[i] not in freq:\n            return array[i]\n\n    # If all numbers from start to end-1 are present in the dictionary, the missing number is\n    # end.\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    length = end - start + 1\n    if length == 0:\n        return 1\n    if length == 1:\n        return array[start] + 1\n    if array[start] > 1:\n        return 1\n    if array[end] < length:\n        return length\n    if array[start] == 1:\n        if array[end] == length:\n            return length + 1\n        else:\n            return length\n    for i in range(start + 1, end + 1):\n        if array[i] - array[i - 1] > 1:\n            return array[i - 1] + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the search range.\n    end (int): The ending index of the search range.\n\n    Returns:\n    int: The smallest missing number.\n    \"\"\"\n\n    # If end is not provided, set it to the length of the array minus one.\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the smallest missing number to start + 1.\n    smallest_missing = start + 1\n\n    # Loop through the array from start to end.\n    for i in range(start, end + 1):\n        # If the current number is less than or equal to the smallest missing number,\n        # add the difference between it and the smallest missing number to the smallest missing number.\n        if array[i] <= smallest_missing:\n            missing_diff = smallest_missing - array[i]\n            smallest_missing += missing_diff\n\n    # If the smallest missing number is greater than the length of the array,\n    # the missing number is at the end of the array. Return the length of the array.\n    if smallest_missing > len(array):\n        return len(array)\n\n    # Otherwise, return the smallest missing number.\n    return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    # initialize the counter\n    count = start\n    for i in range(start, end+1):\n        # if the current number is not equal to its index\n        if array[i]!= i+start:\n            # increment the counter\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \", \"%20\")\n    return new_string"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    This function replaces all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the list.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def split_numbers(numbers):\n    \"\"\"\n    Split a list of numbers into even and odd numbers and return them in separate lists.\n    \"\"\"\n    evens = []\n    odds = []\n    for num in numbers:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens, odds"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = [num for num in list if num % 2 == 0]\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Split a list into two sub-lists, one with even numbers and one with odd numbers.\n\n    Args:\n        list: a list of numbers\n\n    Returns:\n        a tuple of two lists, one with even numbers and one with odd numbers\n    \"\"\"\n    evens = []\n    odds = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return (evens, odds)"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_even_numbers(numbers):\n    \"\"\"\n    Returns a list of even numbers from a list of numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a list with all even numbers from the input list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def adjac(coord, sub=[]):\n    '''\n    Returns a list of all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the row and column values from the coordinate tuple\n    row, col = coord\n\n    # Define the adjacent coordinates as tuples\n    adj = [(row-1, col), (row, col+1), (row+1, col), (row, col-1)]\n\n    # Filter out the coordinates that are outside the range of the board\n    adj = [c for c in adj if all(0 <= x <= 2 for x in c)]\n\n    # Remove any coordinates that are already in the sublist (if provided)\n    adj = [c for c in adj if c not in sub]\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes in a tuple of coordinates and returns all the adjacent coordinates of that tuple.\n    \"\"\"\n    if len(ele)!= 2:\n        print(\"Invalid input. Tuple must have exactly 2 elements.\")\n        return None\n    \n    x, y = ele\n    \n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def adjac(coord, sub=[]):\n    \"\"\"\n    This function returns the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Initialize an empty list to store adjacent coordinates\n    adj_coords = []\n\n    # Append the coordinates that are adjacent to the given coordinate tuple\n    adj_coords.append((coord[0] + 1, coord[1]))\n    adj_coords.append((coord[0] - 1, coord[1]))\n    adj_coords.append((coord[0], coord[1] + 1))\n    adj_coords.append((coord[0], coord[1] - 1))\n\n    # Remove the coordinate tuple if it is present in the list of adjacent coordinates\n    if coord in adj_coords:\n        adj_coords.remove(coord)\n\n    # If a sublist is provided, append the adjacent coordinates to it and return it\n    if sub:\n        sub.extend(adj_coords)\n        return sub\n    # If no sublist is provided, return the list of adjacent coordinates\n    else:\n        return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    for i in sub:\n        adj.remove(i)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Extract all adjacent coordinates of a given coordinate tuple.\n\n    Args:\n    - ele: tuple of integers representing a coordinate (x, y)\n    - sub (optional): list of coordinate tuples (default: empty list)\n\n    Returns:\n    - list of adjacent coordinate tuples\n\n    Example usage:\n    >>> adjac((1, 2))\n    [(2, 2), (1, 1), (1, 3), (2, 1), (2, 3)]\n    '''\n\n    x, y = ele\n    adj = []\n\n    # add adjacent coordinates to list\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 9:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 9:\n        adj.append((x, y+1))\n\n    # add sublist to adjacent coordinates\n    for s in sub:\n        adj.append(s)\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of coordinates and returns all the adjacent coordinates of the given tuple.\n    '''\n    x, y = ele\n    adj_list = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)] # all the adjacent coordinates\n    if sub: # if the sub list is provided\n        sub_list = []\n        for coord in adj_list:\n            if coord in sub: # if the adjacent coordinate is in the sub list\n                sub_list.append(coord) # add it to the sub list\n        return sub_list\n    else: # if the sub list is not provided\n        return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    \n    # check the adjacent coordinates for the given coordinate tuple\n    adj = [(x+1, y), (x, y-1), (x, y+1), (x-1, y)]\n    \n    # check if any of the adjacent coordinates is within the given sub list\n    result = [adj_coord for adj_coord in adj if adj_coord not in sub]\n    \n    return result"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    This function takes a coordinate tuple as input and returns a list of tuples, where each tuple \n    is an adjacent coordinate to the given coordinate. The optional argument `sub` is used to \n    recursively extract the adjacent coordinates of the sub-grid in the form of 4-connected \n    neighbors. If `sub` is not provided, the function extracts the adjacent coordinates of the \n    main grid in the form of 8-connected neighbors.\n    '''\n    row, col = ele\n    \n    # Define the adjacent coordinates for the main grid (8-connected neighbors)\n    adj_coords = [(row-1, col-1), (row-1, col), (row-1, col+1),\n                  (row, col-1),           (row, col+1),\n                  (row+1, col-1), (row+1, col), (row+1, col+1)]\n    \n    # If `sub` is provided, recursively extract the adjacent coordinates of the sub-grid (4-connected neighbors)\n    if sub:\n        sub_row, sub_col = sub\n        sub_adj_coords = [(row-1, col-1), (row-1, col), (row-1, col+1),\n                          (row, col-1),           (row, col+1),\n                          (row+1, col-1), (row+1, col), (row+1, col+1),\n                          (sub_row-1, sub_col-1), (sub_row-1, sub_col), (sub_row-1, sub_col+1),\n                          (sub_row, sub_col-1),           (sub_row, sub_col+1),\n                          (sub_row+1, sub_col-1), (sub_row+1, sub_col), (sub_row+1, sub_col+1)]\n        adj_coords.extend(sub_adj_coords)\n    \n    # Remove duplicates and return the list of adjacent coordinates\n    return list(set(adj_coords))"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj + sub"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with underscores and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    This function takes a string as input and replaces all whitespaces with an underscore and vice versa.\n    '''\n    # Check if the input string is empty or None\n    if not text:\n        return None\n\n    # Replace all whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n\n    # Replace all underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces whitespaces with an underscore and vice versa in a given string.\n    '''\n    if'' in text:\n        text = text.replace(' ', '_')\n        print(text)\n    elif '_' in text:\n        text = text.replace('_','')\n        print(text)\n    else:\n        print('No whitespaces or underscores found in the given string.')"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    count = 0\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n        else:\n            num_list[i-count] = num_list[i]\n    \n    for i in range(count):\n        num_list[-i-1] = 0\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Split the list into two parts: non-zeroes and zeroes\n    non_zeroes, zeroes = [], []\n    for num in num_list:\n        if num!= 0:\n            non_zeroes.append(num)\n        else:\n            zeroes.append(num)\n    \n    # Combine the non-zeroes and zeroes and return the result\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes in a list of numbers as input.\n    The function moves all zeroes to the end of the list and returns the new list.\n    \"\"\"\n    zeroes = [num for num in num_list if num == 0]\n    non_zeroes = [num for num in num_list if num!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Find the index of first non-zero element\n    first_nonzero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            first_nonzero_index = i\n            break\n\n    # Move all non-zero elements to the beginning of the list\n    j = 0\n    for i in range(len(num_list)):\n        if i!= first_nonzero_index:\n            if num_list[i]!= 0:\n                num_list[j] = num_list[i]\n                j += 1\n\n    # Move all zeroes to the end of the list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            for j in range(i, len(num_list)-1):\n                num_list[j] = num_list[j+1]\n            num_list[-1] = 0\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Moves all zeroes to the end of the given list.\n    \"\"\"\n    # Create two lists, one for non-zero numbers and one for zeroes.\n    non_zero_nums = []\n    zeroes = []\n    \n    # Iterate through the input list.\n    for num in num_list:\n        # If the number is zero, add it to the zeroes list.\n        if num == 0:\n            zeroes.append(num)\n        # Otherwise, add it to the non-zero numbers list.\n        else:\n            non_zero_nums.append(num)\n    \n    # Concatenate the non-zero numbers list with the zeroes list and return it.\n    return non_zero_nums + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = [x for x in num_list if x == 0]\n    non_zeroes = [x for x in num_list if x!= 0]\n    return non_zeroes + zeroes"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Find the index of the first non-zero element\n    first_non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            first_non_zero_index = i\n            break\n    \n    # Move all zeroes to the end of the list\n    zeroes = []\n    for i in range(first_non_zero_index, len(num_list)):\n        if num_list[i] == 0:\n            zeroes.append(num_list[i])\n    for i in range(first_non_zero_index, len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = num_list[-1]\n            num_list.pop()\n    num_list += zeroes\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n integers as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize sum as 0\n    sum = 0\n    \n    # Iterate through all possible pairs of integers in the list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Compute the xor of the current pair and add it to the sum\n            sum += arr[i] ^ arr[j]\n    \n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    This function returns the sum of XOR of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            total_sum = total_sum + arr[i] ^ arr[j]\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n integers as input and returns the sum of XOR of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through the list\n    for i in range(n):\n        # XOR the number with all the numbers before it and add the result to the sum\n        for j in range(i):\n            sum += arr[i] ^ arr[j]\n    # Return the sum of xor of all pairs of numbers\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += arr[i] ^ arr[j]\n    return result"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum + arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    # Initialize the sum to 0\n    xor_sum = 0\n    \n    # Loop through the list of integers\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers and add it to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the sum of xor of all pairs of numbers in the list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of xor of all pairs of integers in the list.\n    \"\"\"\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += arr[i] ^ arr[j]\n    \n    return total_sum"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable.copy()\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    sorted_list.reverse()\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a sorted list.\n    '''\n    heap = iterable.copy()\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes in an iterable and sorts it using heap sort algorithm.\n    '''\n    # Convert the iterable to a list so that we can use the heapq module\n    lst = list(iterable)\n    # Build a max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i)\n    # Extract elements from the heap and store them in a new list\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)  # Convert list to a heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))  # Extract minimum element from heap and append to sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable[:] # create a copy of the iterable\n    hq.heapify(heap) # heapify the copy\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap)) # pop elements from the heap and append them to the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given iterable using heap sort algorithm.\n    \"\"\"\n    # Convert iterable to a list\n    lst = list(iterable)\n    n = len(lst)\n    \n    # Build heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(lst, n, i)\n    \n    # Extract elements from heap and put them in a sorted list\n    sorted_lst = []\n    for i in range(n-1, 0, -1):\n        hq.heappop(lst)\n        sorted_lst.append(lst[0])\n        \n    # Reverse the sorted list to get the original order\n    sorted_lst.reverse()\n    \n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using heap sort algorithm.\n    '''\n    heap = iterable.copy() # Make a copy of the input list as heap\n    heapq.heapify(heap) # Convert the list into a heap\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap)) # Pop the smallest element from the heap and append to the sorted list\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a max heap\n    heap = iterable.copy()\n    hq.heapify(heap)\n\n    # Sort the heap in descending order and return a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the iterable to a heap\n    heap = iterable.copy()\n    hq.heapify(heap)\n    \n    # sort the heap using heap pop and insertion\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments:\n    - actual_cost: The actual cost of the item\n    - sale_amount: The amount that the item was sold for\n    \n    It checks whether the sale had no profit and no loss.\n    Returns True if there was no profit or loss, False otherwise.\n    '''\n    if sale_amount > actual_cost:\n        print(\"There was a profit of\", sale_amount - actual_cost)\n        return False\n    elif sale_amount < actual_cost:\n        print(\"There was a loss of\", actual_cost - sale_amount)\n        return False\n    else:\n        print(\"There was no profit or loss\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the product\n    sale_amount (float): The amount received after selling the product\n\n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    \"\"\"\n\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost: \n        return \"There is profit\"\n    elif sale_amount < actual_cost: \n        return \"There is loss\"\n    else: \n        return \"There is no profit and no loss\""
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount sold of the item.\n    :return: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters - actual_cost and sale_amount.\n    It checks whether the sale amount has no profit and no loss.\n    \"\"\"\n    if sale_amount > actual_cost:\n        print(\"No profit\")\n    elif sale_amount < actual_cost:\n        print(\"No loss\")\n    else:\n        print(\"No profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments:\n    actual_cost: the actual cost of the item\n    sale_amount: the amount obtained after selling the item\n    \n    It returns True if the sale_amount has no profit and no loss, otherwise it returns False.\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(\"Profit and loss is not possible.\")\n    else:\n        print(\"Profit and loss is possible.\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount <= actual_cost:\n        print(\"No profit no loss\")\n    else:\n        print(\"There is a profit\")"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    If the sale_amount is greater than actual_cost, it returns False, \n    otherwise, it returns True.\n\n    :param actual_cost: The actual cost of the item.\n    :param sale_amount: The amount of the sale.\n    :return: True if the sale has no profit and no loss, False otherwise.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = sale_amount - actual_cost\n    if profit_loss <= 0:\n        print(\"The sale has no profit and no loss.\")\n    else:\n        print(\"The sale has a profit.\")"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    t_fahrenheit = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215*t_fahrenheit - 35.75*math.pow(v, 0.16) + 0.4275*t_fahrenheit*math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index in celsius given the wind velocity in km/h and temperature in celsius.\n    '''\n    # convert km/h to m/s\n    v_ms = v / 3.6\n\n    # convert temperature from celsius to kelvin\n    t_k = t + 273.15\n\n    # calculate the wind chill index\n    chill_index = 13.12 + 0.6215 * v_ms - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t_k + 0.0033 * t_k * math.pow(v_ms, 0.16)\n\n    # round the wind chill index to the next integer\n    chill_index = round(chill_index)\n\n    return chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to kelvin\n    t = t + 273.15\n\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n\n    # Round the wind chill index to the next integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert the velocity from km/h to m/s\n    v = v / 3.6\n\n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate wind chill index (degrees C) for given wind velocity (km/h) and temperature (degrees C).\n    \"\"\"\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index in Celsius.\n    '''\n    wci = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    t_f = (t * 9/5) + 32  # convert temperature to fahrenheit\n    wci = 35.74 + 0.6215 * t_f - 35.75 * (v**0.16) + 0.4275 * t_f * (v**0.16)\n    return math.ceil(wci)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index given the wind velocity in km/h and a temperature in celsius.\n    Returns the wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert temperature from celsius to kelvin\n    t = t + 273.15\n    \n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * v - 11.37 * math.pow(t, 0.16) + 0.3965 * v * math.pow(t, 0.16)\n    \n    # Round the wind chill index to the next integer\n    return round(wind_chill_index)"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name.islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to hold the sum of lengths of valid names\n    valid_name_sum = 0\n    \n    # Iterate through the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not name[0].islower():\n            # Add the length of the valid name to the sum\n            valid_name_sum += len(name)\n    \n    # Return the sum of lengths of valid names\n    return valid_name_sum"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n            \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that start with a lowercase letter\n    lowercase_names = []\n    \n    # Loop through the given list of names\n    for name in sample_names:\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If it is, append it to the lowercase_names list\n            lowercase_names.append(name)\n    \n    # Loop through the list of names that start with a lowercase letter and sum their lengths\n    total_length = 0\n    for name in lowercase_names:\n        total_length += len(name)\n    \n    # Return the total length of the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)|[^()]+')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^()]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^()]*\\)')\n    items = regex.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'  # match any string between parentheses\n    return [re.sub(pattern, '', item) for item in items]"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^()]*\\)')  # regular expression for parenthesis and what is inbetween\n    result = []\n    for item in items:\n        result.append(re.sub(regex, '', item))  # remove parenthesis and what is inbetween using regex\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # Remove any characters inside the parentheses\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove any characters before the first opening parenthesis\n    items = re.sub(r'^[^(]*\\(', '', items)\n    # Remove any characters after the last closing parenthesis\n    items = re.sub(r'\\)[^)]*$', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)|[^()]+')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes a number n as input and returns the nth nonagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        count += num\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Finds the nth nonagonal number.\n    \"\"\"\n    count = 1  # number of terms in the sequence\n    sum = 1  # the sum of the previous terms in the sequence\n    while count <= n:\n        yield sum\n        count += 1\n        sum += count  # add count to the sum and continue"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n\n    # Loop through nonagonal numbers and count them\n    while count < n:\n        num += 1\n        count += num\n\n    # Return the nth nonagonal number\n    return num - (num - count)"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1  # initialize counter\n    num = 1  # initialize number\n\n    while count < n:  # loop until we find the nth nonagonal\n        num += (2*count + 1)  # calculate the next number in the sequence\n        count += 1  # increment the counter\n\n    return num  # return the nth nonagonal number"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    This function finds the nth nonagonal number.\n\n    Args:\n    n: An integer representing the nth nonagonal number to find.\n\n    Returns:\n    An integer representing the nth nonagonal number.\n    \"\"\"\n\n    # Initialize variables for the first and second terms of the sequence\n    first_term = 1\n    second_term = 1\n\n    # Loop through the sequence to find the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculate the next term in the sequence\n        next_term = first_term + 6 * second_term\n        # Update the variables for the next iteration\n        first_term = second_term\n        second_term = next_term\n\n    return next_term"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # initialize variables\n    sum = 1  # sum of previous terms\n    prev_term = 1  # previous term\n    \n    # loop through each term\n    for i in range(2, n+1):\n        term = 4 * i**2 - 3 * i + 2\n        sum += term\n        prev_term = term\n    \n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    This function returns the nth nonagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i\n    return num * (num + 1) // 2"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b)z(?!.*\\b)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(?!.*\\b\\w)(?=[a-zA-Z]*z[a-zA-Z]*)(?=.*[a-zA-Z]*[a-z])[a-zA-Z]*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = \"This sentence contains 'z', but not at the start or end of a word.\"\nprint(text_match_wordz_middle(text)) # True\n\ntext = \"This sentence does not contain 'z', but contains 'z' within a word.\"\nprint(text_match_wordz_middle(text)) # False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!^)(?<!\\s)z(?!\\s)\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w(?!z)\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\Bz\\b'\n    result = re.findall(pattern, text)\n    if len(result) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\bz\\w*?\\b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?![^ ])z(?=[^ ])\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz(?=[^aeiouAEIOU]*[aeiouAEIOU][^aeiouAEIOU]*$)\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\Bz\\w*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the array from index 0 to k-1\n    input = input[:k]\n    input.reverse()\n    # concatenate the reversed array and the remaining elements of the original array\n    return input[::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k):\n        input[i], input[n-k+i] = input[n-k+i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def reverse_array_upto_k(input, k):\n    '''\n    Reverses the array up to the given position k.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input and returns the reverse of the array upto position k.\n    \"\"\"\n    # Initializing variables\n    left = 0\n    right = k - 1\n    \n    # Reversing the array\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k - 1\n    while start < end: \n        input[start], input[end] = input[end], input[start] \n        start += 1\n        end -= 1\n    return input\n\ninput = [1, 2, 3, 4, 5]\nk = 3\nprint(reverse_Array_Upto_K(input, k))"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes two parameters:\n    - input: A list of integers.\n    - k: An integer that represents the position up to which we need to reverse the array.\n    The function reverses the array upto the given position k and returns the reversed array.\n    \"\"\"\n    # initialize variables\n    left = 0\n    right = k - 1\n    # swap the values of left and right indices until left is less than right\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    # reverse the array from the position k+1 till the end of the array\n    left = k + 1\n    right = len(input) - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an input array and a position k, and returns a reversed array upto position k.\n    \"\"\"\n    # reverse the array upto k\n    reverse = input[:k][::-1]\n    \n    # join the reversed array with the remaining elements of the input array\n    reversed_input = reverse + input[k:]\n    \n    return reversed_input"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Create an empty list to store the reversed array\n    reversed_array = []\n    # Loop through the input array from position 0 to position k-1\n    for i in range(k):\n        # Append the element at position k-i-1 to the reversed_array\n        reversed_array.append(input[k-i-1])\n    # Return the reversed_array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    This function takes two parameters, test_tup and test_dict.\n    test_tup is a tuple and test_dict is a dictionary.\n    The function adds the dictionary to the tuple and returns the modified tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)] # initialize a 2D array to store the maximum average of path at each cell\n\n    # fill the first row\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n\n    # fill the first column\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n\n    # fill the remaining cells\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # compute the maximum average path\n    max_avg = dp[n-1][n-1]/2 # maximum average path can either end at the top-left or bottom-right cell\n\n    # compute the average of all paths that end at the top-left cell\n    for i in range(n-1, 0, -1):\n        for j in range(n-1, 0, -1):\n            if dp[i][j] == dp[i-1][j]: # if the path ends at the current cell, then the path that ends at the top-left cell must end at the cell above\n                max_avg = max(max_avg, dp[i][j]/2 + dp[i-1][j-1]/2 + cost[i][j])\n\n    # compute the average of all paths that end at the bottom-right cell\n    for i in range(n-2, -1, -1):\n        for j in range(n-2, -1, -1):\n            if dp[i][j] == dp[i+1][j]: # if the path ends at the current cell, then the path that ends at the bottom-right cell must end at the cell below\n                max_avg = max(max_avg, dp[i][j]/2 + dp[i+1][j+1]/2 + cost[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n    for j in range(n):\n        dp[0][j] = cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            path_sum = dp[i][j]\n            path_count = 1\n            if i > 0:\n                path_sum += dp[i-1][j]\n                path_count += 1\n            if j > 0:\n                path_sum += dp[i][j-1]\n                path_count += 1\n            avg = path_sum / path_count\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # create a 2D matrix to store the max cost of path ending at each cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n    # initialize the first row and column of the dp matrix with cost of each cell\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    # fill the remaining cells of the dp matrix using the recursive formula\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # find the maximum average over all paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            # compute the total cost of the path from top-left to (i,j)\n            total_cost = dp[i][j]\n            # compute the number of cells visited in the path\n            num_cells = i + j + 1\n            # compute the average cost of the path\n            avg_cost = total_cost / num_cells\n            # update the maximum average if required\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n\n    # Initialize the max average path value to zero\n    max_avg = 0\n\n    # Loop through all possible paths from the top-left cell to the bottom-right cell\n    for i in range(m):\n        for j in range(n):\n            # Initialize the current path to the single cell at position (i,j)\n            curr_path = [(i,j)]\n\n            # Initialize the current cost to the value at position (i,j)\n            curr_cost = cost[i][j]\n\n            # Initialize the number of cells visited in the current path to 1\n            num_cells = 1\n\n            # Loop through the cells to the right and down of the current cell\n            while i+1 < m and j+1 < n:\n                # Check if moving right and down is the only possible move from the current cell\n                if cost[i+1][j] == cost[i][j+1]:\n                    break\n\n                # Move right and add the cell to the current path and cost\n                i += 1\n                curr_path.append((i,j))\n                curr_cost += cost[i][j]\n                num_cells += 1\n\n                # Move down and add the cell to the current path and cost\n                j += 1\n                curr_path.append((i,j))\n                curr_cost += cost[i][j]\n                num_cells += 1\n\n            # Update the max average path if the current path has a higher average\n            avg_cost = curr_cost / num_cells\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = curr_path\n\n    return max_path, max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Initialize a table to store the maximum averages for all possible paths starting from each cell\n    max_avg = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the maximum average for the path starting from the top-left cell to zero\n    max_avg[0][0] = cost[0][0]\n\n    # Fill the table using dynamic programming\n    for i in range(1, n):\n        max_avg[i][0] = max_avg[i-1][0] + cost[i][0]\n\n    for j in range(1, n):\n        max_avg[0][j] = max_avg[0][j-1] + cost[0][j]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n\n    # Find the maximum average over all possible paths\n    max_avg_path = max_avg[n-1][n-1]\n\n    # Find the number of cells visited in the path with the maximum average\n    max_cells = 1\n\n    for i in range(n-1, 0, -1):\n        for j in range(n-1, 0, -1):\n            if max_avg[i][j] == max_avg_path:\n                max_cells += 1\n            else:\n                break\n\n    # Compute the average cost of the path with the maximum average\n    max_avg_cost = max_avg_path / max_cells\n\n    return max_avg_path, max_cells, max_avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_cost = dp[n-1][n-1]\n    max_path_len = 1\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] == max_cost:\n                max_path_len += 1\n    return max_cost/max_path_len\n"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n\n    rows = len(cost)\n    cols = len(cost[0])\n\n    # Initialize the table with the cost of reaching each cell\n    table = [[0 for j in range(cols)] for i in range(rows)]\n    for i in range(rows):\n        table[i][0] = cost[i][0]\n    for j in range(cols):\n        table[0][j] = cost[0][j]\n\n    # Fill the table by taking the maximum of the two possible paths from each cell\n    for i in range(1, rows):\n        for j in range(1, cols):\n            table[i][j] = max(table[i-1][j], table[i][j-1]) + cost[i][j]\n\n    # Find the maximum average path\n    max_average = 0\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the average for the current cell\n            average = (table[i][j] - cost[i][j]) / (rows + cols - 2)\n            # Update the maximum average if necessary\n            if average > max_average:\n                max_average = average\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize dp table with the cost of the first cell\n    dp = [[0 for j in range(n)] for i in range(n)]\n    dp[0][0] = cost[0][0]\n    # Fill dp table in a bottom-up manner\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # Compute the maximum average of all possible paths\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                avg = dp[i][j] / (j+1)\n            elif j == 0:\n                avg = dp[i][j] / (i+1)\n            else:\n                avg = (dp[i][j] - dp[i-1][j] - dp[i][j-1] + dp[i-1][j-1]) / (i+j+2)\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    # We can solve this problem using dynamic programming.\n    # Create a 2D array to store the maximum average of path ending at each cell.\n    # We can compute this value as the maximum of the two possible values:\n    # - The maximum average of the path ending at the cell above (if we move up from the current cell).\n    # - The maximum average of the path ending at the cell to the left (if we move left from the current cell).\n    # - The maximum average of the path ending at the cell to the left and up (if we move up and left from the current cell).\n    # We can store these values in the same array, so that we don't have to recompute them.\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # The maximum average of the path ending at the top-left cell is simply the value of the cell itself.\n    dp[0][0] = cost[0][0]\n\n    # Compute the maximum average of the path ending at each cell.\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # The maximum average of the path is the maximum average of the path ending at the bottom-right cell.\n    return dp[-1][-1] / (n * n)"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_cost = dp[n-1][n-1]\n    max_avg = max_cost / (2 * n - 1)\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key in students:\n        if students[key][0] > h and students[key][1] > w:\n            result[key] = students[key]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n\nstudents = {\n    'Alice': (1.8, 60),\n    'Bob': (1.7, 50),\n    'Charlie': (1.6, 45),\n    'David': (1.9, 70),\n    'Emily': (1.7, 55)\n}\n\nfiltered_students = filter_data(students, 1.7, 50)\nprint(filtered_students)"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_students[key] = value\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        if details[0] >= h and details[1] >= w:\n            filtered_students[student] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    result = 0\n    for digit in base_str:\n        result += int(digit)**power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        temp = base\n        for j in str(temp):\n            result += int(j)\n        base *= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for digit in str(base**power):\n        sum_of_digits += int(digit)\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    for digit in str(base**power):\n        total_sum += int(digit)\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base ** power):\n        total += int(digit)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_sum = 0\n    for digit in base_str:\n        power_sum += int(digit)**power\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    sum_of_digits = 0\n    \n    # Iterate over the digits of the base and add them to the sum\n    for digit in base_str:\n        sum_of_digits += int(digit) ** power\n    \n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the power to an integer\n    power = int(power)\n    \n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Iterate over each digit of the base\n    for digit in base_str:\n        # Calculate the digit to the specified power and add it to the digit sum\n        digit_sum += int(digit) ** power\n    \n    # Return the final digit sum\n    return digit_sum"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power+1):\n        total += int(base**i)\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts the values between quotation marks \" \"\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all occurrences of quotation marks\n    matches = re.findall(r'\"[^\"]*\"', text1)\n    \n    # Remove the quotation marks and return the values\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all occurrences of quotation marks in the text\n    quotations = re.findall(r'\\\".*?\\\"', text1)\n    \n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n    \n    # Iterate over each quotation and extract the value between quotation marks\n    for q in quotations:\n        value = q.strip('\\\"')\n        extracted_values.append(value)\n    \n    # Return the list of extracted values\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1  # length of the tuple is N+1, so we need N elements\n    result = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    This function takes a tuple of numbers as input and returns a tuple of length N\n    where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(n))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    res_tup = ()\n    for i in range(N):\n        res_tup = res_tup + (test_tup[i] * test_tup[i+1],)\n    return res_tup"
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Takes a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    if len(test_tup) < 2:\n        return ()\n    return (test_tup[0] * test_tup[1],) + multiply_elements(test_tup[1:])"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Takes two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of integers and returns a new list with the sum of corresponding elements.\n    \"\"\"\n    # Check if the input lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two input lists must have the same length.\")\n\n    # Initialize an empty list to store the sums\n    sums = []\n\n    # Iterate over the input lists and add corresponding elements\n    for i in range(len(lst1)):\n        sums.append(lst1[i] + lst2[i])\n\n    return sums"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the list of their element-wise sum.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of their elements.\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise sums of the input lists.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of equal length and returns a new list of sums of corresponding elements.\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"The two lists must be of equal length.\")\n    \n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists and returns their sum.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates from a given list.\n    '''\n    # Convert the list to a string and then group the consecutive identical characters together\n    grouped_chars = groupby(str(nums))\n\n    # Convert the grouped characters back to a list and return the result\n    return [int(group) for group, _ in grouped_chars]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # convert the list to a string to group the consecutive duplicates\n    string = ''.join(map(str, nums))\n    # group the consecutive duplicates\n    grouped = [(k, sum(1 for _ in g)) for k, g in groupby(string)]\n    # remove the groups that have only one element\n    filtered = [item for item in grouped if item[1] > 1]\n    # convert the list of tuples back to a list of integers\n    result = [int(item[0]) for item in filtered]\n    # remove the duplicates from the original list\n    unique_nums = list(set(nums))\n    # create a list of tuples where the first element is the unique number and the second element is the count of consecutive duplicates\n    count = []\n    for num in unique_nums:\n        count.append((num, nums.count(num)))\n    # sort the list of tuples based on the second element (count of consecutive duplicates) in descending order\n    sorted_count = sorted(count, key=lambda x: x[1], reverse=True)\n    # create a new list with the unique numbers in descending order of the count of consecutive duplicates\n    final_result = [num for num, _ in sorted_count]\n    return final_result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    This function removes consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if not (len(list(g)) == 1 and k == g[0])]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if k!= next(g, None):\n            result.append(k)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        group_list = list(g)\n        if len(group_list) > 1:\n            result.extend(group_list[:-1])\n        else:\n            result.append(group_list[0])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # sort the list in ascending order\n    nums = sorted(nums)\n    # group the sorted list by consecutive duplicates\n    result = [(k, len(list(g))) for k, g in groupby(nums)]\n    # remove consecutive duplicates from the sorted list\n    result = [num for i, num in enumerate(nums) if i+1 == len(nums) or nums[i+1]!= num]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    # Use groupby to iterate over the list and remove consecutive duplicates\n    return [k for k, _ in groupby(nums)]"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Function to find the lateral surface area of a cone given radius r and height h\n    '''\n    return math.pi*r*math.sqrt(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * (r + h)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+math.sqrt(r**2+h**2))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius and height.\n    '''\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Returns the lateral surface area of a cone given its radius r and height h.\n    '''\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Returns the lateral surface area of a cone with radius r and height h.\n    '''\n    return math.pi * r * h + 2 * math.pi * r ** 2"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes the radius of the cone and the height of the cone as input parameters and\n    returns the lateral surface area of the cone.\n    '''\n    # Calculate the lateral surface area of the cone using the formula\n    lateralsurface = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius r and the height h of a cone and returns the lateral surface area of the cone.\n    '''\n    surface_area = math.pi * r**2 + math.pi * r * math.sqrt(r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,\\s]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[,.]', ':', text)\n    return new_text\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nnew_text = replace_specialchar(text)\nprint(new_text)  # Output: The quick brown fox jumps over the lazy dog.:"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon in the given text.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r\"[,.]\", \":\", text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]+', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1  # element not found"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function returns the index of the first occurrence of a given number x in a sorted array A.\n    If x is not present in A, it returns -1.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Check if mid is the first occurrence of x\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            # Search in the left subarray\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # x is not present in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if x not in A:\n        return -1\n    else:\n        left = 0\n        right = len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] == x:\n                if mid == 0 or A[mid - 1]!= x:\n                    return mid\n                else:\n                    right = mid - 1\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number in a sorted array.\n\n    :param A: sorted array of integers\n    :param x: integer to be searched in the array\n    :return: index of the first occurrence of x in A, -1 if x is not found in A\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    low, high = 0, len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Check if the element on the left is also equal to x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x and (mid == 0 or A[mid-1]!= x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes two arguments:\n    A (list): a sorted list of integers.\n    x (int): the integer to search for in the list.\n    \n    Returns the index of the first occurrence of x in A if it is present in the list, else returns -1.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix = [1] * n\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n    suffix = [1] * n\n    for i in range(n-2, -1, -1):\n        suffix[i] = suffix[i+1] * arr[i+1]\n    return sum([prefix[i] * suffix[i] for i in range(n)])\n"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Initialize result\n    res = 0\n\n    # Traverse through all subarrays of array\n    for i in range(n):\n        # Initialize product of subarray\n        prod = 1\n\n        # Traverse through subarray and multiply its elements\n        for j in range(i, n):\n            prod *= arr[j]\n            # Add product of subarray to result\n            res += prod\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1] * arr[i]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            ans += dp[j-1]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_of_products = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum_of_products += prod\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            sublist = arr[i:j+1]\n            prod = 1\n            for k in sublist:\n                prod *= k\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += arr[i]*arr[j]*(j-i+1)\n    return res\n\narr = [1, 2, 3, 4, 5]\nprint(sum_Of_Subarray_Prod(arr))"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    prefix = [1] * n\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n    suffix = [1] * n\n    for i in range(n-2, -1, -1):\n        suffix[i] = suffix[i+1] * arr[i+1]\n    for i in range(n):\n        sum_prod += prefix[i] * suffix[i]\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_of_subarray_product(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n    n = len(arr)\n    prefix_product = [1] * n\n    total_sum = 0\n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n\n    for i in range(n):\n        total_sum += prefix_product[i]\n        for j in range(i + 1, n):\n            total_sum += prefix_product[j] * arr[j]\n\n    return total_sum"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the number to binary string\n    binary_str = bin(n)[2:]\n    \n    # convert the binary string to a list of digits\n    digits = [int(digit) for digit in binary_str]\n    \n    # toggle the bits of the middle digits (excluding the first and last)\n    for i in range(1, len(digits)-2):\n        digits[i] = 1 - digits[i]\n    \n    # convert the list of digits back to a binary string\n    binary_str = ''.join([str(digit) for digit in digits])\n    \n    # convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # convert n to binary string\n    binary_n = bin(n)[2:]\n    # determine length of binary string\n    length = len(binary_n)\n    # create a mask for the middle bits\n    mask = ((1 << (length - 2)) - 1) << 1\n    # toggle the middle bits of the binary string using the mask\n    toggled_binary_n = bin((n & ~mask) | (~n & mask))[2:]\n    # convert the toggled binary string back to an integer\n    toggled_n = int(toggled_binary_n, 2)\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # convert the number to binary string\n    binary_string = bin(n)[2:]\n\n    # if the length of binary string is less than or equal to 2, return n\n    if len(binary_string) <= 2:\n        return n\n\n    # toggle all the bits except the first and the last bit\n    binary_string = binary_string[1:-1]\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            binary_string = binary_string[:i] + '0' + binary_string[i+1:]\n        else:\n            binary_string = binary_string[:i] + '1' + binary_string[i+1:]\n\n    # convert the toggled binary string back to integer\n    toggled_n = int(binary_string, 2)\n\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def toggle_middle_bits(n):\n    mask = 0b1110\n    # Clear the bits except for the first and last bit\n    n &= mask\n    # Toggle the bits\n    n ^= 0b1111\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Use bitwise AND operator to keep only the second and second-to-last bits\n    mask = (1 << 2) - 1\n    n &= mask\n    # Use bitwise NOT operator to toggle the bits\n    n = ~n\n    # Use bitwise AND operator to keep only the second and second-to-last bits\n    n &= mask\n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles bits of the number except the first and the last bit.\n    '''\n    # To toggle all bits except the first and the last bit, we can use the XOR operator (^).\n    # We can toggle all bits of the number except for the first and last bits by setting the first bit to 0 and the last bit to 1.\n    # This can be done by performing the following steps:\n    # 1. Set the first bit to 0 by XORing the number with 1 (1000...0001).\n    # 2. Set the last bit to 1 by ANDing the number with 0b11111110 (1000...0111).\n    # 3. Toggle all bits except the first and last bit by XORing the number with 0b11111111 (1000...0111).\n\n    # Step 1: Set the first bit to 0\n    n = n ^ 1\n\n    # Step 2: Set the last bit to 1\n    n = n & 0b11111110\n\n    # Step 3: Toggle all bits except the first and last bit\n    n = n ^ 0b11111111\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = (1 << 31) - 1 # mask to get the bits except the first and last bit\n    toggle = 1 << 31 # toggle to toggle the last bit\n    return (n ^ mask) ^ toggle # toggle the bits except the first and last bit"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # get the number of bits in the number\n    num_bits = len(bin(n)) - 2\n    \n    # get the right shift count\n    right_shift_count = num_bits // 2\n    \n    # get the left shift count\n    left_shift_count = num_bits - right_shift_count\n    \n    # right shift the number\n    shifted_n = n >> right_shift_count\n    \n    # toggle the middle bits\n    toggled_n = shifted_n ^ ((1 << left_shift_count) - 1)\n    \n    # left shift the toggled number\n    toggled_n = toggled_n << right_shift_count\n    \n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # mask for the first and last bits\n    first_last_mask = 1 | (1 << n.bit_length() - 1)\n    \n    # toggle all bits except the first and last bits\n    result = n ^ first_last_mask\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # XORing all the bits with 0xAAAAAAAA will toggle all the bits except the first and last\n    mask = 0xAAAAAAAA\n    return n ^ mask"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif a[i-1] == x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(\"The string starts with a vowel.\")\n    else:\n        print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n\nstring1 = 'apple'\nstring2 = '123apple'\nstring3 = 'A1pple'\nstring4 = 'Eggs'\n\nprint(check_str(string1)) # True\nprint(check_str(string2)) # False\nprint(check_str(string3)) # True\nprint(check_str(string4)) # True"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string)"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r\"^[aeiouAEIOU][A-Za-z0-9_]*\")\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(pattern, string))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the sum of the first n numbers in a geometric series.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / (1 - n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculates the geometric sum of n-1.\n\n    Args:\n    n (int): An integer value\n\n    Returns:\n    float: The geometric sum of n-1\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        return (1 - (1/n)) + (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 - 1/(2**(n-1))) + (n-1)*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1-n**-1) + geometric_sum(n-1)\n\nprint(geometric_sum(5)) # Output: 1.643835616438356"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 - (1 / n)) + (geometric_sum(n - 1))"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef find_index(n): \n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    index = (10**(n-1) - 1) // 2\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the nth triangular number\n    triangular_num = (n*(n+1))//2\n    \n    # Find the index of the first triangular number with n digits\n    i = 1\n    while True:\n        triangular_num = (i*(i+1))//2\n        num_digits = len(str(triangular_num))\n        if num_digits == n:\n            return i\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    result = math.floor(n*(n+1)/2)\n    return result\n\nn = int(input(\"Enter the number of digits for triangular number: \"))\n\nprint(\"Index of smallest triangular number with\", n, \"digits:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits in the nth triangular number\n    tri_num = (10**(n-1))*(1+10**(n-1))//2\n    # Convert the number to a string and find the length\n    num_str = str(tri_num)\n    num_len = len(num_str)\n    # Find the index of the digit with the smallest value\n    min_digit = min(num_str)\n    index = num_str.index(min_digit)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the value of the smallest triangular number with n digits\n    smallest_triangular_number = (n * (n+1)) // 2\n    \n    # Find the index of the smallest triangular number\n    index = 1\n    while smallest_triangular_number > math.factorial(index):\n        index += 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    upper_bound = (10**n - 1)//2\n    lower_bound = (10**(n-1) - 1)//2\n    count = 0\n    \n    while(lower_bound <= upper_bound):\n        mid = (lower_bound + upper_bound)//2\n        tri_num = (mid*(mid+1))//2\n        \n        if(tri_num < 10**n):\n            lower_bound = mid + 1\n        else:\n            upper_bound = mid - 1\n            \n    return count"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    '''\n    # Find the number of digits in the nth triangular number.\n    num_digits = int(math.log10(n * (n + 1) // 2)) + 1\n\n    # Calculate the number of digits in the smallest triangular number with n digits.\n    min_num_digits = int(math.log10(2 * (10**(num_digits - 1)) + 1)) + 1\n\n    # Calculate the difference between the number of digits in the nth triangular number and the number of digits in the smallest triangular number with n digits.\n    diff = num_digits - min_num_digits\n\n    return diff"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_triangular = int(math.pow(10, n))\n    min_triangular = int(math.pow(10, n-1))\n    for i in range(max_triangular, min_triangular-1, -1):\n        triangular = (i*(i+1))//2\n        if(len(str(triangular)) == n):\n            return i\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef find_index(n):\n    \"\"\"\n    Returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the highest triangular number with n digits\n    max_triangular = int(math.pow(10, n) * (1 + math.sqrt(1 + 8 * int(math.pow(10, n-1)))))\n    \n    # Find the index of the highest triangular number with n digits\n    index = 1\n    while max_triangular > 0:\n        index += 1\n        max_triangular -= index\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    triangular_num = [1]\n    while len(str(triangular_num[-1])) < n:\n        triangular_num.append(triangular_num[-1] + len(str(triangular_num[-1])))\n    return len(triangular_num) - 1"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as an argument and returns a dictionary with adjacent elements as key-value pairs.\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple as input and returns a dictionary where the keys are the adjacent elements of the tuple.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function converts the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Tuple length must be even\")\n    else:\n        return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are the same or not.\n    \"\"\"\n    return len(set(s)) == 1"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as an argument and returns True if all the characters in the string are same, else it returns False.\n    '''\n    for char in s:\n        if char!= s[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks if all characters in a given string are the same or not.\n\n    :param s: A string of characters.\n    :return: True if all characters are the same, False otherwise.\n    \"\"\"\n    for i in range(len(s) - 1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if i == 0:\n            last_char = s[i]\n        else:\n            if s[i]!= last_char:\n                return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (6 * math.sqrt(2)) / (4 * math.tan(math.pi / 4)) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    volume = (math.sqrt(3)/3)*side**3 # calculate the volume of the tetrahedron using Heron's formula\n    area = (6*volume)/side**2 # calculate the area of the tetrahedron using the formula A = 6V/s^2, where V is the volume and s is the length of one side of the tetrahedron\n    return area # return the area of the tetrahedron"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Args:\n    side: The length of a side of the tetrahedron.\n\n    Returns:\n    The area of the tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron.\n    s = (side * 3) / 2\n\n    # Calculate the area of the tetrahedron.\n    area = (math.sqrt(3) / 4) * math.pow(s, 2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one side of a tetrahedron as input and returns the area of the tetrahedron.\n    '''\n    area = (6*math.sqrt(2)) / (4*math.tan(math.pi/6)) * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (math.sqrt(6) * side**2) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = (3 * side) / (4 * math.tan(math.pi / 4))\n    # Calculate the area of the tetrahedron\n    area = (math.sqrt(3) / 2) * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    area = (3**0.5) / 2 * side ** 2\n    return area\n\nprint(\"Enter the length of one of the three sides of the tetrahedron: \")\nside = float(input())\n\nprint(\"The area of the tetrahedron is:\", area_tetrahedron(side))"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * math.sqrt(3)) / 2\n    area = math.sqrt(6) * s ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of a side of the tetrahedron as input and returns its area.\n    '''\n    area = (math.sqrt(6) / 4) * (side ** 2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    volume = (1/3) * math.pow(side, 3)\n    area = 6 * volume\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a list to the right direction by m elements\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a given list by m items to the right direction.\n\n    :param lst: A list to be rotated.\n    :param m: The number of items to be rotated.\n    :return: The rotated list.\n    \"\"\"\n    n = len(lst)\n    m = m % n  # To handle case where m is greater than the length of the list.\n\n    # Reverse the first m elements of the list.\n    lst = lst[::-1]\n    lst = lst[n-m:] + lst[:n-m]\n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    reverse(list, 0, m-1)\n    reverse(list, m, n-1)\n    reverse(list, 0, n-1)\n\ndef reverse(list, start, end):\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    for i in range(m):\n        temp = list[n-1]\n        for j in range(n-1,0,-1):\n            list[j] = list[j-1]\n        list[0] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list to the right direction by specified number of items.\n    \"\"\"\n    if n == 0:\n        return lst\n    else:\n        return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m as arguments. It rotates the list by m elements to the right.\n    \"\"\"\n    n = len(lst)\n    # If m is greater than n, then we need to rotate the list by m%n elements to the right.\n    m = m % n\n    # Reverse the first m elements of the list\n    lst[:m] = reversed(lst[:m])\n    # Reverse the remaining elements of the list\n    lst[m:] = reversed(lst[m:])\n    # Reverse the whole list\n    lst = reversed(lst)\n    return list(lst)"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    new_list = list[n-m:] + list[:n-m]\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n # make sure m is within the range of list length\n    return lst[n-m:] + lst[:n-m]"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any None value.\n\n    :param test_tup: the tuple to check\n    :type test_tup: tuple\n    :return: True if any value is None, False otherwise\n    :rtype: bool\n    \"\"\"\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return False\n    return True"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return False\n    return True"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(lambda x: num % x == 0, digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two integers as input, startnum and endnum, and returns a list of all the numbers within the given range (inclusive) where every number is divisible by every digit it contains.\n    '''\n\n    # Define a lambda function to check if a number is divisible by every digit in it\n    is_divisible = lambda x: all(int(digit) % x == 0 for digit in str(x))\n\n    # Use a list comprehension to create a list of all numbers within the given range that are divisible by every digit in them\n    divisible_numbers = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(n):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        digits = set(str(n))\n        for digit in digits:\n            if n % int(digit)!= 0:\n                return False\n        return True\n    \n    # Use filter() function to select only those numbers that are divisible by every digit\n    result = filter(is_divisible_by_digits, range(startnum, endnum+1))\n    \n    # Return the result as a list\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two arguments, startnum and endnum, and returns a list of all numbers within the given range where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for i in range(startnum, endnum + 1):\n        # Check if the number is divisible by every digit it contains\n        divisible = True\n        for digit in str(i):\n            if i % int(digit)!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(i)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) if all(int(d) % n == 0 for d in str(n))]"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments startnum and endnum, which are the starting and ending numbers of a range.\n    It returns a list of all numbers within the given range where every number is divisible by every digit it contains.\n    \"\"\"\n\n    # Using a lambda function to check if a number is divisible by every digit it contains\n    divisible_check = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # Creating a list of all numbers within the given range\n    numbers_list = list(range(startnum, endnum + 1))\n\n    # Filtering the list of numbers to get only those that are divisible by every digit\n    result_list = list(filter(divisible_check, numbers_list))\n\n    return result_list"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(digit) % x == 0 for digit in str(x))\n    # use filter() to get a list of all numbers from startnum to endnum that are divisible by every digit\n    result = filter(is_divisible, range(startnum, endnum+1))\n    # return the list of numbers\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    This function takes two integers as input, startnum and endnum, and returns a list of all numbers within the range (inclusive) that are divisible by every digit they contain.\n    '''\n    result_list = []\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            result_list.append(i)\n    return result_list"
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x % 2 == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    This function takes the radius and angle as inputs and returns the area of the sector. \n    If the angle is larger than 360 degrees, the function returns None.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle as inputs and returns the area of a sector. \n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a/360 * (2*math.pi/360)"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * r ** 2 * a) / 360 * math.pi\n    \n"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (0.5 * math.pi * r**2 * a) / 360"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * a/360 * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return round((math.pi * r**2) * (a/360), 2)\n\nprint(sector_area(5, 180))  # Output: 78.54\nprint(sector_area(10, 360)) # Output: 314.16\nprint(sector_area(3, 450))  # Output: None"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. \n    Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (math.pi * r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[\"\" for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    lcs[i][j][k] = \"\"\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + X[i-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1], key=len)\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n\n    Args:\n    X (str): The first string sequence\n    Y (str): The second string sequence\n    Z (str): The third string sequence\n\n    Returns:\n    str: The longest common subsequence of the given three string sequence\n\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of LCS of subsequences of X[0..m-1], Y[0..n-1], and Z[0..o-1]\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0..i-1] \n    # and Y[0..j-1] and Z[0..k-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Following code is used to print LCS\n    index = L[m][n][o]\n\n    # Create a character array to store the lcs string\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    i = m\n    j = n\n    k = o\n    while (i > 0 and j > 0 and k > 0):\n\n        # If current character in X[] and Y[] and Z[] are same, then current character is part of LCS\n        if (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n\n        # Else if L[i-1][j][k] is greater than L[i][j-1][k] and L[i][j][k-1] is greater than L[i-1][j][k]\n        elif (L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]):\n            i -= 1\n        # Else if L[i-1][j][k] is greater than L[i][j-1][k]\n        elif (L[i-1][j][k] > L[i][j-1][k]):\n            i -= 1\n        # Else if L[i-1][j][k] is greater than L[i][j][k-1]\n        else:\n            j -= 1\n\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Returns the longest common subsequence of three strings.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D table to store lengths of longest common suffixes of subsequences\n    L = [[[0]*(o+1) for i in range(n+1)] for j in range(m+1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # extract the longest common subsequence from the table\n    i = m\n    j = n\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i-1][j][k] < L[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three strings, X, Y and Z and returns the longest common subsequence of the three strings.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Initialize the three matrices with zeros\n    matrix = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    # Initialize the third matrix with zeros\n    backtrack = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Fill the matrix using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    matrix[i][j][k] = matrix[i-1][j-1][k-1] + 1\n                    backtrack[i][j][k] = 1\n                elif matrix[i-1][j][k] > matrix[i][j-1][k]:\n                    matrix[i][j][k] = matrix[i-1][j][k]\n                    backtrack[i][j][k] = 0\n                elif matrix[i][j-1][k] > matrix[i][j][k-1]:\n                    matrix[i][j][k] = matrix[i][j-1][k]\n                    backtrack[i][j][k] = 1\n                else:\n                    matrix[i][j][k] = matrix[i][j][k-1]\n                    backtrack[i][j][k] = 2\n    \n    # Find the longest common subsequence from the backtrack matrix\n    lcs = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if backtrack[i][j][k] == 1 and X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif backtrack[i][j][k] == 0:\n            i -= 1\n        elif backtrack[i][j][k] == 1:\n            j -= 1\n        else:\n            k -= 1\n    \n    # Reverse the longest common subsequence and return it\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    lcs = [[[0]*(o+1) for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n                    \n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D array to store the lengths of the longest common subsequences\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # fill the array with the lengths of the longest common subsequences\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    # find the longest common subsequence by backtracking through the array\n    i = m\n    j = n\n    k = o\n    lcs_seq = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs_seq = X[i-1] + lcs_seq\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k]:\n            i -= 1\n        elif lcs[i-1][j][k] < lcs[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs_seq"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Create a 3D array to store the length of LCS for all substrings of X, Y, Z\n    dp = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill the array using dynamic programming\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n                    \n    # Find the LCS using backtracking\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 3D array to store lengths of common suffixes of subsequences\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill L[m+1][n+1][o+1] with zeros, only needed for this 3D array\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                L[i][j][k] = 0\n\n    # LCS for subproblems of X[0:m], Y[0:n] and Z[0:o]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # find the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    L = [[[0] * (p + 1) for j in range(n + 1)] for i in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    \n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] < L[i][j - 1][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all capitalized words in string\n    capital_words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # replace capitalized words with capitalized words with spaces\n    for word in capital_words:\n        str1 = str1.replace(word,'' + word)\n        \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"(?<!\\w)([A-Z][a-z]+)(?=\\W|$)\"\n    return re.sub(pattern, r\"\\1 \", str1)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Join the words with spaces in between\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<!\\s)\\b[A-Z][a-z]+\\b'\n    result = re.sub(pattern, r' \\g<0>', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces in between\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # First, split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Then, loop through each word and add spaces before it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # Finally, join the words back together into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with a space separator\n    result =''.join(words)\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Create a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    \n    # Use the re.sub() method to replace each matched pattern with a space followed by the same pattern with the first letter lowercase\n    result = re.sub(pattern, r' \\1', str1)\n    \n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<!\\s)([A-Z][a-z]+)')\n    return pattern.sub(r'\\1 ', str1)"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(c) for c in x.split()])"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings containing numeric values numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and sorts it numerically.\n\n    Parameters:\n        nums_str (list): A list of strings of numbers.\n\n    Returns:\n        A sorted list of strings of numbers.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: [int(c) for c in x])\n"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings containing numbers as input and returns a sorted list of the same strings in ascending order.\n    \"\"\"\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_int = [int(num_str) for num_str in nums_str]\n    nums_int.sort()\n    return [str(num_int) for num_int in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num_int in nums_int:\n        sorted_nums_str.append(str(num_int))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers as input and returns a sorted list of these numbers.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: [int(c) if c.isdigit() else c for c in x])"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    smallest = i\n    \n    if left_child < len(arr) and arr[left_child] < arr[smallest]:\n        smallest = left_child\n    if right_child < len(arr) and arr[right_child] < arr[smallest]:\n        smallest = right_child\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr)//2, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(len(arr)):\n        if arr[0] > arr[i]:\n            return False\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    if 2 * i + 1 > len(arr) - 1:\n        return True\n    elif arr[i] > arr[2 * i + 1]:\n        return check_min_heap_helper(arr, 2 * i + 1)\n    else:\n        return False\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n\n    if i < len(arr) // 2:\n        if arr[2*i] <= arr[i]:\n            return False\n\n    if i < len(arr) // 2 - 1:\n        if arr[2*i + 1] <= arr[i]:\n            return False\n\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0 or i >= len(arr):\n        return False\n    \n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    return True\n    \ndef check_min_heap(arr):\n    for i in range(len(arr) // 2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function will check if the given array represents a min heap or not.\n    \"\"\"\n    # base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # left child exists and is greater than parent\n    if 2*i + 1 < len(arr) and arr[2*i + 1] < arr[i]:\n        return False\n    \n    # right child exists and is greater than parent\n    if 2*i + 2 < len(arr) and arr[2*i + 2] < arr[i]:\n        return False\n    \n    # check left and right sub-trees recursively\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function will check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if (i < len(arr) // 2):\n        # if left child is greater than parent\n        if (arr[2 * i + 1] < arr[i]):\n            return False\n        # recursively check for left and right subtree\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents min heap or not.\n\n    Args:\n        arr: The array to check.\n        i: The index of the last element in the array.\n\n    Returns:\n        True if the given array represents min heap, otherwise False.\n    '''\n\n    # Base case: if the current node is less than or equal to its children, then it is a min heap.\n    if 2*i + 1 <= i:\n        if arr[i] <= arr[2*i + 1]:\n            if 2*i + 2 <= i:\n                if arr[i] <= arr[2*i + 2]:\n                    return True\n            else:\n                return True\n    # If the current node is greater than its children, then it is not a min heap.\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    size = len(arr)\n    \n    if left < size and arr[i] > arr[left]:\n        return False\n    \n    if right < size and arr[i] > arr[right]:\n        return False\n    \n    if left < size or right < size:\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents min heap or not.\n    '''\n    # Base case: if the current index is greater than or equal to the length of the array, it means we have checked all the nodes and found no violation, so return True.\n    if i >= len(arr):\n        return True\n    \n    # Check if the left child of the current node is smaller than the current node. If it is, then the array is not a valid min heap.\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n    \n    # Check if the right child of the current node is smaller than the current node. If it is, then the array is not a valid min heap.\n    if i * 2 + 2 < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n    \n    # Recursively call the helper function on the left and right child of the current node.\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    # Check if the length of the array is odd. If it is, then the array is not a valid min heap, because the last level of the heap (except for the last level, which may not have all nodes) will be incomplete.\n    if len(arr) % 2 == 1:\n        return False\n    \n    # Recursively call the helper function on the root node of the heap.\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the test_list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # initialize variables to keep track of minimum K records and their indices\n    min_records = []\n    min_indices = []\n\n    # loop through the sorted list of tuples\n    for i in range(len(test_list)):\n        # if we have not yet collected K records or the current record is smaller than the smallest record we've seen so far, add it to the list of minimum records and its index\n        if len(min_records) < K or test_list[i][0] < min_records[-1][0]:\n            min_records.append(test_list[i])\n            min_indices.append(i)\n\n        # if we have collected K records and the current record is no longer smaller than the smallest record we've seen so far, remove the smallest record from the list and its index\n        elif len(min_records) == K and test_list[i][0] >= min_records[-1][0]:\n            min_records.pop()\n            min_indices.pop()\n\n    # return a list of tuples containing the minimum K records and their indices in the original list\n    return [(test_list[i], i) for i in min_indices]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum K records from a tuple list.\n    '''\n    # sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order of the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort the list based on the second element of the tuple\n    return test_list[:K] # return the first K elements of the sorted list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x:x[1]) # sort by second element of tuple (in ascending order)\n    return test_list[:K] # return first K elements of the sorted list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum k records from tuple list.\n    '''\n    # Sort the list of tuples by first element of each tuple.\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Slice the sorted list to get the first k tuples.\n    min_k_list = sorted_list[:K]\n    \n    # Return the list of minimum k tuples.\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # sort the list of tuples based on the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # return the first k elements of the sorted list\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a value K, and returns the minimum k tuples in the list.\n    The tuples can be any type, and the order of the tuples in the list does not matter.\n    '''\n    return sorted(test_list, key=lambda x: x[K])[:K]"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    min_list = []\n    max_heap = []\n\n    for i in range(n):\n        heappush(max_heap, -test_list[i][1])\n\n        if len(max_heap) > K:\n            heappop(max_heap)\n\n    for i in range(K):\n        min_list.append((-heappop(max_heap), test_list[i][0]))\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples as input and returns the minimum K tuples from the list.\n    \"\"\"\n    # Sort the list of tuples based on the second element of each tuple.\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum K tuples.\n    result = []\n\n    # Iterate over the sorted list and append the first K tuples to the result list.\n    for i in range(K):\n        result.append(test_list[i])\n\n    # Return the result list.\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Given three lists, l1, l2, and l3, we find the common elements in each list at the same index, and return a list of those common elements.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_index.append(i)\n    return common_index"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None  # return None if the list has less than 2 elements\n    \n    smallest = float('inf')  # initialize smallest to infinity\n    second_smallest = float('inf')  # initialize second_smallest to infinity\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # return the second smallest number in the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    if smallest > second_smallest:\n        smallest, second_smallest = second_smallest, smallest\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif second_smallest is None or numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n            \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = 'abbbbcdaabb'\nprint(text_match_zero_one(text)) # output: 'abbbbbc'"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'a(b)*'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\ntext = 'abbbbabbbb'\nprint(text_match_zero_one(text)) # True\n\ntext = 'aabbb'\nprint(text_match_zero_one(text)) # True\n\ntext = 'aacbb'\nprint(text_match_zero_one(text)) # False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a+b*\"\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the count of pairs of reverse strings in the list.\n    \"\"\"\n    # Initialize a count variable to zero\n    count = 0\n    \n    # Loop through the list of strings\n    for i in range(len(test_list)):\n        # Loop through the remaining strings starting from i+1\n        for j in range(i+1, len(test_list)):\n            # Check if the reverse of the current string is equal to the current string\n            if test_list[i][::-1] == test_list[j]:\n                # Increment the count variable\n                count += 1\n    \n    # Return the count of pairs of reverse strings\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function counts the number of pairs of strings in the given list that are reverse of each other.\n    '''\n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] > test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    unique_lists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = list1.count(sublist)\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in unique_dict:\n                unique_dict[sublist] += 1\n            else:\n                unique_dict[sublist] = 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in unique_lists:\n            unique_lists[sublist_tuple] = list1.count(sublist)\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing all unique sublists of the input list along with their count.\n    \"\"\"\n    sublist_count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and returns a dictionary where every unique sublist is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    result = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in result:\n                result[sublist] = 1\n            else:\n                result[sublist] += 1\n    return result"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return abs(num - round(num, 2)) < 0.001\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if round(float_num,2) == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num_float = float(num)\n        return round(num_float, 2) == num_float\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return abs(float_num - round(float_num, 2)) <= 1e-2\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_num = float(num)\n        if decimal_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            if str(num).endswith('.0'):\n                return True\n            else:\n                return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if abs(float(num) - round(float(num), 2)) < 1e-2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        return float_num.is_integer() or round(abs(float_num - round(float_num)), 2) == 0.0\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    \n    decimal_point_index = num.index('.')\n    \n    if decimal_point_index == len(num) - 1:\n        return False\n    \n    if decimal_point_index > 0:\n        num = num.replace('.', '')\n    else:\n        num = num.replace('.', '', 1)\n    \n    if len(num) > 2:\n        return False\n    \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function will return True if the list contains only one distinct element, else False.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    if len(arr) > 1:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    unique = False\n                    break\n            if unique == False:\n                break\n    else:\n        unique = True\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_element = set(arr)\n    if len(unique_element) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True if monthnum % 2 == 0 else False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    This function takes an integer as input and returns True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"30 days in month\")\n    else:\n        print(\"31 days in month\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    elif monthnum == 2:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"The given month number contains 30 days.\"\n    elif monthnum3 == 2:\n        return \"February has 28 days in a common year and 29 days in a leap year.\"\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"The given month number contains 31 days.\"\n    else:\n        return \"Invalid month number. Please enter a number between 1 and 12.\""
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return None\n\nmonthnum3 = int(input(\"Enter the month number (1-12): \"))\nif check_monthnumber_number(monthnum3):\n    print(f\"Month {monthnum3} has 30 days.\")\nelse:\n    print(f\"Month {monthnum3} does not have 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes in a month number as input and returns True if the month contains 30 days or False if the month contains 31 days.\n    '''\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return None"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    :param arr: a list of integers\n    :param n: the length of the list\n    :return: the minimum difference between any two elements in the list\n    \"\"\"\n\n    arr.sort()\n\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    arr.sort()\n    min_diff = abs(arr[1]-arr[0])\n    for i in range(1,n-1):\n        diff = abs(arr[i+1]-arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Returns the minimum difference between any two elements in the given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers and its length as inputs and returns the minimum difference between any two elements in the array.\n    '''\n\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers as input and finds the minimum difference between any two elements in the array.\n    '''\n    arr.sort()  # Sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # Initialize the minimum difference as the difference between the first two elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]  # Calculate the difference between the current element and the next element\n        if diff < min_diff:  # If the difference is smaller than the current minimum difference, update the minimum difference\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n\n    # initialize min_diff with infinity\n    min_diff = float('inf')\n\n    # iterate over all pairs of elements in the array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # calculate the difference between the current pair of elements\n            diff = arr[j] - arr[i]\n\n            # update min_diff if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Args:\n        str (str): The string to count the digits in.\n\n    Returns:\n        int: The number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as an argument and returns the count of numbers present in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def number_ctr(string):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return None\n    \n    # Initialize variables\n    count = 0\n    num = 1\n    \n    # Loop until the nth polite number is found\n    while count < n:\n        # Check if the current number is polite\n        if is_prime(num) and is_divisible_by_9(num):\n            count += 1\n        \n        # Increment the number\n        num += 1\n    \n    # Return the nth polite number\n    return num - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_divisible_by_9(num):\n    if num % 9 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    i = 1\n    count = 0\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 2\n    while count < n:\n        is_polite = True\n        # Check if number is divisible by any odd number other than 1 and itself\n        for j in range(3, int(math.sqrt(i))+1, 2):\n            if i % j == 0:\n                is_polite = False\n                break\n        # If number is polite, increment count\n        if is_polite:\n            count += 1\n        i += 1\n    # Return the nth polite number\n    return i - 2"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while True:\n        is_polite = True\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n: \n        is_polite = True\n        for j in range(2, int(math.sqrt(i)) + 1): \n            if i % j == 0: \n                is_polite = False\n                break\n        if is_polite: \n            count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if is_polite_number(i):\n            n -= 1\n            if n == 0:\n                return i\n        i += 1\n        \ndef is_polite_number(num):\n    if num == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        is_polite = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_polite = False\n                break\n        if is_polite:\n            count += 1\n    return num"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    i = 1\n    while count <= n: \n        if i == 1 or is_prime(i) or i%2!=0: \n            count += 1\n        else: \n            i += 1\n    return i-1\n    \ndef is_prime(n): \n    if n <= 1: \n        return False\n    elif n == 2: \n        return True\n    elif n%2 == 0: \n        return False\n    else: \n        for i in range(3, int(math.sqrt(n))+1, 2): \n            if n%i == 0: \n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    i = 1\n    count = 0\n    polite_num = []\n\n    # Loop until we find n polite numbers\n    while count < n:\n        # Check if current number is polite\n        if is_prime(i):\n            # Add current number to list of polite numbers\n            polite_num.append(i)\n            count += 1\n\n        i += 1\n\n    # Return the nth polite number\n    return polite_num[-1]\n\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime\n    '''\n    if num < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    i = 1\n    count = 0\n    \n    while count < n:\n        if is_prime(i) and is_prime(i-2):\n            count += 1\n        \n        i += 1\n    \n    return i - 2\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair = []\n    for i in range(len(l1)-1):\n        pair.append((l1[i], l1[i+1]))\n    return pair"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as an argument and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. \n    The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers, left and right\n    left = 0\n    right = len(arr) - 1\n    \n    # Traverse the array using two pointers\n    while left < right:\n        \n        # If current sum is equal to the required sum, increment count\n        if arr[left] + arr[right] == sum:\n            count += 1\n            \n            # Move both pointers to the next pair\n            left += 1\n            right -= 1\n        \n        # If current sum is less than the required sum, move the left pointer to the right\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        \n        # If current sum is greater than the required sum, move the right pointer to the left\n        else:\n            right -= 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n                \n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'.\n    The funtion gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    pairs = {}\n    for i in range(len(arr)):\n        complement = sum - arr[i]\n        if complement in pairs:\n            count += pairs[complement]\n        if arr[i] in pairs:\n            pairs[arr[i]] += 1\n        else:\n            pairs[arr[i]] = 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as inputs and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing only the elements that are present in the first list but not in the second list.\n    \"\"\"\n    result = [x for x in li1 if x not in li2]\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    diff_set = set1.symmetric_difference(set2)\n    diff_list = list(diff_set)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff = []\n\n    # Loop through the first list and add elements that are not in the second list to the difference list\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n\n    # Loop through the second list and add elements that are not in the first list to the difference list\n    for i in li2:\n        if i not in li1:\n            diff.append(i)\n\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns their difference.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    return list(set1 - set2) + list(set2 - set1)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n\n    Parameters:\n        li1 (list): First list.\n        li2 (list): Second list.\n\n    Returns:\n        list: The difference between li1 and li2.\n    \"\"\"\n\n    diff = []\n\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    # create a new list to store the difference between the two input lists\n    diff_list = []\n    \n    # loop through each element of the first list\n    for element in li1:\n        # if the element is not present in the second list, append it to the difference list\n        if element not in li2:\n            diff_list.append(element)\n    \n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    result = []\n\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n\n    return result"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        # Initialize the sum of fourth power of first odd number to 0\n        odd_sum = 0\n        # Loop through the first n odd numbers\n        for i in range(1, 2*n+1, 2):\n            # Calculate the fourth power of the odd number\n            fourth_power = i ** 4\n            # Add the fourth power to the sum\n            odd_sum += fourth_power\n        # Return the sum\n        return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2 * n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers.\n\n    Returns:\n    sum (int): The sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over first n odd natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Calculate the fourth power of the current odd number\n        odd_num = i\n        fourth_power = odd_num**4\n        # Add the fourth power to the total sum\n        total_sum += fourth_power\n    \n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes in a number n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n*2, 2):\n        # Add the fourth power of the current number to the sum\n        sum += i**4\n    # Return the sum of fourth power of first n odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    This function returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return \"Unbalanced\"\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return \"Unbalanced\"\n    if len(stack) == 0:\n        return \"Balanced\"\n    else:\n        return \"Unbalanced\""
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes a string as an argument and returns True if the parentheses in the string are balanced and False otherwise.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            elif i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function checks if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the topmost opening parenthesis\n        # from the stack and compare them. If they don't match, return False.\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            elif char == '}' and stack[-1]!= '{':\n                return False\n            elif char == ']' and stack[-1]!= '[':\n                return False\n            else:\n                stack.pop()\n    # If there are still opening parentheses left on the stack, the expression is not balanced\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n\n    for i in exp:\n        if i in [\"(\", \"{\", \"[\"]:\n            stack.append(i)\n        elif i in [\")\", \"}\", \"]\"]:\n            if len(stack) == 0:\n                return \"Unbalanced\"\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return \"Unbalanced\"\n\n    if len(stack) == 0:\n        return \"Balanced\"\n    else:\n        return \"Unbalanced\""
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes an expression as a string and returns True if it is balanced and False otherwise.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    This function takes a string as input and returns True if the expression is balanced and False otherwise.\n    A string is said to be balanced if the number of opening and closing parentheses are equal.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    # Splitting the string into words\n    words = test_str.split()\n\n    # Creating a list to store the words with length K\n    result = []\n\n    # Iterating through the words and appending only the words with length K to the result list\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    # Joining the words in the result list and returning the final string\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    This function takes in a string and removes all the words with length k from the string.\n    '''\n    # Splitting the string into a list of words\n    words_list = test_str.split()\n    # Initializing an empty list to store the words with length k\n    result = []\n    # Iterating through the words list\n    for word in words_list:\n        # If the length of the word is not equal to k, we append it to the result list\n        if len(word)!= K:\n            result.append(word)\n    # Joining the words in the result list to form a string and returning it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word)!= K]\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    pattern_regex = re.compile(pattern)\n    for match in pattern_regex.finditer(text):\n        matches.append((match.group(), match.start()))\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    result = []\n    for match in matches:\n        result.append((match.group(),match.start()))\n    if len(result)>0:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two parameters: text and pattern. It returns the occurrence and position of the substrings within a string. \n    If there is no match, it returns None.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function finds the occurrence and position of the substrings within a string.\n    '''\n    match_list = []\n    matches = re.finditer(pattern, text)\n\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        match_list.append((start, end))\n\n    if match_list:\n        return match_list\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    match_list = []\n    for match in pattern.finditer(text):\n        match_list.append((match.group(), match.start()))\n    return match_list if match_list else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    This function takes a string and a pattern as input and returns a list of tuples containing the occurrence and position of the pattern in the string.\n    If there is no match, it returns None.\n    '''\n    result = []\n    match = re.search(pattern,text)\n    while match:\n        result.append((match.start(),match.end()))\n        match = re.search(pattern,text,match.end())\n    if not result:\n        return None\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function returns the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    '''\n    match_list = []\n    for match in re.finditer(pattern, text):\n        match_list.append((match.group(), match.start()))\n    return match_list if len(match_list) > 0 else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    match_iter = pattern.finditer(text)\n    result = []\n    for match in match_iter:\n        result.append((match.group(), match.start(), match.end()))\n    return result if result else None"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return [(match.start(), match.end())]\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function will return True if every odd index contains odd numbers of a given list and False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list as input and returns True if every odd index contains an odd number, and False otherwise.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    count = 0\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    This function counts the number of characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum = 0\n    for i in unique_elements:\n        sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # creating an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # iterating through the list and incrementing the count of each element in the dictionary\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    # creating an empty list to store the non-repeated elements\n    non_repeated_elements = []\n    # iterating through the dictionary and appending the non-repeated elements to the list\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated_elements.append(key)\n    # finding the sum of non-repeated elements in the list and returning the result\n    return sum(non_repeated_elements)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list.\n    freq_dict = {}\n    \n    # Loop through the list and update the frequency dictionary.\n    for i in arr:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # Loop through the dictionary and add the sum of non-repeated elements to a variable.\n    non_repeated_sum = 0\n    for key, value in freq_dict.items():\n        if value == 1:\n            non_repeated_sum += key\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    seen = set()\n    sum = 0\n    \n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n            sum += i\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    non_repeated_elements = []\n    for i in arr:\n        if i not in non_repeated_elements:\n            non_repeated_elements.append(i)\n    return sum(non_repeated_elements)"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n    arr: A list of integers.\n\n    Returns:\n    The sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set of the input array to remove duplicates\n    unique_set = set(arr)\n    # Calculate the sum of the non-repeated elements\n    sum_non_repeated = sum(unique_set)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_non_repeated_elements = sum(unique_elements)\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_nums = set(arr)\n    sum_non_repeated = sum(unique_nums)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = set(arr)\n    total_sum = sum(unique_nums)\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    result = []\n    for k, g in groupby(enumerate(lst), lambda x: x[0] - x[1]):\n        result.append(list(map(lambda x: x[1], g)))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function packs consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(group_list[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(group_list)\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1] - x[0]):\n        group = list(map(lambda x: x[1], group))\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k for k, g in groupby(list1)] for k, g in groupby(list1) if k!= g.next()]"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(map(lambda x: x[1], g))\n        if len(group) > 1:\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Takes a list and returns a new list where consecutive duplicates of a given list elements\n    are packed into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        group = list(group)\n        if len(group) > 1:\n            result.append(group)\n        else:\n            result.append(group[0])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1), lambda x: x[1]):\n        group = list(group)\n        if len(group) > 1:\n            result.append([list(range(group[0][0], group[-1][0]+1)), group[0][1]])\n        else:\n            result.append([group[0][0], group[0][1]])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    unique_lists = {}\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = tuple(lst[i:j+1])\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 1\n            else:\n                unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through each sublist of the list\n    for sublist in list1:\n        # Convert the sublist to a tuple to make it immutable\n        subtuple = tuple(sublist)\n        # Check if the tuple already exists in the dictionary\n        if subtuple in counts:\n            # If it does, increment the count by 1\n            counts[subtuple] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            counts[subtuple] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. \n    The function should return a dictionary, where every list is turned to a tuple, \n    and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    unique_sublists = {}\n    for sublist in sublists:\n        if sublist in unique_sublists:\n            unique_sublists[sublist] += 1\n        else:\n            unique_sublists[sublist] = 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Given a list of lists, return a dictionary where each sublist is\n    converted to a tuple, and the value is the number of occurrences of the\n    tuple in the list.\n    \"\"\"\n    # Convert the list of lists to a set of tuples\n    unique_tuples = set(tuple(lst) for lst in lst)\n    \n    # Count the number of occurrences of each tuple in the list\n    counts = {}\n    for lst in lst:\n        counts[tuple(lst)] = counts.get(tuple(lst), 0) + 1\n    \n    # Convert the set of tuples back to a dictionary with the counts\n    unique_sublists_dict = {sublist: counts[tuple(sublist)] for sublist in unique_tuples}\n    \n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    count_dict = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist in count_dict:\n                count_dict[sublist] += 1\n            else:\n                count_dict[sublist] = 1\n    return count_dict\n\nprint(unique_sublists([1,2,3,1,2,4,5,4])) # Output: {(1, 2, 3): 1, (4, 5): 1}"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in counts:\n                counts[sublist] = 1\n            else:\n                counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    This function takes a list as input and returns a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublist_dict:\n                sublist_dict[sublist] += 1\n            else:\n                sublist_dict[sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every sublist is counted its occurrences.\n    \"\"\"\n    counts = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublst = tuple(lst[i:j])\n            if sublst in counts:\n                counts[sublst] += 1\n            else:\n                counts[sublst] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in unique_lists:\n            unique_lists[sublist] = 1\n        else:\n            unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n    for i in range(1,len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    sum_ = test_list[i][0] + test_list[j][0] + test_list[k][0] + test_list[l][0]\n                    if sum_ == 0:\n                        result.append((test_list[i], test_list[j], test_list[k], test_list[l]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                s = test_list[i][0]+test_list[j][0]+test_list[k][0]\n                if s == 0:\n                    result.append((test_list[i][1], test_list[j][1], test_list[k][1]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    sums = set()\n    for t in test_list:\n        sums.add(sum(t))\n    \n    result = []\n    for s in sums:\n        for c in combinations(test_list, 2):\n            if sum(c[0]) == s or sum(c[1]) == s:\n                result.append(c)\n    \n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                combinations_list.append(j)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                print(j)"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum_of_tuples = sum(test_list[i] + test_list[j])\n            result.append((test_list[i], test_list[j], sum_of_tuples))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns all the possible combinations of sums with tuples in the given list.\n    \"\"\"\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                result.append(j)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Finding the sum of tuples in the list\n    sums = [sum(t) for t in test_list]\n    \n    # Finding all the combinations of sums with tuples in the list\n    comb = combinations(sums, 2)\n    \n    # Returning the combinations as a list of tuples\n    return [(test_list[i], test_list[j]) for i, j in comb if i!= j]"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if n%i == 0 : \n            count += 1\n    if count%2 == 0 : \n        return True \n    else : \n        return False \n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) : \n    print(n, \"has even number of divisors.\") \nelse : \n    print(n, \"has odd number of divisors.\") "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    if count_divisors(n) % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0 \n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count += 1 \n    if count % 2 == 0 : \n        return True \n    else : \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count == 0 or count == 2"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The number of divisors is even.\")\n    else:\n        print(\"The number of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if(n%i==0):\n            count += 1\n            if(n//i!= i):\n                count += 1\n    return count \n\nn = int(input(\"Enter a number: \"))\n\nif(count_divisors(n)%2 == 0):\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2!= 0:\n                total_sum += sum(arr[i:j+1])\n                \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j-i > 1:\n                sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    ans = 0\n\n    # Traverse through all possible odd length subarrays\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j-i) % 2!= 0:  # Check if the length is odd\n                temp_sum = sum(arr[i:j])\n                ans += temp_sum\n\n    return ans"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays.\n    :param arr: list of integers\n    :return: integer\n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function will find the sum of all odd length subarrays of the given list.\n    \"\"\"\n    n = len(arr)\n    sum_odd_length = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum_odd_length += sum(arr[i:j])\n            \n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += sum(arr[i:j+1])\n            \n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            subarray = arr[i:j]\n            sum += sum(subarray)\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2!= 0:\n                for k in range(i, j + 1):\n                    sum += arr[k]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            res += sum(arr[i:j])\n\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            result += sum(arr[i:j])\n    return result"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in the red, green, and blue values of a color and returns the hue, saturation, and value of the color in HSV format.\n    \"\"\"\n    # Convert the rgb values to their respective normalized values\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the maximum and minimum values of the rgb values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        hue = (60 * ((b - r) / diff) + 120) % 360\n    else:\n        hue = (60 * ((r - g) / diff) + 240) % 360\n\n    # Calculate the saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (diff / max_val) * 100\n\n    # Calculate the value\n    value = max_val * 100\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / delta) % 6\n    elif max_val == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    saturation = 0 if max_val == 0 else delta / max_val\n    \n    value = max_val\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    hsv = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    :param r: Red value (0-255).\n    :param g: Green value (0-255).\n    :param b: Blue value (0-255).\n    :return: HSV color (0-360), Saturation (0-1), Value (0-1).\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue *= 60\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if cmax == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV color space.\n\n    Args:\n        r (float): Value of the red component.\n        g (float): Value of the green component.\n        b (float): Value of the blue component.\n\n    Returns:\n        tuple: HSV color components in the format (hue, saturation, value).\n    \"\"\"\n    hsv = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return tuple([int(round(x*255)) for x in hsv])"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if cmax == cmin:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else round(diff / cmax * 100)\n    value = round(cmax * 100)\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    if diff == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / diff) % 6\n    elif cmax == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if cmax == 0 else (diff / cmax) * 100\n    value = cmax * 100\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    if even_num and odd_num:\n        return even_num * odd_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    if odd_num is not None and even_num is not None:\n        return odd_num * even_num\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and odd numbers in a given list.\n    \"\"\"\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst:\n        if num % 2!= 0:\n            odd = num\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even = odd = float('inf')\n    \n    for num in list1:\n        if num % 2 == 0 and num < even:\n            even = num\n        elif num % 2!= 0 and num < odd:\n            odd = num\n    \n    if even == float('inf') or odd == float('inf'):\n        return None\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n\n    # Iterate over the list and find the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    \n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    \n    # Return the product of even and odd numbers\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    evens = []\n    odds = []\n    for num in list1:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    if len(evens) > 0 and len(odds) > 0:\n        return evens[0] * odds[0]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_found = True\n            product *= num\n        elif num % 2 == 1 and not odd_found:\n            odd_found = True\n            product *= num\n        elif even_found and odd_found:\n            break\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    if even_num and odd_num:\n        return even_num * odd_num\n    else:\n        return \"No even or odd number found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n            \n    if even_num and odd_num:\n        return even_num * odd_num\n    else:\n        return \"None of the numbers in the list are even or odd\""
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    :param test_str: Tuple string, e.g. \"(1, 2, 3)\"\n    :return: Integer tuple, e.g. (1, 2, 3)\n    \"\"\"\n    # Remove brackets and convert to list of strings\n    lst = test_str.strip(\"()\").split(\",\")\n    # Convert each string to integer and create a new list\n    int_lst = [int(x.strip()) for x in lst]\n    # Convert list to tuple and return\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string using comma as delimiter\n    str_list = test_str.split(',')\n\n    # Convert the list of strings to list of integers\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to tuple\n    result_tuple = tuple(int_list)\n\n    return result_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(num) for num in test_str[1:-1].split(','))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    tuple_str = eval(test_str)\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes in a tuple string as input,\n    converts it to a tuple of integers and returns it.\n    '''\n    # Split the string into a list of tuples\n    list_of_tuples = test_str.split('), (')\n    \n    # Convert each tuple string to a tuple of integers\n    integer_tuples = []\n    for tup_str in list_of_tuples:\n        tup = tuple(map(int, tup_str.replace('(', '').replace(')', '').split(',')))\n        integer_tuples.append(tup)\n    \n    # Return the final tuple of tuples\n    return tuple(integer_tuples)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str[1:-1].split(','))"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string to get the individual tuples\n    tuples = test_str.split('), (')\n\n    # Convert the individual tuples to integer tuples\n    int_tuples = []\n    for tup in tuples:\n        # Split the individual tuple into its elements\n        elements = tup.split(', ')\n        # Convert the elements to integers and store in a list\n        int_elements = [int(elem) for elem in elements]\n        # Convert the list to a tuple and add it to the list of integer tuples\n        int_tuples.append(tuple(int_elements))\n\n    # Convert the list of integer tuples to a single tuple of tuples\n    final_tup = tuple(int_tuples)\n\n    # Return the final tuple of tuples\n    return final_tup"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string by commas and convert the resulting list of strings to a list of integers\n    int_tuple = [int(num) for num in test_str.split(',')]\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    lst = test_str.strip('()').split(',')\n    \n    # Convert each string to an integer and append to a new list\n    int_lst = [int(i.strip()) for i in lst]\n    \n    # Convert the list of integers into a tuple and return it\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Splitting the tuple string into a list of strings\n    string_list = test_str.split(\",\")\n    \n    # Converting the strings to integers\n    integer_list = [int(num_str) for num_str in string_list]\n    \n    # Creating a tuple from the integer list\n    integer_tuple = tuple(integer_list)\n    \n    return integer_tuple"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    result = re.findall(pattern, text)\n    return result\n\ntext = 'aababbababbababbaba'\nprint(text_match_three(text)) # Output: ['ababbababbababbaba']"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b\\1{2})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\bb\\bb\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an 'a' followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=bb{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    This function takes a list and a string as inputs and returns a new tuple containing the elements of the list and the string.\n    \"\"\"\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Checks whether every even index contains even numbers of a given list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        A boolean value indicating whether every even index contains even numbers or not.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function checks whether every even index contains even numbers of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and checks whether every even index contains even numbers or not.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n\n    Args:\n    - test_tup: A tuple of tuples.\n\n    Returns:\n    - A new tuple with all nested tuples removed.\n    \"\"\"\n    new_tup = ()\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup += remove_nested(item)\n        else:\n            new_tup += (item,)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup += remove_nested(item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = ()\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup += (i,)\n        else:\n            pass\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n        else:\n            pass\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n        else:\n            result.extend(remove_nested(i))\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function counts the number of lists in a given list.\n\n    :param input_list: A list containing sub-lists.\n    :return: An integer representing the number of sub-lists in the input list.\n    \"\"\"\n\n    count = 0\n\n    # Iterate over each element in the input list\n    for element in input_list:\n\n        # Check if the current element is a list\n        if isinstance(element, list):\n\n            # If it is a list, increment the count\n            count += 1\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the total number of lists in the input list.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function returns the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n\n    :param arr: A sorted list of integers.\n    :param x: The integer element to find the last position of.\n    :return: The last position of the element in the array, or -1 if the element is not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        \n        elif arr[mid] < x:\n            low = mid + 1\n            \n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes an array and an element as input and returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function returns the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # element not found in array"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    This function takes in two parameters:\n    1. arr: a sorted list of elements.\n    2. x: the element whose last position is to be found in the list.\n\n    It returns the last position of the element in the list.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n    :param arr: sorted list of integers\n    :param x: integer to search for\n    :return: index of the last occurrence of x in arr, -1 if x is not found\n    \"\"\"\n    # Handle edge cases\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0 if arr[0] == x else -1\n    \n    # Binary search for last occurrence of x\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == len(arr) - 1 or arr[mid + 1]!= x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function returns the index of the last occurrence of the element x in the sorted array arr.\n    If the element x is not present in the array, it returns -1.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif arr[n-1] < x:\n        return -1\n    else:\n        low = 0\n        high = n-1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x and (mid == n-1 or arr[mid+1]!= x):\n                return mid\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        if low == 0:\n            return -1\n        else:\n            return high"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if x not in arr:\n        return -1\n    \n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        \n        elif arr[mid] < x:\n            low = mid + 1\n            \n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'  # regular expression to match the pattern 'a' followed by anything, ending in 'b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'  # match 'a', followed by anything, and ending in 'b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as an input and returns the sum of all the values in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for key in dictionary:\n        total_sum += dictionary[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as an argument and returns the sum of all items in the dictionary.\n    '''\n    total = 0\n    for item in dictionary.values():\n        if type(item) == int or type(item) == float:\n            total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def return_sum(d):\n    \"\"\"\n    Returns the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(d.values())"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Returns the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for key in dictionary:\n        total_sum += dictionary[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add the odd number to the sum\n            sum += i\n    \n    # return the sum of all odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate over all odd numbers from 1 to n and add them to the sum\n    for i in range(1, n+1, 2):\n        sum += i\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(range(1, n+1, 2))\n\nprint(sum_odd(10)) # Output: 25 (2 + 4 + 6 + 8 + 10 = 25)"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through the range of numbers from l to r\n    for i in range(l, r+1):\n        \n        # Check if the number is odd\n        if i % 2 == 1:\n            \n            # Add the number to the total\n            total += i\n            \n    # Return the total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments: l and r, representing the range of natural numbers.\n    It returns the sum of all odd natural numbers within the range l and r.\n    '''\n    if l > r:\n        return 'Invalid range'\n    else:\n        odd_sum = 0\n        for num in range(l, r+1):\n            if num % 2!= 0:\n                odd_sum += num\n        return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range of natural numbers (separated by space): \").split())\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize a variable to store the sum of odd numbers\n    total = 0\n    \n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # if it is odd, add it to the total\n            total += i\n    \n    # return the total sum of odd numbers\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Add the current odd number to the sum\n        sum += i\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2 == 0:\n        n += 1\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function will take an array as input and return the sum of all elements in the array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of all elements in the array.\n    '''\n    result = 0\n    for num in arr:\n        result += num\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    Args:\n    arr: A list of numbers\n\n    Returns:\n    The sum of the numbers in the array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def sum_array(arr):\n    \"\"\"\n    Find the sum of an array.\n\n    Parameters:\n    arr (list): The array to find the sum of.\n\n    Returns:\n    int: The sum of the array.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Loop through each element in the array and add it to the total\n    for i in arr:\n        total += i\n\n    # Return the total\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total_sum = 0\n    for i in arr:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes in an array and returns the sum of its elements.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the elements in the array.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    n_bin = bin(n)[2:].zfill(32)\n    \n    # Reverse the binary string\n    rev_n_bin = n_bin[::-1]\n    \n    # Rotate the reversed binary string by d bits\n    rotate_n_bin = rev_n_bin[d:] + rev_n_bin[:d]\n    \n    # Reverse the rotated binary string again to get the final result\n    result_bin = rotate_n_bin[::-1]\n    \n    # Convert the result from binary to integer\n    result = int(result_bin, 2)\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left d bits of a 32-bit number n to the left.\n    \"\"\"\n    mask = 0xFFFFFFFF >> (32 - d)\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    n = bin(n)[2:].zfill(32)  # convert decimal to binary with leading zeros\n    d %= 32  # make sure d is between 0 and 31\n    rotated = n[d:] + n[:d]  # rotate the binary string\n    rotated = int(rotated, 2)  # convert the binary string back to decimal\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes two arguments, n and d.\n    n: 32-bit integer number to be rotated left.\n    d: number of bits to rotate left.\n\n    The function returns the rotated 32-bit number.\n    '''\n\n    # Calculate the mask for the d left-most bits\n    mask = (1 << d) - 1\n\n    # Perform the left rotation by shifting the bits by d bits to the left and then by d bits to the right\n    rotated = ((n >> d) | (n << (32 - d))) & 0xffffffff\n\n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    Assuming that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary and pad with zeros if necessary\n    binary_n = bin(n)[2:].zfill(32)\n    # Get the leftmost d bits of n\n    left_d_bits = binary_n[0:d]\n    # Get the rightmost 32-d bits of n\n    right_32_d_bits = binary_n[d:]\n    # Concatenate the rightmost 32-d bits with the leftmost d bits\n    rotated_binary = right_32_d_bits + left_d_bits\n    # Convert the rotated binary back to decimal and return\n    rotated_decimal = int(rotated_binary, 2)\n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string and remove the '0b' prefix\n    binary_string = bin(n)[2:]\n    \n    # Pad binary string with zeros to length 32\n    binary_string = binary_string.rjust(32, '0')\n    \n    # Split binary string into two parts: left and right\n    left = binary_string[:d]\n    right = binary_string[d:]\n    \n    # Rotate left part to the right by d bits\n    rotated_left = left[-d:].rjust(32, '0')\n    \n    # Combine rotated left and right parts\n    rotated_binary_string = rotated_left + right\n    \n    # Convert rotated binary string back to integer\n    rotated_n = int(rotated_binary_string, 2)\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1 # assuming 32 bit number\n    left_mask = ((1 << d) - 1) << (32 - d)\n    right_mask = ~left_mask & mask\n    n = (n & right_mask) << d | (n & left_mask) >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates left the bits of a given number n by d bits.\n    The rotation is done by performing a left shift on the number by d bits,\n    followed by a right shift of the number by 32 minus d bits.\n    We assume that the given number is 32 bit.\n    '''\n    # Perform left shift\n    n = n << d\n\n    # Perform right shift\n    n = n >> (32 - d)\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d-1) << (32-d)\n    return (n << d) & mask | (n >> (32-d)) & ~mask"
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    mask = 0xFFFFFFFF\n    shifted = n << d | n >> (32 - d)\n    return shifted & mask"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = 'This is a sample text with spaces'\nprint(remove_all_spaces(text)) # Output: 'Thisisasampletextwithspaces'"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string using regular expressions.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 2\n    else:\n        count += 3\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or z == x:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y and y!= z:\n        count += 1\n    if x == z and z!= y:\n        count += 1\n    if y == z and z!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    \n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # base case\n    if n == 1:\n        return 0\n    else:\n        mid = n // 2\n        # check if mid element is greater than last element\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        else:\n            if arr[0] > arr[mid]:\n                return n\n            else:\n                if arr[0] > arr[n - 1]:\n                    return count_rotation(arr[mid + 1:]) + mid + 1\n                else:\n                    return count_rotation(arr[mid:]) + mid"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n        if arr == sorted(arr):\n            return i\n    return -1  # If the array is not sorted at all"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    # get the length of the array\n    n = len(arr)\n    # initialize count as 0\n    count = 0\n    # initialize left and right pointers\n    left = 0\n    right = n-1\n    # traverse the array\n    while left < right:\n        # if the left element is smaller than the right element, then it means the array is already sorted.\n        if arr[left] <= arr[right]:\n            # increment left pointer\n            left += 1\n        # if the left element is greater than the right element, then it means the array is not sorted.\n        else:\n            # increment right pointer\n            right -= 1\n            # increment the count\n            count += 1\n    # return the count\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    mid = n // 2\n    if arr[mid] > arr[mid+1]:\n        return mid + 1\n    else:\n        left = arr[mid:]\n        right = arr[:mid]\n        return count_rotation(left) + count_rotation(right)"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    # Base case\n    if len(arr) == 1:\n        return 0\n    \n    # Find the pivot element\n    pivot = find_pivot(arr, 0, len(arr)-1)\n    \n    # Base case\n    if pivot == 0:\n        return 0\n    \n    # Recursive case\n    if pivot == len(arr)-1:\n        return 1 + count_rotation(arr[:pivot])\n    elif pivot > len(arr)-1:\n        return pivot - len(arr) + count_rotation(arr)\n    else:\n        return 1 + count_rotation(arr[:pivot]) + count_rotation(arr[pivot:])\n\ndef find_pivot(arr, low, high):\n    # Base case\n    if low == high:\n        return low\n    \n    # Find the middle element\n    mid = (low + high) // 2\n    \n    # Check if middle element is the pivot\n    if (mid == high or arr[mid] > arr[mid+1]) and (mid == low or arr[mid] > arr[mid-1]):\n        return mid\n    \n    # If not, the pivot is either in the left or right subarray\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n    else:\n        return find_pivot(arr, mid+1, high)"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    start = 0\n    end = n - 1\n    count = 0\n    \n    # If the array is already sorted, return 0\n    if arr[start] < arr[end]:\n        return 0\n    \n    # Perform binary search until the start and end pointers cross each other\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # If the mid element is greater than the first element,\n        # it means all the elements to the right of mid are sorted\n        if arr[mid] > arr[mid+1]:\n            return count + mid\n        \n        # If the mid element is less than the first element,\n        # it means the minimum element is at the right side\n        elif arr[mid] < arr[mid-1]:\n            count += mid\n            start = mid + 1\n        \n        # If the mid element is equal to the first element,\n        # it means the array is rotated\n        else:\n            return count + mid\n    \n    # If the array is not sorted, return -1\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    else:\n        low = 0\n        high = n-1\n        while low < high:\n            mid = (low+high)//2\n            if arr[mid] > arr[high]:\n                low = mid+1\n            else:\n                high = mid\n        return low"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    left = 0\n    right = n-1\n    \n    # find the point where the array is rotated\n    while left < right:\n        mid = (left+right)//2\n        if arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right = mid\n    \n    # left index will be the point where the array is rotated\n    # We can find the number of rotations by finding the number of times the array is rotated\n    # (i.e., number of times the pivot element is not at its sorted position)\n    count = 0\n    i = 0\n    j = n-1\n    \n    while i <= j:\n        if arr[i] <= arr[left]:\n            i += 1\n        elif arr[j] >= arr[left]:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    start, end = 0, n-1\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] < arr[end]:\n            end = mid\n        else:\n            start = mid + 1\n    return n - start"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i + 1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        # Swap the minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        # If there was any swap, it means the array is not sorted\n        if i!= min_idx:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    return int(math.sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    \n    x = int(n ** 0.5)\n    return x * x == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    root = math.sqrt(n)\n    return root == int(root)"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes an integer as input and returns True if the number is a perfect square,\n    and False otherwise.\n    '''\n    if n < 0:\n        return False\n\n    x = n\n    y = (x + math.floor(math.sqrt(x))) // 2\n\n    while y < x:\n        x = y\n        y = (x + math.floor(math.sqrt(x))) // 2\n\n    return y * y == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes a number as input and returns True if the number is a perfect square, otherwise False.\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5)**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n    left = 2\n    right = n // 2\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    if int(math.sqrt(n))**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the product of numbers is even, otherwise False.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_lists = [lst]\n        elif lst_sum == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = sum(max(lst) for lst in lists)\n    max_lists = [lst for lst in lists if sum(lst) == max_sum]\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_list = lists[0]\n    max_sum = sum(max_list)\n    for lst in lists[1:]:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = lists[0]\n    for lst in lists[1:]:\n        if sum(lst) > sum(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        if sum > max_sum:\n            max_sum = sum\n            max_list = i\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    \n    # Iterate through each character in the string\n    for i in range(1, len(test_str)):\n        # Check if the current character is uppercase and the previous character is not\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            # If so, increment the current run\n            current_run += 1\n        else:\n            # If not, update the maximum run if the current run is greater\n            if current_run > max_run:\n                max_run = current_run\n            \n            # Reset the current run to 1\n            current_run = 1\n    \n    # Check the last run after the loop ends\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n\n    Args:\n        test_str (str): The string to search for the maximum run of uppercase characters in.\n\n    Returns:\n        int: The maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n\n        # Check if current character is uppercase\n        if test_str[i].isupper():\n\n            # Increment current run count if current character is uppercase\n            current_run += 1\n\n            # If current run count is greater than max run count, update max run count\n            if current_run > max_run:\n                max_run = current_run\n\n        # If current character is not uppercase, reset current run count\n        else:\n            current_run = 0\n\n    # Return the max run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 1\n    current_run = 1\n    \n    # Iterate through the string and keep track of current run of uppercase characters\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 1\n    \n    # Check if the last run of uppercase characters is the longest\n    max_run = max(max_run, current_run)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n        else:\n            current_run = 1\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    current_count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count\n        else:\n            current_count = 0\n            \n    return max_count"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    current_run = 0\n\n    # iterate through each character in the string\n    for char in test_str:\n\n        # check if character is uppercase\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        # update max_run if current_run is greater\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase = [test_str[i] for i in range(len(test_str)) if test_str[i].isupper()]\n    if len(uppercase) == 0:\n        return 0\n    uppercase_run = [1]\n    for i in range(1, len(uppercase)):\n        if uppercase[i] == uppercase[i-1]:\n            uppercase_run[-1] += 1\n        else:\n            uppercase_run.append(1)\n    return max(uppercase_run)"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run = 0\n    max_run = 0\n    current_char = ''\n    for char in test_str:\n        if char.isupper() and char == current_char:\n            current_run += 1\n        elif char.isupper() and char!= current_char:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 1\n            current_char = char\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            current_char = ''\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # if no odd number was found\n"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers, or None if no odd number is found.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list, or None if no odd number is found.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    This function takes in a list of numbers and returns the first odd number in the list.\n    If there is no odd number in the list, it returns None.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n\n    Args:\n    nums: list of numbers to search in\n\n    Returns:\n    The first odd number found in the list or None if no odd number is found.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, and returns True if each element of the second tuple is smaller than its corresponding element in the first tuple, and False otherwise.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input.\n    It checks if each element of the second tuple is smaller than its corresponding element in the first tuple.\n    If all the elements are smaller, it returns True, else False.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]